 Documentation/ABI/testing/sysfs-devices-system-cpu |   25 -
 .../arm/Samsung/clksrc-change-registers.awk        |    0
 Documentation/dvb/get_dvb_firmware                 |    0
 Documentation/scheduler/sched-arch.txt             |   10 -
 Documentation/scheduler/sched-domains.txt          |    4 -
 Documentation/target/tcm_mod_builder.py            |    0
 Makefile                                           |    2 +-
 arch/arm/Kconfig                                   |   21 +
 arch/arm/Makefile                                  |    1 +
 arch/arm/boot/dts/msm-iommu.dtsi                   |    0
 arch/arm/boot/dts/msm-pm8941.dtsi                  |    0
 arch/arm/boot/dts/msm8974-iommu.dtsi               |    0
 arch/arm/common/gic.c                              |   45 +-
 arch/arm/configs/cyanogen_aries_defconfig          | 2944 +-------------------
 arch/arm/include/asm/Kbuild                        |    1 -
 arch/arm/include/asm/cacheflush.h                  |   19 +-
 arch/arm/include/asm/glue-cache.h                  |    1 +
 arch/arm/include/asm/highmem.h                     |    7 +
 arch/arm/include/asm/mmu.h                         |   15 +-
 arch/arm/include/asm/mmu_context.h                 |   71 +-
 arch/arm/include/asm/thread_info.h                 |    4 +-
 arch/arm/include/asm/tlbflush.h                    |   51 +-
 arch/arm/kernel/asm-offsets.c                      |    2 +-
 arch/arm/kernel/machine_kexec.c                    |    5 +-
 arch/arm/kernel/process.c                          |   60 +-
 arch/arm/kernel/setup.c                            |   26 +
 arch/arm/kernel/smp.c                              |   82 +-
 arch/arm/kernel/smp_tlb.c                          |   65 +
 arch/arm/kernel/suspend.c                          |    1 +
 arch/arm/kernel/traps.c                            |   11 +-
 arch/arm/mach-exynos/hotplug.c                     |    1 -
 arch/arm/mach-highbank/hotplug.c                   |    3 -
 arch/arm/mach-imx/hotplug.c                        |    1 -
 arch/arm/mach-msm/Kconfig                          |   34 +-
 arch/arm/mach-msm/Makefile                         |    2 +
 arch/arm/mach-msm/acpuclock-8064.c                 |  233 ++
 arch/arm/mach-msm/acpuclock-krait.c                |    4 +-
 arch/arm/mach-msm/asustek/flo/board-flo-pmic.c     |    0
 arch/arm/mach-msm/bms-batterydata-lg-2000.c        |    0
 arch/arm/mach-msm/bms-batterydata-lg-3000.c        |    0
 arch/arm/mach-msm/bms-batterydata-lg.c             |    0
 arch/arm/mach-msm/bms-batterydata-samsung-2000.c   |    0
 arch/arm/mach-msm/bms-batterydata-samsung-3000.c   |    0
 arch/arm/mach-msm/bms-batterydata-samsung.c        |    0
 arch/arm/mach-msm/bms-batterydata-sony-3000.c      |    0
 arch/arm/mach-msm/bms-batterydata-sony.c           |    0
 arch/arm/mach-msm/board-8064-camera.c              |    0
 arch/arm/mach-msm/board-8960-camera.c              |    0
 arch/arm/mach-msm/clock-8960.c                     |   32 +-
 arch/arm/mach-msm/clock-pll.c                      |   37 +
 arch/arm/mach-msm/cpufreq.c                        |   28 +
 arch/arm/mach-msm/hotplug.c                        |   37 +-
 arch/arm/mach-msm/include/mach/kgsl.h              |    2 +
 arch/arm/mach-msm/msm_dcvs.c                       |    2 +-
 arch/arm/mach-msm/smd_rpc_sym                      |    0
 arch/arm/mach-msm/xiaomi/aries/board-aries-gpu.c   |   32 +-
 .../mach-msm/xiaomi/aries/board-aries-regulator.c  |   17 +-
 arch/arm/mach-msm/xiaomi/aries/board-aries.c       |    6 +
 arch/arm/mach-omap2/omap-hotplug.c                 |    3 -
 arch/arm/mach-realview/hotplug.c                   |    2 -
 arch/arm/mach-tegra/hotplug.c                      |    1 -
 arch/arm/mach-ux500/hotplug.c                      |    2 -
 arch/arm/mach-vexpress/hotplug.c                   |    2 -
 arch/arm/mm/alignment.c                            |   13 +-
 arch/arm/mm/context.c                              |  331 ++-
 arch/arm/mm/idmap.c                                |   17 +-
 arch/blackfin/kernel/process.c                     |    2 +-
 arch/ia64/scripts/check-gas                        |    0
 arch/ia64/scripts/toolchain-flags                  |    0
 arch/powerpc/boot/wrapper                          |    0
 arch/powerpc/relocs_check.pl                       |    0
 arch/x86/include/asm/spinlock.h                    |    4 -
 arch/x86/kernel/smpboot.c                          |    3 +-
 arch/x86/vdso/checkundef.sh                        |    0
 block/Kconfig.iosched                              |   26 +
 block/Makefile                                     |    2 +
 drivers/base/cpu.c                                 |    4 -
 drivers/cpufreq/Kconfig                            |   78 +
 drivers/cpufreq/Makefile                           |    3 +
 drivers/cpufreq/cpu-boost.c                        |   49 +-
 drivers/cpufreq/cpufreq.c                          |    4 +-
 drivers/gpu/msm/kgsl_pwrctrl.c                     |   62 +-
 drivers/gpu/msm/kgsl_sharedmem.c                   |    0
 drivers/hwmon/cap1106.c                            |    0
 drivers/input/touchscreen/atmel_mxt_ts.c           |  511 +++-
 drivers/input/touchscreen/ektf3k.c                 |    0
 drivers/input/touchscreen/fw_data.b                |  736 ++---
 drivers/leds/leds-pm8xxx.c                         |    0
 .../media/platform/msm/camera_legacy/msm_mctl_pp.c |    0
 drivers/media/platform/msm/camera_v1/msm.h         |    0
 .../media/platform/msm/camera_v1/msm_mctl_buf.c    |    0
 drivers/media/platform/msm/camera_v1/msm_mem.c     |    0
 .../platform/msm/camera_v1/server/msm_cam_server.c |   10 +-
 .../platform/msm/camera_v1/server/msm_cam_server.h |    0
 .../media/platform/msm/camera_v1/vfe/msm_vfe32.c   |    0
 .../platform/msm/camera_v1/vfe/msm_vfe_stats_buf.c |    0
 .../platform/msm/camera_v1/vfe/msm_vfe_stats_buf.h |    0
 .../media/platform/msm/camera_v2/sensor/mi1040.c   |    0
 drivers/mmc/core/sdio_io.c                         |    0
 drivers/net/usb/rmnet_usb_data.c                   |    0
 drivers/power/pm8921-charger.c                     |   35 +
 .../staging/prima/firmware_bin/WCNSS_qcom_cfg.ini  |    4 +
 drivers/staging/prima/riva/inc/wlan_nv.h           |    0
 drivers/staging/usbip/userspace/autogen.sh         |    0
 drivers/staging/usbip/userspace/cleanup.sh         |    0
 drivers/thermal/Kconfig                            |    9 +
 drivers/thermal/Makefile                           |    4 +
 drivers/usb/gadget/f_mass_storage.c                |    5 +
 drivers/usb/gadget/storage_common.c                |   37 +
 drivers/usb/otg/msm_otg.c                          |    9 +
 include/linux/cpu.h                                |    2 -
 include/linux/cpu_rmap.h                           |   13 +-
 include/linux/cpufreq.h                            |    7 +
 include/linux/i2c/ektf3k.h                         |    0
 include/linux/init_task.h                          |    2 +-
 include/linux/interrupt.h                          |    5 -
 include/linux/msm_thermal.h                        |   12 +-
 include/linux/rcupdate.h                           |    1 +
 include/linux/rcutiny.h                            |   11 +-
 include/linux/rcutree.h                            |   14 +-
 include/linux/sched.h                              |  141 +-
 include/linux/spinlock.h                           |   14 +-
 include/linux/topology.h                           |    7 -
 include/media/msm_cam_sensor.h                     |    0
 include/media/msm_gemini.h                         |    0
 include/media/msm_isp.h                            |    0
 include/trace/events/rcu.h                         |    3 +
 include/trace/events/sched.h                       |   38 +
 kernel/cpu.c                                       |    6 +-
 kernel/cpuset.c                                    |    3 +
 kernel/events/core.c                               |   12 +-
 kernel/fork.c                                      |    4 -
 kernel/ksysfs.c                                    |   18 +
 kernel/kthread.c                                   |    2 +
 kernel/mutex.c                                     |   46 +
 kernel/rcu.h                                       |    2 +
 kernel/rcupdate.c                                  |   30 +
 kernel/rcutiny_plugin.h                            |   21 +-
 kernel/rcutree.c                                   |  321 ++-
 kernel/rcutree.h                                   |   26 +
 kernel/rcutree_plugin.h                            |  234 +-
 kernel/rcutree_trace.c                             |    4 +-
 kernel/sched/core.c                                | 1006 ++++---
 kernel/sched/debug.c                               |   61 +-
 kernel/sched/fair.c                                | 1774 +++++++-----
 kernel/sched/features.h                            |   20 +-
 kernel/sched/idle_task.c                           |   17 +-
 kernel/sched/rt.c                                  |  182 +-
 kernel/sched/sched.h                               |  178 +-
 kernel/sched/stop_task.c                           |   22 +-
 kernel/sysctl.c                                    |   14 +
 kernel/time/tick-sched.c                           |   10 +-
 kernel/timer.c                                     |    8 +-
 kernel/workqueue.c                                 |    7 +
 lib/cpu_rmap.c                                     |   54 +-
 make_defconfig.sh                                  |    0
 scripts/Lindent                                    |    0
 scripts/bloat-o-meter                              |    0
 scripts/build-all.py                               |    0
 scripts/checkincludes.pl                           |    0
 scripts/checkkconfigsymbols.sh                     |    0
 scripts/checkpatch.pl                              |    0
 scripts/checkstack.pl                              |    0
 scripts/checksyscalls.sh                           |    0
 scripts/checkversion.pl                            |    0
 scripts/cleanfile                                  |    0
 scripts/cleanpatch                                 |    0
 scripts/coccicheck                                 |    0
 scripts/config                                     |    0
 scripts/decodecode                                 |    0
 scripts/depmod.sh                                  |    0
 scripts/diffconfig                                 |    0
 scripts/extract-ikconfig                           |    0
 scripts/extract-vmlinux                            |    0
 scripts/gcc-wrapper.py                             |    0
 scripts/get_maintainer.pl                          |    0
 scripts/headerdep.pl                               |    0
 scripts/headers.sh                                 |    0
 scripts/kconfig/check.sh                           |    0
 scripts/kconfig/merge_config.sh                    |    0
 scripts/kernel-doc                                 |    0
 scripts/makelst                                    |    0
 scripts/mkcompile_h                                |    0
 scripts/mkuboot.sh                                 |    0
 scripts/namespace.pl                               |    0
 scripts/package/mkspec                             |    0
 scripts/patch-kernel                               |    0
 scripts/recordmcount.pl                            |    0
 scripts/setlocalversion                            |    0
 scripts/show_delta                                 |    0
 scripts/tags.sh                                    |    0
 scripts/ver_linux                                  |    0
 tools/nfsd/inject_fault.sh                         |    0
 tools/perf/python/twatch.py                        |    0
 .../perf/scripts/python/bin/net_dropmonitor-record |    0
 .../perf/scripts/python/bin/net_dropmonitor-report |    0
 tools/perf/scripts/python/net_dropmonitor.py       |    0
 tools/perf/util/PERF-VERSION-GEN                   |    0
 tools/perf/util/generate-cmdlist.sh                |    0
 tools/power/cpupower/man/cpupower-set.1            |    9 -
 tools/power/cpupower/utils/helpers/sysfs.c         |   35 +-
 tools/power/cpupower/utils/version-gen.sh          |    0
 tools/testing/ktest/compare-ktest-sample.pl        |    0
 tools/testing/ktest/ktest.pl                       |    0
 204 files changed, 5104 insertions(+), 5204 deletions(-)

diff --git a/Documentation/ABI/testing/sysfs-devices-system-cpu b/Documentation/ABI/testing/sysfs-devices-system-cpu
index e7be75b..5dab364 100644
--- a/Documentation/ABI/testing/sysfs-devices-system-cpu
+++ b/Documentation/ABI/testing/sysfs-devices-system-cpu
@@ -9,31 +9,6 @@ Description:
 
 		/sys/devices/system/cpu/cpu#/
 
-What:		/sys/devices/system/cpu/sched_mc_power_savings
-		/sys/devices/system/cpu/sched_smt_power_savings
-Date:		June 2006
-Contact:	Linux kernel mailing list <linux-kernel@vger.kernel.org>
-Description:	Discover and adjust the kernel's multi-core scheduler support.
-
-		Possible values are:
-
-		0 - No power saving load balance (default value)
-		1 - Fill one thread/core/package first for long running threads
-		2 - Also bias task wakeups to semi-idle cpu package for power
-		    savings
-
-		sched_mc_power_savings is dependent upon SCHED_MC, which is
-		itself architecture dependent.
-
-		sched_smt_power_savings is dependent upon SCHED_SMT, which
-		is itself architecture dependent.
-
-		The two files are independent of each other. It is possible
-		that one file may be present without the other.
-
-		Introduced by git commit 5c45bf27.
-
-
 What:		/sys/devices/system/cpu/kernel_max
 		/sys/devices/system/cpu/offline
 		/sys/devices/system/cpu/online
diff --git a/Documentation/arm/Samsung/clksrc-change-registers.awk b/Documentation/arm/Samsung/clksrc-change-registers.awk
old mode 100755
new mode 100644
diff --git a/Documentation/dvb/get_dvb_firmware b/Documentation/dvb/get_dvb_firmware
old mode 100755
new mode 100644
diff --git a/Documentation/scheduler/sched-arch.txt b/Documentation/scheduler/sched-arch.txt
index 28aa107..b1b8587 100644
--- a/Documentation/scheduler/sched-arch.txt
+++ b/Documentation/scheduler/sched-arch.txt
@@ -17,16 +17,6 @@ you must `#define __ARCH_WANT_UNLOCKED_CTXSW` in a header file
 Unlocked context switches introduce only a very minor performance
 penalty to the core scheduler implementation in the CONFIG_SMP case.
 
-2. Interrupt status
-By default, the switch_to arch function is called with interrupts
-disabled. Interrupts may be enabled over the call if it is likely to
-introduce a significant interrupt latency by adding the line
-`#define __ARCH_WANT_INTERRUPTS_ON_CTXSW` in the same place as for
-unlocked context switches. This define also implies
-`__ARCH_WANT_UNLOCKED_CTXSW`. See arch/arm/include/asm/system.h for an
-example.
-
-
 CPU idle
 ========
 Your cpu_idle routines need to obey the following rules:
diff --git a/Documentation/scheduler/sched-domains.txt b/Documentation/scheduler/sched-domains.txt
index b7ee379..443f0c7 100644
--- a/Documentation/scheduler/sched-domains.txt
+++ b/Documentation/scheduler/sched-domains.txt
@@ -61,10 +61,6 @@ The implementor should read comments in include/linux/sched.h:
 struct sched_domain fields, SD_FLAG_*, SD_*_INIT to get an idea of
 the specifics and what to tune.
 
-For SMT, the architecture must define CONFIG_SCHED_SMT and provide a
-cpumask_t cpu_sibling_map[NR_CPUS], where cpu_sibling_map[i] is the mask of
-all "i"'s siblings as well as "i" itself.
-
 Architectures may retain the regular override the default SD_*_INIT flags
 while using the generic domain builder in kernel/sched.c if they wish to
 retain the traditional SMT->SMP->NUMA topology (or some subset of that). This
diff --git a/Documentation/target/tcm_mod_builder.py b/Documentation/target/tcm_mod_builder.py
old mode 100755
new mode 100644
diff --git a/Makefile b/Makefile
index b914f2c..00f3b7c 100644
--- a/Makefile
+++ b/Makefile
@@ -351,7 +351,7 @@ CC		= $(srctree)/scripts/gcc-wrapper.py $(REAL_CC)
 
 CHECKFLAGS     := -D__linux__ -Dlinux -D__STDC__ -Dunix -D__unix__ \
 		  -Wbitwise -Wno-return-void $(CF)
-CFLAGS_MODULE   =
+CFLAGS_MODULE   = -fno-pic
 AFLAGS_MODULE   =
 LDFLAGS_MODULE  =
 CFLAGS_KERNEL	=
diff --git a/arch/arm/Kconfig b/arch/arm/Kconfig
index 85081f1..5e18459 100644
--- a/arch/arm/Kconfig
+++ b/arch/arm/Kconfig
@@ -1356,6 +1356,16 @@ config PL310_ERRATA_588369
 	   is not correctly implemented in PL310 as clean lines are not
 	   invalidated as a result of these operations.
 
+config ARM_ERRATA_643719
+	bool "ARM errata: LoUIS bit field in CLIDR register is incorrect"
+	depends on CPU_V7 && SMP
+	help
+	  This option enables the workaround for the 643719 Cortex-A9 (prior to
+	  r1p0) erratum. On affected cores the LoUIS bit field of the CLIDR
+	  register returns zero when it should return one. The workaround
+	  corrects this value, ensuring cache maintenance operations which use
+	  it behave as intended and avoiding data corruption.
+
 config ARM_ERRATA_720789
 	bool "ARM errata: TLBIASIDIS and TLBIMVAIS operations can broadcast a faulty ASID"
 	depends on CPU_V7
@@ -1489,9 +1499,20 @@ config KSAPI
           Scorpion processor supported hardware performance counters on a per
           thread basis or AXI counters on an overall system basis.
 
+config ARM_ERRATA_798181
+	bool "ARM errata: TLBI/DSB failure on Cortex-A15"
+	depends on CPU_V7 && SMP
+	help
+	  On Cortex-A15 (r0p0..r3p2) the TLBI*IS/DSB operations are not
+	  adequately shooting down all use of the old entries. This
+	  option enables the Linux kernel workaround for this erratum
+	  which sends an IPI to the CPUs that are running the same ASID
+	  as the one being invalidated.
+
 endmenu
 
 source "arch/arm/common/Kconfig"
+source "arch/arm/hotplug/Kconfig"
 
 menu "Bus support"
 
diff --git a/arch/arm/Makefile b/arch/arm/Makefile
index 6bebe17..e2449f7 100644
--- a/arch/arm/Makefile
+++ b/arch/arm/Makefile
@@ -264,6 +264,7 @@ core-$(CONFIG_VFP)		+= arch/arm/vfp/
 core-y				+= arch/arm/kernel/ arch/arm/mm/ arch/arm/common/
 core-y				+= arch/arm/net/
 core-y				+= $(machdirs) $(platdirs)
+core-$(CONFIG_INTELLI_PLUG)	+= arch/arm/hotplug/
 
 drivers-$(CONFIG_OPROFILE)      += arch/arm/oprofile/
 core-y				+= arch/arm/perfmon/
diff --git a/arch/arm/boot/dts/msm-iommu.dtsi b/arch/arm/boot/dts/msm-iommu.dtsi
old mode 100755
new mode 100644
diff --git a/arch/arm/boot/dts/msm-pm8941.dtsi b/arch/arm/boot/dts/msm-pm8941.dtsi
old mode 100755
new mode 100644
diff --git a/arch/arm/boot/dts/msm8974-iommu.dtsi b/arch/arm/boot/dts/msm8974-iommu.dtsi
old mode 100755
new mode 100644
diff --git a/arch/arm/common/gic.c b/arch/arm/common/gic.c
index 9dd4347..cca3268 100644
--- a/arch/arm/common/gic.c
+++ b/arch/arm/common/gic.c
@@ -86,6 +86,14 @@ static unsigned int saved_dist_ctrl, saved_cpu_ctrl;
 #endif
 
 /*
+ * The GIC mapping of CPU interfaces does not necessarily match
+ * the logical CPU numbering.  Let's use a mapping as returned
+ * by the GIC itself.
+ */
+#define NR_GIC_CPU_IF 8
+static u8 gic_cpu_map[NR_GIC_CPU_IF] __read_mostly;
+
+/*
  * Supported arch specific GIC irq extension.
  * Default make them NULL.
  */
@@ -380,11 +388,11 @@ static int gic_set_affinity(struct irq_data *d, const struct cpumask *mask_val,
 	unsigned int cpu = cpumask_any_and(mask_val, cpu_online_mask);
 	u32 val, mask, bit;
 
-	if (cpu >= 8 || cpu >= nr_cpu_ids)
+	if (cpu >= NR_GIC_CPU_IF || cpu >= nr_cpu_ids)
 		return -EINVAL;
 
 	mask = 0xff << shift;
-	bit = 1 << (cpu_logical_map(cpu) + shift);
+	bit = gic_cpu_map[cpu] << shift;
 
 	raw_spin_lock(&irq_controller_lock);
 	val = readl_relaxed(reg) & ~mask;
@@ -514,11 +522,6 @@ static void __init gic_dist_init(struct gic_chip_data *gic)
 	u32 cpumask;
 	unsigned int gic_irqs = gic->gic_irqs;
 	void __iomem *base = gic_data_dist_base(gic);
-	u32 cpu = cpu_logical_map(smp_processor_id());
-
-	cpumask = 1 << cpu;
-	cpumask |= cpumask << 8;
-	cpumask |= cpumask << 16;
 
 	writel_relaxed(0, base + GIC_DIST_CTRL);
 
@@ -531,6 +534,7 @@ static void __init gic_dist_init(struct gic_chip_data *gic)
 	/*
 	 * Set all global interrupts to this CPU only.
 	 */
+	cpumask = readl_relaxed(base + GIC_DIST_TARGET + 0);
 	for (i = 32; i < gic_irqs; i += 4)
 		writel_relaxed(cpumask, base + GIC_DIST_TARGET + i * 4 / 4);
 
@@ -569,9 +573,25 @@ static void __cpuinit gic_cpu_init(struct gic_chip_data *gic)
 {
 	void __iomem *dist_base = gic_data_dist_base(gic);
 	void __iomem *base = gic_data_cpu_base(gic);
+	unsigned int cpu_mask, cpu = smp_processor_id();
 	int i;
 
 	/*
+	 * Get what the GIC says our CPU mask is.
+	 */
+	BUG_ON(cpu >= NR_GIC_CPU_IF);
+	cpu_mask = readl_relaxed(dist_base + GIC_DIST_TARGET + 0);
+	gic_cpu_map[cpu] = cpu_mask;
+
+	/*
+	 * Clear our mask from the other map entries in case they're
+	 * still undefined.
+	 */
+	for (i = 0; i < NR_GIC_CPU_IF; i++)
+		if (i != cpu)
+			gic_cpu_map[i] &= ~cpu_mask;
+
+	/*
 	 * Deal with the banked PPI and SGI interrupts - disable all
 	 * PPI interrupts, ensure all SGI interrupts are enabled.
 	 */
@@ -868,7 +888,7 @@ void __init gic_init_bases(unsigned int gic_nr, int irq_start,
 {
 	irq_hw_number_t hwirq_base;
 	struct gic_chip_data *gic;
-	int gic_irqs, irq_base;
+	int gic_irqs, irq_base, i;
 
 	BUG_ON(gic_nr >= MAX_GIC_NR);
 
@@ -909,6 +929,13 @@ void __init gic_init_bases(unsigned int gic_nr, int irq_start,
 	}
 
 	/*
+	 * Initialize the CPU interface map to all CPUs.
+	 * It will be refined as each CPU probes its ID.
+	 */
+	for (i = 0; i < NR_GIC_CPU_IF; i++)
+		gic_cpu_map[i] = 0xff;
+
+	/*
 	 * For primary GICs, skip over SGIs.
 	 * For secondary GICs, skip over PPIs, too.
 	 */
@@ -966,7 +993,7 @@ void gic_raise_softirq(const struct cpumask *mask, unsigned int irq)
 
 	/* Convert our logical CPU mask into a physical one. */
 	for_each_cpu(cpu, mask)
-		map |= 1 << cpu_logical_map(cpu);
+		map |= gic_cpu_map[cpu];
 
 	sgir = (map << 16) | irq;
 	if (is_cpu_secure())
diff --git a/arch/arm/configs/cyanogen_aries_defconfig b/arch/arm/configs/cyanogen_aries_defconfig
index c1542ab..16b845d 100644
--- a/arch/arm/configs/cyanogen_aries_defconfig
+++ b/arch/arm/configs/cyanogen_aries_defconfig
@@ -1,496 +1,72 @@
-#
-# Automatically generated file; DO NOT EDIT.
-# Linux/arm 3.4.0 Kernel Configuration
-#
-CONFIG_ARM=y
-CONFIG_ARM_HAS_SG_CHAIN=y
-CONFIG_MIGHT_HAVE_PCI=y
-CONFIG_SYS_SUPPORTS_APM_EMULATION=y
-CONFIG_GENERIC_GPIO=y
-# CONFIG_ARCH_USES_GETTIMEOFFSET is not set
-CONFIG_GENERIC_CLOCKEVENTS=y
-CONFIG_GENERIC_CLOCKEVENTS_BROADCAST=y
-CONFIG_KTIME_SCALAR=y
-CONFIG_HAVE_PROC_CPU=y
-CONFIG_STACKTRACE_SUPPORT=y
-CONFIG_LOCKDEP_SUPPORT=y
-CONFIG_TRACE_IRQFLAGS_SUPPORT=y
-CONFIG_HARDIRQS_SW_RESEND=y
-CONFIG_GENERIC_IRQ_PROBE=y
-CONFIG_ARM_TICKET_LOCKS=y
-CONFIG_RWSEM_GENERIC_SPINLOCK=y
-CONFIG_ARCH_HAS_CPUFREQ=y
-CONFIG_ARCH_HAS_CPU_IDLE_WAIT=y
-CONFIG_GENERIC_HWEIGHT=y
-CONFIG_GENERIC_CALIBRATE_DELAY=y
-CONFIG_NEED_DMA_MAP_STATE=y
-CONFIG_VECTORS_BASE=0xffff0000
 # CONFIG_ARM_PATCH_PHYS_VIRT is not set
-CONFIG_NEED_MACH_IO_H=y
-CONFIG_NEED_MACH_MEMORY_H=y
-CONFIG_PHYS_OFFSET=0x80200000
-CONFIG_GENERIC_BUG=y
-CONFIG_GENERIC_TIME_VSYSCALL=y
-CONFIG_ARM_USE_USER_ACCESSIBLE_TIMERS=y
-CONFIG_ARM_USER_ACCESSIBLE_TIMER_BASE=0xfffef000
-# CONFIG_ARCH_RANDOM is not set
-CONFIG_DEFCONFIG_LIST="/lib/modules/$UNAME_RELEASE/.config"
-CONFIG_HAVE_IRQ_WORK=y
-CONFIG_IRQ_WORK=y
-
-#
-# General setup
-#
 CONFIG_EXPERIMENTAL=y
-CONFIG_INIT_ENV_ARG_LIMIT=32
-CONFIG_CROSS_COMPILE=""
-CONFIG_LOCALVERSION="-cyanogenmod"
-CONFIG_LOCALVERSION_AUTO=y
-CONFIG_HAVE_KERNEL_GZIP=y
-CONFIG_HAVE_KERNEL_LZMA=y
-CONFIG_HAVE_KERNEL_XZ=y
-CONFIG_HAVE_KERNEL_LZO=y
-CONFIG_KERNEL_GZIP=y
-# CONFIG_KERNEL_LZMA is not set
-# CONFIG_KERNEL_XZ is not set
-# CONFIG_KERNEL_LZO is not set
-CONFIG_DEFAULT_HOSTNAME="(none)"
-CONFIG_SWAP=y
+CONFIG_LOCALVERSION="-devil-inside"
+CONFIG_DEFAULT_HOSTNAME="XperianPro"
 CONFIG_SYSVIPC=y
-CONFIG_SYSVIPC_SYSCTL=y
-# CONFIG_POSIX_MQUEUE is not set
-# CONFIG_BSD_PROCESS_ACCT is not set
-# CONFIG_FHANDLE is not set
 CONFIG_TASKSTATS=y
 CONFIG_TASK_DELAY_ACCT=y
 CONFIG_TASK_XACCT=y
 CONFIG_TASK_IO_ACCOUNTING=y
 CONFIG_AUDIT=y
-CONFIG_AUDITSYSCALL=y
-CONFIG_AUDIT_WATCH=y
-CONFIG_AUDIT_TREE=y
-# CONFIG_AUDIT_LOGINUID_IMMUTABLE is not set
-CONFIG_HAVE_GENERIC_HARDIRQS=y
-
-#
-# IRQ subsystem
-#
-CONFIG_GENERIC_HARDIRQS=y
-CONFIG_GENERIC_IRQ_SHOW=y
-CONFIG_IRQ_DOMAIN=y
-# CONFIG_IRQ_DOMAIN_DEBUG is not set
-
-#
-# RCU Subsystem
-#
-CONFIG_TREE_PREEMPT_RCU=y
-CONFIG_PREEMPT_RCU=y
-CONFIG_RCU_FANOUT=32
-# CONFIG_RCU_FANOUT_EXACT is not set
 CONFIG_RCU_FAST_NO_HZ=y
-# CONFIG_TREE_RCU_TRACE is not set
-# CONFIG_RCU_BOOST is not set
 CONFIG_IKCONFIG=y
 CONFIG_IKCONFIG_PROC=y
-CONFIG_LOG_BUF_SHIFT=17
 CONFIG_CGROUPS=y
 CONFIG_CGROUP_DEBUG=y
 CONFIG_CGROUP_FREEZER=y
-# CONFIG_CGROUP_DEVICE is not set
-# CONFIG_CPUSETS is not set
 CONFIG_CGROUP_CPUACCT=y
 CONFIG_RESOURCE_COUNTERS=y
-# CONFIG_CGROUP_MEM_RES_CTLR is not set
-# CONFIG_CGROUP_PERF is not set
 CONFIG_CGROUP_SCHED=y
-CONFIG_FAIR_GROUP_SCHED=y
-# CONFIG_CFS_BANDWIDTH is not set
 CONFIG_RT_GROUP_SCHED=y
-# CONFIG_BLK_CGROUP is not set
-# CONFIG_CHECKPOINT_RESTORE is not set
 CONFIG_NAMESPACES=y
 # CONFIG_UTS_NS is not set
 # CONFIG_IPC_NS is not set
 # CONFIG_USER_NS is not set
 # CONFIG_PID_NS is not set
 # CONFIG_NET_NS is not set
-# CONFIG_SCHED_AUTOGROUP is not set
-# CONFIG_SYSFS_DEPRECATED is not set
-# CONFIG_RELAY is not set
 CONFIG_BLK_DEV_INITRD=y
-CONFIG_INITRAMFS_SOURCE=""
-CONFIG_RD_GZIP=y
-# CONFIG_RD_BZIP2 is not set
-# CONFIG_RD_LZMA is not set
-# CONFIG_RD_XZ is not set
-# CONFIG_RD_LZO is not set
 CONFIG_CC_OPTIMIZE_FOR_SIZE=y
-CONFIG_SYSCTL=y
-CONFIG_ANON_INODES=y
 CONFIG_PANIC_TIMEOUT=5
-CONFIG_EXPERT=y
-CONFIG_UID16=y
-# CONFIG_SYSCTL_SYSCALL is not set
-CONFIG_KALLSYMS=y
 CONFIG_KALLSYMS_ALL=y
-CONFIG_HOTPLUG=y
-CONFIG_PRINTK=y
-CONFIG_BUG=y
-CONFIG_ELF_CORE=y
-CONFIG_BASE_FULL=y
-CONFIG_FUTEX=y
-CONFIG_EPOLL=y
-CONFIG_SIGNALFD=y
-CONFIG_TIMERFD=y
-CONFIG_EVENTFD=y
-CONFIG_SHMEM=y
-CONFIG_AIO=y
 CONFIG_EMBEDDED=y
-CONFIG_HAVE_PERF_EVENTS=y
-CONFIG_PERF_USE_VMALLOC=y
-
-#
-# Kernel Performance Events And Counters
-#
-CONFIG_PERF_EVENTS=y
-# CONFIG_PERF_COUNTERS is not set
-# CONFIG_DEBUG_PERF_USE_VMALLOC is not set
-CONFIG_VM_EVENT_COUNTERS=y
-CONFIG_SLUB_DEBUG=y
-CONFIG_COMPAT_BRK=y
-# CONFIG_SLAB is not set
-CONFIG_SLUB=y
-# CONFIG_SLOB is not set
 CONFIG_PROFILING=y
-CONFIG_TRACEPOINTS=y
 CONFIG_OPROFILE=y
-CONFIG_HAVE_OPROFILE=y
-# CONFIG_JUMP_LABEL is not set
-CONFIG_HAVE_KPROBES=y
-CONFIG_HAVE_KRETPROBES=y
-CONFIG_HAVE_DMA_ATTRS=y
-CONFIG_HAVE_DMA_CONTIGUOUS=y
-CONFIG_USE_GENERIC_SMP_HELPERS=y
-CONFIG_GENERIC_SMP_IDLE_THREAD=y
-CONFIG_HAVE_REGS_AND_STACK_ACCESS_API=y
-CONFIG_HAVE_CLK=y
-CONFIG_HAVE_DMA_API_DEBUG=y
-CONFIG_HAVE_HW_BREAKPOINT=y
-CONFIG_HAVE_ARCH_JUMP_LABEL=y
-
-#
-# GCOV-based kernel profiling
-#
-# CONFIG_GCOV_KERNEL is not set
-CONFIG_HAVE_GENERIC_DMA_COHERENT=y
-CONFIG_SLABINFO=y
-CONFIG_RT_MUTEXES=y
-CONFIG_BASE_SMALL=0
-# CONFIG_MODULES is not set
-CONFIG_STOP_MACHINE=y
-CONFIG_BLOCK=y
-CONFIG_LBDAF=y
-CONFIG_BLK_DEV_BSG=y
-# CONFIG_BLK_DEV_BSGLIB is not set
-# CONFIG_BLK_DEV_INTEGRITY is not set
-
-#
-# Partition Types
-#
 CONFIG_PARTITION_ADVANCED=y
-# CONFIG_ACORN_PARTITION is not set
-# CONFIG_OSF_PARTITION is not set
-# CONFIG_AMIGA_PARTITION is not set
-# CONFIG_ATARI_PARTITION is not set
-# CONFIG_MAC_PARTITION is not set
-CONFIG_MSDOS_PARTITION=y
-# CONFIG_BSD_DISKLABEL is not set
-# CONFIG_MINIX_SUBPARTITION is not set
-# CONFIG_SOLARIS_X86_PARTITION is not set
-# CONFIG_UNIXWARE_DISKLABEL is not set
-# CONFIG_LDM_PARTITION is not set
-# CONFIG_SGI_PARTITION is not set
-# CONFIG_ULTRIX_PARTITION is not set
-# CONFIG_SUN_PARTITION is not set
-# CONFIG_KARMA_PARTITION is not set
 CONFIG_EFI_PARTITION=y
-# CONFIG_SYSV68_PARTITION is not set
-
-#
-# IO Schedulers
-#
-CONFIG_IOSCHED_NOOP=y
 # CONFIG_IOSCHED_TEST is not set
-CONFIG_IOSCHED_DEADLINE=y
-CONFIG_IOSCHED_ROW=y
-CONFIG_IOSCHED_CFQ=y
-# CONFIG_DEFAULT_DEADLINE is not set
 CONFIG_DEFAULT_ROW=y
-# CONFIG_DEFAULT_CFQ is not set
-# CONFIG_DEFAULT_NOOP is not set
-CONFIG_DEFAULT_IOSCHED="row"
-# CONFIG_INLINE_SPIN_TRYLOCK is not set
-# CONFIG_INLINE_SPIN_TRYLOCK_BH is not set
-# CONFIG_INLINE_SPIN_LOCK is not set
-# CONFIG_INLINE_SPIN_LOCK_BH is not set
-# CONFIG_INLINE_SPIN_LOCK_IRQ is not set
-# CONFIG_INLINE_SPIN_LOCK_IRQSAVE is not set
-CONFIG_UNINLINE_SPIN_UNLOCK=y
-# CONFIG_INLINE_SPIN_UNLOCK_BH is not set
-# CONFIG_INLINE_SPIN_UNLOCK_IRQ is not set
-# CONFIG_INLINE_SPIN_UNLOCK_IRQRESTORE is not set
-# CONFIG_INLINE_READ_TRYLOCK is not set
-# CONFIG_INLINE_READ_LOCK is not set
-# CONFIG_INLINE_READ_LOCK_BH is not set
-# CONFIG_INLINE_READ_LOCK_IRQ is not set
-# CONFIG_INLINE_READ_LOCK_IRQSAVE is not set
-# CONFIG_INLINE_READ_UNLOCK is not set
-# CONFIG_INLINE_READ_UNLOCK_BH is not set
-# CONFIG_INLINE_READ_UNLOCK_IRQ is not set
-# CONFIG_INLINE_READ_UNLOCK_IRQRESTORE is not set
-# CONFIG_INLINE_WRITE_TRYLOCK is not set
-# CONFIG_INLINE_WRITE_LOCK is not set
-# CONFIG_INLINE_WRITE_LOCK_BH is not set
-# CONFIG_INLINE_WRITE_LOCK_IRQ is not set
-# CONFIG_INLINE_WRITE_LOCK_IRQSAVE is not set
-# CONFIG_INLINE_WRITE_UNLOCK is not set
-# CONFIG_INLINE_WRITE_UNLOCK_BH is not set
-# CONFIG_INLINE_WRITE_UNLOCK_IRQ is not set
-# CONFIG_INLINE_WRITE_UNLOCK_IRQRESTORE is not set
-CONFIG_MUTEX_SPIN_ON_OWNER=y
-CONFIG_FREEZER=y
-
-#
-# System Type
-#
-CONFIG_MMU=y
-# CONFIG_ARCH_INTEGRATOR is not set
-# CONFIG_ARCH_REALVIEW is not set
-# CONFIG_ARCH_VERSATILE is not set
-# CONFIG_ARCH_VEXPRESS is not set
-# CONFIG_ARCH_AT91 is not set
-# CONFIG_ARCH_BCMRING is not set
-# CONFIG_ARCH_HIGHBANK is not set
-# CONFIG_ARCH_CLPS711X is not set
-# CONFIG_ARCH_CNS3XXX is not set
-# CONFIG_ARCH_GEMINI is not set
-# CONFIG_ARCH_PRIMA2 is not set
-# CONFIG_ARCH_EBSA110 is not set
-# CONFIG_ARCH_EP93XX is not set
-# CONFIG_ARCH_FOOTBRIDGE is not set
-# CONFIG_ARCH_MXC is not set
-# CONFIG_ARCH_MXS is not set
-# CONFIG_ARCH_NETX is not set
-# CONFIG_ARCH_H720X is not set
-# CONFIG_ARCH_IOP13XX is not set
-# CONFIG_ARCH_IOP32X is not set
-# CONFIG_ARCH_IOP33X is not set
-# CONFIG_ARCH_IXP23XX is not set
-# CONFIG_ARCH_IXP2000 is not set
-# CONFIG_ARCH_IXP4XX is not set
-# CONFIG_ARCH_DOVE is not set
-# CONFIG_ARCH_KIRKWOOD is not set
-# CONFIG_ARCH_LPC32XX is not set
-# CONFIG_ARCH_MV78XX0 is not set
-# CONFIG_ARCH_ORION5X is not set
-# CONFIG_ARCH_MMP is not set
-# CONFIG_ARCH_KS8695 is not set
-# CONFIG_ARCH_W90X900 is not set
-# CONFIG_ARCH_TEGRA is not set
-# CONFIG_ARCH_PICOXCELL is not set
-# CONFIG_ARCH_PNX4008 is not set
-# CONFIG_ARCH_PXA is not set
 CONFIG_ARCH_MSM=y
-# CONFIG_ARCH_SHMOBILE is not set
-# CONFIG_ARCH_RPC is not set
-# CONFIG_ARCH_SA1100 is not set
-# CONFIG_ARCH_S3C24XX is not set
-# CONFIG_ARCH_S3C64XX is not set
-# CONFIG_ARCH_S5P64X0 is not set
-# CONFIG_ARCH_S5PC100 is not set
-# CONFIG_ARCH_S5PV210 is not set
-# CONFIG_ARCH_EXYNOS is not set
-# CONFIG_ARCH_SHARK is not set
-# CONFIG_ARCH_U300 is not set
-# CONFIG_ARCH_U8500 is not set
-# CONFIG_ARCH_NOMADIK is not set
-# CONFIG_ARCH_DAVINCI is not set
-# CONFIG_ARCH_OMAP is not set
-# CONFIG_PLAT_SPEAR is not set
-# CONFIG_ARCH_VT8500 is not set
-# CONFIG_ARCH_ZYNQ is not set
-# CONFIG_GPIO_PCA953X is not set
-# CONFIG_KEYBOARD_GPIO_POLLED is not set
-
-#
-# MSM SoC Type
-#
-# CONFIG_ARCH_MSM7X01A is not set
-# CONFIG_ARCH_MSM7X25 is not set
-# CONFIG_ARCH_MSM7X27 is not set
-# CONFIG_ARCH_MSM7X30 is not set
-# CONFIG_ARCH_QSD8X50 is not set
-# CONFIG_ARCH_MSM8X60 is not set
 CONFIG_ARCH_MSM8960=y
-# CONFIG_ARCH_MSM8930 is not set
 CONFIG_ARCH_APQ8064=y
-# CONFIG_ARCH_MSM8974 is not set
-# CONFIG_ARCH_MPQ8092 is not set
-# CONFIG_ARCH_MSM8226 is not set
-# CONFIG_ARCH_FSM9XXX is not set
-# CONFIG_ARCH_MSM9615 is not set
-# CONFIG_ARCH_MSM8625 is not set
-# CONFIG_ARCH_MSM9625 is not set
-CONFIG_MSM_SOC_REV_NONE=y
-# CONFIG_MSM_SOC_REV_A is not set
 CONFIG_MSM_KRAIT_TBB_ABORT_HANDLER=y
-CONFIG_ARCH_MSM_KRAIT=y
-CONFIG_MSM_SMP=y
-CONFIG_ARCH_MSM_KRAITMP=y
-CONFIG_MSM_KRAIT_WFE_FIXUP=y
-CONFIG_MSM_RPM=y
-# CONFIG_MSM_RPM_SMD is not set
-CONFIG_MSM_MPM=y
-CONFIG_MSM_XO=y
-CONFIG_MSM_REMOTE_SPINLOCK_SFPB=y
-
-#
-# MSM Board Selection
-#
-# CONFIG_MACH_MSM8960_CDP is not set
-# CONFIG_MACH_MSM8960_MTP is not set
-# CONFIG_MACH_MSM8960_FLUID is not set
-# CONFIG_MACH_MSM8960_LIQUID is not set
-# CONFIG_MACH_APQ8064_CDP is not set
-# CONFIG_MACH_APQ8064_MTP is not set
-# CONFIG_MACH_APQ8064_LIQUID is not set
-# CONFIG_MACH_MPQ8064_CDP is not set
-# CONFIG_MACH_MPQ8064_HRD is not set
-# CONFIG_MACH_MPQ8064_DTV is not set
 CONFIG_MACH_MSM_DUMMY=y
-
-#
-# LGE Board Selection
-#
-CONFIG_BOARD_HEADER_FILE=""
-# CONFIG_MACH_APQ8064_MAKO is not set
-# CONFIG_MACH_LGE_DUMMY is not set
-
-#
-# LGE Specific Patches
-#
 CONFIG_UPDATE_LCDC_LUT=y
 CONFIG_LCD_KCAL=y
-# CONFIG_LGE_CRASH_HANDLER is not set
-
-#
-# ASUSTek Board Selection
-#
-# CONFIG_MACH_APQ8064_FLO is not set
-# CONFIG_MACH_APQ8064_DEB is not set
-# CONFIG_MACH_ASUSTEK_DUMMY is not set
-
-#
-# ASUSTek Specific Feature
-#
-CONFIG_MACH_XIAOMI=y
-
-#
-# XIAOMI Board Selection
-#
 CONFIG_MACH_APQ8064_ARIES=y
-# CONFIG_MACH_XIAOMI_DUMMY is not set
-
-#
-# XIAOMI Specific Patches
-#
-# CONFIG_XIAOMI_EARJACK_UART is not set
 # CONFIG_MSM_STACKED_MEMORY is not set
 CONFIG_KERNEL_MSM_CONTIG_MEM_REGION=y
-CONFIG_MSM_AMSS_VERSION=6225
-# CONFIG_MSM_AMSS_VERSION_6210 is not set
-# CONFIG_MSM_AMSS_VERSION_6220 is not set
-CONFIG_MSM_AMSS_VERSION_6225=y
-CONFIG_MSM7X00A_USE_GP_TIMER=y
-# CONFIG_MSM7X00A_USE_DG_TIMER is not set
-CONFIG_MSM7X00A_SLEEP_MODE_POWER_COLLAPSE_SUSPEND=y
-# CONFIG_MSM7X00A_SLEEP_MODE_POWER_COLLAPSE is not set
-# CONFIG_MSM7X00A_SLEEP_MODE_APPS_SLEEP is not set
-# CONFIG_MSM7X00A_SLEEP_MODE_RAMP_DOWN_AND_WAIT_FOR_INTERRUPT is not set
-# CONFIG_MSM7X00A_SLEEP_WAIT_FOR_INTERRUPT is not set
-CONFIG_MSM7X00A_SLEEP_MODE=0
-# CONFIG_MSM7X00A_IDLE_SLEEP_MODE_POWER_COLLAPSE_SUSPEND is not set
-CONFIG_MSM7X00A_IDLE_SLEEP_MODE_POWER_COLLAPSE=y
-# CONFIG_MSM7X00A_IDLE_SLEEP_MODE_APPS_SLEEP is not set
-# CONFIG_MSM7X00A_IDLE_SLEEP_MODE_RAMP_DOWN_AND_WAIT_FOR_INTERRUPT is not set
-# CONFIG_MSM7X00A_IDLE_SLEEP_WAIT_FOR_INTERRUPT is not set
-CONFIG_MSM7X00A_IDLE_SLEEP_MODE=1
-CONFIG_MSM7X00A_IDLE_SLEEP_MIN_TIME=20000000
-CONFIG_MSM7X00A_IDLE_SPIN_TIME=80000
-CONFIG_MSM_IDLE_STATS=y
-CONFIG_MSM_IDLE_STATS_FIRST_BUCKET=62500
-CONFIG_MSM_IDLE_STATS_BUCKET_SHIFT=2
-CONFIG_MSM_IDLE_STATS_BUCKET_COUNT=10
-CONFIG_MSM_SUSPEND_STATS_FIRST_BUCKET=1000000000
-CONFIG_CPU_HAS_L2_PMU=y
-# CONFIG_HTC_HEADSET is not set
-# CONFIG_HTC_PWRSINK is not set
 # CONFIG_MSM_FIQ_SUPPORT is not set
-# CONFIG_MSM_SERIAL_DEBUGGER is not set
 # CONFIG_MSM_PROC_COMM is not set
 CONFIG_MSM_SMD=y
-# CONFIG_MSM_SMD_PKG3 is not set
 CONFIG_MSM_SMD_PKG4=y
-CONFIG_MSM_SMD_DEBUG=y
 CONFIG_MSM_BAM_DMUX=y
-CONFIG_MSM_N_WAY_SMD=y
-CONFIG_MSM_N_WAY_SMSM=y
 # CONFIG_MSM_RESET_MODEM is not set
-CONFIG_MSM_SMD_LOGGING=y
-# CONFIG_MSM_IPC_LOGGING is not set
-CONFIG_MSM_SMD_NMEA=y
-# CONFIG_MSM_HSIC_TTY is not set
-CONFIG_MSM_SMD_TTY=y
-CONFIG_MSM_SMD_QMI=y
-CONFIG_MSM_SMD_PKT=y
 CONFIG_MSM_DSPS=y
-# CONFIG_MSM_ONCRPCROUTER is not set
 CONFIG_MSM_IPC_ROUTER=y
 CONFIG_MSM_IPC_ROUTER_SMD_XPRT=y
-# CONFIG_MSM_IPC_ROUTER_SECURITY is not set
-# CONFIG_MSM_DALRPC is not set
-# CONFIG_MSM_CPU_FREQ_SET_MIN_MAX is not set
+CONFIG_MSM_CPUFREQ_LIMITER=y
+CONFIG_CPU_OVERCLOCK=y
+CONFIG_OC_ULTIMATE=y
 CONFIG_MSM_AVS_HW=y
 # CONFIG_MSM_HW3D is not set
-CONFIG_AMSS_7X25_VERSION_2009=y
-# CONFIG_AMSS_7X25_VERSION_2008 is not set
-CONFIG_RTAC=y
-# CONFIG_MSM_VREG_SWITCH_INVERTED is not set
 # CONFIG_MSM_DMA_TEST is not set
-# CONFIG_WIFI_CONTROL_FUNC is not set
-CONFIG_MSM_SLEEP_TIME_OVERRIDE=y
-# CONFIG_MSM_MEMORY_LOW_POWER_MODE is not set
-CONFIG_MSM_PM_TIMEOUT_HALT=y
-# CONFIG_MSM_PM_TIMEOUT_RESET_MODEM is not set
-# CONFIG_MSM_PM_TIMEOUT_RESET_CHIP is not set
-CONFIG_MSM_IDLE_WAIT_ON_MODEM=0
-CONFIG_MSM_RPM_REGULATOR=y
 CONFIG_MSM_SUBSYSTEM_RESTART=y
-# CONFIG_MSM_SYSMON_COMM is not set
-CONFIG_MSM_PIL=y
-# CONFIG_MSM_PIL_MODEM is not set
-# CONFIG_MSM_PIL_QDSP6V3 is not set
 CONFIG_MSM_PIL_QDSP6V4=y
-# CONFIG_MSM_PIL_LPASS_QDSP6V5 is not set
-# CONFIG_MSM_PIL_MSS_QDSP6V5 is not set
 CONFIG_MSM_PIL_RIVA=y
 CONFIG_MSM_PIL_TZAPPS=y
 CONFIG_MSM_PIL_DSPS=y
 CONFIG_MSM_PIL_VIDC=y
-# CONFIG_MSM_PIL_VENUS is not set
 CONFIG_MSM_PIL_GSS=y
-# CONFIG_MSM_PIL_PRONTO is not set
-CONFIG_MSM_SCM=y
 CONFIG_MSM_MODEM_8960=y
 CONFIG_MSM_LPASS_8960=y
 CONFIG_MSM_WCNSS_SSR_8960=y
@@ -499,335 +75,70 @@ CONFIG_MSM_GSS_SSR_8064=y
 CONFIG_MSM_TZ_LOG=y
 CONFIG_MSM_RPM_LOG=y
 CONFIG_MSM_RPM_STATS_LOG=y
-# CONFIG_MSM_RPM_RBCPR_STATS_LOG is not set
-CONFIG_MSM_DIRECT_SCLK_ACCESS=y
-CONFIG_IOMMU_API=y
-CONFIG_MSM_GPIOMUX=y
-CONFIG_MSM_NATIVE_RESTART=y
-CONFIG_MSM_PM8X60=y
 CONFIG_MSM_EVENT_TIMER=y
 CONFIG_MSM_BUS_SCALING=y
 CONFIG_MSM_BUS_RPM_MULTI_TIER_ENABLED=y
 CONFIG_MSM_WATCHDOG=y
-# CONFIG_MSM_WATCHDOG_V2 is not set
-# CONFIG_MSM_MEMORY_DUMP is not set
 CONFIG_MSM_DLOAD_MODE=y
-# CONFIG_MSM_JTAG is not set
-# CONFIG_MSM_JTAG_MM is not set
-# CONFIG_MSM_SLEEP_STATS_DEVICE is not set
-CONFIG_MSM_RUN_QUEUE_STATS=y
-# CONFIG_MSM_STANDALONE_POWER_COLLAPSE is not set
-# CONFIG_MSM_GSBI9_UART is not set
-CONFIG_MSM_SHOW_RESUME_IRQ=y
-# CONFIG_MSM_FAKE_BATTERY is not set
-CONFIG_MSM_QDSP6_APR=y
-# CONFIG_MSM_QDSP6_APRV2 is not set
-CONFIG_MSM_QDSP6_CODECS=y
-# CONFIG_MSM_QDSP6V2_CODECS is not set
-CONFIG_MSM_AUDIO_QDSP6=y
-# CONFIG_MSM_AUDIO_QDSP6V2 is not set
 CONFIG_MSM_ADSP_LOADER=y
 CONFIG_MSM_ULTRASOUND=y
-# CONFIG_MSM_SPM_V1 is not set
-CONFIG_MSM_SPM_V2=y
-CONFIG_MSM_L2_SPM=y
-CONFIG_MSM_MULTIMEDIA_USE_ION=y
-# CONFIG_MSM_OCMEM is not set
-# CONFIG_MSM_RTB is not set
-# CONFIG_MSM_EBI_ERP is not set
 CONFIG_MSM_CACHE_ERP=y
 CONFIG_MSM_L1_ERR_PANIC=y
-# CONFIG_MSM_L1_RECOV_ERR_PANIC is not set
-# CONFIG_MSM_L1_ERR_LOG is not set
-# CONFIG_MSM_L2_ERP_PRINT_ACCESS_ERRORS is not set
-# CONFIG_MSM_L2_ERP_1BIT_PANIC is not set
 CONFIG_MSM_L2_ERP_2BIT_PANIC=y
-CONFIG_MSM_DCVS=y
-# CONFIG_MSM_CPR is not set
-CONFIG_HAVE_ARCH_HAS_CURRENT_TIMER=y
 CONFIG_MSM_CACHE_DUMP=y
 CONFIG_MSM_CACHE_DUMP_ON_PANIC=y
 CONFIG_MSM_HSIC_SYSMON=y
-# CONFIG_MSM_HSIC_SYSMON_TEST is not set
-CONFIG_MSM_CPU_PWRCTL=y
-CONFIG_MSM_USE_USER_ACCESSIBLE_TIMERS=y
-
-#
-# System MMU
-#
-
-#
-# Processor Type
-#
-CONFIG_CPU_V7=y
-CONFIG_CPU_32v6K=y
-CONFIG_CPU_32v7=y
-CONFIG_CPU_ABRT_EV7=y
-CONFIG_CPU_PABRT_V7=y
-CONFIG_CPU_CACHE_V7=y
-CONFIG_CPU_CACHE_VIPT=y
-CONFIG_CPU_COPY_V6=y
-CONFIG_CPU_TLB_V7=y
-CONFIG_CPU_HAS_ASID=y
-CONFIG_CPU_CP15=y
-CONFIG_CPU_CP15_MMU=y
-
-#
-# Processor Features
-#
-# CONFIG_ARM_LPAE is not set
-# CONFIG_ARCH_PHYS_ADDR_T_64BIT is not set
-CONFIG_ARM_THUMB=y
-# CONFIG_ARM_THUMBEE is not set
-CONFIG_SWP_EMULATE=y
-# CONFIG_CPU_ICACHE_DISABLE is not set
-# CONFIG_CPU_DCACHE_DISABLE is not set
-# CONFIG_CPU_BPREDICT_DISABLE is not set
-CONFIG_KUSER_HELPERS=y
-# CONFIG_CACHE_L2X0 is not set
-CONFIG_ARM_L1_CACHE_SHIFT_6=y
-CONFIG_ARM_L1_CACHE_SHIFT=6
-CONFIG_ARM_DMA_MEM_BUFFERABLE=y
 CONFIG_STRICT_MEMORY_RWX=y
-CONFIG_ARM_NR_BANKS=8
-# CONFIG_RESERVE_FIRST_PAGE is not set
-CONFIG_CPU_HAS_PMU=y
-CONFIG_MULTI_IRQ_HANDLER=y
-# CONFIG_ARM_ERRATA_430973 is not set
-# CONFIG_ARM_ERRATA_458693 is not set
-# CONFIG_ARM_ERRATA_460075 is not set
-# CONFIG_ARM_ERRATA_742230 is not set
-# CONFIG_ARM_ERRATA_742231 is not set
-# CONFIG_ARM_ERRATA_720789 is not set
-# CONFIG_ARM_ERRATA_743622 is not set
-# CONFIG_ARM_ERRATA_751472 is not set
-# CONFIG_ARM_ERRATA_754322 is not set
-# CONFIG_ARM_ERRATA_754327 is not set
-# CONFIG_ARM_ERRATA_764369 is not set
-# CONFIG_KSAPI is not set
-CONFIG_ARM_GIC=y
-# CONFIG_FIQ_DEBUGGER is not set
-
-#
-# Bus support
-#
-# CONFIG_PCI is not set
-# CONFIG_PCI_SYSCALL is not set
-CONFIG_ARCH_SUPPORTS_MSI=y
-# CONFIG_PCCARD is not set
-
-#
-# Kernel Features
-#
-CONFIG_TICK_ONESHOT=y
+CONFIG_INTELLI_PLUG=y
 CONFIG_NO_HZ=y
 CONFIG_HIGH_RES_TIMERS=y
-CONFIG_GENERIC_CLOCKEVENTS_BUILD=y
-CONFIG_HAVE_SMP=y
 CONFIG_SMP=y
 # CONFIG_SMP_ON_UP is not set
-CONFIG_ARM_CPU_TOPOLOGY=y
 CONFIG_SCHED_MC=y
-# CONFIG_SCHED_SMT is not set
-CONFIG_HAVE_ARM_SCU=y
-# CONFIG_ARM_ARCH_TIMER is not set
-CONFIG_VMSPLIT_3G=y
-# CONFIG_VMSPLIT_2G is not set
-# CONFIG_VMSPLIT_1G is not set
-CONFIG_PAGE_OFFSET=0xC0000000
-CONFIG_NR_CPUS=4
-CONFIG_HOTPLUG_CPU=y
-CONFIG_LOCAL_TIMERS=y
-CONFIG_ARCH_NR_GPIO=0
-# CONFIG_PREEMPT_NONE is not set
-# CONFIG_PREEMPT_VOLUNTARY is not set
 CONFIG_PREEMPT=y
-CONFIG_PREEMPT_COUNT=y
-CONFIG_HZ=100
-# CONFIG_THUMB2_KERNEL is not set
 CONFIG_AEABI=y
 # CONFIG_OABI_COMPAT is not set
-CONFIG_ARCH_HAS_HOLES_MEMORYMODEL=y
-# CONFIG_ARCH_SPARSEMEM_DEFAULT is not set
-# CONFIG_ARCH_SELECT_MEMORY_MODEL is not set
-CONFIG_HAVE_ARCH_PFN_VALID=y
 CONFIG_HIGHMEM=y
-# CONFIG_HIGHPTE is not set
-CONFIG_HW_PERF_EVENTS=y
-CONFIG_SELECT_MEMORY_MODEL=y
-CONFIG_FLATMEM_MANUAL=y
-CONFIG_FLATMEM=y
-CONFIG_FLAT_NODE_MEM_MAP=y
-CONFIG_HAVE_MEMBLOCK=y
-CONFIG_PAGEFLAGS_EXTENDED=y
-CONFIG_SPLIT_PTLOCK_CPUS=4
 CONFIG_COMPACTION=y
-CONFIG_MIGRATION=y
-# CONFIG_PHYS_ADDR_T_64BIT is not set
-CONFIG_ZONE_DMA_FLAG=0
-CONFIG_BOUNCE=y
-CONFIG_VIRT_TO_BUS=y
 CONFIG_KSM=y
-CONFIG_DEFAULT_MMAP_MIN_ADDR=4096
-CONFIG_CLEANCACHE=y
-CONFIG_USE_USER_ACCESSIBLE_TIMERS=y
-# CONFIG_ARCH_MEMORY_PROBE is not set
-# CONFIG_ARCH_MEMORY_REMOVE is not set
-# CONFIG_ENABLE_DMM is not set
 CONFIG_DONT_MAP_HOLE_AFTER_MEMBANK0=y
-# CONFIG_ENABLE_VMALLOC_SAVING is not set
-# CONFIG_NO_VM_RECLAIM is not set
-CONFIG_FORCE_MAX_ZONEORDER=11
-CONFIG_ALIGNMENT_TRAP=y
-# CONFIG_UACCESS_WITH_MEMCPY is not set
-# CONFIG_SECCOMP is not set
 CONFIG_CC_STACKPROTECTOR=y
-# CONFIG_DEPRECATED_PARAM_STRUCT is not set
-# CONFIG_ARM_FLUSH_CONSOLE_ON_RESTART is not set
-CONFIG_CP_ACCESS=y
-
-#
-# Boot options
-#
-# CONFIG_USE_OF is not set
-CONFIG_ZBOOT_ROM_TEXT=0
-CONFIG_ZBOOT_ROM_BSS=0
-CONFIG_CMDLINE=""
-# CONFIG_XIP_KERNEL is not set
-# CONFIG_KEXEC is not set
-# CONFIG_CRASH_DUMP is not set
-# CONFIG_AUTO_ZRELADDR is not set
-
-#
-# CPU Power Management
-#
-
-#
-# CPU Frequency scaling
-#
 CONFIG_CPU_FREQ=y
-CONFIG_CPU_FREQ_TABLE=y
-CONFIG_CPU_FREQ_STAT=y
-# CONFIG_CPU_FREQ_STAT_DETAILS is not set
-CONFIG_CPU_FREQ_DEFAULT_GOV_PERFORMANCE=y
-# CONFIG_CPU_FREQ_DEFAULT_GOV_POWERSAVE is not set
-# CONFIG_CPU_FREQ_DEFAULT_GOV_USERSPACE is not set
-# CONFIG_CPU_FREQ_DEFAULT_GOV_ONDEMAND is not set
-# CONFIG_CPU_FREQ_DEFAULT_GOV_CONSERVATIVE is not set
-# CONFIG_CPU_FREQ_DEFAULT_GOV_INTERACTIVE is not set
+CONFIG_CPU_FREQ_DEFAULT_GOV_INTELLIACTIVE=y
 CONFIG_CPU_FREQ_GOV_PERFORMANCE=y
 CONFIG_CPU_FREQ_GOV_POWERSAVE=y
 CONFIG_CPU_FREQ_GOV_USERSPACE=y
 CONFIG_CPU_FREQ_GOV_ONDEMAND=y
 CONFIG_CPU_FREQ_GOV_INTERACTIVE=y
 CONFIG_CPU_FREQ_GOV_CONSERVATIVE=y
-
-#
-# ARM CPU frequency scaling drivers
-#
-# CONFIG_ARM_EXYNOS4210_CPUFREQ is not set
-# CONFIG_ARM_EXYNOS4X12_CPUFREQ is not set
-# CONFIG_ARM_EXYNOS5250_CPUFREQ is not set
+CONFIG_CPU_FREQ_GOV_INTELLIDEMAND=y
+CONFIG_CPUFREQ_LIMIT_MAX_FREQ=y
+CONFIG_CPUFREQ_ID_PERFLOCK=y
 CONFIG_CPU_IDLE=y
-CONFIG_CPU_IDLE_GOV_LADDER=y
-CONFIG_CPU_IDLE_GOV_MENU=y
-CONFIG_CPU_FREQ_MSM=y
-
-#
-# Floating point emulation
-#
-
-#
-# At least one emulation must be selected
-#
 CONFIG_VFP=y
-CONFIG_VFPv3=y
 CONFIG_NEON=y
-
-#
-# Userspace binary formats
-#
-CONFIG_BINFMT_ELF=y
-CONFIG_ARCH_BINFMT_ELF_RANDOMIZE_PIE=y
 # CONFIG_CORE_DUMP_DEFAULT_ELF_HEADERS is not set
-CONFIG_HAVE_AOUT=y
-# CONFIG_BINFMT_AOUT is not set
-# CONFIG_BINFMT_MISC is not set
-
-#
-# Power management options
-#
-CONFIG_SUSPEND=y
-CONFIG_SUSPEND_FREEZER=y
-CONFIG_HAS_WAKELOCK=y
-CONFIG_HAS_EARLYSUSPEND=y
 CONFIG_WAKELOCK=y
-CONFIG_WAKELOCK_STAT=y
-CONFIG_USER_WAKELOCK=y
-CONFIG_EARLYSUSPEND=y
-# CONFIG_NO_USER_SPACE_SCREEN_ACCESS_CONTROL is not set
-# CONFIG_CONSOLE_EARLYSUSPEND is not set
-CONFIG_FB_EARLYSUSPEND=y
-CONFIG_PM_SLEEP=y
-CONFIG_PM_SLEEP_SMP=y
 CONFIG_PM_RUNTIME=y
-CONFIG_PM=y
-# CONFIG_PM_DEBUG is not set
-# CONFIG_APM_EMULATION is not set
-CONFIG_PM_CLK=y
-CONFIG_CPU_PM=y
-# CONFIG_SUSPEND_TIME is not set
-CONFIG_ARCH_SUSPEND_POSSIBLE=y
-CONFIG_ARM_CPU_SUSPEND=y
 CONFIG_NET=y
-
-#
-# Networking options
-#
 CONFIG_PACKET=y
 CONFIG_UNIX=y
-# CONFIG_UNIX_DIAG is not set
-CONFIG_XFRM=y
 CONFIG_XFRM_USER=y
 CONFIG_XFRM_SUB_POLICY=y
 CONFIG_XFRM_MIGRATE=y
 CONFIG_XFRM_STATISTICS=y
-CONFIG_XFRM_IPCOMP=y
 CONFIG_NET_KEY=y
-# CONFIG_NET_KEY_MIGRATE is not set
 CONFIG_INET=y
 CONFIG_IP_MULTICAST=y
 CONFIG_IP_ADVANCED_ROUTER=y
-# CONFIG_IP_FIB_TRIE_STATS is not set
 CONFIG_IP_MULTIPLE_TABLES=y
-# CONFIG_IP_ROUTE_MULTIPATH is not set
 CONFIG_IP_ROUTE_VERBOSE=y
 CONFIG_IP_PNP=y
 CONFIG_IP_PNP_DHCP=y
-# CONFIG_IP_PNP_BOOTP is not set
-# CONFIG_IP_PNP_RARP is not set
-# CONFIG_NET_IPIP is not set
-# CONFIG_NET_IPGRE_DEMUX is not set
-# CONFIG_IP_MROUTE is not set
-# CONFIG_ARPD is not set
-# CONFIG_SYN_COOKIES is not set
 CONFIG_INET_AH=y
 CONFIG_INET_ESP=y
 CONFIG_INET_IPCOMP=y
-CONFIG_INET_XFRM_TUNNEL=y
-CONFIG_INET_TUNNEL=y
-CONFIG_INET_XFRM_MODE_TRANSPORT=y
-CONFIG_INET_XFRM_MODE_TUNNEL=y
-CONFIG_INET_XFRM_MODE_BEET=y
 # CONFIG_INET_LRO is not set
-CONFIG_INET_DIAG=y
-CONFIG_INET_TCP_DIAG=y
-# CONFIG_INET_UDP_DIAG is not set
-# CONFIG_TCP_CONG_ADVANCED is not set
-CONFIG_TCP_CONG_CUBIC=y
-CONFIG_DEFAULT_TCP_CONG="cubic"
-# CONFIG_TCP_MD5SIG is not set
-CONFIG_IPV6=y
 CONFIG_IPV6_PRIVACY=y
 CONFIG_IPV6_ROUTER_PREF=y
 CONFIG_IPV6_ROUTE_INFO=y
@@ -836,305 +147,100 @@ CONFIG_INET6_AH=y
 CONFIG_INET6_ESP=y
 CONFIG_INET6_IPCOMP=y
 CONFIG_IPV6_MIP6=y
-CONFIG_INET6_XFRM_TUNNEL=y
-CONFIG_INET6_TUNNEL=y
-CONFIG_INET6_XFRM_MODE_TRANSPORT=y
-CONFIG_INET6_XFRM_MODE_TUNNEL=y
-CONFIG_INET6_XFRM_MODE_BEET=y
-# CONFIG_INET6_XFRM_MODE_ROUTEOPTIMIZATION is not set
-CONFIG_IPV6_SIT=y
-# CONFIG_IPV6_SIT_6RD is not set
-CONFIG_IPV6_NDISC_NODETYPE=y
-# CONFIG_IPV6_TUNNEL is not set
 CONFIG_IPV6_MULTIPLE_TABLES=y
 CONFIG_IPV6_SUBTREES=y
-# CONFIG_IPV6_MROUTE is not set
-# CONFIG_NETLABEL is not set
-CONFIG_ANDROID_PARANOID_NETWORK=y
-CONFIG_NET_ACTIVITY_STATS=y
-CONFIG_NETWORK_SECMARK=y
-# CONFIG_NETWORK_PHY_TIMESTAMPING is not set
 CONFIG_NETFILTER=y
-# CONFIG_NETFILTER_DEBUG is not set
-CONFIG_NETFILTER_ADVANCED=y
-
-#
-# Core Netfilter Configuration
-#
-CONFIG_NETFILTER_NETLINK=y
-# CONFIG_NETFILTER_NETLINK_ACCT is not set
-CONFIG_NETFILTER_NETLINK_QUEUE=y
-CONFIG_NETFILTER_NETLINK_LOG=y
 CONFIG_NF_CONNTRACK=y
-CONFIG_NF_CONNTRACK_MARK=y
 CONFIG_NF_CONNTRACK_SECMARK=y
-CONFIG_NF_CONNTRACK_PROCFS=y
 CONFIG_NF_CONNTRACK_EVENTS=y
-# CONFIG_NF_CONNTRACK_TIMEOUT is not set
-# CONFIG_NF_CONNTRACK_TIMESTAMP is not set
 CONFIG_NF_CT_PROTO_DCCP=y
-CONFIG_NF_CT_PROTO_GRE=y
 CONFIG_NF_CT_PROTO_SCTP=y
 CONFIG_NF_CT_PROTO_UDPLITE=y
 CONFIG_NF_CONNTRACK_AMANDA=y
 CONFIG_NF_CONNTRACK_FTP=y
 CONFIG_NF_CONNTRACK_H323=y
 CONFIG_NF_CONNTRACK_IRC=y
-CONFIG_NF_CONNTRACK_BROADCAST=y
 CONFIG_NF_CONNTRACK_NETBIOS_NS=y
-# CONFIG_NF_CONNTRACK_SNMP is not set
 CONFIG_NF_CONNTRACK_PPTP=y
 CONFIG_NF_CONNTRACK_SANE=y
 CONFIG_NF_CONNTRACK_SIP=y
 CONFIG_NF_CONNTRACK_TFTP=y
 CONFIG_NF_CT_NETLINK=y
-# CONFIG_NF_CT_NETLINK_TIMEOUT is not set
 CONFIG_NETFILTER_TPROXY=y
-CONFIG_NETFILTER_XTABLES=y
-
-#
-# Xtables combined modules
-#
-CONFIG_NETFILTER_XT_MARK=y
-CONFIG_NETFILTER_XT_CONNMARK=y
-
-#
-# Xtables targets
-#
-# CONFIG_NETFILTER_XT_TARGET_AUDIT is not set
-# CONFIG_NETFILTER_XT_TARGET_CHECKSUM is not set
 CONFIG_NETFILTER_XT_TARGET_CLASSIFY=y
 CONFIG_NETFILTER_XT_TARGET_CONNMARK=y
 CONFIG_NETFILTER_XT_TARGET_CONNSECMARK=y
-# CONFIG_NETFILTER_XT_TARGET_CT is not set
-# CONFIG_NETFILTER_XT_TARGET_DSCP is not set
-# CONFIG_NETFILTER_XT_TARGET_HL is not set
-# CONFIG_NETFILTER_XT_TARGET_IDLETIMER is not set
-# CONFIG_NETFILTER_XT_TARGET_LED is not set
-# CONFIG_NETFILTER_XT_TARGET_LOG is not set
 CONFIG_NETFILTER_XT_TARGET_MARK=y
 CONFIG_NETFILTER_XT_TARGET_NFLOG=y
 CONFIG_NETFILTER_XT_TARGET_NFQUEUE=y
-# CONFIG_NETFILTER_XT_TARGET_NOTRACK is not set
-# CONFIG_NETFILTER_XT_TARGET_RATEEST is not set
-# CONFIG_NETFILTER_XT_TARGET_TEE is not set
 CONFIG_NETFILTER_XT_TARGET_TPROXY=y
 CONFIG_NETFILTER_XT_TARGET_TRACE=y
 CONFIG_NETFILTER_XT_TARGET_SECMARK=y
 CONFIG_NETFILTER_XT_TARGET_TCPMSS=y
-# CONFIG_NETFILTER_XT_TARGET_TCPOPTSTRIP is not set
-
-#
-# Xtables matches
-#
-# CONFIG_NETFILTER_XT_MATCH_ADDRTYPE is not set
-# CONFIG_NETFILTER_XT_MATCH_CLUSTER is not set
 CONFIG_NETFILTER_XT_MATCH_COMMENT=y
-# CONFIG_NETFILTER_XT_MATCH_CONNBYTES is not set
 CONFIG_NETFILTER_XT_MATCH_CONNLIMIT=y
 CONFIG_NETFILTER_XT_MATCH_CONNMARK=y
 CONFIG_NETFILTER_XT_MATCH_CONNTRACK=y
-# CONFIG_NETFILTER_XT_MATCH_CPU is not set
-# CONFIG_NETFILTER_XT_MATCH_DCCP is not set
-# CONFIG_NETFILTER_XT_MATCH_DEVGROUP is not set
-# CONFIG_NETFILTER_XT_MATCH_DSCP is not set
-CONFIG_NETFILTER_XT_MATCH_ECN=y
-# CONFIG_NETFILTER_XT_MATCH_ESP is not set
 CONFIG_NETFILTER_XT_MATCH_HASHLIMIT=y
 CONFIG_NETFILTER_XT_MATCH_HELPER=y
-CONFIG_NETFILTER_XT_MATCH_HL=y
 CONFIG_NETFILTER_XT_MATCH_IPRANGE=y
 CONFIG_NETFILTER_XT_MATCH_LENGTH=y
 CONFIG_NETFILTER_XT_MATCH_LIMIT=y
 CONFIG_NETFILTER_XT_MATCH_MAC=y
 CONFIG_NETFILTER_XT_MATCH_MARK=y
 CONFIG_NETFILTER_XT_MATCH_MULTIPORT=y
-# CONFIG_NETFILTER_XT_MATCH_NFACCT is not set
-# CONFIG_NETFILTER_XT_MATCH_OSF is not set
-# CONFIG_NETFILTER_XT_MATCH_OWNER is not set
 CONFIG_NETFILTER_XT_MATCH_POLICY=y
 CONFIG_NETFILTER_XT_MATCH_PKTTYPE=y
 CONFIG_NETFILTER_XT_MATCH_QTAGUID=y
 CONFIG_NETFILTER_XT_MATCH_QUOTA=y
 CONFIG_NETFILTER_XT_MATCH_QUOTA2=y
 CONFIG_NETFILTER_XT_MATCH_QUOTA2_LOG=y
-# CONFIG_NETFILTER_XT_MATCH_RATEEST is not set
-# CONFIG_NETFILTER_XT_MATCH_REALM is not set
-# CONFIG_NETFILTER_XT_MATCH_RECENT is not set
-# CONFIG_NETFILTER_XT_MATCH_SCTP is not set
 CONFIG_NETFILTER_XT_MATCH_SOCKET=y
 CONFIG_NETFILTER_XT_MATCH_STATE=y
 CONFIG_NETFILTER_XT_MATCH_STATISTIC=y
 CONFIG_NETFILTER_XT_MATCH_STRING=y
-# CONFIG_NETFILTER_XT_MATCH_TCPMSS is not set
 CONFIG_NETFILTER_XT_MATCH_TIME=y
 CONFIG_NETFILTER_XT_MATCH_U32=y
-# CONFIG_IP_SET is not set
-# CONFIG_IP_VS is not set
-
-#
-# IP: Netfilter Configuration
-#
-CONFIG_NF_DEFRAG_IPV4=y
 CONFIG_NF_CONNTRACK_IPV4=y
-CONFIG_NF_CONNTRACK_PROC_COMPAT=y
-# CONFIG_IP_NF_QUEUE is not set
 CONFIG_IP_NF_IPTABLES=y
 CONFIG_IP_NF_MATCH_AH=y
 CONFIG_IP_NF_MATCH_ECN=y
-# CONFIG_IP_NF_MATCH_RPFILTER is not set
 CONFIG_IP_NF_MATCH_TTL=y
 CONFIG_IP_NF_FILTER=y
 CONFIG_IP_NF_TARGET_REJECT=y
 CONFIG_IP_NF_TARGET_REJECT_SKERR=y
-# CONFIG_IP_NF_TARGET_ULOG is not set
 CONFIG_NF_NAT=y
-CONFIG_NF_NAT_NEEDED=y
 CONFIG_IP_NF_TARGET_MASQUERADE=y
 CONFIG_IP_NF_TARGET_NETMAP=y
 CONFIG_IP_NF_TARGET_REDIRECT=y
-CONFIG_NF_NAT_PROTO_DCCP=y
-CONFIG_NF_NAT_PROTO_GRE=y
-CONFIG_NF_NAT_PROTO_UDPLITE=y
-CONFIG_NF_NAT_PROTO_SCTP=y
-CONFIG_NF_NAT_FTP=y
-CONFIG_NF_NAT_IRC=y
-CONFIG_NF_NAT_TFTP=y
-CONFIG_NF_NAT_AMANDA=y
-CONFIG_NF_NAT_PPTP=y
-CONFIG_NF_NAT_H323=y
-CONFIG_NF_NAT_SIP=y
 CONFIG_IP_NF_MANGLE=y
-# CONFIG_IP_NF_TARGET_CLUSTERIP is not set
-# CONFIG_IP_NF_TARGET_ECN is not set
-# CONFIG_IP_NF_TARGET_TTL is not set
 CONFIG_IP_NF_RAW=y
 CONFIG_IP_NF_SECURITY=y
 CONFIG_IP_NF_ARPTABLES=y
 CONFIG_IP_NF_ARPFILTER=y
 CONFIG_IP_NF_ARP_MANGLE=y
-
-#
-# IPv6: Netfilter Configuration
-#
-CONFIG_NF_DEFRAG_IPV6=y
 CONFIG_NF_CONNTRACK_IPV6=y
-# CONFIG_IP6_NF_QUEUE is not set
 CONFIG_IP6_NF_IPTABLES=y
-# CONFIG_IP6_NF_MATCH_AH is not set
-# CONFIG_IP6_NF_MATCH_EUI64 is not set
-# CONFIG_IP6_NF_MATCH_FRAG is not set
-# CONFIG_IP6_NF_MATCH_OPTS is not set
-# CONFIG_IP6_NF_MATCH_HL is not set
-# CONFIG_IP6_NF_MATCH_IPV6HEADER is not set
-# CONFIG_IP6_NF_MATCH_MH is not set
-# CONFIG_IP6_NF_MATCH_RPFILTER is not set
-# CONFIG_IP6_NF_MATCH_RT is not set
-# CONFIG_IP6_NF_TARGET_HL is not set
 CONFIG_IP6_NF_FILTER=y
 CONFIG_IP6_NF_TARGET_REJECT=y
 CONFIG_IP6_NF_TARGET_REJECT_SKERR=y
 CONFIG_IP6_NF_MANGLE=y
 CONFIG_IP6_NF_RAW=y
-# CONFIG_IP6_NF_SECURITY is not set
-# CONFIG_IP_DCCP is not set
-# CONFIG_IP_SCTP is not set
-# CONFIG_RDS is not set
-# CONFIG_TIPC is not set
-# CONFIG_ATM is not set
 CONFIG_L2TP=y
-# CONFIG_L2TP_DEBUGFS is not set
-# CONFIG_L2TP_V3 is not set
-# CONFIG_BRIDGE is not set
-# CONFIG_NET_DSA is not set
-# CONFIG_VLAN_8021Q is not set
-# CONFIG_DECNET is not set
-# CONFIG_LLC2 is not set
-# CONFIG_IPX is not set
-# CONFIG_ATALK is not set
-# CONFIG_X25 is not set
-# CONFIG_LAPB is not set
-# CONFIG_ECONET is not set
-# CONFIG_WAN_ROUTER is not set
-# CONFIG_PHONET is not set
-# CONFIG_IEEE802154 is not set
 CONFIG_NET_SCHED=y
-
-#
-# Queueing/Scheduling
-#
-# CONFIG_NET_SCH_CBQ is not set
 CONFIG_NET_SCH_HTB=y
-# CONFIG_NET_SCH_HFSC is not set
 CONFIG_NET_SCH_PRIO=y
-# CONFIG_NET_SCH_MULTIQ is not set
-# CONFIG_NET_SCH_RED is not set
-# CONFIG_NET_SCH_SFB is not set
-# CONFIG_NET_SCH_SFQ is not set
-# CONFIG_NET_SCH_TEQL is not set
-# CONFIG_NET_SCH_TBF is not set
-# CONFIG_NET_SCH_GRED is not set
-# CONFIG_NET_SCH_DSMARK is not set
-# CONFIG_NET_SCH_NETEM is not set
-# CONFIG_NET_SCH_DRR is not set
-# CONFIG_NET_SCH_MQPRIO is not set
-# CONFIG_NET_SCH_CHOKE is not set
-# CONFIG_NET_SCH_QFQ is not set
-# CONFIG_NET_SCH_INGRESS is not set
-# CONFIG_NET_SCH_PLUG is not set
-
-#
-# Classification
-#
-CONFIG_NET_CLS=y
-# CONFIG_NET_CLS_BASIC is not set
-# CONFIG_NET_CLS_TCINDEX is not set
-# CONFIG_NET_CLS_ROUTE4 is not set
 CONFIG_NET_CLS_FW=y
 CONFIG_NET_CLS_U32=y
-# CONFIG_CLS_U32_PERF is not set
 CONFIG_CLS_U32_MARK=y
-# CONFIG_NET_CLS_RSVP is not set
-# CONFIG_NET_CLS_RSVP6 is not set
 CONFIG_NET_CLS_FLOW=y
-# CONFIG_NET_CLS_CGROUP is not set
 CONFIG_NET_EMATCH=y
-CONFIG_NET_EMATCH_STACK=32
 CONFIG_NET_EMATCH_CMP=y
 CONFIG_NET_EMATCH_NBYTE=y
 CONFIG_NET_EMATCH_U32=y
 CONFIG_NET_EMATCH_META=y
 CONFIG_NET_EMATCH_TEXT=y
 CONFIG_NET_CLS_ACT=y
-# CONFIG_NET_ACT_POLICE is not set
-# CONFIG_NET_ACT_GACT is not set
-# CONFIG_NET_ACT_MIRRED is not set
-# CONFIG_NET_ACT_IPT is not set
-# CONFIG_NET_ACT_NAT is not set
-# CONFIG_NET_ACT_PEDIT is not set
-# CONFIG_NET_ACT_SIMP is not set
-# CONFIG_NET_ACT_SKBEDIT is not set
-# CONFIG_NET_ACT_CSUM is not set
-# CONFIG_NET_CLS_IND is not set
-CONFIG_NET_SCH_FIFO=y
-# CONFIG_DCB is not set
-# CONFIG_BATMAN_ADV is not set
-# CONFIG_OPENVSWITCH is not set
-CONFIG_RPS=y
-CONFIG_RFS_ACCEL=y
-CONFIG_XPS=y
-# CONFIG_NETPRIO_CGROUP is not set
-CONFIG_BQL=y
-CONFIG_HAVE_BPF_JIT=y
-
-#
-# Network testing
-#
-# CONFIG_NET_PKTGEN is not set
-# CONFIG_NET_DROP_MONITOR is not set
-# CONFIG_HAMRADIO is not set
-# CONFIG_CAN is not set
-# CONFIG_IRDA is not set
 CONFIG_BT=y
 CONFIG_BT_RFCOMM=y
 CONFIG_BT_RFCOMM_TTY=y
@@ -1142,249 +248,40 @@ CONFIG_BT_BNEP=y
 CONFIG_BT_BNEP_MC_FILTER=y
 CONFIG_BT_BNEP_PROTO_FILTER=y
 CONFIG_BT_HIDP=y
-
-#
-# Bluetooth device drivers
-#
-# CONFIG_BT_HCISMD is not set
-# CONFIG_BT_HCIBTUSB is not set
-# CONFIG_BT_HCIBTSDIO is not set
-# CONFIG_BT_HCIUART is not set
-# CONFIG_BT_HCIBCM203X is not set
-# CONFIG_BT_HCIBPA10X is not set
-# CONFIG_BT_MSM_SLEEP is not set
-# CONFIG_BT_HCIBFUSB is not set
-# CONFIG_BT_HCIVHCI is not set
-# CONFIG_BT_MRVL is not set
 # CONFIG_MSM_BT_POWER is not set
-# CONFIG_AF_RXRPC is not set
-CONFIG_FIB_RULES=y
-CONFIG_WIRELESS=y
-CONFIG_WIRELESS_EXT=y
-CONFIG_WEXT_CORE=y
-CONFIG_WEXT_PROC=y
-CONFIG_WEXT_SPY=y
-CONFIG_WEXT_PRIV=y
 CONFIG_CFG80211=y
-# CONFIG_NL80211_TESTMODE is not set
-# CONFIG_CFG80211_DEVELOPER_WARNINGS is not set
-# CONFIG_CFG80211_REG_DEBUG is not set
-CONFIG_CFG80211_DEFAULT_PS=y
-# CONFIG_CFG80211_DEBUGFS is not set
 CONFIG_CFG80211_INTERNAL_REGDB=y
 # CONFIG_CFG80211_WEXT is not set
-# CONFIG_WIRELESS_EXT_SYSFS is not set
-# CONFIG_LIB80211 is not set
-# CONFIG_CFG80211_ALLOW_RECONNECT is not set
-# CONFIG_MAC80211 is not set
-# CONFIG_WIMAX is not set
 CONFIG_RFKILL=y
-CONFIG_RFKILL_PM=y
-CONFIG_RFKILL_LEDS=y
-# CONFIG_RFKILL_INPUT is not set
-# CONFIG_RFKILL_REGULATOR is not set
-# CONFIG_RFKILL_GPIO is not set
-# CONFIG_NET_9P is not set
-# CONFIG_CAIF is not set
-# CONFIG_CEPH_LIB is not set
-# CONFIG_NFC is not set
-# CONFIG_BCM2079X is not set
-
-#
-# Device Drivers
-#
-
-#
-# Generic Driver Options
-#
-CONFIG_UEVENT_HELPER_PATH=""
-# CONFIG_DEVTMPFS is not set
-CONFIG_STANDALONE=y
-CONFIG_PREVENT_FIRMWARE_BUILD=y
-CONFIG_FW_LOADER=y
-CONFIG_FIRMWARE_IN_KERNEL=y
-CONFIG_EXTRA_FIRMWARE=""
-# CONFIG_DEBUG_DRIVER is not set
-# CONFIG_DEBUG_DEVRES is not set
-# CONFIG_SYS_HYPERVISOR is not set
-# CONFIG_GENERIC_CPU_DEVICES is not set
-CONFIG_REGMAP=y
-CONFIG_REGMAP_I2C=y
-CONFIG_REGMAP_SPI=y
-CONFIG_DMA_SHARED_BUFFER=y
 CONFIG_GENLOCK=y
 CONFIG_GENLOCK_MISCDEVICE=y
 CONFIG_SYNC=y
 CONFIG_SW_SYNC=y
-# CONFIG_SW_SYNC_USER is not set
-# CONFIG_CMA is not set
 CONFIG_CONNECTOR=y
-CONFIG_PROC_EVENTS=y
-# CONFIG_MTD is not set
-# CONFIG_PARPORT is not set
-CONFIG_BLK_DEV=y
-# CONFIG_BLK_DEV_COW_COMMON is not set
 CONFIG_BLK_DEV_LOOP=y
-CONFIG_BLK_DEV_LOOP_MIN_COUNT=8
-# CONFIG_BLK_DEV_CRYPTOLOOP is not set
-# CONFIG_BLK_DEV_DRBD is not set
-# CONFIG_BLK_DEV_NBD is not set
-# CONFIG_BLK_DEV_UB is not set
 CONFIG_BLK_DEV_RAM=y
-CONFIG_BLK_DEV_RAM_COUNT=16
-CONFIG_BLK_DEV_RAM_SIZE=4096
-# CONFIG_BLK_DEV_XIP is not set
-# CONFIG_CDROM_PKTCDVD is not set
-# CONFIG_ATA_OVER_ETH is not set
-# CONFIG_MG_DISK is not set
-# CONFIG_BLK_DEV_RBD is not set
-
-#
-# Misc devices
-#
-# CONFIG_SENSORS_LIS3LV02D is not set
-# CONFIG_AD525X_DPOT is not set
-CONFIG_ANDROID_PMEM=y
-# CONFIG_ATMEL_PWM is not set
-# CONFIG_ICS932S401 is not set
-# CONFIG_ENCLOSURE_SERVICES is not set
-# CONFIG_APDS9802ALS is not set
-# CONFIG_ISL29003 is not set
-# CONFIG_ISL29020 is not set
-# CONFIG_SENSORS_TSL2550 is not set
-# CONFIG_SENSORS_BH1780 is not set
-# CONFIG_SENSORS_BH1770 is not set
-# CONFIG_SENSORS_APDS990X is not set
-# CONFIG_HMC6352 is not set
-# CONFIG_SENSORS_AK8975 is not set
-# CONFIG_DS1682 is not set
-# CONFIG_TI_DAC7512 is not set
 CONFIG_UID_STAT=y
-# CONFIG_BMP085 is not set
-# CONFIG_USB_SWITCH_FSA9480 is not set
-# CONFIG_WL127X_RFKILL is not set
-# CONFIG_TSIF is not set
-# CONFIG_TSPP is not set
 CONFIG_HAPTIC_ISA1200=y
-# CONFIG_PMIC8XXX_VIBRATOR is not set
-# CONFIG_ANDROID_VIBRATOR is not set
-# CONFIG_TOUCHSENSE_VIBRATOR is not set
-# CONFIG_PMIC8XXX_NFC is not set
-# CONFIG_PMIC8XXX_UPL is not set
 CONFIG_QSEECOM=y
-# CONFIG_QFP_FUSE is not set
 CONFIG_USB_HSIC_SMSC_HUB=y
-# CONFIG_BU52031NVX is not set
-# CONFIG_C2PORT is not set
-
-#
-# EEPROM support
-#
-# CONFIG_EEPROM_AT24 is not set
-# CONFIG_EEPROM_AT25 is not set
-# CONFIG_EEPROM_LEGACY is not set
-# CONFIG_EEPROM_MAX6875 is not set
-# CONFIG_EEPROM_93CX6 is not set
-# CONFIG_EEPROM_93XX46 is not set
-# CONFIG_IWMC3200TOP is not set
-
-#
-# Texas Instruments shared transport line discipline
-#
-# CONFIG_TI_ST is not set
-# CONFIG_SENSORS_LIS3_SPI is not set
-# CONFIG_SENSORS_LIS3_I2C is not set
-
-#
-# Altera FPGA firmware download module
-#
-# CONFIG_ALTERA_STAPL is not set
-# CONFIG_SLIMPORT_ANX7808 is not set
-
-#
-# SCSI device support
-#
-CONFIG_SCSI_MOD=y
-# CONFIG_RAID_ATTRS is not set
 CONFIG_SCSI=y
-CONFIG_SCSI_DMA=y
 CONFIG_SCSI_TGT=y
-# CONFIG_SCSI_NETLINK is not set
-CONFIG_SCSI_PROC_FS=y
-
-#
-# SCSI support type (disk, tape, CD-ROM)
-#
 CONFIG_BLK_DEV_SD=y
-# CONFIG_CHR_DEV_ST is not set
-# CONFIG_CHR_DEV_OSST is not set
-# CONFIG_BLK_DEV_SR is not set
 CONFIG_CHR_DEV_SG=y
 CONFIG_CHR_DEV_SCH=y
 CONFIG_SCSI_MULTI_LUN=y
 CONFIG_SCSI_CONSTANTS=y
 CONFIG_SCSI_LOGGING=y
 CONFIG_SCSI_SCAN_ASYNC=y
-
-#
-# SCSI Transports
-#
-# CONFIG_SCSI_SPI_ATTRS is not set
-# CONFIG_SCSI_FC_ATTRS is not set
-# CONFIG_SCSI_ISCSI_ATTRS is not set
-# CONFIG_SCSI_SAS_ATTRS is not set
-# CONFIG_SCSI_SAS_LIBSAS is not set
-# CONFIG_SCSI_SRP_ATTRS is not set
-CONFIG_SCSI_LOWLEVEL=y
-# CONFIG_ISCSI_TCP is not set
-# CONFIG_ISCSI_BOOT_SYSFS is not set
-# CONFIG_LIBFC is not set
-# CONFIG_LIBFCOE is not set
-# CONFIG_SCSI_DEBUG is not set
-# CONFIG_SCSI_DH is not set
-# CONFIG_SCSI_OSD_INITIATOR is not set
-# CONFIG_ATA is not set
 CONFIG_MD=y
-# CONFIG_BLK_DEV_MD is not set
 CONFIG_BLK_DEV_DM=y
-# CONFIG_DM_DEBUG is not set
 CONFIG_DM_CRYPT=y
-# CONFIG_DM_SNAPSHOT is not set
-# CONFIG_DM_THIN_PROVISIONING is not set
-# CONFIG_DM_MIRROR is not set
-# CONFIG_DM_RAID is not set
-# CONFIG_DM_ZERO is not set
-# CONFIG_DM_MULTIPATH is not set
-# CONFIG_DM_DELAY is not set
-# CONFIG_DM_UEVENT is not set
-# CONFIG_DM_FLAKEY is not set
-# CONFIG_DM_VERITY is not set
-# CONFIG_TARGET_CORE is not set
 CONFIG_NETDEVICES=y
-CONFIG_NET_CORE=y
-# CONFIG_BONDING is not set
 CONFIG_DUMMY=y
-# CONFIG_EQUALIZER is not set
-CONFIG_MII=y
-# CONFIG_IFB is not set
-# CONFIG_NET_TEAM is not set
-# CONFIG_MACVLAN is not set
-# CONFIG_NETCONSOLE is not set
-# CONFIG_NETPOLL is not set
-# CONFIG_NET_POLL_CONTROLLER is not set
 CONFIG_TUN=y
-# CONFIG_VETH is not set
-
-#
-# CAIF transport drivers
-#
-CONFIG_ETHERNET=y
 # CONFIG_NET_VENDOR_BROADCOM is not set
-# CONFIG_NET_CALXEDA_XGMAC is not set
 # CONFIG_NET_VENDOR_CHELSIO is not set
 # CONFIG_NET_VENDOR_CIRRUS is not set
-# CONFIG_DM9000 is not set
-# CONFIG_DNET is not set
 # CONFIG_NET_VENDOR_FARADAY is not set
 # CONFIG_NET_VENDOR_INTEL is not set
 # CONFIG_NET_VENDOR_MARVELL is not set
@@ -1393,14 +290,10 @@ CONFIG_ETHERNET=y
 # CONFIG_MSM_RMNET is not set
 CONFIG_MSM_RMNET_BAM=y
 CONFIG_MSM_RMNET_SMUX=y
-# CONFIG_QFEC is not set
 # CONFIG_NET_VENDOR_NATSEMI is not set
-# CONFIG_ETHOC is not set
 # CONFIG_NET_VENDOR_SEEQ is not set
 # CONFIG_NET_VENDOR_SMSC is not set
 # CONFIG_NET_VENDOR_STMICRO is not set
-# CONFIG_PHYLIB is not set
-# CONFIG_MICREL_KS8995MA is not set
 CONFIG_PPP=y
 CONFIG_PPP_BSDCOMP=y
 CONFIG_PPP_DEFLATE=y
@@ -1414,706 +307,83 @@ CONFIG_PPPOPNS=y
 CONFIG_PPP_ASYNC=y
 CONFIG_PPP_SYNC_TTY=y
 CONFIG_SLIP=y
-CONFIG_SLHC=y
 CONFIG_SLIP_COMPRESSED=y
-# CONFIG_SLIP_SMART is not set
 CONFIG_SLIP_MODE_SLIP6=y
-
-#
-# USB Network Adapters
-#
-# CONFIG_USB_CATC is not set
-# CONFIG_USB_KAWETH is not set
-# CONFIG_USB_PEGASUS is not set
-# CONFIG_USB_RTL8150 is not set
 CONFIG_USB_USBNET=y
-CONFIG_USB_NET_AX8817X=y
-CONFIG_USB_NET_CDCETHER=y
-# CONFIG_USB_NET_CDC_EEM is not set
-CONFIG_USB_NET_CDC_NCM=y
-# CONFIG_USB_NET_DM9601 is not set
-# CONFIG_USB_NET_SMSC75XX is not set
-# CONFIG_USB_NET_SMSC95XX is not set
-# CONFIG_USB_NET_GL620A is not set
-CONFIG_USB_NET_NET1080=y
-# CONFIG_USB_NET_PLUSB is not set
-# CONFIG_USB_NET_MCS7830 is not set
-# CONFIG_USB_NET_RNDIS_HOST is not set
-CONFIG_USB_NET_CDC_SUBSET=y
-# CONFIG_USB_ALI_M5632 is not set
-# CONFIG_USB_AN2720 is not set
-CONFIG_USB_BELKIN=y
-CONFIG_USB_ARMLINUX=y
-# CONFIG_USB_EPSON2888 is not set
-# CONFIG_USB_KC2190 is not set
-CONFIG_USB_NET_ZAURUS=y
-# CONFIG_USB_NET_CX82310_ETH is not set
-# CONFIG_USB_NET_KALMIA is not set
-# CONFIG_USB_NET_QMI_WWAN is not set
-# CONFIG_USB_HSO is not set
-# CONFIG_USB_NET_INT51X1 is not set
-# CONFIG_USB_IPHETH is not set
-# CONFIG_USB_SIERRA_NET is not set
-# CONFIG_USB_VL600 is not set
 CONFIG_MSM_RMNET_USB=y
-CONFIG_WLAN=y
-# CONFIG_USB_ZD1201 is not set
-# CONFIG_USB_NET_RNDIS_WLAN is not set
-# CONFIG_LIBRA_SDIOIF is not set
-# CONFIG_ATH6K_LEGACY_EXT is not set
 CONFIG_WCNSS_CORE=y
-# CONFIG_WCNSS_MEM_PRE_ALLOC is not set
-# CONFIG_ATH_COMMON is not set
-# CONFIG_BCMDHD is not set
-# CONFIG_BRCMFMAC is not set
-# CONFIG_HOSTAP is not set
-# CONFIG_IWM is not set
-# CONFIG_LIBERTAS is not set
-# CONFIG_MWIFIEX is not set
-
-#
-# Enable WiMAX (Networking options) to see the WiMAX drivers
-#
-# CONFIG_WAN is not set
-# CONFIG_ISDN is not set
-
-#
-# Input device support
-#
-CONFIG_INPUT=y
-# CONFIG_INPUT_FF_MEMLESS is not set
-# CONFIG_INPUT_POLLDEV is not set
-# CONFIG_INPUT_SPARSEKMAP is not set
-
-#
-# Userland interfaces
-#
 # CONFIG_INPUT_MOUSEDEV is not set
-# CONFIG_INPUT_JOYDEV is not set
 CONFIG_INPUT_EVDEV=y
-# CONFIG_INPUT_EVBUG is not set
 CONFIG_INPUT_KEYRESET=y
-# CONFIG_INPUT_LID is not set
-
-#
-# Input Device Drivers
-#
-CONFIG_INPUT_KEYBOARD=y
-# CONFIG_KEYBOARD_ADP5588 is not set
-# CONFIG_KEYBOARD_ADP5589 is not set
 # CONFIG_KEYBOARD_ATKBD is not set
-# CONFIG_KEYBOARD_QT1070 is not set
-# CONFIG_KEYBOARD_QT2160 is not set
-# CONFIG_KEYBOARD_LKKBD is not set
-# CONFIG_KEYBOARD_GPIO is not set
-# CONFIG_KEYBOARD_TCA6416 is not set
-# CONFIG_KEYBOARD_TCA8418 is not set
-# CONFIG_KEYBOARD_MATRIX is not set
-# CONFIG_KEYBOARD_LM8323 is not set
-# CONFIG_KEYBOARD_MAX7359 is not set
-# CONFIG_KEYBOARD_MCS is not set
-# CONFIG_KEYBOARD_MPR121 is not set
-# CONFIG_KEYBOARD_NEWTON is not set
-# CONFIG_KEYBOARD_OPENCORES is not set
 CONFIG_KEYBOARD_PMIC8XXX=y
-# CONFIG_KEYBOARD_SAMSUNG is not set
-# CONFIG_KEYBOARD_STOWAWAY is not set
-# CONFIG_KEYBOARD_SUNKBD is not set
-# CONFIG_KEYBOARD_OMAP4 is not set
-# CONFIG_KEYBOARD_XTKBD is not set
-# CONFIG_KEYBOARD_QCIKBD is not set
 # CONFIG_INPUT_MOUSE is not set
-# CONFIG_INPUT_JOYSTICK is not set
-# CONFIG_INPUT_TABLET is not set
 CONFIG_INPUT_TOUCHSCREEN=y
-# CONFIG_TOUCHSCREEN_ADS7846 is not set
-# CONFIG_TOUCHSCREEN_AD7877 is not set
-# CONFIG_TOUCHSCREEN_ATMEL_MAXTOUCH is not set
-# CONFIG_TOUCHSCREEN_AD7879 is not set
 CONFIG_TOUCHSCREEN_ATMEL_MXT=y
-# CONFIG_TOUCHSCREEN_AUO_PIXCIR is not set
-# CONFIG_TOUCHSCREEN_BU21013 is not set
-# CONFIG_TOUCHSCREEN_CY8CTMG110 is not set
-# CONFIG_TOUCHSCREEN_CYTTSP_CORE is not set
-# CONFIG_TOUCHSCREEN_DYNAPRO is not set
-# CONFIG_TOUCHSCREEN_HAMPSHIRE is not set
-# CONFIG_TOUCHSCREEN_EETI is not set
-# CONFIG_TOUCHSCREEN_EGALAX is not set
-# CONFIG_TOUCHSCREEN_FUJITSU is not set
-# CONFIG_TOUCHSCREEN_ILI210X is not set
-# CONFIG_TOUCHSCREEN_GUNZE is not set
-# CONFIG_TOUCHSCREEN_ELO is not set
-# CONFIG_TOUCHSCREEN_WACOM_W8001 is not set
-# CONFIG_TOUCHSCREEN_MAX11801 is not set
-# CONFIG_TOUCHSCREEN_MCS5000 is not set
-# CONFIG_TOUCHSCREEN_MTOUCH is not set
-# CONFIG_TOUCHSCREEN_INEXIO is not set
-# CONFIG_TOUCHSCREEN_MK712 is not set
-# CONFIG_TOUCHSCREEN_PENMOUNT is not set
-# CONFIG_TOUCHSCREEN_SYNAPTICS_I2C_RMI is not set
-# CONFIG_TOUCHSCREEN_SYNAPTICS_RMI4_I2C is not set
-# CONFIG_TOUCHSCREEN_TOUCHRIGHT is not set
-# CONFIG_TOUCHSCREEN_TOUCHWIN is not set
-# CONFIG_TOUCHSCREEN_PIXCIR is not set
-# CONFIG_TOUCHSCREEN_USB_COMPOSITE is not set
-# CONFIG_TOUCHSCREEN_TOUCHIT213 is not set
-# CONFIG_TOUCHSCREEN_TSC_SERIO is not set
-# CONFIG_TOUCHSCREEN_TSC2005 is not set
-# CONFIG_TOUCHSCREEN_TSC2007 is not set
-# CONFIG_TOUCHSCREEN_MSM_LEGACY is not set
-# CONFIG_TOUCHSCREEN_W90X900 is not set
-# CONFIG_TOUCHSCREEN_ST1232 is not set
-# CONFIG_TOUCHSCREEN_TPS6507X is not set
-# CONFIG_TOUCHSCREEN_CY8C_TS is not set
-# CONFIG_TOUCHSCREEN_CYTTSP_I2C_QC is not set
-# CONFIG_TOUCHSCREEN_FT5X06 is not set
-# CONFIG_TOUCHSCREEN_LGE_COMMON is not set
-# CONFIG_TOUCHSCREEN_LGE_SYNAPTICS is not set
-# CONFIG_TOUCHSCREEN_ELAN_TF_3K is not set
 CONFIG_INPUT_MISC=y
-# CONFIG_INPUT_AD714X is not set
-# CONFIG_INPUT_BMA150 is not set
-# CONFIG_INPUT_PM8XXX_VIBRATOR is not set
 CONFIG_INPUT_PMIC8XXX_PWRKEY=y
-# CONFIG_INPUT_MMA8450 is not set
-# CONFIG_INPUT_MPU3050 is not set
-# CONFIG_INPUT_GP2A is not set
-# CONFIG_INPUT_GPIO_TILT_POLLED is not set
-# CONFIG_INPUT_ATI_REMOTE2 is not set
 CONFIG_INPUT_KEYCHORD=y
-# CONFIG_INPUT_KEYSPAN_REMOTE is not set
-# CONFIG_INPUT_KXTJ9 is not set
-# CONFIG_INPUT_POWERMATE is not set
-# CONFIG_INPUT_YEALINK is not set
-# CONFIG_INPUT_CM109 is not set
 CONFIG_INPUT_UINPUT=y
-# CONFIG_INPUT_GPIO is not set
-# CONFIG_INPUT_ISA1200_FF_MEMLESS is not set
-# CONFIG_INPUT_PCF8574 is not set
-# CONFIG_INPUT_GPIO_ROTARY_ENCODER is not set
-# CONFIG_INPUT_ADXL34X is not set
-# CONFIG_INPUT_CMA3000 is not set
-# CONFIG_BOSCH_BMA150 is not set
-# CONFIG_STM_LIS3DH is not set
-# CONFIG_BMP18X is not set
 CONFIG_RMI4_BUS=y
 CONFIG_RMI4_DEBUG=y
-# CONFIG_RMI4_SPECIAL_EARLYSUSPEND is not set
 CONFIG_RMI4_FWLIB=y
 CONFIG_RMI4_I2C=y
-# CONFIG_RMI4_SPI is not set
-# CONFIG_RMI4_SMB is not set
 CONFIG_RMI4_GENERIC=y
 CONFIG_RMI4_F1A=y
-# CONFIG_RMI4_F09 is not set
 CONFIG_RMI4_F11=y
-# CONFIG_RMI4_F11_PEN is not set
 CONFIG_RMI4_F11_TYPEB=y
-# CONFIG_RMI4_VIRTUAL_BUTTON is not set
-# CONFIG_RMI4_F17 is not set
-# CONFIG_RMI4_F19 is not set
-# CONFIG_RMI4_F21 is not set
-# CONFIG_RMI4_F30 is not set
-# CONFIG_RMI4_F34 is not set
-# CONFIG_RMI4_F41 is not set
 CONFIG_RMI4_F54=y
 CONFIG_RMI4_DEV=y
-
-#
-# Hardware I/O ports
-#
 # CONFIG_SERIO is not set
-# CONFIG_GAMEPORT is not set
-
-#
-# Character devices
-#
-CONFIG_VT=y
-CONFIG_CONSOLE_TRANSLATIONS=y
-CONFIG_VT_CONSOLE=y
-CONFIG_VT_CONSOLE_SLEEP=y
-CONFIG_HW_CONSOLE=y
-# CONFIG_VT_HW_CONSOLE_BINDING is not set
-CONFIG_UNIX98_PTYS=y
-# CONFIG_DEVPTS_MULTIPLE_INSTANCES is not set
 # CONFIG_LEGACY_PTYS is not set
-# CONFIG_SERIAL_NONSTANDARD is not set
-# CONFIG_N_GSM is not set
 CONFIG_N_SMUX=y
 CONFIG_N_SMUX_LOOPBACK=y
 CONFIG_SMUX_CTL=y
-# CONFIG_TRACE_SINK is not set
-CONFIG_DEVMEM=y
-CONFIG_DEVKMEM=y
-
-#
-# Serial drivers
-#
-# CONFIG_SERIAL_8250 is not set
-
-#
-# Non-8250 serial port support
-#
-# CONFIG_SERIAL_MAX3100 is not set
-# CONFIG_SERIAL_MAX3107 is not set
-CONFIG_SERIAL_CORE=y
-CONFIG_SERIAL_CORE_CONSOLE=y
-# CONFIG_SERIAL_MSM is not set
 CONFIG_SERIAL_MSM_HS=y
 CONFIG_SERIAL_MSM_HSL=y
 CONFIG_SERIAL_MSM_HSL_CONSOLE=y
-# CONFIG_SERIAL_BCM_BT_LPM is not set
-# CONFIG_SERIAL_TIMBERDALE is not set
-# CONFIG_SERIAL_ALTERA_JTAGUART is not set
-# CONFIG_SERIAL_ALTERA_UART is not set
-# CONFIG_SERIAL_IFX6X60 is not set
-# CONFIG_SERIAL_MSM_SMD is not set
-# CONFIG_SERIAL_XILINX_PS_UART is not set
-
-#
-# Diag Support
-#
-CONFIG_DIAG_CHAR=y
-
-#
-# DIAG traffic over USB
-#
-CONFIG_DIAG_OVER_USB=y
-
-#
-# SDIO support for DIAG
-#
-
-#
-# HSIC/SMUX support for DIAG
-#
-CONFIG_DIAGFWD_BRIDGE_CODE=y
-# CONFIG_TTY_PRINTK is not set
-# CONFIG_HVC_DCC is not set
-# CONFIG_IPMI_HANDLER is not set
-CONFIG_HW_RANDOM=y
-# CONFIG_HW_RANDOM_TIMERIOMEM is not set
 CONFIG_HW_RANDOM_MSM=y
-# CONFIG_R3964 is not set
-# CONFIG_RAW_DRIVER is not set
-# CONFIG_TCG_TPM is not set
-# CONFIG_DCC_TTY is not set
-# CONFIG_RAMOOPS is not set
-CONFIG_MSM_ROTATOR=y
-CONFIG_MSM_ADSPRPC=y
-# CONFIG_MMC_GENERIC_CSDIO is not set
 CONFIG_I2C=y
-CONFIG_I2C_BOARDINFO=y
-CONFIG_I2C_COMPAT=y
 CONFIG_I2C_CHARDEV=y
-# CONFIG_I2C_MUX is not set
-CONFIG_I2C_HELPER_AUTO=y
-
-#
-# I2C Hardware Bus support
-#
-
-#
-# I2C system bus drivers (mostly embedded / system-on-chip)
-#
-# CONFIG_I2C_DESIGNWARE_PLATFORM is not set
-# CONFIG_I2C_GPIO is not set
 # CONFIG_I2C_MSM is not set
 CONFIG_I2C_QUP=y
-# CONFIG_I2C_OCORES is not set
-# CONFIG_I2C_PCA_PLATFORM is not set
-# CONFIG_I2C_PXA_PCI is not set
-# CONFIG_I2C_SIMTEC is not set
-# CONFIG_I2C_XILINX is not set
-
-#
-# External I2C/SMBus adapter drivers
-#
-# CONFIG_I2C_DIOLAN_U2C is not set
-# CONFIG_I2C_PARPORT_LIGHT is not set
-# CONFIG_I2C_TAOS_EVM is not set
-# CONFIG_I2C_TINY_USB is not set
-
-#
-# Other I2C/SMBus bus drivers
-#
-# CONFIG_I2C_DEBUG_CORE is not set
-# CONFIG_I2C_DEBUG_ALGO is not set
-# CONFIG_I2C_DEBUG_BUS is not set
 CONFIG_SPI=y
-# CONFIG_SPI_DEBUG is not set
-CONFIG_SPI_MASTER=y
-
-#
-# SPI Master Controller Drivers
-#
-# CONFIG_SPI_ALTERA is not set
-# CONFIG_SPI_BITBANG is not set
-# CONFIG_SPI_GPIO is not set
-# CONFIG_SPI_OC_TINY is not set
-# CONFIG_SPI_PXA2XX_PCI is not set
-# CONFIG_SPI_XILINX is not set
 CONFIG_SPI_QUP=y
-# CONFIG_SPI_DESIGNWARE is not set
-
-#
-# SPI Protocol Masters
-#
-# CONFIG_SPI_SPIDEV is not set
-# CONFIG_SPI_TLE62X0 is not set
-# CONFIG_SPMI is not set
-CONFIG_SLIMBUS=y
 CONFIG_SLIMBUS_MSM_CTRL=y
-# CONFIG_HSI is not set
-
-#
-# PPS support
-#
-# CONFIG_PPS is not set
-
-#
-# PPS generators support
-#
-
-#
-# PTP clock support
-#
-
-#
-# Enable Device Drivers -> PPS to see the PTP clock options.
-#
-CONFIG_ARCH_REQUIRE_GPIOLIB=y
-CONFIG_GPIOLIB=y
 CONFIG_DEBUG_GPIO=y
 CONFIG_GPIO_SYSFS=y
-
-#
-# Memory mapped GPIO drivers:
-#
-# CONFIG_GPIO_GENERIC_PLATFORM is not set
-# CONFIG_GPIO_MSM_V1 is not set
-CONFIG_GPIO_MSM_V2=y
-# CONFIG_GPIO_MSM_V3 is not set
-# CONFIG_GPIO_FSM9XXX is not set
-
-#
-# I2C GPIO expanders:
-#
-# CONFIG_GPIO_MAX7300 is not set
-# CONFIG_GPIO_MAX732X is not set
-# CONFIG_GPIO_PCF857X is not set
-# CONFIG_GPIO_SX150X is not set
-# CONFIG_GPIO_ADP5588 is not set
-
-#
-# PCI GPIO expanders:
-#
-
-#
-# SPI GPIO expanders:
-#
-# CONFIG_GPIO_MAX7301 is not set
-# CONFIG_GPIO_MCP23S08 is not set
-# CONFIG_GPIO_MC33880 is not set
-# CONFIG_GPIO_74X164 is not set
-
-#
-# AC97 GPIO expanders:
-#
-
-#
-# MODULbus GPIO expanders:
-#
-CONFIG_GPIO_PM8XXX=y
-CONFIG_GPIO_PM8XXX_MPP=y
-# CONFIG_GPIO_PM8XXX_RPC is not set
-# CONFIG_W1 is not set
 CONFIG_POWER_SUPPLY=y
-# CONFIG_POWER_SUPPLY_DEBUG is not set
-# CONFIG_PDA_POWER is not set
-# CONFIG_TEST_POWER is not set
-# CONFIG_CHARGER_SMB345 is not set
-# CONFIG_BATTERY_DS2780 is not set
-# CONFIG_BATTERY_DS2781 is not set
-# CONFIG_BATTERY_DS2782 is not set
-# CONFIG_BATTERY_SBS is not set
-# CONFIG_BATTERY_BQ27x00 is not set
-# CONFIG_BATTERY_MAX17040 is not set
-# CONFIG_BATTERY_MAX17042 is not set
-# CONFIG_CHARGER_ISP1704 is not set
-# CONFIG_CHARGER_MAX8903 is not set
-# CONFIG_CHARGER_LP8727 is not set
-# CONFIG_CHARGER_GPIO is not set
-# CONFIG_CHARGER_MANAGER is not set
 # CONFIG_BATTERY_MSM is not set
-# CONFIG_BATTERY_MSM8X60 is not set
 CONFIG_ISL9519_CHARGER=y
-# CONFIG_SMB137B_CHARGER is not set
-# CONFIG_SMB349_CHARGER is not set
-# CONFIG_BATTERY_BQ27520 is not set
-# CONFIG_BATTERY_BQ27541 is not set
 CONFIG_PM8921_CHARGER=y
-CONFIG_PM8XXX_CCADC=y
-# CONFIG_LTC4088_CHARGER is not set
 CONFIG_PM8921_BMS=y
-# CONFIG_CHARGER_SMB347 is not set
-# CONFIG_WIRELESS_CHARGER is not set
-# CONFIG_BATTERY_TEMP_CONTROL is not set
-# CONFIG_BATTERY_ASUS_BQ27541 is not set
-CONFIG_HWMON=y
-# CONFIG_HWMON_VID is not set
-# CONFIG_HWMON_DEBUG_CHIP is not set
-
-#
-# Native drivers
-#
-# CONFIG_SENSORS_AD7314 is not set
-# CONFIG_SENSORS_AD7414 is not set
-# CONFIG_SENSORS_AD7418 is not set
-# CONFIG_SENSORS_ADCXX is not set
-# CONFIG_SENSORS_ADM1021 is not set
-# CONFIG_SENSORS_ADM1025 is not set
-# CONFIG_SENSORS_ADM1026 is not set
-# CONFIG_SENSORS_ADM1029 is not set
-# CONFIG_SENSORS_ADM1031 is not set
-# CONFIG_SENSORS_ADM9240 is not set
-# CONFIG_SENSORS_ADT7411 is not set
-# CONFIG_SENSORS_ADT7462 is not set
-# CONFIG_SENSORS_ADT7470 is not set
-# CONFIG_SENSORS_ADT7475 is not set
-# CONFIG_SENSORS_ASC7621 is not set
-# CONFIG_SENSORS_ATXP1 is not set
-# CONFIG_SENSORS_DS620 is not set
-# CONFIG_SENSORS_DS1621 is not set
-# CONFIG_SENSORS_F71805F is not set
-# CONFIG_SENSORS_F71882FG is not set
-# CONFIG_SENSORS_F75375S is not set
-# CONFIG_SENSORS_G760A is not set
-# CONFIG_SENSORS_GL518SM is not set
-# CONFIG_SENSORS_GL520SM is not set
-# CONFIG_SENSORS_GPIO_FAN is not set
-# CONFIG_SENSORS_IT87 is not set
-# CONFIG_SENSORS_JC42 is not set
-# CONFIG_SENSORS_LINEAGE is not set
-# CONFIG_SENSORS_LM63 is not set
-# CONFIG_SENSORS_LM70 is not set
-# CONFIG_SENSORS_LM73 is not set
-# CONFIG_SENSORS_LM75 is not set
-# CONFIG_SENSORS_LM77 is not set
-# CONFIG_SENSORS_LM78 is not set
-# CONFIG_SENSORS_LM80 is not set
-# CONFIG_SENSORS_LM83 is not set
-# CONFIG_SENSORS_LM85 is not set
-# CONFIG_SENSORS_LM87 is not set
-# CONFIG_SENSORS_LM90 is not set
-# CONFIG_SENSORS_LM92 is not set
-# CONFIG_SENSORS_LM93 is not set
-# CONFIG_SENSORS_LTC4151 is not set
-# CONFIG_SENSORS_LTC4215 is not set
-# CONFIG_SENSORS_LTC4245 is not set
-# CONFIG_SENSORS_LTC4261 is not set
-# CONFIG_SENSORS_LM95241 is not set
-# CONFIG_SENSORS_LM95245 is not set
-# CONFIG_SENSORS_MAX1111 is not set
-# CONFIG_SENSORS_MAX16065 is not set
-# CONFIG_SENSORS_MAX1619 is not set
-# CONFIG_SENSORS_MAX1668 is not set
-# CONFIG_SENSORS_MAX6639 is not set
-# CONFIG_SENSORS_MAX6642 is not set
-# CONFIG_SENSORS_MAX6650 is not set
-# CONFIG_SENSORS_MCP3021 is not set
-# CONFIG_SENSORS_NTC_THERMISTOR is not set
 CONFIG_SENSORS_PM8XXX_ADC=y
-# CONFIG_SENSORS_EPM_ADC is not set
-# CONFIG_SENSORS_PC87360 is not set
-# CONFIG_SENSORS_PC87427 is not set
-# CONFIG_SENSORS_PCF8591 is not set
-# CONFIG_PMBUS is not set
-# CONFIG_SENSORS_SHT15 is not set
-# CONFIG_SENSORS_SHT21 is not set
-# CONFIG_SENSORS_SMM665 is not set
-# CONFIG_SENSORS_DME1737 is not set
-# CONFIG_SENSORS_EMC1403 is not set
-# CONFIG_SENSORS_EMC2103 is not set
-# CONFIG_SENSORS_EMC6W201 is not set
-# CONFIG_SENSORS_SMSC47M1 is not set
-# CONFIG_SENSORS_SMSC47M192 is not set
-# CONFIG_SENSORS_SMSC47B397 is not set
-# CONFIG_SENSORS_SCH56XX_COMMON is not set
-# CONFIG_SENSORS_SCH5627 is not set
-# CONFIG_SENSORS_SCH5636 is not set
-# CONFIG_SENSORS_ADS1015 is not set
-# CONFIG_SENSORS_ADS7828 is not set
-# CONFIG_SENSORS_ADS7871 is not set
-# CONFIG_SENSORS_AMC6821 is not set
-# CONFIG_SENSORS_THMC50 is not set
-# CONFIG_SENSORS_TMP102 is not set
-# CONFIG_SENSORS_TMP401 is not set
-# CONFIG_SENSORS_TMP421 is not set
-# CONFIG_SENSORS_VT1211 is not set
-# CONFIG_SENSORS_W83781D is not set
-# CONFIG_SENSORS_W83791D is not set
-# CONFIG_SENSORS_W83792D is not set
-# CONFIG_SENSORS_W83793 is not set
-# CONFIG_SENSORS_W83795 is not set
-# CONFIG_SENSORS_W83L785TS is not set
-# CONFIG_SENSORS_W83L786NG is not set
-# CONFIG_SENSORS_W83627HF is not set
-# CONFIG_SENSORS_W83627EHF is not set
-# CONFIG_SENSORS_CAP1106 is not set
 CONFIG_THERMAL=y
-CONFIG_THERMAL_HWMON=y
-# CONFIG_THERMAL_MSM_POPMEM is not set
-# CONFIG_THERMAL_TSENS is not set
 CONFIG_THERMAL_TSENS8960=y
-# CONFIG_THERMAL_TSENS8974 is not set
 CONFIG_THERMAL_PM8XXX=y
+CONFIG_INTELLI_THERMAL=y
 CONFIG_THERMAL_MONITOR=y
-# CONFIG_WATCHDOG is not set
-CONFIG_SSB_POSSIBLE=y
-
-#
-# Sonics Silicon Backplane
-#
-# CONFIG_SSB is not set
-CONFIG_BCMA_POSSIBLE=y
-
-#
-# Broadcom specific AMBA
-#
-# CONFIG_BCMA is not set
-
-#
-# Multifunction device drivers
-#
-CONFIG_MFD_CORE=y
-# CONFIG_MFD_88PM860X is not set
-# CONFIG_MFD_SM501 is not set
-# CONFIG_MFD_ASIC3 is not set
-# CONFIG_HTC_EGPIO is not set
-# CONFIG_HTC_PASIC3 is not set
-# CONFIG_HTC_I2CPLD is not set
-# CONFIG_TPS6105X is not set
-# CONFIG_TPS65010 is not set
-# CONFIG_PMIC8058 is not set
-# CONFIG_PMIC8901 is not set
-# CONFIG_TPS6507X is not set
-# CONFIG_MFD_TPS65217 is not set
-# CONFIG_MFD_TPS6586X is not set
-# CONFIG_MFD_TPS65910 is not set
-# CONFIG_MFD_TPS65912_I2C is not set
-# CONFIG_MFD_TPS65912_SPI is not set
-# CONFIG_TWL4030_CORE is not set
-# CONFIG_TWL6040_CORE is not set
-# CONFIG_MFD_STMPE is not set
-# CONFIG_MFD_TC3589X is not set
-# CONFIG_MFD_TMIO is not set
-# CONFIG_MFD_T7L66XB is not set
-# CONFIG_MFD_TC6387XB is not set
-# CONFIG_MFD_TC6393XB is not set
-# CONFIG_PMIC_DA903X is not set
-# CONFIG_MFD_DA9052_SPI is not set
-# CONFIG_MFD_DA9052_I2C is not set
-# CONFIG_PMIC_ADP5520 is not set
-# CONFIG_MFD_MAX8925 is not set
-# CONFIG_MFD_MAX8997 is not set
-# CONFIG_MFD_MAX8998 is not set
-# CONFIG_MFD_S5M_CORE is not set
-# CONFIG_MFD_WM8400 is not set
-# CONFIG_MFD_WM831X_I2C is not set
-# CONFIG_MFD_WM831X_SPI is not set
-# CONFIG_MFD_WM8350_I2C is not set
-# CONFIG_MFD_WM8994 is not set
-# CONFIG_MFD_PCF50633 is not set
-# CONFIG_MFD_MC13XXX is not set
-# CONFIG_ABX500_CORE is not set
-# CONFIG_EZX_PCAP is not set
-# CONFIG_MFD_WL1273_CORE is not set
-CONFIG_MFD_PM8XXX=y
 CONFIG_MFD_PM8921_CORE=y
 CONFIG_MFD_PM8821_CORE=y
-# CONFIG_MFD_PM8018_CORE is not set
 CONFIG_MFD_PM8038_CORE=y
-CONFIG_MFD_PM8XXX_IRQ=y
-CONFIG_MFD_PM8821_IRQ=y
-# CONFIG_MFD_TPS65090 is not set
-# CONFIG_MFD_AAT2870_CORE is not set
-CONFIG_MFD_PM8XXX_DEBUG=y
-CONFIG_MFD_PM8XXX_PWM=y
-CONFIG_MFD_PM8XXX_MISC=y
 CONFIG_MFD_PM8XXX_SPK=y
 CONFIG_MFD_PM8XXX_BATT_ALARM=y
 CONFIG_WCD9304_CODEC=y
 CONFIG_WCD9310_CODEC=y
-# CONFIG_WCD9320_CODEC is not set
-# CONFIG_MFD_RC5T583 is not set
-CONFIG_REGULATOR=y
-# CONFIG_REGULATOR_DEBUG is not set
-# CONFIG_REGULATOR_DUMMY is not set
-# CONFIG_REGULATOR_FIXED_VOLTAGE is not set
-# CONFIG_REGULATOR_VIRTUAL_CONSUMER is not set
-# CONFIG_REGULATOR_USERSPACE_CONSUMER is not set
-# CONFIG_REGULATOR_GPIO is not set
-# CONFIG_REGULATOR_AD5398 is not set
-# CONFIG_REGULATOR_ISL6271A is not set
-# CONFIG_REGULATOR_MAX1586 is not set
-# CONFIG_REGULATOR_MAX8649 is not set
-# CONFIG_REGULATOR_MAX8660 is not set
-# CONFIG_REGULATOR_MAX8952 is not set
-# CONFIG_REGULATOR_LP3971 is not set
-# CONFIG_REGULATOR_LP3972 is not set
-# CONFIG_REGULATOR_TPS62360 is not set
-# CONFIG_REGULATOR_TPS65023 is not set
-# CONFIG_REGULATOR_TPS6507X is not set
-# CONFIG_REGULATOR_TPS6524X is not set
 CONFIG_REGULATOR_PM8XXX=y
 CONFIG_REGULATOR_MSM_GPIO=y
-# CONFIG_REGULATOR_STUB is not set
 CONFIG_MEDIA_SUPPORT=y
-
-#
-# Multimedia core support
-#
 CONFIG_MEDIA_CONTROLLER=y
 CONFIG_VIDEO_DEV=y
-CONFIG_VIDEO_V4L2_COMMON=y
 CONFIG_VIDEO_V4L2_SUBDEV_API=y
-# CONFIG_DVB_CORE is not set
-CONFIG_VIDEO_MEDIA=y
-
-#
-# Multimedia drivers
-#
 # CONFIG_RC_CORE is not set
-
-#
-# Qualcomm MSM Camera And Video
-#
-CONFIG_MSM_CAMERA=y
 # CONFIG_MSM_CAMERA_V1 is not set
-# CONFIG_MSM_CAMERA_DEBUG is not set
-CONFIG_MSM_CAMERA_LEGACY=y
 CONFIG_MSM_CAMERA_V4L2=y
-
-#
-# Camera Sensor Selection
-#
-# CONFIG_IMX074 is not set
 CONFIG_IMX175=y
 CONFIG_IMX132=y
-# CONFIG_OV5647 is not set
-# CONFIG_MT9M114 is not set
-# CONFIG_IMX074_ACT is not set
-# CONFIG_IMX175_ACT is not set
-# CONFIG_S5K4E1 is not set
-# CONFIG_MSM_CAMERA_FLASH_SC628A is not set
-# CONFIG_MSM_CAMERA_FLASH_TPS61310 is not set
-# CONFIG_IMX072 is not set
 CONFIG_OV2720=y
-# CONFIG_OV8825 is not set
 CONFIG_S5K3H7=y
 CONFIG_IMX135=y
-CONFIG_MSM_CAMERA_FLASH=y
 CONFIG_MSM_CAMERA_SENSOR=y
 CONFIG_MSM_ACTUATOR=y
 CONFIG_MSM_EEPROM=y
@@ -2121,483 +391,61 @@ CONFIG_IMX074_EEPROM=y
 CONFIG_IMX091_EEPROM=y
 CONFIG_MSM_GEMINI=y
 # CONFIG_QUP_EXCLUSIVE_TO_CAMERA is not set
-# CONFIG_S5K3L1YX is not set
-# CONFIG_IMX091 is not set
-# CONFIG_MSM_V4L2_VIDEO_OVERLAY_DEVICE is not set
-# CONFIG_OV7692 is not set
-# CONFIG_MSMB_CAMERA is not set
-CONFIG_MEDIA_TUNER=y
 # CONFIG_MEDIA_TUNER_CUSTOMISE is not set
-CONFIG_MEDIA_TUNER_SIMPLE=y
-CONFIG_MEDIA_TUNER_TDA8290=y
-CONFIG_MEDIA_TUNER_TDA827X=y
-CONFIG_MEDIA_TUNER_TDA18271=y
-CONFIG_MEDIA_TUNER_TDA9887=y
-CONFIG_MEDIA_TUNER_TEA5761=y
-CONFIG_MEDIA_TUNER_TEA5767=y
-CONFIG_MEDIA_TUNER_MT20XX=y
-CONFIG_MEDIA_TUNER_XC2028=y
-CONFIG_MEDIA_TUNER_XC5000=y
-CONFIG_MEDIA_TUNER_XC4000=y
-CONFIG_MEDIA_TUNER_MC44S803=y
-CONFIG_VIDEO_V4L2=y
-CONFIG_VIDEOBUF2_CORE=y
-CONFIG_VIDEOBUF2_MEMOPS=y
-CONFIG_VIDEOBUF2_DMA_CONTIG=y
-CONFIG_VIDEOBUF2_VMALLOC=y
-CONFIG_VIDEOBUF2_DMA_SG=y
 CONFIG_VIDEOBUF2_MSM_MEM=y
-CONFIG_VIDEO_CAPTURE_DRIVERS=y
-# CONFIG_VIDEO_ADV_DEBUG is not set
-# CONFIG_VIDEO_FIXED_MINOR_RANGES is not set
 CONFIG_VIDEO_HELPER_CHIPS_AUTO=y
-
-#
-# Audio decoders, processors and mixers
-#
-
-#
-# RDS decoders
-#
-
-#
-# Video decoders
-#
-
-#
-# Video and audio decoders
-#
-
-#
-# MPEG video encoders
-#
-
-#
-# Video encoders
-#
-
-#
-# Camera sensor devices
-#
-
-#
-# Flash devices
-#
-
-#
-# Video improvement chips
-#
-
-#
-# Miscelaneous helper chips
-#
 # CONFIG_MSM_VCAP is not set
-CONFIG_V4L_USB_DRIVERS=y
 CONFIG_USB_VIDEO_CLASS=y
-CONFIG_USB_VIDEO_CLASS_INPUT_EVDEV=y
 # CONFIG_USB_GSPCA is not set
-# CONFIG_VIDEO_PVRUSB2 is not set
-# CONFIG_VIDEO_HDPVR is not set
-# CONFIG_VIDEO_EM28XX is not set
-# CONFIG_VIDEO_USBVISION is not set
-# CONFIG_USB_ET61X251 is not set
-# CONFIG_USB_SN9C102 is not set
-# CONFIG_USB_PWC is not set
-# CONFIG_VIDEO_CPIA2 is not set
-# CONFIG_USB_ZR364XX is not set
-# CONFIG_USB_STKWEBCAM is not set
-# CONFIG_USB_S2255 is not set
 CONFIG_V4L_PLATFORM_DRIVERS=y
-# CONFIG_SOC_CAMERA is not set
-# CONFIG_V4L_MEM2MEM_DRIVERS is not set
-# CONFIG_MSM_WFD is not set
-CONFIG_RADIO_ADAPTERS=y
-# CONFIG_RADIO_SI470X is not set
-# CONFIG_USB_MR800 is not set
-# CONFIG_USB_DSBR is not set
-# CONFIG_I2C_SI4713 is not set
-# CONFIG_RADIO_SI4713 is not set
-# CONFIG_USB_KEENE is not set
-# CONFIG_RADIO_TEA5764 is not set
-# CONFIG_RADIO_SAA7706H is not set
-# CONFIG_RADIO_TEF6862 is not set
-# CONFIG_RADIO_WL1273 is not set
-
-#
-# Texas Instruments WL128x FM driver (ST based)
-#
-# CONFIG_RADIO_WL128X is not set
 CONFIG_RADIO_IRIS=y
 CONFIG_RADIO_IRIS_TRANSPORT=y
-
-#
-# Graphics support
-#
-# CONFIG_DRM is not set
 CONFIG_ION=y
 CONFIG_ION_MSM=y
 CONFIG_MSM_KGSL=y
-# CONFIG_MSM_KGSL_CFF_DUMP is not set
-# CONFIG_MSM_KGSL_PSTMRTMDMP_CP_STAT_NO_DETAIL is not set
-# CONFIG_MSM_KGSL_PSTMRTMDMP_NO_IB_DUMP is not set
-# CONFIG_MSM_KGSL_PSTMRTMDMP_RB_HEX is not set
-CONFIG_MSM_KGSL_2D=y
 CONFIG_KGSL_PER_PROCESS_PAGE_TABLE=y
-CONFIG_MSM_KGSL_PAGE_TABLE_SIZE=0xFFF0000
 CONFIG_MSM_KGSL_PAGE_TABLE_COUNT=24
-CONFIG_MSM_KGSL_MMU_PAGE_FAULT=y
-# CONFIG_MSM_KGSL_DISABLE_SHADOW_WRITES is not set
-# CONFIG_VGASTATE is not set
-# CONFIG_VIDEO_OUTPUT_CONTROL is not set
 CONFIG_FB=y
-# CONFIG_FIRMWARE_EDID is not set
-# CONFIG_FB_DDC is not set
-# CONFIG_FB_BOOT_VESA_SUPPORT is not set
-CONFIG_FB_CFB_FILLRECT=y
-CONFIG_FB_CFB_COPYAREA=y
-CONFIG_FB_CFB_IMAGEBLIT=y
-# CONFIG_FB_CFB_REV_PIXELS_IN_BYTE is not set
-CONFIG_FB_SYS_FILLRECT=y
-CONFIG_FB_SYS_COPYAREA=y
-CONFIG_FB_SYS_IMAGEBLIT=y
-# CONFIG_FB_FOREIGN_ENDIAN is not set
-CONFIG_FB_SYS_FOPS=y
-# CONFIG_FB_WMT_GE_ROPS is not set
-# CONFIG_FB_SVGALIB is not set
-# CONFIG_FB_MACMODES is not set
-# CONFIG_FB_BACKLIGHT is not set
-# CONFIG_FB_MODE_HELPERS is not set
-# CONFIG_FB_TILEBLITTING is not set
-
-#
-# Frame buffer hardware drivers
-#
-# CONFIG_FB_UVESA is not set
-# CONFIG_FB_S1D13XXX is not set
-# CONFIG_FB_TMIO is not set
-# CONFIG_FB_SMSCUFX is not set
-# CONFIG_FB_UDL is not set
 CONFIG_FB_VIRTUAL=y
-# CONFIG_FB_METRONOME is not set
-# CONFIG_FB_BROADSHEET is not set
-CONFIG_MSM_VIDC=y
-CONFIG_MSM_VIDC_1080P=y
-CONFIG_MSM_VIDC_VENC=y
-CONFIG_MSM_VIDC_VDEC=y
-# CONFIG_MSM_VIDC_CONTENT_PROTECTION is not set
-
-#
-# MHL sii9244 support
-#
 CONFIG_FB_MSM_HDMI_MHL_9244=y
 CONFIG_FB_MSM_HDMI_MHL_RCP=y
 CONFIG_FB_MSM=y
 # CONFIG_FB_MSM_BACKLIGHT is not set
 CONFIG_FB_MSM_LOGO=y
-CONFIG_FB_MSM_LCDC_HW=y
 CONFIG_FB_MSM_TRIPLE_BUFFER=y
-CONFIG_FB_MSM_MDP_HW=y
-# CONFIG_FB_MSM_MDP22 is not set
-# CONFIG_FB_MSM_MDP30 is not set
-# CONFIG_FB_MSM_MDP31 is not set
 CONFIG_FB_MSM_MDP40=y
-# CONFIG_FB_MSM_MDSS is not set
-# CONFIG_FB_MSM_MDP_NONE is not set
-# CONFIG_FB_MSM_EBI2 is not set
-# CONFIG_FB_MSM_MDDI is not set
-CONFIG_FB_MSM_MIPI_DSI=y
-# CONFIG_FB_MSM_LCDC is not set
-# CONFIG_FB_MSM_LVDS is not set
 CONFIG_FB_MSM_OVERLAY=y
-CONFIG_FB_MSM_DTV=y
-# CONFIG_FB_MSM_EXTMDDI is not set
-# CONFIG_FB_MSM_TVOUT is not set
-# CONFIG_FB_MSM_MDDI_TOSHIBA_COMMON is not set
-# CONFIG_FB_MSM_MDDI_TOSHIBA_COMMON_VGA is not set
-# CONFIG_FB_MSM_MDDI_ORISE is not set
-# CONFIG_FB_MSM_MDDI_QUICKVX is not set
-# CONFIG_FB_MSM_MDDI_AUTO_DETECT is not set
-# CONFIG_FB_MSM_LCDC_AUTO_DETECT is not set
-# CONFIG_FB_MSM_LCDC_PANEL is not set
-# CONFIG_FB_MSM_MIPI_DSI_TOSHIBA is not set
-# CONFIG_FB_MSM_MIPI_DSI_LGIT is not set
-CONFIG_FB_MSM_MIPI_DSI_HITACHI=y
-# CONFIG_FB_MSM_MIPI_DSI_RENESAS is not set
-# CONFIG_FB_MSM_MIPI_DSI_SIMULATOR is not set
-# CONFIG_FB_MSM_MIPI_DSI_NOVATEK is not set
-# CONFIG_FB_MSM_MIPI_DSI_LG is not set
-# CONFIG_FB_MSM_MIPI_DSI_JDI is not set
-# CONFIG_FB_MSM_MIPI_DSI_ORISE is not set
-# CONFIG_FB_MSM_LCDC_ST15_WXGA is not set
-# CONFIG_FB_MSM_LCDC_ST15_PANEL is not set
-# CONFIG_FB_MSM_LCDC_PRISM_WVGA is not set
-# CONFIG_FB_MSM_LCDC_SAMSUNG_WSVGA is not set
-# CONFIG_FB_MSM_LCDC_CHIMEI_WXGA is not set
-# CONFIG_FB_MSM_LCDC_GORDON_VGA is not set
-# CONFIG_FB_MSM_LCDC_TOSHIBA_WVGA_PT is not set
-# CONFIG_FB_MSM_LCDC_TOSHIBA_FWVGA_PT is not set
-# CONFIG_FB_MSM_LCDC_SHARP_WVGA_PT is not set
-# CONFIG_FB_MSM_LCDC_AUO_WVGA is not set
-# CONFIG_FB_MSM_LCDC_TRULY_HVGA_IPS3P2335 is not set
-# CONFIG_FB_MSM_LCDC_TRULY_HVGA_IPS3P2335_PT_PANEL is not set
-# CONFIG_FB_MSM_LCDC_SAMSUNG_OLED_PT is not set
-# CONFIG_FB_MSM_LCDC_NT35582_WVGA is not set
-# CONFIG_FB_MSM_LCDC_WXGA is not set
-# CONFIG_FB_MSM_MIPI_LGIT_VIDEO_WXGA_PT is not set
-CONFIG_FB_MSM_MIPI_HITACHI_CMD_720P_PT=y
-# CONFIG_FB_MSM_LVDS_CHIMEI_WXGA is not set
-# CONFIG_FB_MSM_MIPI_TOSHIBA_VIDEO_WVGA_PT is not set
-# CONFIG_FB_MSM_MIPI_TOSHIBA_VIDEO_WSVGA_PT is not set
-# CONFIG_FB_MSM_MIPI_TOSHIBA_VIDEO_WUXGA is not set
-# CONFIG_FB_MSM_MIPI_NOVATEK_VIDEO_QHD_PT is not set
-# CONFIG_FB_MSM_MIPI_NOVATEK_CMD_QHD_PT is not set
-# CONFIG_FB_MSM_MIPI_NOVATEK_1080_HD_PT is not set
-# CONFIG_FB_MSM_MIPI_LG_1080_HD_PT is not set
-# CONFIG_FB_MSM_MIPI_JDI_1080_HD_PT is not set
-# CONFIG_FB_MSM_MIPI_ORISE_VIDEO_720P_PT is not set
-# CONFIG_FB_MSM_MIPI_ORISE_CMD_720P_PT is not set
-# CONFIG_FB_MSM_MIPI_RENESAS_VIDEO_FWVGA_PT is not set
-# CONFIG_FB_MSM_MIPI_RENESAS_CMD_FWVGA_PT is not set
-# CONFIG_FB_MSM_MIPI_NT35510_VIDEO_WVGA_PT is not set
-# CONFIG_FB_MSM_MIPI_NT35510_CMD_WVGA_PT is not set
-# CONFIG_FB_MSM_MIPI_NT35516_VIDEO_QHD_PT is not set
-# CONFIG_FB_MSM_MIPI_NT35516_CMD_QHD_PT is not set
-# CONFIG_FB_MSM_MIPI_CHIMEI_WXGA is not set
-# CONFIG_FB_MSM_MIPI_CHIMEI_WUXGA is not set
-# CONFIG_FB_MSM_MIPI_SIMULATOR_VIDEO is not set
 CONFIG_FB_MSM_NO_MDP_PIPE_CTRL=y
 CONFIG_FB_MSM_OVERLAY0_WRITEBACK=y
 CONFIG_FB_MSM_OVERLAY1_WRITEBACK=y
 CONFIG_FB_MSM_WRITEBACK_MSM_PANEL=y
-# CONFIG_FB_MSM_MIPI_NOVATEK_VIDEO_MODE is not set
-# CONFIG_FB_MSM_MIPI_LG_VIDEO_MODE is not set
-# CONFIG_FB_MSM_MIPI_JDI_CMD_MODE is not set
-# CONFIG_FB_MSM_MIPI_LGIT_VIDEO_WXGA_PT_PANEL is not set
 CONFIG_FB_MSM_MIPI_HITACHI_CMD_720P_PT_PANEL=y
-CONFIG_HITACHI_CMD_720P_CABC=y
-CONFIG_FB_MSM_EXT_INTERFACE_COMMON=y
-CONFIG_FB_MSM_HDMI_COMMON=y
-CONFIG_FB_MSM_HDMI_3D=y
-# CONFIG_FB_MSM_HDMI_ADV7520_PANEL is not set
 CONFIG_FB_MSM_HDMI_MSM_PANEL=y
-# CONFIG_FB_MSM_HDMI_MSM_PANEL_DVI_SUPPORT is not set
-# CONFIG_FB_MSM_HDMI_MSM_PANEL_CEC_SUPPORT is not set
-# CONFIG_FB_MSM_HDMI_MHL_8334 is not set
-# CONFIG_FB_MSM_TVOUT_NTSC_M is not set
-# CONFIG_FB_MSM_TVOUT_NTSC_J is not set
-# CONFIG_FB_MSM_TVOUT_PAL_BDGHIN is not set
-# CONFIG_FB_MSM_TVOUT_PAL_M is not set
-# CONFIG_FB_MSM_TVOUT_PAL_N is not set
-CONFIG_FB_MSM_TVOUT_NONE=y
-# CONFIG_FB_MSM_DEFAULT_DEPTH_RGB565 is not set
-# CONFIG_FB_MSM_DEFAULT_DEPTH_ARGB8888 is not set
-CONFIG_FB_MSM_DEFAULT_DEPTH_RGBA8888=y
-# CONFIG_FB_MSM_EBI2_EPSON_S1D_QVGA_PANEL is not set
-# CONFIG_FB_MSM_EBI2_PANEL_DETECT is not set
-# CONFIG_EXYNOS_VIDEO is not set
 CONFIG_BACKLIGHT_LCD_SUPPORT=y
 # CONFIG_LCD_CLASS_DEVICE is not set
-CONFIG_BACKLIGHT_CLASS_DEVICE=y
-CONFIG_BACKLIGHT_GENERIC=y
-# CONFIG_BACKLIGHT_ADP8860 is not set
-# CONFIG_BACKLIGHT_ADP8870 is not set
-# CONFIG_BACKLIGHT_LP855X is not set
-# CONFIG_BACKLIGHT_LM3530 is not set
-# CONFIG_BACKLIGHT_LM3533 is not set
-
-#
-# Console display driver support
-#
-CONFIG_DUMMY_CONSOLE=y
-# CONFIG_FRAMEBUFFER_CONSOLE is not set
-# CONFIG_LOGO is not set
 CONFIG_SOUND=y
-# CONFIG_SOUND_OSS_CORE is not set
 CONFIG_SND=y
-CONFIG_SND_TIMER=y
-CONFIG_SND_PCM=y
-CONFIG_SND_HWDEP=y
-CONFIG_SND_RAWMIDI=y
-CONFIG_SND_COMPRESS_OFFLOAD=y
-CONFIG_SND_JACK=y
-# CONFIG_SND_SEQUENCER is not set
-# CONFIG_SND_MIXER_OSS is not set
-# CONFIG_SND_PCM_OSS is not set
-# CONFIG_SND_HRTIMER is not set
 CONFIG_SND_DYNAMIC_MINORS=y
-CONFIG_SND_SUPPORT_OLD_API=y
-CONFIG_SND_VERBOSE_PROCFS=y
-# CONFIG_SND_VERBOSE_PRINTK is not set
-# CONFIG_SND_DEBUG is not set
-# CONFIG_SND_RAWMIDI_SEQ is not set
-# CONFIG_SND_OPL3_LIB_SEQ is not set
-# CONFIG_SND_OPL4_LIB_SEQ is not set
-# CONFIG_SND_SBAWE_SEQ is not set
-# CONFIG_SND_EMU10K1_SEQ is not set
-CONFIG_SND_DRIVERS=y
-# CONFIG_SND_DUMMY is not set
-# CONFIG_SND_ALOOP is not set
-# CONFIG_SND_MTPAV is not set
-# CONFIG_SND_SERIAL_U16550 is not set
-# CONFIG_SND_MPU401 is not set
 # CONFIG_SND_ARM is not set
 # CONFIG_SND_SPI is not set
-CONFIG_SND_USB=y
 CONFIG_SND_USB_AUDIO=y
-# CONFIG_SND_USB_UA101 is not set
-# CONFIG_SND_USB_CAIAQ is not set
-# CONFIG_SND_USB_6FIRE is not set
 CONFIG_SND_SOC=y
-
-#
-# MSM SoC Audio support
-#
-CONFIG_SND_SOC_MSM_HOSTLESS_PCM=y
-CONFIG_SND_SOC_MSM_QDSP6_HDMI_AUDIO=y
-CONFIG_SND_SOC_MSM_QDSP6_INTF=y
-# CONFIG_SND_SOC_MSM_QDSP6V2_INTF is not set
-CONFIG_SND_SOC_VOICE=y
-CONFIG_SND_SOC_QDSP6=y
-# CONFIG_SND_SOC_QDSP6V2 is not set
 CONFIG_SND_SOC_MSM8960=y
-# CONFIG_SND_SOC_DUAL_AMIC is not set
-# CONFIG_ASUSTEK_HEADSET is not set
-CONFIG_SND_SOC_I2C_AND_SPI=y
-# CONFIG_SND_SOC_ALL_CODECS is not set
-CONFIG_SND_SOC_WCD9304=y
-CONFIG_SND_SOC_WCD9310=y
-CONFIG_SND_SOC_CS8427=y
-CONFIG_SND_SOC_MSM_STUB=y
-# CONFIG_SND_SOC_TPA2028D is not set
-CONFIG_SND_SOC_ES310=y
-# CONFIG_SOUND_PRIME is not set
-CONFIG_HID_SUPPORT=y
-CONFIG_HID=y
-# CONFIG_HID_BATTERY_STRENGTH is not set
-# CONFIG_HIDRAW is not set
 CONFIG_UHID=y
-
-#
-# USB Input Devices
-#
-CONFIG_USB_HID=y
-# CONFIG_HID_PID is not set
 CONFIG_USB_HIDDEV=y
-
-#
-# Special HID drivers
-#
-# CONFIG_HID_A4TECH is not set
-# CONFIG_HID_ACRUX is not set
 CONFIG_HID_APPLE=y
-# CONFIG_HID_BELKIN is not set
-# CONFIG_HID_CHERRY is not set
-# CONFIG_HID_CHICONY is not set
-# CONFIG_HID_PRODIKEYS is not set
-# CONFIG_HID_CYPRESS is not set
-# CONFIG_HID_DRAGONRISE is not set
-# CONFIG_HID_EMS_FF is not set
-# CONFIG_HID_ELECOM is not set
-# CONFIG_HID_EZKEY is not set
-# CONFIG_HID_HOLTEK is not set
-# CONFIG_HID_KEYTOUCH is not set
-# CONFIG_HID_KYE is not set
-# CONFIG_HID_UCLOGIC is not set
-# CONFIG_HID_WALTOP is not set
-# CONFIG_HID_GYRATION is not set
-# CONFIG_HID_TWINHAN is not set
-# CONFIG_HID_KENSINGTON is not set
-# CONFIG_HID_LCPOWER is not set
-# CONFIG_HID_LOGITECH is not set
 CONFIG_HID_MAGICMOUSE=y
 CONFIG_HID_MICROSOFT=y
-# CONFIG_HID_MONTEREY is not set
-# CONFIG_HID_MULTITOUCH is not set
-# CONFIG_HID_NTRIG is not set
-# CONFIG_HID_ORTEK is not set
-# CONFIG_HID_PANTHERLORD is not set
-# CONFIG_HID_PETALYNX is not set
-# CONFIG_HID_PICOLCD is not set
-# CONFIG_HID_PRIMAX is not set
-# CONFIG_HID_ROCCAT is not set
-# CONFIG_HID_SAITEK is not set
-# CONFIG_HID_SAMSUNG is not set
-# CONFIG_HID_SONY is not set
-# CONFIG_HID_SPEEDLINK is not set
-# CONFIG_HID_SUNPLUS is not set
-# CONFIG_HID_GREENASIA is not set
-# CONFIG_HID_SMARTJOYPLUS is not set
-# CONFIG_HID_TIVO is not set
-# CONFIG_HID_TOPSEED is not set
-# CONFIG_HID_THRUSTMASTER is not set
-# CONFIG_HID_WACOM is not set
-# CONFIG_HID_WIIMOTE is not set
-# CONFIG_HID_ZEROPLUS is not set
-# CONFIG_HID_ZYDACRON is not set
-# CONFIG_USB_ARCH_HAS_OHCI is not set
-CONFIG_USB_ARCH_HAS_EHCI=y
-# CONFIG_USB_ARCH_HAS_XHCI is not set
-CONFIG_USB_SUPPORT=y
-CONFIG_USB_COMMON=y
-CONFIG_USB_ARCH_HAS_HCD=y
 CONFIG_USB=y
-# CONFIG_USB_DEBUG is not set
 CONFIG_USB_ANNOUNCE_NEW_DEVICES=y
-
-#
-# Miscellaneous USB options
-#
-# CONFIG_USB_DEVICEFS is not set
-CONFIG_USB_DEVICE_CLASS=y
-# CONFIG_USB_DYNAMIC_MINORS is not set
 CONFIG_USB_SUSPEND=y
-# CONFIG_USB_OTG is not set
-# CONFIG_USB_OTG_WHITELIST is not set
-# CONFIG_USB_OTG_BLACKLIST_HUB is not set
-# CONFIG_USB_DWC3 is not set
-# CONFIG_USB_MON is not set
-# CONFIG_USB_WUSB_CBAF is not set
-
-#
-# USB Host Controller Drivers
-#
-# CONFIG_USB_C67X00_HCD is not set
 CONFIG_USB_EHCI_HCD=y
 CONFIG_USB_EHCI_EHSET=y
-CONFIG_USB_EHCI_ROOT_HUB_TT=y
-CONFIG_USB_EHCI_TT_NEWSCHED=y
 CONFIG_USB_EHCI_MSM=y
 CONFIG_USB_EHCI_MSM_HSIC=y
-# CONFIG_USB_EHCI_MSM_HOST4 is not set
-# CONFIG_USB_OXU210HP_HCD is not set
-# CONFIG_USB_ISP116X_HCD is not set
-# CONFIG_USB_ISP1760_HCD is not set
-# CONFIG_USB_ISP1362_HCD is not set
-# CONFIG_USB_EHCI_HCD_PLATFORM is not set
-# CONFIG_USB_SL811_HCD is not set
-# CONFIG_USB_R8A66597_HCD is not set
-# CONFIG_USB_PEHCI_HCD is not set
-# CONFIG_USB_MUSB_HDRC is not set
-# CONFIG_USB_RENESAS_USBHS is not set
-
-#
-# USB Device Class drivers
-#
 CONFIG_USB_ACM=y
-# CONFIG_USB_PRINTER is not set
-# CONFIG_USB_WDM is not set
-# CONFIG_USB_TMC is not set
-
-#
-# NOTE: USB_STORAGE depends on SCSI but BLK_DEV_SD may
-#
-
-#
-# also be needed; see USB_STORAGE Help for more info
-#
 CONFIG_USB_STORAGE=y
 CONFIG_USB_STORAGE_DEBUG=y
-# CONFIG_USB_STORAGE_REALTEK is not set
 CONFIG_USB_STORAGE_DATAFAB=y
 CONFIG_USB_STORAGE_FREECOM=y
 CONFIG_USB_STORAGE_ISD200=y
@@ -2609,853 +457,83 @@ CONFIG_USB_STORAGE_ALAUDA=y
 CONFIG_USB_STORAGE_ONETOUCH=y
 CONFIG_USB_STORAGE_KARMA=y
 CONFIG_USB_STORAGE_CYPRESS_ATACB=y
-# CONFIG_USB_STORAGE_ENE_UB6250 is not set
-# CONFIG_USB_UAS is not set
-# CONFIG_USB_LIBUSUAL is not set
-
-#
-# USB Imaging devices
-#
-# CONFIG_USB_MDC800 is not set
-# CONFIG_USB_MICROTEK is not set
-
-#
-# USB port drivers
-#
 CONFIG_USB_SERIAL=y
-# CONFIG_USB_SERIAL_CONSOLE is not set
-# CONFIG_USB_EZUSB is not set
-# CONFIG_USB_SERIAL_GENERIC is not set
-# CONFIG_USB_SERIAL_AIRCABLE is not set
-# CONFIG_USB_SERIAL_ARK3116 is not set
-# CONFIG_USB_SERIAL_BELKIN is not set
-# CONFIG_USB_SERIAL_CH341 is not set
-# CONFIG_USB_SERIAL_WHITEHEAT is not set
-# CONFIG_USB_SERIAL_DIGI_ACCELEPORT is not set
-# CONFIG_USB_SERIAL_CP210X is not set
-# CONFIG_USB_SERIAL_CYPRESS_M8 is not set
-# CONFIG_USB_SERIAL_EMPEG is not set
-# CONFIG_USB_SERIAL_FTDI_SIO is not set
-# CONFIG_USB_SERIAL_FUNSOFT is not set
-# CONFIG_USB_SERIAL_VISOR is not set
-# CONFIG_USB_SERIAL_IPAQ is not set
-# CONFIG_USB_SERIAL_IR is not set
-# CONFIG_USB_SERIAL_EDGEPORT is not set
-# CONFIG_USB_SERIAL_EDGEPORT_TI is not set
-# CONFIG_USB_SERIAL_F81232 is not set
-# CONFIG_USB_SERIAL_GARMIN is not set
-# CONFIG_USB_SERIAL_IPW is not set
-# CONFIG_USB_SERIAL_IUU is not set
-# CONFIG_USB_SERIAL_KEYSPAN_PDA is not set
-# CONFIG_USB_SERIAL_KEYSPAN is not set
-# CONFIG_USB_SERIAL_KLSI is not set
-# CONFIG_USB_SERIAL_KOBIL_SCT is not set
-# CONFIG_USB_SERIAL_MCT_U232 is not set
-# CONFIG_USB_SERIAL_METRO is not set
-# CONFIG_USB_SERIAL_MOS7720 is not set
-# CONFIG_USB_SERIAL_MOS7840 is not set
-# CONFIG_USB_SERIAL_MOTOROLA is not set
-# CONFIG_USB_SERIAL_NAVMAN is not set
-# CONFIG_USB_SERIAL_PL2303 is not set
-# CONFIG_USB_SERIAL_OTI6858 is not set
-# CONFIG_USB_SERIAL_QCAUX is not set
-# CONFIG_USB_SERIAL_QUALCOMM is not set
-# CONFIG_USB_SERIAL_SPCP8X5 is not set
-# CONFIG_USB_SERIAL_HP4X is not set
-# CONFIG_USB_SERIAL_SAFE is not set
-# CONFIG_USB_SERIAL_SIEMENS_MPI is not set
-# CONFIG_USB_SERIAL_SIERRAWIRELESS is not set
-# CONFIG_USB_SERIAL_SYMBOL is not set
-# CONFIG_USB_SERIAL_TI is not set
-# CONFIG_USB_SERIAL_CYBERJACK is not set
-# CONFIG_USB_SERIAL_XIRCOM is not set
-# CONFIG_USB_SERIAL_OPTION is not set
-# CONFIG_USB_SERIAL_OMNINET is not set
-# CONFIG_USB_SERIAL_OPTICON is not set
-# CONFIG_USB_SERIAL_VIVOPAY_SERIAL is not set
-# CONFIG_USB_SERIAL_ZIO is not set
-# CONFIG_USB_SERIAL_SSU100 is not set
 CONFIG_USB_SERIAL_CSVT=y
-# CONFIG_USB_SERIAL_DEBUG is not set
-
-#
-# USB Miscellaneous drivers
-#
-# CONFIG_USB_EMI62 is not set
-# CONFIG_USB_EMI26 is not set
-# CONFIG_USB_ADUTUX is not set
-# CONFIG_USB_SEVSEG is not set
-# CONFIG_USB_RIO500 is not set
-# CONFIG_USB_LEGOTOWER is not set
-# CONFIG_USB_LCD is not set
-# CONFIG_USB_LED is not set
-# CONFIG_USB_CYPRESS_CY7C63 is not set
-# CONFIG_USB_CYTHERM is not set
-# CONFIG_USB_IDMOUSE is not set
-# CONFIG_USB_FTDI_ELAN is not set
-# CONFIG_USB_APPLEDISPLAY is not set
-# CONFIG_USB_SISUSBVGA is not set
-# CONFIG_USB_LD is not set
-# CONFIG_USB_TRANCEVIBRATOR is not set
-# CONFIG_USB_IOWARRIOR is not set
-# CONFIG_USB_TEST is not set
 CONFIG_USB_EHSET_TEST_FIXTURE=y
-# CONFIG_USB_ISIGHTFW is not set
-# CONFIG_USB_YUREX is not set
 CONFIG_USB_QCOM_DIAG_BRIDGE=y
-# CONFIG_USB_QCOM_DIAG_BRIDGE_TEST is not set
 CONFIG_USB_QCOM_MDM_BRIDGE=y
 CONFIG_USB_QCOM_KS_BRIDGE=y
 CONFIG_USB_GADGET=y
-# CONFIG_USB_GADGET_DEBUG is not set
 CONFIG_USB_GADGET_DEBUG_FILES=y
-# CONFIG_USB_GADGET_DEBUG_FS is not set
-CONFIG_USB_GADGET_VBUS_DRAW=500
-CONFIG_USB_GADGET_STORAGE_NUM_BUFFERS=2
-
-#
-# USB Peripheral Controller
-#
-# CONFIG_USB_FUSB300 is not set
-# CONFIG_USB_R8A66597 is not set
-# CONFIG_USB_MV_UDC is not set
-# CONFIG_USB_M66592 is not set
-# CONFIG_USB_NET2272 is not set
 CONFIG_USB_CI13XXX_MSM=y
-# CONFIG_USB_CI13XXX_MSM_HSIC is not set
-# CONFIG_USB_DWC3_MSM is not set
-# CONFIG_USB_MSM_72K is not set
-# CONFIG_USB_DUMMY_HCD is not set
-CONFIG_USB_GADGET_DUALSPEED=y
-# CONFIG_USB_GADGET_SUPERSPEED is not set
-# CONFIG_USB_ZERO is not set
-# CONFIG_USB_AUDIO is not set
-# CONFIG_USB_ETH is not set
-# CONFIG_USB_G_NCM is not set
-# CONFIG_USB_GADGETFS is not set
-# CONFIG_USB_FUNCTIONFS is not set
-# CONFIG_USB_FILE_STORAGE is not set
-# CONFIG_USB_MASS_STORAGE is not set
-# CONFIG_USB_G_SERIAL is not set
-# CONFIG_USB_MIDI_GADGET is not set
-# CONFIG_USB_G_PRINTER is not set
 CONFIG_USB_G_ANDROID=y
-# CONFIG_USB_CDC_COMPOSITE is not set
-# CONFIG_USB_G_ACM_MS is not set
-# CONFIG_USB_G_MULTI is not set
-# CONFIG_USB_G_HID is not set
-# CONFIG_USB_G_DBGP is not set
-# CONFIG_USB_G_WEBCAM is not set
-CONFIG_USB_CSW_HACK=y
-# CONFIG_USB_MSC_PROFILING is not set
-CONFIG_MODEM_SUPPORT=y
-CONFIG_RMNET_SMD_CTL_CHANNEL=""
-CONFIG_RMNET_SMD_DATA_CHANNEL=""
-# CONFIG_USB_ANDROID_CDC_ECM is not set
-
-#
-# OTG and related infrastructure
-#
-CONFIG_USB_OTG_UTILS=y
-# CONFIG_USB_OTG_WAKELOCK is not set
-# CONFIG_USB_GPIO_VBUS is not set
-# CONFIG_USB_ULPI is not set
-# CONFIG_USB_MSM_OTG_72K is not set
-# CONFIG_NOP_USB_XCEIV is not set
-CONFIG_USB_MSM_OTG=y
-# CONFIG_USB_MSM_ACA is not set
 CONFIG_MMC=y
-# CONFIG_MMC_DEBUG is not set
 CONFIG_MMC_PERF_PROFILING=y
 CONFIG_MMC_UNSAFE_RESUME=y
 CONFIG_MMC_CLKGATE=y
-# CONFIG_MMC_EMBEDDED_SDIO is not set
 CONFIG_MMC_PARANOID_SD_INIT=y
-
-#
-# MMC/SD/SDIO Card Drivers
-#
-CONFIG_MMC_BLOCK=y
-# CONFIG_MMC_SECDISCARD is not set
 CONFIG_MMC_BLOCK_MINORS=32
 # CONFIG_MMC_BLOCK_BOUNCE is not set
-# CONFIG_MMC_BLOCK_DEFERRED_RESUME is not set
-# CONFIG_SDIO_UART is not set
-# CONFIG_MMC_TEST is not set
-
-#
-# MMC/SD/SDIO Host Controller Drivers
-#
-# CONFIG_MMC_SDHCI is not set
-# CONFIG_MMC_SDHCI_PXAV3 is not set
-# CONFIG_MMC_SDHCI_PXAV2 is not set
 CONFIG_MMC_MSM=y
-CONFIG_MMC_MSM_SDC1_SUPPORT=y
 CONFIG_MMC_MSM_SDC1_8_BIT_SUPPORT=y
 # CONFIG_MMC_MSM_SDC2_SUPPORT is not set
-# CONFIG_MMC_MSM_SDC3_SUPPORT is not set
-# CONFIG_MMC_MSM_SDC3_POLLING is not set
-# CONFIG_MMC_MSM_SDC4_SUPPORT is not set
-# CONFIG_MMC_MSM_SDC5_SUPPORT is not set
 CONFIG_MMC_MSM_SPS_SUPPORT=y
-# CONFIG_MMC_DW is not set
-# CONFIG_MMC_VUB300 is not set
-# CONFIG_MMC_USHC is not set
-# CONFIG_MEMSTICK is not set
-CONFIG_NEW_LEDS=y
-CONFIG_LEDS_CLASS=y
-
-#
-# LED drivers
-#
 CONFIG_LEDS_LM3530=y
 CONFIG_LEDS_LM3554=y
-# CONFIG_LEDS_PCA9532 is not set
-# CONFIG_LEDS_GPIO is not set
-# CONFIG_LEDS_MSM_PDM is not set
-# CONFIG_LEDS_PMIC_MPP is not set
-# CONFIG_LEDS_MSM_TRICOLOR is not set
-# CONFIG_LEDS_LP3944 is not set
-# CONFIG_LEDS_CPLD is not set
-# CONFIG_LEDS_LP5521 is not set
-# CONFIG_LEDS_LP5523 is not set
-# CONFIG_LEDS_PCA955X is not set
 CONFIG_LEDS_PM8XXX=y
-# CONFIG_LEDS_PCA9633 is not set
-# CONFIG_LEDS_DAC124S085 is not set
-# CONFIG_LEDS_REGULATOR is not set
-# CONFIG_LEDS_BD2802 is not set
-# CONFIG_LEDS_MSM_PMIC is not set
-# CONFIG_LEDS_LT3593 is not set
-# CONFIG_LEDS_RENESAS_TPU is not set
-# CONFIG_LEDS_TCA6507 is not set
-# CONFIG_LEDS_OT200 is not set
 CONFIG_LEDS_TRIGGERS=y
-
-#
-# LED Triggers
-#
-# CONFIG_LEDS_TRIGGER_TIMER is not set
 CONFIG_LEDS_TRIGGER_HEARTBEAT=y
-# CONFIG_LEDS_TRIGGER_BACKLIGHT is not set
-# CONFIG_LEDS_TRIGGER_GPIO is not set
-# CONFIG_LEDS_TRIGGER_DEFAULT_ON is not set
-# CONFIG_LEDS_TRIGGER_SLEEP is not set
-
-#
-# iptables trigger is under Netfilter config (LED target)
-#
 CONFIG_SWITCH=y
-# CONFIG_SWITCH_GPIO is not set
-# CONFIG_SWITCH_FSA8008 is not set
-# CONFIG_ACCESSIBILITY is not set
-CONFIG_RTC_LIB=y
 CONFIG_RTC_CLASS=y
-CONFIG_RTC_HCTOSYS=y
-CONFIG_RTC_HCTOSYS_DEVICE="rtc0"
-# CONFIG_RTC_DEBUG is not set
-
-#
-# RTC interfaces
-#
-CONFIG_RTC_INTF_SYSFS=y
-CONFIG_RTC_INTF_PROC=y
-CONFIG_RTC_INTF_DEV=y
-CONFIG_RTC_INTF_ALARM=y
-CONFIG_RTC_INTF_ALARM_DEV=y
-# CONFIG_RTC_INTF_DEV_UIE_EMUL is not set
-# CONFIG_RTC_DRV_TEST is not set
-
-#
-# I2C RTC drivers
-#
-# CONFIG_RTC_DRV_DS1307 is not set
-# CONFIG_RTC_DRV_DS1374 is not set
-# CONFIG_RTC_DRV_DS1672 is not set
-# CONFIG_RTC_DRV_DS3232 is not set
-# CONFIG_RTC_DRV_MAX6900 is not set
-# CONFIG_RTC_DRV_RS5C372 is not set
-# CONFIG_RTC_DRV_ISL1208 is not set
-# CONFIG_RTC_DRV_ISL12022 is not set
-# CONFIG_RTC_DRV_X1205 is not set
-# CONFIG_RTC_DRV_PCF8563 is not set
-# CONFIG_RTC_DRV_PCF8583 is not set
-# CONFIG_RTC_DRV_M41T80 is not set
-# CONFIG_RTC_DRV_BQ32K is not set
-# CONFIG_RTC_DRV_S35390A is not set
-# CONFIG_RTC_DRV_FM3130 is not set
-# CONFIG_RTC_DRV_RX8581 is not set
-# CONFIG_RTC_DRV_RX8025 is not set
-# CONFIG_RTC_DRV_EM3027 is not set
-# CONFIG_RTC_DRV_RV3029C2 is not set
-
-#
-# SPI RTC drivers
-#
-# CONFIG_RTC_DRV_M41T93 is not set
-# CONFIG_RTC_DRV_M41T94 is not set
-# CONFIG_RTC_DRV_DS1305 is not set
-# CONFIG_RTC_DRV_DS1390 is not set
-# CONFIG_RTC_DRV_MAX6902 is not set
-# CONFIG_RTC_DRV_R9701 is not set
-# CONFIG_RTC_DRV_RS5C348 is not set
-# CONFIG_RTC_DRV_DS3234 is not set
-# CONFIG_RTC_DRV_PCF2123 is not set
-
-#
-# Platform RTC drivers
-#
-# CONFIG_RTC_DRV_CMOS is not set
-# CONFIG_RTC_DRV_DS1286 is not set
-# CONFIG_RTC_DRV_DS1511 is not set
-# CONFIG_RTC_DRV_DS1553 is not set
-# CONFIG_RTC_DRV_DS1742 is not set
-# CONFIG_RTC_DRV_STK17TA8 is not set
-# CONFIG_RTC_DRV_M48T86 is not set
-# CONFIG_RTC_DRV_M48T35 is not set
-# CONFIG_RTC_DRV_M48T59 is not set
-# CONFIG_RTC_DRV_MSM6242 is not set
-# CONFIG_RTC_DRV_BQ4802 is not set
-# CONFIG_RTC_DRV_RP5C01 is not set
-# CONFIG_RTC_DRV_V3020 is not set
-
-#
-# on-CPU RTC drivers
-#
 # CONFIG_RTC_DRV_MSM is not set
-# CONFIG_RTC_DRV_MSM7X00A is not set
 CONFIG_RTC_DRV_PM8XXX=y
-# CONFIG_DMADEVICES is not set
-# CONFIG_AUXDISPLAY is not set
-# CONFIG_UIO is not set
-
-#
-# Virtio drivers
-#
-# CONFIG_VIRTIO_BALLOON is not set
-# CONFIG_VIRTIO_MMIO is not set
-
-#
-# Microsoft Hyper-V guest support
-#
 CONFIG_STAGING=y
-# CONFIG_USBIP_CORE is not set
-# CONFIG_PRISM2_USB is not set
-# CONFIG_ECHO is not set
-# CONFIG_ASUS_OLED is not set
-# CONFIG_R8712U is not set
-# CONFIG_RTS5139 is not set
-# CONFIG_TRANZPORT is not set
-# CONFIG_LINE6_USB is not set
-# CONFIG_USB_SERIAL_QUATECH2 is not set
-# CONFIG_USB_SERIAL_QUATECH_USB2 is not set
-# CONFIG_IIO is not set
-CONFIG_QCACHE=y
-# CONFIG_ZSMALLOC is not set
-# CONFIG_FB_SM7XX is not set
-# CONFIG_BCM_WIMAX is not set
-# CONFIG_FT1000 is not set
-
-#
-# Speakup console speech
-#
-# CONFIG_SPEAKUP is not set
-# CONFIG_TOUCHSCREEN_CLEARPAD_TM1217 is not set
-# CONFIG_TOUCHSCREEN_SYNAPTICS_I2C_RMI4 is not set
-# CONFIG_STAGING_MEDIA is not set
-
-#
-# Android
-#
 CONFIG_ANDROID=y
 CONFIG_ANDROID_BINDER_IPC=y
 CONFIG_ASHMEM=y
 CONFIG_ANDROID_LOGGER=y
-CONFIG_ANDROID_PERSISTENT_RAM=y
 CONFIG_ANDROID_RAM_CONSOLE=y
-# CONFIG_PERSISTENT_TRACER is not set
-CONFIG_ANDROID_TIMED_OUTPUT=y
 CONFIG_ANDROID_TIMED_GPIO=y
 CONFIG_ANDROID_LOW_MEMORY_KILLER=y
-CONFIG_ANDROID_LOW_MEMORY_KILLER_AUTODETECT_OOM_ADJ_VALUES=y
-# CONFIG_ANDROID_SWITCH is not set
-# CONFIG_ANDROID_INTF_ALARM_DEV is not set
-# CONFIG_PHONE is not set
-# CONFIG_USB_WPAN_HCD is not set
-
-#
-# Qualcomm Atheros Prima WLAN module
-#
 CONFIG_PRIMA_WLAN=y
-# CONFIG_PRIMA_WLAN_BTAMP is not set
 CONFIG_PRIMA_WLAN_LFR=y
 CONFIG_PRIMA_WLAN_OKC=y
-# CONFIG_PRIMA_WLAN_11AC_HIGH_TP is not set
-# CONFIG_QCOM_VOWIFI_11R is not set
-CONFIG_QCOM_TDLS=y
-
-#
-# Qualcomm MSM specific device drivers
-#
 CONFIG_MSM_SSBI=y
 CONFIG_SPS=y
-# CONFIG_USB_BAM is not set
 CONFIG_SPS_SUPPORT_BAMDMA=y
-# CONFIG_SPS_SUPPORT_NDP_BAM is not set
-CONFIG_CLKDEV_LOOKUP=y
-CONFIG_HAVE_CLK_PREPARE=y
-
-#
-# Hardware Spinlock drivers
-#
-CONFIG_IOMMU_SUPPORT=y
 CONFIG_MSM_IOMMU=y
-CONFIG_MSM_IOMMU_GPU_SYNC=y
-CONFIG_IOMMU_PGTABLES_L2=y
-
-#
-# Remoteproc drivers (EXPERIMENTAL)
-#
-
-#
-# Rpmsg drivers (EXPERIMENTAL)
-#
-# CONFIG_VIRT_DRIVERS is not set
-# CONFIG_PM_DEVFREQ is not set
-# CONFIG_MOBICORE_SUPPORT is not set
-# CONFIG_CORESIGHT is not set
-
-#
-# File systems
-#
 CONFIG_EXT2_FS=y
 CONFIG_EXT2_FS_XATTR=y
-# CONFIG_EXT2_FS_POSIX_ACL is not set
-# CONFIG_EXT2_FS_SECURITY is not set
-# CONFIG_EXT2_FS_XIP is not set
 CONFIG_EXT3_FS=y
 # CONFIG_EXT3_DEFAULTS_TO_ORDERED is not set
-CONFIG_EXT3_FS_XATTR=y
-# CONFIG_EXT3_FS_POSIX_ACL is not set
-# CONFIG_EXT3_FS_SECURITY is not set
 CONFIG_EXT4_FS=y
-CONFIG_EXT4_FS_XATTR=y
-# CONFIG_EXT4_FS_POSIX_ACL is not set
 CONFIG_EXT4_FS_SECURITY=y
-# CONFIG_EXT4_DEBUG is not set
-CONFIG_JBD=y
-# CONFIG_JBD_DEBUG is not set
-CONFIG_JBD2=y
-# CONFIG_JBD2_DEBUG is not set
-CONFIG_FS_MBCACHE=y
-# CONFIG_REISERFS_FS is not set
-# CONFIG_JFS_FS is not set
-# CONFIG_XFS_FS is not set
-# CONFIG_GFS2_FS is not set
-# CONFIG_BTRFS_FS is not set
-# CONFIG_NILFS2_FS is not set
-CONFIG_FS_POSIX_ACL=y
-CONFIG_FILE_LOCKING=y
-CONFIG_FSNOTIFY=y
-CONFIG_DNOTIFY=y
-CONFIG_INOTIFY_USER=y
-# CONFIG_FANOTIFY is not set
-# CONFIG_QUOTA is not set
-# CONFIG_QUOTACTL is not set
-# CONFIG_AUTOFS4_FS is not set
 CONFIG_FUSE_FS=y
-# CONFIG_CUSE is not set
-
-#
-# Caches
-#
-# CONFIG_FSCACHE is not set
-
-#
-# CD-ROM/DVD Filesystems
-#
-# CONFIG_ISO9660_FS is not set
-# CONFIG_UDF_FS is not set
-
-#
-# DOS/FAT/NT Filesystems
-#
-CONFIG_FAT_FS=y
-# CONFIG_MSDOS_FS is not set
 CONFIG_VFAT_FS=y
-CONFIG_FAT_DEFAULT_CODEPAGE=437
-CONFIG_FAT_DEFAULT_IOCHARSET="iso8859-1"
-# CONFIG_NTFS_FS is not set
-
-#
-# Pseudo filesystems
-#
-CONFIG_PROC_FS=y
-CONFIG_PROC_SYSCTL=y
-CONFIG_PROC_PAGE_MONITOR=y
-CONFIG_SYSFS=y
 CONFIG_TMPFS=y
-# CONFIG_TMPFS_POSIX_ACL is not set
-# CONFIG_TMPFS_XATTR is not set
-# CONFIG_HUGETLB_PAGE is not set
-# CONFIG_CONFIGFS_FS is not set
-CONFIG_MISC_FILESYSTEMS=y
-# CONFIG_ADFS_FS is not set
-# CONFIG_AFFS_FS is not set
-# CONFIG_HFS_FS is not set
-# CONFIG_HFSPLUS_FS is not set
-# CONFIG_BEFS_FS is not set
-# CONFIG_BFS_FS is not set
-# CONFIG_EFS_FS is not set
-# CONFIG_LOGFS is not set
-# CONFIG_CRAMFS is not set
-# CONFIG_SQUASHFS is not set
-# CONFIG_VXFS_FS is not set
-# CONFIG_MINIX_FS is not set
-# CONFIG_OMFS_FS is not set
-# CONFIG_HPFS_FS is not set
-# CONFIG_QNX4FS_FS is not set
-# CONFIG_QNX6FS_FS is not set
-# CONFIG_ROMFS_FS is not set
-# CONFIG_PSTORE is not set
-# CONFIG_SYSV_FS is not set
-# CONFIG_UFS_FS is not set
 CONFIG_F2FS_FS=y
-CONFIG_F2FS_STAT_FS=y
-CONFIG_F2FS_FS_XATTR=y
-CONFIG_F2FS_FS_POSIX_ACL=y
 CONFIG_F2FS_FS_SECURITY=y
-# CONFIG_F2FS_CHECK_FS is not set
-CONFIG_NETWORK_FILESYSTEMS=y
-# CONFIG_NFS_FS is not set
-# CONFIG_NFSD is not set
-# CONFIG_CEPH_FS is not set
 CONFIG_CIFS=y
-# CONFIG_CIFS_STATS is not set
-# CONFIG_CIFS_WEAK_PW_HASH is not set
 CONFIG_CIFS_XATTR=y
 CONFIG_CIFS_POSIX=y
-# CONFIG_CIFS_DEBUG2 is not set
-# CONFIG_NCP_FS is not set
-# CONFIG_CODA_FS is not set
-# CONFIG_AFS_FS is not set
-CONFIG_NLS=y
-CONFIG_NLS_DEFAULT="iso8859-1"
 CONFIG_NLS_CODEPAGE_437=y
-# CONFIG_NLS_CODEPAGE_737 is not set
-# CONFIG_NLS_CODEPAGE_775 is not set
-# CONFIG_NLS_CODEPAGE_850 is not set
-# CONFIG_NLS_CODEPAGE_852 is not set
-# CONFIG_NLS_CODEPAGE_855 is not set
-# CONFIG_NLS_CODEPAGE_857 is not set
-# CONFIG_NLS_CODEPAGE_860 is not set
-# CONFIG_NLS_CODEPAGE_861 is not set
-# CONFIG_NLS_CODEPAGE_862 is not set
-# CONFIG_NLS_CODEPAGE_863 is not set
-# CONFIG_NLS_CODEPAGE_864 is not set
-# CONFIG_NLS_CODEPAGE_865 is not set
-# CONFIG_NLS_CODEPAGE_866 is not set
-# CONFIG_NLS_CODEPAGE_869 is not set
-# CONFIG_NLS_CODEPAGE_936 is not set
-# CONFIG_NLS_CODEPAGE_950 is not set
-# CONFIG_NLS_CODEPAGE_932 is not set
-# CONFIG_NLS_CODEPAGE_949 is not set
-# CONFIG_NLS_CODEPAGE_874 is not set
-# CONFIG_NLS_ISO8859_8 is not set
-# CONFIG_NLS_CODEPAGE_1250 is not set
-# CONFIG_NLS_CODEPAGE_1251 is not set
 CONFIG_NLS_ASCII=y
 CONFIG_NLS_ISO8859_1=y
-# CONFIG_NLS_ISO8859_2 is not set
-# CONFIG_NLS_ISO8859_3 is not set
-# CONFIG_NLS_ISO8859_4 is not set
-# CONFIG_NLS_ISO8859_5 is not set
-# CONFIG_NLS_ISO8859_6 is not set
-# CONFIG_NLS_ISO8859_7 is not set
-# CONFIG_NLS_ISO8859_9 is not set
-# CONFIG_NLS_ISO8859_13 is not set
-# CONFIG_NLS_ISO8859_14 is not set
-# CONFIG_NLS_ISO8859_15 is not set
-# CONFIG_NLS_KOI8_R is not set
-# CONFIG_NLS_KOI8_U is not set
 CONFIG_NLS_UTF8=y
-
-#
-# Kernel hacking
-#
 CONFIG_PRINTK_TIME=y
-CONFIG_DEFAULT_MESSAGE_LOGLEVEL=4
-CONFIG_ENABLE_WARN_DEPRECATED=y
-CONFIG_ENABLE_MUST_CHECK=y
-CONFIG_FRAME_WARN=1024
 CONFIG_MAGIC_SYSRQ=y
-# CONFIG_STRIP_ASM_SYMS is not set
-# CONFIG_UNUSED_SYMBOLS is not set
-CONFIG_DEBUG_FS=y
-# CONFIG_HEADERS_CHECK is not set
-# CONFIG_DEBUG_SECTION_MISMATCH is not set
-CONFIG_DEBUG_KERNEL=y
-# CONFIG_DEBUG_SHIRQ is not set
-# CONFIG_LOCKUP_DETECTOR is not set
-# CONFIG_HARDLOCKUP_DETECTOR is not set
-# CONFIG_DETECT_HUNG_TASK is not set
 # CONFIG_SCHED_DEBUG is not set
-# CONFIG_SCHEDSTATS is not set
 CONFIG_TIMER_STATS=y
-# CONFIG_DEBUG_OBJECTS is not set
-# CONFIG_SLUB_DEBUG_ON is not set
-# CONFIG_SLUB_STATS is not set
-# CONFIG_DEBUG_KMEMLEAK is not set
 # CONFIG_DEBUG_PREEMPT is not set
-# CONFIG_DEBUG_RT_MUTEXES is not set
-# CONFIG_RT_MUTEX_TESTER is not set
-# CONFIG_DEBUG_SPINLOCK is not set
-# CONFIG_DEBUG_MUTEXES is not set
-# CONFIG_DEBUG_LOCK_ALLOC is not set
-# CONFIG_PROVE_LOCKING is not set
-# CONFIG_SPARSE_RCU_POINTER is not set
-# CONFIG_LOCK_STAT is not set
-# CONFIG_DEBUG_ATOMIC_SLEEP is not set
-# CONFIG_DEBUG_LOCKING_API_SELFTESTS is not set
-CONFIG_STACKTRACE=y
-# CONFIG_DEBUG_STACK_USAGE is not set
-# CONFIG_DEBUG_KOBJECT is not set
-# CONFIG_DEBUG_HIGHMEM is not set
-CONFIG_DEBUG_BUGVERBOSE=y
 CONFIG_DEBUG_INFO=y
-# CONFIG_DEBUG_INFO_REDUCED is not set
-# CONFIG_DEBUG_VM is not set
-# CONFIG_DEBUG_WRITECOUNT is not set
 CONFIG_DEBUG_MEMORY_INIT=y
-# CONFIG_DEBUG_LIST is not set
-# CONFIG_TEST_LIST_SORT is not set
-# CONFIG_DEBUG_SG is not set
-# CONFIG_DEBUG_NOTIFIERS is not set
-# CONFIG_DEBUG_CREDENTIALS is not set
-# CONFIG_BOOT_PRINTK_DELAY is not set
-# CONFIG_RCU_TORTURE_TEST is not set
-CONFIG_RCU_CPU_STALL_TIMEOUT=60
-CONFIG_RCU_CPU_STALL_VERBOSE=y
-# CONFIG_RCU_CPU_STALL_INFO is not set
-# CONFIG_RCU_TRACE is not set
-# CONFIG_BACKTRACE_SELF_TEST is not set
-# CONFIG_DEBUG_BLOCK_EXT_DEVT is not set
-# CONFIG_DEBUG_FORCE_WEAK_PER_CPU is not set
-# CONFIG_DEBUG_PER_CPU_MAPS is not set
-# CONFIG_LKDTM is not set
-# CONFIG_CPU_NOTIFIER_ERROR_INJECT is not set
-# CONFIG_FAULT_INJECTION is not set
-# CONFIG_DEBUG_PAGEALLOC is not set
-CONFIG_NOP_TRACER=y
-CONFIG_HAVE_FUNCTION_TRACER=y
-CONFIG_HAVE_FUNCTION_GRAPH_TRACER=y
-CONFIG_HAVE_DYNAMIC_FTRACE=y
-CONFIG_HAVE_FTRACE_MCOUNT_RECORD=y
-CONFIG_HAVE_C_RECORDMCOUNT=y
-CONFIG_RING_BUFFER=y
-CONFIG_EVENT_TRACING=y
-CONFIG_EVENT_POWER_TRACING_DEPRECATED=y
-CONFIG_CONTEXT_SWITCH_TRACER=y
-CONFIG_RING_BUFFER_ALLOW_SWAP=y
-CONFIG_TRACING=y
-CONFIG_TRACING_SUPPORT=y
-CONFIG_FTRACE=y
-# CONFIG_FUNCTION_TRACER is not set
-# CONFIG_IRQSOFF_TRACER is not set
-# CONFIG_PREEMPT_TRACER is not set
-# CONFIG_SCHED_TRACER is not set
 CONFIG_ENABLE_DEFAULT_TRACERS=y
-CONFIG_BRANCH_PROFILE_NONE=y
-# CONFIG_PROFILE_ANNOTATED_BRANCHES is not set
-# CONFIG_PROFILE_ALL_BRANCHES is not set
-# CONFIG_STACK_TRACER is not set
-# CONFIG_BLK_DEV_IO_TRACE is not set
-# CONFIG_CPU_FREQ_SWITCH_PROFILER is not set
-# CONFIG_RING_BUFFER_BENCHMARK is not set
-# CONFIG_DYNAMIC_DEBUG is not set
-# CONFIG_DMA_API_DEBUG is not set
-# CONFIG_ATOMIC64_SELFTEST is not set
-# CONFIG_PANIC_ON_DATA_CORRUPTION is not set
-# CONFIG_SAMPLES is not set
-CONFIG_HAVE_ARCH_KGDB=y
-# CONFIG_KGDB is not set
-# CONFIG_TEST_KSTRTOX is not set
-# CONFIG_STRICT_DEVMEM is not set
-CONFIG_ARM_UNWIND=y
 CONFIG_DEBUG_USER=y
-# CONFIG_DEBUG_LL is not set
 CONFIG_PID_IN_CONTEXTIDR=y
-
-#
-# Security options
-#
-# CONFIG_KEYS is not set
-# CONFIG_SECURITY_DMESG_RESTRICT is not set
 CONFIG_SECURITY=y
-# CONFIG_SECURITYFS is not set
 CONFIG_SECURITY_NETWORK=y
-# CONFIG_SECURITY_NETWORK_XFRM is not set
-# CONFIG_SECURITY_PATH is not set
 CONFIG_LSM_MMAP_MIN_ADDR=4096
 CONFIG_SECURITY_SELINUX=y
-# CONFIG_SECURITY_SELINUX_BOOTPARAM is not set
-# CONFIG_SECURITY_SELINUX_DISABLE is not set
-CONFIG_SECURITY_SELINUX_DEVELOP=y
-CONFIG_SECURITY_SELINUX_AVC_STATS=y
-CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE=1
-# CONFIG_SECURITY_SELINUX_POLICYDB_VERSION_MAX is not set
-# CONFIG_SECURITY_TOMOYO is not set
-# CONFIG_SECURITY_APPARMOR is not set
-# CONFIG_SECURITY_YAMA is not set
-# CONFIG_IMA is not set
-CONFIG_DEFAULT_SECURITY_SELINUX=y
-# CONFIG_DEFAULT_SECURITY_DAC is not set
-CONFIG_DEFAULT_SECURITY="selinux"
-CONFIG_CRYPTO=y
-
-#
-# Crypto core or helper
-#
-CONFIG_CRYPTO_ALGAPI=y
-CONFIG_CRYPTO_ALGAPI2=y
-CONFIG_CRYPTO_AEAD=y
-CONFIG_CRYPTO_AEAD2=y
-CONFIG_CRYPTO_BLKCIPHER=y
-CONFIG_CRYPTO_BLKCIPHER2=y
-CONFIG_CRYPTO_HASH=y
-CONFIG_CRYPTO_HASH2=y
-CONFIG_CRYPTO_RNG2=y
-CONFIG_CRYPTO_PCOMP2=y
-CONFIG_CRYPTO_MANAGER=y
-CONFIG_CRYPTO_MANAGER2=y
-# CONFIG_CRYPTO_USER is not set
-CONFIG_CRYPTO_MANAGER_DISABLE_TESTS=y
-# CONFIG_CRYPTO_GF128MUL is not set
-# CONFIG_CRYPTO_NULL is not set
-# CONFIG_CRYPTO_PCRYPT is not set
-CONFIG_CRYPTO_WORKQUEUE=y
-# CONFIG_CRYPTO_CRYPTD is not set
-CONFIG_CRYPTO_AUTHENC=y
-
-#
-# Authenticated Encryption with Associated Data
-#
-# CONFIG_CRYPTO_CCM is not set
-# CONFIG_CRYPTO_GCM is not set
-# CONFIG_CRYPTO_SEQIV is not set
-
-#
-# Block modes
-#
-CONFIG_CRYPTO_CBC=y
-# CONFIG_CRYPTO_CTR is not set
-# CONFIG_CRYPTO_CTS is not set
-CONFIG_CRYPTO_ECB=y
-# CONFIG_CRYPTO_LRW is not set
-# CONFIG_CRYPTO_PCBC is not set
-# CONFIG_CRYPTO_XTS is not set
-
-#
-# Hash modes
-#
-CONFIG_CRYPTO_HMAC=y
-# CONFIG_CRYPTO_XCBC is not set
-# CONFIG_CRYPTO_VMAC is not set
-
-#
-# Digest
-#
-CONFIG_CRYPTO_CRC32C=y
-# CONFIG_CRYPTO_GHASH is not set
-CONFIG_CRYPTO_MD4=y
-CONFIG_CRYPTO_MD5=y
-# CONFIG_CRYPTO_MICHAEL_MIC is not set
-# CONFIG_CRYPTO_RMD128 is not set
-# CONFIG_CRYPTO_RMD160 is not set
-# CONFIG_CRYPTO_RMD256 is not set
-# CONFIG_CRYPTO_RMD320 is not set
-CONFIG_CRYPTO_SHA1=y
-CONFIG_CRYPTO_SHA256=y
-# CONFIG_CRYPTO_SHA512 is not set
-# CONFIG_CRYPTO_TGR192 is not set
-# CONFIG_CRYPTO_WP512 is not set
-
-#
-# Ciphers
-#
-CONFIG_CRYPTO_AES=y
-# CONFIG_CRYPTO_ANUBIS is not set
-CONFIG_CRYPTO_ARC4=y
-# CONFIG_CRYPTO_BLOWFISH is not set
-# CONFIG_CRYPTO_CAMELLIA is not set
-# CONFIG_CRYPTO_CAST5 is not set
-# CONFIG_CRYPTO_CAST6 is not set
-CONFIG_CRYPTO_DES=y
-# CONFIG_CRYPTO_FCRYPT is not set
-# CONFIG_CRYPTO_KHAZAD is not set
-# CONFIG_CRYPTO_SALSA20 is not set
-# CONFIG_CRYPTO_SEED is not set
-# CONFIG_CRYPTO_SERPENT is not set
-# CONFIG_CRYPTO_TEA is not set
 CONFIG_CRYPTO_TWOFISH=y
-CONFIG_CRYPTO_TWOFISH_COMMON=y
-
-#
-# Compression
-#
-CONFIG_CRYPTO_DEFLATE=y
-# CONFIG_CRYPTO_ZLIB is not set
-# CONFIG_CRYPTO_LZO is not set
-
-#
-# Random Number Generation
-#
 # CONFIG_CRYPTO_ANSI_CPRNG is not set
-# CONFIG_CRYPTO_USER_API_HASH is not set
-# CONFIG_CRYPTO_USER_API_SKCIPHER is not set
 # CONFIG_CRYPTO_HW is not set
-CONFIG_BINARY_PRINTF=y
-
-#
-# Library routines
-#
-CONFIG_BITREVERSE=y
-CONFIG_GENERIC_PCI_IOMAP=y
-CONFIG_GENERIC_IO=y
-CONFIG_CRC_CCITT=y
-CONFIG_CRC16=y
-# CONFIG_CRC_T10DIF is not set
-# CONFIG_CRC_ITU_T is not set
-CONFIG_CRC32=y
-# CONFIG_CRC32_SELFTEST is not set
-CONFIG_CRC32_SLICEBY8=y
-# CONFIG_CRC32_SLICEBY4 is not set
-# CONFIG_CRC32_SARWATE is not set
-# CONFIG_CRC32_BIT is not set
-# CONFIG_CRC7 is not set
-CONFIG_LIBCRC32C=y
-# CONFIG_CRC8 is not set
-CONFIG_AUDIT_GENERIC=y
-CONFIG_ZLIB_INFLATE=y
-CONFIG_ZLIB_DEFLATE=y
-CONFIG_LZO_COMPRESS=y
-CONFIG_LZO_DECOMPRESS=y
-# CONFIG_XZ_DEC is not set
-# CONFIG_XZ_DEC_BCJ is not set
-CONFIG_DECOMPRESS_GZIP=y
-CONFIG_GENERIC_ALLOCATOR=y
-CONFIG_REED_SOLOMON=y
-CONFIG_REED_SOLOMON_ENC8=y
-CONFIG_REED_SOLOMON_DEC8=y
-CONFIG_TEXTSEARCH=y
-CONFIG_TEXTSEARCH_KMP=y
-CONFIG_TEXTSEARCH_BM=y
-CONFIG_TEXTSEARCH_FSM=y
-CONFIG_HAS_IOMEM=y
-CONFIG_HAS_IOPORT=y
-CONFIG_HAS_DMA=y
-CONFIG_CPU_RMAP=y
-CONFIG_DQL=y
-CONFIG_NLATTR=y
-# CONFIG_AVERAGE is not set
-# CONFIG_CORDIC is not set
diff --git a/arch/arm/include/asm/Kbuild b/arch/arm/include/asm/Kbuild
index 960abce..7e027e6 100644
--- a/arch/arm/include/asm/Kbuild
+++ b/arch/arm/include/asm/Kbuild
@@ -12,7 +12,6 @@ generic-y += irq_regs.h
 generic-y += kdebug.h
 generic-y += local.h
 generic-y += local64.h
-generic-y += percpu.h
 generic-y += poll.h
 generic-y += resource.h
 generic-y += sections.h
diff --git a/arch/arm/include/asm/cacheflush.h b/arch/arm/include/asm/cacheflush.h
index 9ba1436..94db09d 100644
--- a/arch/arm/include/asm/cacheflush.h
+++ b/arch/arm/include/asm/cacheflush.h
@@ -49,6 +49,13 @@
  *
  *		Unconditionally clean and invalidate the entire cache.
  *
+ *     flush_kern_louis()
+ *
+ *             Flush data cache levels up to the level of unification
+ *             inner shareable and invalidate the I-cache.
+ *             Only needed from v7 onwards, falls back to flush_cache_all()
+ *             for all other processor versions.
+ *
  *	flush_user_all()
  *
  *		Clean and invalidate all user space cache entries
@@ -112,11 +119,12 @@
 struct cpu_cache_fns {
 	void (*flush_icache_all)(void);
 	void (*flush_kern_all)(void);
+	void (*flush_kern_louis)(void);
 	void (*flush_user_all)(void);
 	void (*flush_user_range)(unsigned long, unsigned long, unsigned int);
 
 	void (*coherent_kern_range)(unsigned long, unsigned long);
-	void (*coherent_user_range)(unsigned long, unsigned long);
+	int  (*coherent_user_range)(unsigned long, unsigned long);
 	void (*flush_kern_dcache_area)(void *, size_t);
 
 	void (*dma_map_area)(const void *, size_t, int);
@@ -136,6 +144,7 @@ extern struct cpu_cache_fns cpu_cache;
 
 #define __cpuc_flush_icache_all		cpu_cache.flush_icache_all
 #define __cpuc_flush_kern_all		cpu_cache.flush_kern_all
+#define __cpuc_flush_kern_louis		cpu_cache.flush_kern_louis
 #define __cpuc_flush_user_all		cpu_cache.flush_user_all
 #define __cpuc_flush_user_range		cpu_cache.flush_user_range
 #define __cpuc_coherent_kern_range	cpu_cache.coherent_kern_range
@@ -158,10 +167,11 @@ extern struct cpu_cache_fns cpu_cache;
 
 extern void __cpuc_flush_icache_all(void);
 extern void __cpuc_flush_kern_all(void);
+extern void __cpuc_flush_kern_louis(void);
 extern void __cpuc_flush_user_all(void);
 extern void __cpuc_flush_user_range(unsigned long, unsigned long, unsigned int);
 extern void __cpuc_coherent_kern_range(unsigned long, unsigned long);
-extern void __cpuc_coherent_user_range(unsigned long, unsigned long);
+extern int  __cpuc_coherent_user_range(unsigned long, unsigned long);
 extern void __cpuc_flush_dcache_area(void *, size_t);
 
 /*
@@ -225,6 +235,11 @@ static inline void __flush_icache_all(void)
 	__flush_icache_preferred();
 }
 
+/*
+ * Flush caches up to Level of Unification Inner Shareable
+ */
+#define flush_cache_louis()		__cpuc_flush_kern_louis()
+
 #define flush_cache_all()		__cpuc_flush_kern_all()
 
 static inline void vivt_flush_cache_mm(struct mm_struct *mm)
diff --git a/arch/arm/include/asm/glue-cache.h b/arch/arm/include/asm/glue-cache.h
index 7e30874..2d6a7de 100644
--- a/arch/arm/include/asm/glue-cache.h
+++ b/arch/arm/include/asm/glue-cache.h
@@ -132,6 +132,7 @@
 #ifndef MULTI_CACHE
 #define __cpuc_flush_icache_all		__glue(_CACHE,_flush_icache_all)
 #define __cpuc_flush_kern_all		__glue(_CACHE,_flush_kern_cache_all)
+#define __cpuc_flush_kern_louis		__glue(_CACHE,_flush_kern_cache_louis)
 #define __cpuc_flush_user_all		__glue(_CACHE,_flush_user_cache_all)
 #define __cpuc_flush_user_range		__glue(_CACHE,_flush_user_cache_range)
 #define __cpuc_coherent_kern_range	__glue(_CACHE,_coherent_kern_range)
diff --git a/arch/arm/include/asm/highmem.h b/arch/arm/include/asm/highmem.h
index 8c5e828..91b99ab 100644
--- a/arch/arm/include/asm/highmem.h
+++ b/arch/arm/include/asm/highmem.h
@@ -41,6 +41,13 @@ extern void kunmap_high(struct page *page);
 #endif
 #endif
 
+/*
+ * Needed to be able to broadcast the TLB invalidation for kmap.
+ */
+#ifdef CONFIG_ARM_ERRATA_798181
+#undef ARCH_NEEDS_KMAP_HIGH_GET
+#endif
+
 #ifdef ARCH_NEEDS_KMAP_HIGH_GET
 extern void *kmap_high_get(struct page *page);
 #else
diff --git a/arch/arm/include/asm/mmu.h b/arch/arm/include/asm/mmu.h
index cf0c81f..8e66fc3 100644
--- a/arch/arm/include/asm/mmu.h
+++ b/arch/arm/include/asm/mmu.h
@@ -5,19 +5,16 @@
 
 typedef struct {
 #ifdef CONFIG_CPU_HAS_ASID
-	unsigned int id;
-	raw_spinlock_t id_lock;
+	atomic64_t	id;
 #endif
 	unsigned int kvm_seq;
 	unsigned long	sigpage;
 } mm_context_t;
 
 #ifdef CONFIG_CPU_HAS_ASID
-#define ASID(mm)	((mm)->context.id & 255)
-
-/* init_mm.context.id_lock should be initialized. */
-#define INIT_MM_CONTEXT(name)                                                 \
-	.context.id_lock    = __RAW_SPIN_LOCK_UNLOCKED(name.context.id_lock),
+#define ASID_BITS	8
+#define ASID_MASK	((~0ULL) << ASID_BITS)
+#define ASID(mm)	((mm)->context.id.counter & ~ASID_MASK)
 #else
 #define ASID(mm)	(0)
 #endif
@@ -30,7 +27,7 @@ typedef struct {
  *  modified for 2.6 by Hyok S. Choi <hyok.choi@samsung.com>
  */
 typedef struct {
-	unsigned long		end_brk;
+	unsigned long	end_brk;
 } mm_context_t;
 
 #endif
@@ -40,6 +37,8 @@ typedef struct {
  * so enable interrupts over the context switch to avoid high
  * latency.
  */
+#ifndef CONFIG_CPU_HAS_ASID
 #define __ARCH_WANT_INTERRUPTS_ON_CTXSW
+#endif
 
 #endif
diff --git a/arch/arm/include/asm/mmu_context.h b/arch/arm/include/asm/mmu_context.h
index a0b3cac..07cd5ed 100644
--- a/arch/arm/include/asm/mmu_context.h
+++ b/arch/arm/include/asm/mmu_context.h
@@ -24,66 +24,39 @@ void __check_kvm_seq(struct mm_struct *mm);
 
 #ifdef CONFIG_CPU_HAS_ASID
 
-/*
- * On ARMv6, we have the following structure in the Context ID:
- *
- * 31                         7          0
- * +-------------------------+-----------+
- * |      process ID         |   ASID    |
- * +-------------------------+-----------+
- * |              context ID             |
- * +-------------------------------------+
- *
- * The ASID is used to tag entries in the CPU caches and TLBs.
- * The context ID is used by debuggers and trace logic, and
- * should be unique within all running processes.
- */
-#define ASID_BITS		8
-#define ASID_MASK		((~0) << ASID_BITS)
-#define ASID_FIRST_VERSION	(1 << ASID_BITS)
-
-extern unsigned int cpu_last_asid;
-#ifdef CONFIG_SMP
-DECLARE_PER_CPU(struct mm_struct *, current_mm);
-#endif
-
-void __init_new_context(struct task_struct *tsk, struct mm_struct *mm);
-void __new_context(struct mm_struct *mm);
-
-static inline void check_context(struct mm_struct *mm)
+void check_and_switch_context(struct mm_struct *mm, struct task_struct *tsk);
+#define init_new_context(tsk,mm)	({ atomic64_set(&mm->context.id, 0); 0; })
+
+#ifdef CONFIG_ARM_ERRATA_798181
+void a15_erratum_get_cpumask(int this_cpu, struct mm_struct *mm,
+			     cpumask_t *mask);
+#else  /* !CONFIG_ARM_ERRATA_798181 */
+static inline void a15_erratum_get_cpumask(int this_cpu, struct mm_struct *mm,
+					   cpumask_t *mask)
 {
-	/*
-	 * This code is executed with interrupts enabled. Therefore,
-	 * mm->context.id cannot be updated to the latest ASID version
-	 * on a different CPU (and condition below not triggered)
-	 * without first getting an IPI to reset the context. The
-	 * alternative is to take a read_lock on mm->context.id_lock
-	 * (after changing its type to rwlock_t).
-	 */
-	if (unlikely((mm->context.id ^ cpu_last_asid) >> ASID_BITS))
-		__new_context(mm);
-
-	if (unlikely(mm->context.kvm_seq != init_mm.context.kvm_seq))
-		__check_kvm_seq(mm);
 }
+#endif /* CONFIG_ARM_ERRATA_798181 */
 
-#define init_new_context(tsk,mm)	(__init_new_context(tsk,mm),0)
-
-#else
+#else	/* !CONFIG_CPU_HAS_ASID */
 
-static inline void check_context(struct mm_struct *mm)
+static inline void check_and_switch_context(struct mm_struct *mm,
+					    struct task_struct *tsk)
 {
 #ifdef CONFIG_MMU
 	if (unlikely(mm->context.kvm_seq != init_mm.context.kvm_seq))
 		__check_kvm_seq(mm);
+	cpu_switch_mm(mm->pgd, mm);
 #endif
 }
 
 #define init_new_context(tsk,mm)	0
 
-#endif
+#define finish_arch_post_lock_switch()	do { } while (0)
+
+#endif	/* CONFIG_CPU_HAS_ASID */
 
 #define destroy_context(mm)		do { } while(0)
+#define activate_mm(prev,next)		switch_mm(prev, next, NULL)
 
 /*
  * This is called when "tsk" is about to enter lazy TLB mode.
@@ -119,12 +92,7 @@ switch_mm(struct mm_struct *prev, struct mm_struct *next,
 		__flush_icache_all();
 #endif
 	if (!cpumask_test_and_set_cpu(cpu, mm_cpumask(next)) || prev != next) {
-#ifdef CONFIG_SMP
-		struct mm_struct **crt_mm = &per_cpu(current_mm, cpu);
-		*crt_mm = next;
-#endif
-		check_context(next);
-		cpu_switch_mm(next->pgd, next);
+		check_and_switch_context(next, tsk);
 		if (cache_is_vivt())
 			cpumask_clear_cpu(cpu, mm_cpumask(prev));
 	}
@@ -132,6 +100,5 @@ switch_mm(struct mm_struct *prev, struct mm_struct *next,
 }
 
 #define deactivate_mm(tsk,mm)	do { } while (0)
-#define activate_mm(prev,next)	switch_mm(prev, next, NULL)
 
 #endif
diff --git a/arch/arm/include/asm/thread_info.h b/arch/arm/include/asm/thread_info.h
index 2eb0c2c..0f3c3b9 100644
--- a/arch/arm/include/asm/thread_info.h
+++ b/arch/arm/include/asm/thread_info.h
@@ -153,7 +153,9 @@ extern int vfp_restore_user_hwstate(struct user_vfp __user *,
 #define TIF_MEMDIE		18	/* is terminating due to OOM killer */
 #define TIF_RESTORE_SIGMASK	20
 #define TIF_SECCOMP		21
-#define TIF_MM_RELEASED		22	/* task MM has been released */
+#define TIF_SWITCH_MM		22	/* deferred switch_mm */
+#define TIF_MM_RELEASED		23	/* task MM has been released */
+
 #define _TIF_SIGPENDING		(1 << TIF_SIGPENDING)
 #define _TIF_NEED_RESCHED	(1 << TIF_NEED_RESCHED)
 #define _TIF_NOTIFY_RESUME	(1 << TIF_NOTIFY_RESUME)
diff --git a/arch/arm/include/asm/tlbflush.h b/arch/arm/include/asm/tlbflush.h
index d44d33f..068c449 100644
--- a/arch/arm/include/asm/tlbflush.h
+++ b/arch/arm/include/asm/tlbflush.h
@@ -34,10 +34,13 @@
 #define TLB_V6_D_ASID	(1 << 17)
 #define TLB_V6_I_ASID	(1 << 18)
 
+#define TLB_V6_BP	(1 << 19)
+
 /* Unified Inner Shareable TLB operations (ARMv7 MP extensions) */
-#define TLB_V7_UIS_PAGE	(1 << 19)
-#define TLB_V7_UIS_FULL (1 << 20)
-#define TLB_V7_UIS_ASID (1 << 21)
+#define TLB_V7_UIS_PAGE	(1 << 20)
+#define TLB_V7_UIS_FULL (1 << 21)
+#define TLB_V7_UIS_ASID (1 << 22)
+#define TLB_V7_UIS_BP	(1 << 23)
 
 #define TLB_BARRIER	(1 << 28)
 #define TLB_L2CLEAN_FR	(1 << 29)		/* Feroceon */
@@ -165,7 +168,8 @@
 #define v6wbi_tlb_flags (TLB_WB | TLB_DCLEAN | TLB_BARRIER | \
 			 TLB_V6_I_FULL | TLB_V6_D_FULL | \
 			 TLB_V6_I_PAGE | TLB_V6_D_PAGE | \
-			 TLB_V6_I_ASID | TLB_V6_D_ASID)
+			 TLB_V6_I_ASID | TLB_V6_D_ASID | \
+			 TLB_V6_BP)
 
 #ifdef CONFIG_CPU_TLB_V6
 # define v6wbi_possible_flags	v6wbi_tlb_flags
@@ -180,10 +184,12 @@
 # define v6wbi_always_flags	(-1UL)
 #endif
 
-#define v7wbi_tlb_flags_smp	(TLB_WB | TLB_DCLEAN | TLB_BARRIER | \
-			 TLB_V7_UIS_FULL | TLB_V7_UIS_PAGE | TLB_V7_UIS_ASID)
+#define v7wbi_tlb_flags_smp	(TLB_WB | TLB_BARRIER | \
+				 TLB_V7_UIS_FULL | TLB_V7_UIS_PAGE | \
+				 TLB_V7_UIS_ASID | TLB_V7_UIS_BP)
 #define v7wbi_tlb_flags_up	(TLB_WB | TLB_DCLEAN | TLB_BARRIER | \
-			 TLB_V6_U_FULL | TLB_V6_U_PAGE | TLB_V6_U_ASID)
+				 TLB_V6_U_FULL | TLB_V6_U_PAGE | \
+				 TLB_V6_U_ASID | TLB_V6_BP)
 
 #ifdef CONFIG_CPU_TLB_V7
 
@@ -451,6 +457,35 @@ static inline void local_flush_tlb_kernel_page(unsigned long kaddr)
 	}
 }
 
+static inline void local_flush_bp_all(void)
+{
+	const int zero = 0;
+	const unsigned int __tlb_flag = __cpu_tlb_flags;
+
+	if (tlb_flag(TLB_V7_UIS_BP))
+		asm("mcr p15, 0, %0, c7, c1, 6" : : "r" (zero));
+	else if (tlb_flag(TLB_V6_BP))
+		asm("mcr p15, 0, %0, c7, c5, 6" : : "r" (zero));
+
+	if (tlb_flag(TLB_BARRIER))
+		isb();
+}
+
+#ifdef CONFIG_ARM_ERRATA_798181
+static inline void dummy_flush_tlb_a15_erratum(void)
+{
+	/*
+	 * Dummy TLBIMVAIS. Using the unmapped address 0 and ASID 0.
+	 */
+	asm("mcr p15, 0, %0, c8, c3, 1" : : "r" (0));
+	dsb();
+}
+#else
+static inline void dummy_flush_tlb_a15_erratum(void)
+{
+}
+#endif
+
 /*
  *	flush_pmd_entry
  *
@@ -501,6 +536,7 @@ static inline void clean_pmd_entry(void *pmd)
 #define flush_tlb_kernel_page	local_flush_tlb_kernel_page
 #define flush_tlb_range		local_flush_tlb_range
 #define flush_tlb_kernel_range	local_flush_tlb_kernel_range
+#define flush_bp_all		local_flush_bp_all
 #else
 extern void flush_tlb_all(void);
 extern void flush_tlb_mm(struct mm_struct *mm);
@@ -508,6 +544,7 @@ extern void flush_tlb_page(struct vm_area_struct *vma, unsigned long uaddr);
 extern void flush_tlb_kernel_page(unsigned long kaddr);
 extern void flush_tlb_range(struct vm_area_struct *vma, unsigned long start, unsigned long end);
 extern void flush_tlb_kernel_range(unsigned long start, unsigned long end);
+extern void flush_bp_all(void);
 #endif
 
 /*
diff --git a/arch/arm/kernel/asm-offsets.c b/arch/arm/kernel/asm-offsets.c
index 1429d89..ebbb537 100644
--- a/arch/arm/kernel/asm-offsets.c
+++ b/arch/arm/kernel/asm-offsets.c
@@ -105,7 +105,7 @@ int main(void)
   BLANK();
 #endif
 #ifdef CONFIG_CPU_HAS_ASID
-  DEFINE(MM_CONTEXT_ID,		offsetof(struct mm_struct, context.id));
+  DEFINE(MM_CONTEXT_ID,		offsetof(struct mm_struct, context.id.counter));
   BLANK();
 #endif
   DEFINE(VMA_VM_MM,		offsetof(struct vm_area_struct, vm_mm));
diff --git a/arch/arm/kernel/machine_kexec.c b/arch/arm/kernel/machine_kexec.c
index c355aeb..fa27058 100644
--- a/arch/arm/kernel/machine_kexec.c
+++ b/arch/arm/kernel/machine_kexec.c
@@ -110,7 +110,10 @@ void machine_kexec(struct kimage *image)
 	unsigned long reboot_code_buffer_phys;
 	void *reboot_code_buffer;
 
-	arch_kexec();
+	if (num_online_cpus() > 1) {
+		pr_err("kexec: error: multiple CPUs still online\n");
+		return;
+	}
 
 	page_list = image->head & PAGE_MASK;
 
diff --git a/arch/arm/kernel/process.c b/arch/arm/kernel/process.c
index 95549a4..39267d7 100644
--- a/arch/arm/kernel/process.c
+++ b/arch/arm/kernel/process.c
@@ -14,6 +14,7 @@
 #include <linux/sched.h>
 #include <linux/kernel.h>
 #include <linux/mm.h>
+#include <linux/vmalloc.h>
 #include <linux/stddef.h>
 #include <linux/unistd.h>
 #include <linux/user.h>
@@ -304,39 +305,65 @@ int __init reboot_setup(char *str)
 
 __setup("reboot=", reboot_setup);
 
+/*
+ * Called by kexec, immediately prior to machine_kexec().
+ *
+ * This must completely disable all secondary CPUs; simply causing those CPUs
+ * to execute e.g. a RAM-based pin loop is not sufficient. This allows the
+ * kexec'd kernel to use any and all RAM as it sees fit, without having to
+ * avoid any code or data used by any SW CPU pin loop. The CPU hotplug
+ * functionality embodied in disable_nonboot_cpus() to achieve this.
+ */
 void machine_shutdown(void)
 {
-	preempt_disable();
 #ifdef CONFIG_SMP
-	/*
-	 * Disable preemption so we're guaranteed to
-	 * run to power off or reboot and prevent
-	 * the possibility of switching to another
-	 * thread that might wind up blocking on
-	 * one of the stopped CPUs.
-	 */
 	preempt_disable();
-
-	smp_send_stop();
 #endif
+	disable_nonboot_cpus();
 }
 
+/*
+ * Halting simply requires that the secondary CPUs stop performing any
+ * activity (executing tasks, handling interrupts). smp_send_stop()
+ * achieves this.
+ */
 void machine_halt(void)
 {
-	machine_shutdown();
+	preempt_disable();
+	smp_send_stop();
+
+	local_irq_disable();
 	while (1);
 }
 
+/*
+ * Power-off simply requires that the secondary CPUs stop performing any
+ * activity (executing tasks, handling interrupts). smp_send_stop()
+ * achieves this. When the system power is turned off, it will take all CPUs
+ * with it.
+ */
 void machine_power_off(void)
 {
-	machine_shutdown();
+	smp_send_stop();
+
 	if (pm_power_off)
 		pm_power_off();
 }
 
+/*
+ * Restart requires that the secondary CPUs stop performing any activity
+ * while the primary CPU resets the system. Systems with a single CPU can
+ * use soft_restart() as their machine descriptor's .restart hook, since that
+ * will cause the only available CPU to reset. Systems with multiple CPUs must
+ * provide a HW restart implementation, to ensure that all CPUs reset at once.
+ * This is required so that any code running after reset on the primary CPU
+ * doesn't have to co-ordinate with other CPUs to ensure they aren't still
+ * executing pre-reset code, and using RAM that the primary CPU's code wishes
+ * to use. Implementing such co-ordination would be essentially impossible.
+ */
 void machine_restart(char *cmd)
 {
-	machine_shutdown();
+	smp_send_stop();
 
 	/* Flush the console to make sure all the relevant messages make it
 	 * out to the console drivers */
@@ -387,7 +414,12 @@ static void show_data(unsigned long addr, int nbytes, const char *name)
 		printk("%04lx ", (unsigned long)p & 0xffff);
 		for (j = 0; j < 8; j++) {
 			u32	data;
-			if (probe_kernel_address(p, data)) {
+			/*
+			 * vmalloc addresses may point to
+			 * memory-mapped peripherals
+			 */
+			if (is_vmalloc_addr(p) ||
+			    probe_kernel_address(p, data)) {
 				printk(" ********");
 			} else {
 				printk(" %08x", data);
diff --git a/arch/arm/kernel/setup.c b/arch/arm/kernel/setup.c
index 28b114f..0f26603 100644
--- a/arch/arm/kernel/setup.c
+++ b/arch/arm/kernel/setup.c
@@ -363,6 +363,23 @@ void __init early_print(const char *str, ...)
 	printk("%s", buf);
 }
 
+static void __init cpuid_init_hwcaps(void)
+{
+	unsigned int divide_instrs;
+
+	if (cpu_architecture() < CPU_ARCH_ARMv7)
+		return;
+
+	divide_instrs = (read_cpuid_ext(CPUID_EXT_ISAR0) & 0x0f000000) >> 24;
+
+	switch (divide_instrs) {
+	case 2:
+		elf_hwcap |= HWCAP_IDIVA;
+	case 1:
+		elf_hwcap |= HWCAP_IDIVT;
+	}
+}
+
 static void __init feat_v6_fixup(void)
 {
 	int id = read_cpuid_id();
@@ -393,6 +410,12 @@ void cpu_init(void)
 		BUG();
 	}
 
+	/*
+	 * This only works on resume and secondary cores. For booting on the
+	 * boot cpu, smp_prepare_boot_cpu is called after percpu area setup.
+	 */
+	set_my_cpu_offset(per_cpu_offset(cpu));
+
 	cpu_proc_init();
 
 	/*
@@ -486,6 +509,9 @@ static void __init setup_processor(void)
 	snprintf(elf_platform, ELF_PLATFORM_SIZE, "%s%c",
 		 list->elf_name, ENDIANNESS);
 	elf_hwcap = list->elf_hwcap;
+
+	cpuid_init_hwcaps();
+
 #ifndef CONFIG_ARM_THUMB
 	elf_hwcap &= ~HWCAP_THUMB;
 #endif
diff --git a/arch/arm/kernel/smp.c b/arch/arm/kernel/smp.c
index 5bca467..f25a3cd 100644
--- a/arch/arm/kernel/smp.c
+++ b/arch/arm/kernel/smp.c
@@ -219,8 +219,11 @@ int __cpu_disable(void)
 	/*
 	 * Flush user cache and TLB mappings, and then remove this CPU
 	 * from the vm mask set of all processes.
+	 *
+	 * Caches are flushed to the Level of Unification Inner Shareable
+	 * to write-back dirty lines to unified caches shared by all CPUs.
 	 */
-	flush_cache_all();
+	flush_cache_louis();
 	local_flush_tlb_all();
 
 	read_lock(&tasklist_lock);
@@ -247,6 +250,13 @@ void __cpu_die(unsigned int cpu)
 	}
 	pr_debug("CPU%u: shutdown\n", cpu);
 
+	/*
+	 * platform_cpu_kill() is generally expected to do the powering off
+	 * and/or cutting of clocks to the dying CPU.  Optionally, this may
+	 * be done by the CPU which is dying in preference to supporting
+	 * this call, but that means there is _no_ synchronisation between
+	 * the requesting CPU and the dying CPU actually losing power.
+	 */
 	if (!platform_cpu_kill(cpu))
 		printk("CPU%u: unable to kill\n", cpu);
 }
@@ -266,14 +276,41 @@ void __ref cpu_die(void)
 	idle_task_exit();
 
 	local_irq_disable();
-	mb();
 
-	/* Tell __cpu_die() that this CPU is now safe to dispose of */
+	/*
+	 * Flush the data out of the L1 cache for this CPU.  This must be
+	 * before the completion to ensure that data is safely written out
+	 * before platform_cpu_kill() gets called - which may disable
+	 * *this* CPU and power down its cache.
+	 */
+	flush_cache_louis();
+
+	/*
+	 * Tell __cpu_die() that this CPU is now safe to dispose of.  Once
+	 * this returns, power and/or clocks can be removed at any point
+	 * from this CPU and its cache by platform_cpu_kill().
+	 */
 	complete(&cpu_died);
 
 	/*
-	 * actual CPU shutdown procedure is at least platform (if not
-	 * CPU) specific.
+	 * Ensure that the cache lines associated with that completion are
+	 * written out.  This covers the case where _this_ CPU is doing the
+	 * powering down, to ensure that the completion is visible to the
+	 * CPU waiting for this one.
+	 */
+	flush_cache_louis();
+
+	/*
+	 * The actual CPU shutdown procedure is at least platform (if not
+	 * CPU) specific.  This may remove power, or it may simply spin.
+	 *
+	 * Platforms are generally expected *NOT* to return from this call,
+	 * although there are some which do because they have no way to
+	 * power down the CPU.  These platforms are the _only_ reason we
+	 * have a return path which uses the fragment of assembly below.
+	 *
+	 * The return path should not be used for platforms which can
+	 * power off the CPU.
 	 */
 	platform_cpu_die(cpu);
 
@@ -310,22 +347,30 @@ static void __cpuinit smp_store_cpu_info(unsigned int cpuid)
 asmlinkage void __cpuinit secondary_start_kernel(void)
 {
 	struct mm_struct *mm = &init_mm;
-	unsigned int cpu = smp_processor_id();
+	unsigned int cpu;
+
+	/*
+	 * The identity mapping is uncached (strongly ordered), so
+	 * switch away from it before attempting any exclusive accesses.
+	 */
+	cpu_switch_mm(mm->pgd, mm);
+	local_flush_bp_all();
+	enter_lazy_tlb(mm, current);
+	local_flush_tlb_all();
 
 	/*
 	 * All kernel threads share the same mm context; grab a
 	 * reference and switch to it.
 	 */
+	cpu = smp_processor_id();
 	atomic_inc(&mm->mm_count);
 	current->active_mm = mm;
 	cpumask_set_cpu(cpu, mm_cpumask(mm));
-	cpu_switch_mm(mm->pgd, mm);
-	enter_lazy_tlb(mm, current);
-	local_flush_tlb_all();
+
+	cpu_init();
 
 	pr_debug("CPU%u: Booted secondary processor\n", cpu);
 
-	cpu_init();
 	preempt_disable();
 	trace_hardirqs_off();
 
@@ -379,9 +424,7 @@ void __init smp_cpus_done(unsigned int max_cpus)
 
 void __init smp_prepare_boot_cpu(void)
 {
-	unsigned int cpu = smp_processor_id();
-
-	per_cpu(cpu_data, cpu).idle = current;
+	set_my_cpu_offset(per_cpu_offset(smp_processor_id()));
 }
 
 void __init smp_prepare_cpus(unsigned int max_cpus)
@@ -699,17 +742,6 @@ void smp_send_reschedule(int cpu)
 	smp_cross_call(cpumask_of(cpu), IPI_RESCHEDULE);
 }
 
-#ifdef CONFIG_HOTPLUG_CPU
-static void smp_kill_cpus(cpumask_t *mask)
-{
-	unsigned int cpu;
-	for_each_cpu(cpu, mask)
-		platform_cpu_kill(cpu);
-}
-#else
-static void smp_kill_cpus(cpumask_t *mask) { }
-#endif
-
 void smp_send_stop(void)
 {
 	unsigned long timeout;
@@ -727,8 +759,6 @@ void smp_send_stop(void)
 
 	if (num_active_cpus() > 1)
 		pr_warning("SMP: failed to stop secondary CPUs\n");
-
-	smp_kill_cpus(&mask);
 }
 
 /*
diff --git a/arch/arm/kernel/smp_tlb.c b/arch/arm/kernel/smp_tlb.c
index 02c5d2c..a98b62d 100644
--- a/arch/arm/kernel/smp_tlb.c
+++ b/arch/arm/kernel/smp_tlb.c
@@ -12,6 +12,7 @@
 
 #include <asm/smp_plat.h>
 #include <asm/tlbflush.h>
+#include <asm/mmu_context.h>
 
 /**********************************************************************/
 
@@ -64,12 +65,64 @@ static inline void ipi_flush_tlb_kernel_range(void *arg)
 	local_flush_tlb_kernel_range(ta->ta_start, ta->ta_end);
 }
 
+static inline void ipi_flush_bp_all(void *ignored)
+{
+	local_flush_bp_all();
+}
+
+#ifdef CONFIG_ARM_ERRATA_798181
+static int erratum_a15_798181(void)
+{
+	unsigned int midr = read_cpuid_id();
+
+	/* Cortex-A15 r0p0..r3p2 affected */
+	if ((midr & 0xff0ffff0) != 0x410fc0f0 || midr > 0x413fc0f2)
+		return 0;
+	return 1;
+}
+#else
+static int erratum_a15_798181(void)
+{
+	return 0;
+}
+#endif
+
+static void ipi_flush_tlb_a15_erratum(void *arg)
+{
+	dmb();
+}
+
+static void broadcast_tlb_a15_erratum(void)
+{
+	if (!erratum_a15_798181())
+		return;
+
+	dummy_flush_tlb_a15_erratum();
+	smp_call_function(ipi_flush_tlb_a15_erratum, NULL, 1);
+}
+
+static void broadcast_tlb_mm_a15_erratum(struct mm_struct *mm)
+{
+	int this_cpu;
+	cpumask_t mask = { CPU_BITS_NONE };
+
+	if (!erratum_a15_798181())
+		return;
+
+	dummy_flush_tlb_a15_erratum();
+	this_cpu = get_cpu();
+	a15_erratum_get_cpumask(this_cpu, mm, &mask);
+	smp_call_function_many(&mask, ipi_flush_tlb_a15_erratum, NULL, 1);
+	put_cpu();
+}
+
 void flush_tlb_all(void)
 {
 	if (tlb_ops_need_broadcast())
 		on_each_cpu(ipi_flush_tlb_all, NULL, 1);
 	else
 		local_flush_tlb_all();
+	broadcast_tlb_a15_erratum();
 }
 
 void flush_tlb_mm(struct mm_struct *mm)
@@ -78,6 +131,7 @@ void flush_tlb_mm(struct mm_struct *mm)
 		on_each_cpu_mask(mm_cpumask(mm), ipi_flush_tlb_mm, mm, 1);
 	else
 		local_flush_tlb_mm(mm);
+	broadcast_tlb_mm_a15_erratum(mm);
 }
 
 void flush_tlb_page(struct vm_area_struct *vma, unsigned long uaddr)
@@ -90,6 +144,7 @@ void flush_tlb_page(struct vm_area_struct *vma, unsigned long uaddr)
 					&ta, 1);
 	} else
 		local_flush_tlb_page(vma, uaddr);
+	broadcast_tlb_mm_a15_erratum(vma->vm_mm);
 }
 
 void flush_tlb_kernel_page(unsigned long kaddr)
@@ -100,6 +155,7 @@ void flush_tlb_kernel_page(unsigned long kaddr)
 		on_each_cpu(ipi_flush_tlb_kernel_page, &ta, 1);
 	} else
 		local_flush_tlb_kernel_page(kaddr);
+	broadcast_tlb_a15_erratum();
 }
 
 void flush_tlb_range(struct vm_area_struct *vma,
@@ -114,6 +170,7 @@ void flush_tlb_range(struct vm_area_struct *vma,
 					&ta, 1);
 	} else
 		local_flush_tlb_range(vma, start, end);
+	broadcast_tlb_mm_a15_erratum(vma->vm_mm);
 }
 
 void flush_tlb_kernel_range(unsigned long start, unsigned long end)
@@ -125,5 +182,13 @@ void flush_tlb_kernel_range(unsigned long start, unsigned long end)
 		on_each_cpu(ipi_flush_tlb_kernel_range, &ta, 1);
 	} else
 		local_flush_tlb_kernel_range(start, end);
+	broadcast_tlb_a15_erratum();
 }
 
+void flush_bp_all(void)
+{
+	if (tlb_ops_need_broadcast())
+		on_each_cpu(ipi_flush_bp_all, NULL, 1);
+	else
+		local_flush_bp_all();
+}
diff --git a/arch/arm/kernel/suspend.c b/arch/arm/kernel/suspend.c
index 1794cc3..2246e53 100644
--- a/arch/arm/kernel/suspend.c
+++ b/arch/arm/kernel/suspend.c
@@ -53,6 +53,7 @@ int cpu_suspend(unsigned long arg, int (*fn)(unsigned long))
 	ret = __cpu_suspend(arg, fn);
 	if (ret == 0) {
 		cpu_switch_mm(mm->pgd, mm);
+		local_flush_bp_all();
 		local_flush_tlb_all();
 	}
 
diff --git a/arch/arm/kernel/traps.c b/arch/arm/kernel/traps.c
index 85e4ad7..d208365 100644
--- a/arch/arm/kernel/traps.c
+++ b/arch/arm/kernel/traps.c
@@ -508,14 +508,14 @@ static int bad_syscall(int n, struct pt_regs *regs)
 	return regs->ARM_r0;
 }
 
-static inline void
+static inline int
 do_cache_op(unsigned long start, unsigned long end, int flags)
 {
 	struct mm_struct *mm = current->active_mm;
 	struct vm_area_struct *vma;
 
 	if (end < start || flags)
-		return;
+		return -EINVAL;
 
 	down_read(&mm->mmap_sem);
 	vma = find_vma(mm, start);
@@ -526,10 +526,10 @@ do_cache_op(unsigned long start, unsigned long end, int flags)
 			end = vma->vm_end;
 
 		up_read(&mm->mmap_sem);
-		flush_cache_user_range(start, end);
-		return;
+		return flush_cache_user_range(start, end);
 	}
 	up_read(&mm->mmap_sem);
+	return -EINVAL;
 }
 
 /*
@@ -575,8 +575,7 @@ asmlinkage int arm_syscall(int no, struct pt_regs *regs)
 	 * the specified region).
 	 */
 	case NR(cacheflush):
-		do_cache_op(regs->ARM_r0, regs->ARM_r1, regs->ARM_r2);
-		return 0;
+		return do_cache_op(regs->ARM_r0, regs->ARM_r1, regs->ARM_r2);
 
 	case NR(usr26):
 		if (!(elf_hwcap & HWCAP_26BIT))
diff --git a/arch/arm/mach-exynos/hotplug.c b/arch/arm/mach-exynos/hotplug.c
index 9c17a0a..652aa68 100644
--- a/arch/arm/mach-exynos/hotplug.c
+++ b/arch/arm/mach-exynos/hotplug.c
@@ -27,7 +27,6 @@ static inline void cpu_enter_lowpower(void)
 {
 	unsigned int v;
 
-	flush_cache_all();
 	asm volatile(
 	"	mcr	p15, 0, %1, c7, c5, 0\n"
 	"	mcr	p15, 0, %1, c7, c10, 4\n"
diff --git a/arch/arm/mach-highbank/hotplug.c b/arch/arm/mach-highbank/hotplug.c
index 977cebb..ccd01cc 100644
--- a/arch/arm/mach-highbank/hotplug.c
+++ b/arch/arm/mach-highbank/hotplug.c
@@ -18,7 +18,6 @@
 #include <linux/smp.h>
 
 #include <asm/smp_scu.h>
-#include <asm/cacheflush.h>
 
 #include "core.h"
 
@@ -35,8 +34,6 @@ int platform_cpu_kill(unsigned int cpu)
  */
 void platform_cpu_die(unsigned int cpu)
 {
-	flush_cache_all();
-
 	highbank_set_cpu_jump(cpu, secondary_startup);
 	scu_power_mode(scu_base_addr, SCU_PM_POWEROFF);
 
diff --git a/arch/arm/mach-imx/hotplug.c b/arch/arm/mach-imx/hotplug.c
index 89493ab..f4860e9 100644
--- a/arch/arm/mach-imx/hotplug.c
+++ b/arch/arm/mach-imx/hotplug.c
@@ -26,7 +26,6 @@ int platform_cpu_kill(unsigned int cpu)
  */
 void platform_cpu_die(unsigned int cpu)
 {
-	flush_cache_all();
 	imx_enable_cpu(cpu, false);
 	cpu_do_idle();
 
diff --git a/arch/arm/mach-msm/Kconfig b/arch/arm/mach-msm/Kconfig
index d3dec12..ceecbbe 100644
--- a/arch/arm/mach-msm/Kconfig
+++ b/arch/arm/mach-msm/Kconfig
@@ -1615,6 +1615,31 @@ config MSM_DALRPC_TEST
 
 if CPU_FREQ_MSM
 
+config MSM_CPUFREQ_LIMITER
+	tristate "MSM CPU frequency limiter"
+	default n
+	help
+	  This driver limits MSM CPU frequency through sysfs file system.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called cpufreq_stats.
+
+	  If in doubt, say N.
+
+
+config CPU_OVERCLOCK
+	bool "Enable CPU Overclocking option"
+	default n
+	help
+	  Krait overclocking up to 2 GHz
+
+config OC_ULTIMATE
+	bool "allow 2.3 GHZ max OC option"
+	depends on CPU_OVERCLOCK
+	default n
+	help
+	  Unlock the ultimate Overclock freq speed @ 2.3 GHz
+
 config MSM_CPU_FREQ_SET_MIN_MAX
 	bool "Set Min/Max CPU frequencies."
 	default n
@@ -1640,7 +1665,6 @@ config MSM_CPU_VOLTAGE_CONTROL
  	help
  	  This enables userspace CPU Voltage Control
 
-
 config MSM_AVS_HW
 	bool "Enable Adaptive Voltage Scaling (AVS)"
 	default n
@@ -2645,6 +2669,14 @@ config MSM_CPU_PWRCTL
 	  stand alone power collapse operation. Selecting this option
 	  ensures that they are always off.
 
+config FORCE_FAST_CHARGE
+	bool "Force AC charge mode at will"
+	default y
+	help
+	  A simple sysfs interface to force adapters that
+	  are detected as USB to charge as AC.
+
+
 config MSM_USE_USER_ACCESSIBLE_TIMERS
 	bool "Enables mapping an MSM timer counter page to user space."
 	depends on ARM_USE_USER_ACCESSIBLE_TIMERS
diff --git a/arch/arm/mach-msm/Makefile b/arch/arm/mach-msm/Makefile
index debe164..2c03571 100644
--- a/arch/arm/mach-msm/Makefile
+++ b/arch/arm/mach-msm/Makefile
@@ -400,6 +400,8 @@ ifdef CONFIG_MSM_CPR
 obj-$(CONFIG_DEBUG_FS) += msm_cpr-debug.o
 endif
 obj-$(CONFIG_MSM_CPU_PWRCTL) +=  msm_cpu_pwrctl.o
+obj-$(CONFIG_MSM_CPUFREQ_LIMITER) += cpufreq_limit.o
+obj-$(CONFIG_FORCE_FAST_CHARGE) += fastchg.o
 
 obj-$(CONFIG_CPU_FREQ_MSM) += cpufreq.o
 
diff --git a/arch/arm/mach-msm/acpuclock-8064.c b/arch/arm/mach-msm/acpuclock-8064.c
index 8262946..f93601f 100644
--- a/arch/arm/mach-msm/acpuclock-8064.c
+++ b/arch/arm/mach-msm/acpuclock-8064.c
@@ -47,7 +47,11 @@ static struct scalable scalable[] __initdata = {
 		.aux_clk_sel = 3,
 		.sec_clk_sel = 2,
 		.l2cpmr_iaddr = 0x4501,
+#ifdef CONFIG_CPU_OVERCLOCK
+		.vreg[VREG_CORE] = { "krait0", 1450000 },
+#else
 		.vreg[VREG_CORE] = { "krait0", 1300000 },
+#endif
 		.vreg[VREG_MEM]  = { "krait0_mem", 1150000 },
 		.vreg[VREG_DIG]  = { "krait0_dig", 1150000 },
 		.vreg[VREG_HFPLL_A] = { "krait0_hfpll", 1800000 },
@@ -58,7 +62,11 @@ static struct scalable scalable[] __initdata = {
 		.aux_clk_sel = 3,
 		.sec_clk_sel = 2,
 		.l2cpmr_iaddr = 0x5501,
+#ifdef CONFIG_CPU_OVERCLOCK
+		.vreg[VREG_CORE] = { "krait1", 1450000 },
+#else
 		.vreg[VREG_CORE] = { "krait1", 1300000 },
+#endif
 		.vreg[VREG_MEM]  = { "krait1_mem", 1150000 },
 		.vreg[VREG_DIG]  = { "krait1_dig", 1150000 },
 		.vreg[VREG_HFPLL_A] = { "krait1_hfpll", 1800000 },
@@ -69,7 +77,11 @@ static struct scalable scalable[] __initdata = {
 		.aux_clk_sel = 3,
 		.sec_clk_sel = 2,
 		.l2cpmr_iaddr = 0x6501,
+#ifdef CONFIG_CPU_OVERCLOCK
+		.vreg[VREG_CORE] = { "krait2", 1450000 },
+#else
 		.vreg[VREG_CORE] = { "krait2", 1300000 },
+#endif
 		.vreg[VREG_MEM]  = { "krait2_mem", 1150000 },
 		.vreg[VREG_DIG]  = { "krait2_dig", 1150000 },
 		.vreg[VREG_HFPLL_A] = { "krait2_hfpll", 1800000 },
@@ -80,7 +92,11 @@ static struct scalable scalable[] __initdata = {
 		.aux_clk_sel = 3,
 		.sec_clk_sel = 2,
 		.l2cpmr_iaddr = 0x7501,
+#ifdef CONFIG_CPU_OVERCLOCK
+		.vreg[VREG_CORE] = { "krait3", 1450000 },
+#else
 		.vreg[VREG_CORE] = { "krait3", 1300000 },
+#endif
 		.vreg[VREG_MEM]  = { "krait3_mem", 1150000 },
 		.vreg[VREG_DIG]  = { "krait3_dig", 1150000 },
 		.vreg[VREG_HFPLL_A] = { "krait3_hfpll", 1800000 },
@@ -251,6 +267,23 @@ static struct acpu_level tbl_PVS0_1512MHz[] __initdata = {
 	{ 1, {  1350000, HFPLL, 1, 0x32 }, L2(14), 1125000 },
 	{ 1, {  1458000, HFPLL, 1, 0x36 }, L2(14), 1150000 },
 	{ 1, {  1512000, HFPLL, 1, 0x38 }, L2(14), 1162500 },
+#ifdef CONFIG_CPU_OVERCLOCK
+	{ 1, {  1566000, HFPLL, 1, 0x3A }, L2(14), 1175000 },
+	{ 1, {  1674000, HFPLL, 1, 0x3E }, L2(14), 1225000 },
+	{ 1, {  1728000, HFPLL, 1, 0x40 }, L2(14), 1250000 },
+	{ 1, {  1836000, HFPLL, 1, 0x44 }, L2(14), 1275000 },
+	{ 1, {  1890000, HFPLL, 1, 0x46 }, L2(14), 1287500 },
+	{ 1, {  1944000, HFPLL, 1, 0x48 }, L2(14), 1300000 },
+	{ 1, {  1998000, HFPLL, 1, 0x4A }, L2(14), 1325000 },
+#endif
+#ifdef CONFIG_OC_ULTIMATE
+	{ 1, {  2052000, HFPLL, 1, 0x4C }, L2(14), 1325000 },
+	{ 1, {  2106000, HFPLL, 1, 0x4E }, L2(14), 1325000 },
+	{ 1, {  2133000, HFPLL, 1, 0x4F }, L2(14), 1325000 },
+	{ 1, {  2160000, HFPLL, 1, 0x50 }, L2(14), 1325000 },
+	{ 1, {  2214000, HFPLL, 1, 0x52 }, L2(14), 1325000 },
+	{ 1, {  2295000, HFPLL, 1, 0x55 }, L2(14), 1325000 },
+#endif
 	{ 0, { 0 } }
 };
 
@@ -267,6 +300,23 @@ static struct acpu_level tbl_PVS1_1512MHz[] __initdata = {
 	{ 1, {  1350000, HFPLL, 1, 0x32 }, L2(14), 1087500 },
 	{ 1, {  1458000, HFPLL, 1, 0x36 }, L2(14), 1112500 },
 	{ 1, {  1512000, HFPLL, 1, 0x38 }, L2(14), 1125000 },
+#ifdef CONFIG_CPU_OVERCLOCK
+	{ 1, {  1566000, HFPLL, 1, 0x3A }, L2(14), 1150000 },
+	{ 1, {  1674000, HFPLL, 1, 0x3E }, L2(14), 1187500 },
+	{ 1, {  1728000, HFPLL, 1, 0x40 }, L2(14), 1200000 },
+	{ 1, {  1836000, HFPLL, 1, 0x44 }, L2(14), 1225000 },
+	{ 1, {  1890000, HFPLL, 1, 0x46 }, L2(14), 1250000 },
+	{ 1, {  1944000, HFPLL, 1, 0x48 }, L2(14), 1275000 },
+	{ 1, {  1998000, HFPLL, 1, 0x4A }, L2(14), 1300000 },
+#endif
+#ifdef CONFIG_OC_ULTIMATE
+	{ 1, {  2052000, HFPLL, 1, 0x4C }, L2(14), 1325000 },
+	{ 1, {  2106000, HFPLL, 1, 0x4E }, L2(14), 1325000 },
+	{ 1, {  2133000, HFPLL, 1, 0x4F }, L2(14), 1325000 },
+	{ 1, {  2160000, HFPLL, 1, 0x50 }, L2(14), 1325000 },
+	{ 1, {  2214000, HFPLL, 1, 0x52 }, L2(14), 1325000 },
+	{ 1, {  2295000, HFPLL, 1, 0x55 }, L2(14), 1325000 },
+#endif
 	{ 0, { 0 } }
 };
 
@@ -283,6 +333,23 @@ static struct acpu_level tbl_PVS2_1512MHz[] __initdata = {
 	{ 1, {  1350000, HFPLL, 1, 0x32 }, L2(14), 1037500 },
 	{ 1, {  1458000, HFPLL, 1, 0x36 }, L2(14), 1075000 },
 	{ 1, {  1512000, HFPLL, 1, 0x38 }, L2(14), 1087500 },
+#ifdef CONFIG_CPU_OVERCLOCK
+	{ 1, {  1566000, HFPLL, 1, 0x3A }, L2(14), 1100000 },
+	{ 1, {  1674000, HFPLL, 1, 0x3E }, L2(14), 1137500 },
+	{ 1, {  1728000, HFPLL, 1, 0x40 }, L2(14), 1162500 },
+	{ 1, {  1836000, HFPLL, 1, 0x44 }, L2(14), 1187500 },
+	{ 1, {  1890000, HFPLL, 1, 0x46 }, L2(14), 1212500 },
+	{ 1, {  1944000, HFPLL, 1, 0x48 }, L2(14), 1275000 },
+	{ 1, {  1998000, HFPLL, 1, 0x4A }, L2(14), 1300000 },
+#endif
+#ifdef CONFIG_OC_ULTIMATE
+	{ 1, {  2052000, HFPLL, 1, 0x4C }, L2(14), 1325000 },
+	{ 1, {  2106000, HFPLL, 1, 0x4E }, L2(14), 1325000 },
+	{ 1, {  2133000, HFPLL, 1, 0x4F }, L2(14), 1325000 },
+	{ 1, {  2160000, HFPLL, 1, 0x50 }, L2(14), 1325000 },
+	{ 1, {  2214000, HFPLL, 1, 0x52 }, L2(14), 1325000 },
+	{ 1, {  2295000, HFPLL, 1, 0x55 }, L2(14), 1325000 },
+#endif
 	{ 0, { 0 } }
 };
 
@@ -299,6 +366,23 @@ static struct acpu_level tbl_PVS3_1512MHz[] __initdata = {
 	{ 1, {  1350000, HFPLL, 1, 0x32 }, L2(14), 1000000 },
 	{ 1, {  1458000, HFPLL, 1, 0x36 }, L2(14), 1037500 },
 	{ 1, {  1512000, HFPLL, 1, 0x38 }, L2(14), 1050000 },
+#ifdef CONFIG_CPU_OVERCLOCK
+	{ 1, {  1566000, HFPLL, 1, 0x3A }, L2(14), 1062500 },
+	{ 1, {  1674000, HFPLL, 1, 0x3E }, L2(14), 1100000 },
+	{ 1, {  1728000, HFPLL, 1, 0x40 }, L2(14), 1125000 },
+	{ 1, {  1836000, HFPLL, 1, 0x44 }, L2(14), 1150000 },
+	{ 1, {  1890000, HFPLL, 1, 0x46 }, L2(14), 1175000 },
+	{ 1, {  1944000, HFPLL, 1, 0x48 }, L2(14), 1200000 },
+	{ 1, {  1998000, HFPLL, 1, 0x4A }, L2(14), 1225000 },
+#endif
+#ifdef CONFIG_OC_ULTIMATE
+	{ 1, {  2052000, HFPLL, 1, 0x4C }, L2(14), 1250000 },
+	{ 1, {  2106000, HFPLL, 1, 0x4E }, L2(14), 1275000 },
+	{ 1, {  2133000, HFPLL, 1, 0x4F }, L2(14), 1300000 },
+	{ 1, {  2160000, HFPLL, 1, 0x50 }, L2(14), 1325000 },
+	{ 1, {  2214000, HFPLL, 1, 0x52 }, L2(14), 1325000 },
+	{ 1, {  2295000, HFPLL, 1, 0x55 }, L2(14), 1325000 },
+#endif
 	{ 0, { 0 } }
 };
 
@@ -315,6 +399,23 @@ static struct acpu_level tbl_PVS4_1512MHz[] __initdata = {
 	{ 1, {  1350000, HFPLL, 1, 0x32 }, L2(14),  975000 },
 	{ 1, {  1458000, HFPLL, 1, 0x36 }, L2(14), 1000000 },
 	{ 1, {  1512000, HFPLL, 1, 0x38 }, L2(14), 1012500 },
+#ifdef CONFIG_CPU_OVERCLOCK
+	{ 1, {  1566000, HFPLL, 1, 0x3A }, L2(14), 1037500 },
+	{ 1, {  1674000, HFPLL, 1, 0x3E }, L2(14), 1075000 },
+	{ 1, {  1728000, HFPLL, 1, 0x40 }, L2(14), 1100000 },
+	{ 1, {  1836000, HFPLL, 1, 0x44 }, L2(14), 1125000 },
+	{ 1, {  1890000, HFPLL, 1, 0x46 }, L2(14), 1150000 },
+	{ 1, {  1944000, HFPLL, 1, 0x48 }, L2(14), 1175000 },
+	{ 1, {  1998000, HFPLL, 1, 0x4A }, L2(14), 1200000 },
+#endif
+#ifdef CONFIG_OC_ULTIMATE
+	{ 1, {  2052000, HFPLL, 1, 0x4C }, L2(14), 1225000 },
+	{ 1, {  2106000, HFPLL, 1, 0x4E }, L2(14), 1250000 },
+	{ 1, {  2133000, HFPLL, 1, 0x4F }, L2(14), 1275000 },
+	{ 1, {  2160000, HFPLL, 1, 0x50 }, L2(14), 1300000 },
+	{ 1, {  2214000, HFPLL, 1, 0x52 }, L2(14), 1325000 },
+	{ 1, {  2295000, HFPLL, 1, 0x55 }, L2(14), 1325000 },
+#endif
 	{ 0, { 0 } }
 };
 
@@ -331,6 +432,23 @@ static struct acpu_level tbl_PVS5_1512MHz[] __initdata = {
 	{ 1, {  1350000, HFPLL, 1, 0x32 }, L2(14),  962500 },
 	{ 1, {  1458000, HFPLL, 1, 0x36 }, L2(14),  987500 },
 	{ 1, {  1512000, HFPLL, 1, 0x38 }, L2(14), 1000000 },
+#ifdef CONFIG_CPU_OVERCLOCK
+	{ 1, {  1566000, HFPLL, 1, 0x3A }, L2(14), 1012500 },
+	{ 1, {  1674000, HFPLL, 1, 0x3E }, L2(14), 1050000 },
+	{ 1, {  1728000, HFPLL, 1, 0x40 }, L2(14), 1075000 },
+	{ 1, {  1836000, HFPLL, 1, 0x44 }, L2(14), 1100000 },
+	{ 1, {  1890000, HFPLL, 1, 0x46 }, L2(14), 1125000 },
+	{ 1, {  1944000, HFPLL, 1, 0x48 }, L2(14), 1150000 },
+	{ 1, {  1998000, HFPLL, 1, 0x4A }, L2(14), 1175000 },
+#endif
+#ifdef CONFIG_OC_ULTIMATE
+	{ 1, {  2052000, HFPLL, 1, 0x4C }, L2(14), 1200000 },
+	{ 1, {  2106000, HFPLL, 1, 0x4E }, L2(14), 1225000 },
+	{ 1, {  2133000, HFPLL, 1, 0x4F }, L2(14), 1250000 },
+	{ 1, {  2160000, HFPLL, 1, 0x50 }, L2(14), 1275000 },
+	{ 1, {  2214000, HFPLL, 1, 0x52 }, L2(14), 1300000 },
+	{ 1, {  2295000, HFPLL, 1, 0x55 }, L2(14), 1325000 },
+#endif
 	{ 0, { 0 } }
 };
 
@@ -347,6 +465,23 @@ static struct acpu_level tbl_PVS6_1512MHz[] __initdata = {
 	{ 1, {  1350000, HFPLL, 1, 0x32 }, L2(14),  962500 },
 	{ 1, {  1458000, HFPLL, 1, 0x36 }, L2(14),  975000 },
 	{ 1, {  1512000, HFPLL, 1, 0x38 }, L2(14),  987500 },
+#ifdef CONFIG_CPU_OVERCLOCK
+	{ 1, {  1566000, HFPLL, 1, 0x3A }, L2(14), 1000000 },
+	{ 1, {  1674000, HFPLL, 1, 0x3E }, L2(14), 1025000 },
+	{ 1, {  1728000, HFPLL, 1, 0x40 }, L2(14), 1050000 },
+	{ 1, {  1836000, HFPLL, 1, 0x44 }, L2(14), 1075000 },
+	{ 1, {  1890000, HFPLL, 1, 0x46 }, L2(14), 1100000 },
+	{ 1, {  1944000, HFPLL, 1, 0x48 }, L2(14), 1125000 },
+	{ 1, {  1998000, HFPLL, 1, 0x4A }, L2(14), 1150000 },
+#endif
+#ifdef CONFIG_OC_ULTIMATE
+	{ 1, {  2052000, HFPLL, 1, 0x4C }, L2(14), 1175000 },
+	{ 1, {  2106000, HFPLL, 1, 0x4E }, L2(14), 1200000 },
+	{ 1, {  2133000, HFPLL, 1, 0x4F }, L2(14), 1250000 },
+	{ 1, {  2160000, HFPLL, 1, 0x50 }, L2(14), 1275000 },
+	{ 1, {  2214000, HFPLL, 1, 0x52 }, L2(14), 1300000 },
+	{ 1, {  2295000, HFPLL, 1, 0x55 }, L2(14), 1325000 },
+#endif
 	{ 0, { 0 } }
 };
 
@@ -365,6 +500,20 @@ static struct acpu_level tbl_PVS0_1700MHz[] __initdata = {
 	{ 1, {  1566000, HFPLL, 1, 0x3A }, L2(14), 1175000 },
 	{ 1, {  1674000, HFPLL, 1, 0x3E }, L2(14), 1225000 },
 	{ 1, {  1728000, HFPLL, 1, 0x40 }, L2(14), 1250000 },
+#ifdef CONFIG_CPU_OVERCLOCK
+	{ 1, {  1836000, HFPLL, 1, 0x44 }, L2(14), 1275000 },
+	{ 1, {  1890000, HFPLL, 1, 0x46 }, L2(14), 1287500 },
+	{ 1, {  1944000, HFPLL, 1, 0x48 }, L2(14), 1300000 },
+	{ 1, {  1998000, HFPLL, 1, 0x4A }, L2(14), 1325000 },
+#endif
+#ifdef CONFIG_OC_ULTIMATE
+	{ 1, {  2052000, HFPLL, 1, 0x4C }, L2(14), 1325000 },
+	{ 1, {  2106000, HFPLL, 1, 0x4E }, L2(14), 1325000 },
+	{ 1, {  2133000, HFPLL, 1, 0x4F }, L2(14), 1325000 },
+	{ 1, {  2160000, HFPLL, 1, 0x50 }, L2(14), 1325000 },
+	{ 1, {  2214000, HFPLL, 1, 0x52 }, L2(14), 1325000 },
+	{ 1, {  2295000, HFPLL, 1, 0x55 }, L2(14), 1325000 },
+#endif
 	{ 0, { 0 } }
 };
 
@@ -383,6 +532,20 @@ static struct acpu_level tbl_PVS1_1700MHz[] __initdata = {
 	{ 1, {  1566000, HFPLL, 1, 0x3A }, L2(14), 1150000 },
 	{ 1, {  1674000, HFPLL, 1, 0x3E }, L2(14), 1187500 },
 	{ 1, {  1728000, HFPLL, 1, 0x40 }, L2(14), 1200000 },
+#ifdef CONFIG_CPU_OVERCLOCK
+	{ 1, {  1836000, HFPLL, 1, 0x44 }, L2(14), 1225000 },
+	{ 1, {  1890000, HFPLL, 1, 0x46 }, L2(14), 1250000 },
+	{ 1, {  1944000, HFPLL, 1, 0x48 }, L2(14), 1275000 },
+	{ 1, {  1998000, HFPLL, 1, 0x4A }, L2(14), 1300000 },
+#endif
+#ifdef CONFIG_OC_ULTIMATE
+	{ 1, {  2052000, HFPLL, 1, 0x4C }, L2(14), 1325000 },
+	{ 1, {  2106000, HFPLL, 1, 0x4E }, L2(14), 1325000 },
+	{ 1, {  2133000, HFPLL, 1, 0x4F }, L2(14), 1325000 },
+	{ 1, {  2160000, HFPLL, 1, 0x50 }, L2(14), 1325000 },
+	{ 1, {  2214000, HFPLL, 1, 0x52 }, L2(14), 1325000 },
+	{ 1, {  2295000, HFPLL, 1, 0x55 }, L2(14), 1325000 },
+#endif
 	{ 0, { 0 } }
 };
 
@@ -401,6 +564,20 @@ static struct acpu_level tbl_PVS2_1700MHz[] __initdata = {
 	{ 1, {  1566000, HFPLL, 1, 0x3A }, L2(14), 1100000 },
 	{ 1, {  1674000, HFPLL, 1, 0x3E }, L2(14), 1137500 },
 	{ 1, {  1728000, HFPLL, 1, 0x40 }, L2(14), 1162500 },
+#ifdef CONFIG_CPU_OVERCLOCK
+	{ 1, {  1836000, HFPLL, 1, 0x44 }, L2(14), 1187500 },
+	{ 1, {  1890000, HFPLL, 1, 0x46 }, L2(14), 1212500 },
+	{ 1, {  1944000, HFPLL, 1, 0x48 }, L2(14), 1275000 },
+	{ 1, {  1998000, HFPLL, 1, 0x4A }, L2(14), 1300000 },
+#endif
+#ifdef CONFIG_OC_ULTIMATE
+	{ 1, {  2052000, HFPLL, 1, 0x4C }, L2(14), 1325000 },
+	{ 1, {  2106000, HFPLL, 1, 0x4E }, L2(14), 1325000 },
+	{ 1, {  2133000, HFPLL, 1, 0x4F }, L2(14), 1325000 },
+	{ 1, {  2160000, HFPLL, 1, 0x50 }, L2(14), 1325000 },
+	{ 1, {  2214000, HFPLL, 1, 0x52 }, L2(14), 1325000 },
+	{ 1, {  2295000, HFPLL, 1, 0x55 }, L2(14), 1325000 },
+#endif
 	{ 0, { 0 } }
 };
 
@@ -419,6 +596,20 @@ static struct acpu_level tbl_PVS3_1700MHz[] __initdata = {
 	{ 1, {  1566000, HFPLL, 1, 0x3A }, L2(14), 1062500 },
 	{ 1, {  1674000, HFPLL, 1, 0x3E }, L2(14), 1100000 },
 	{ 1, {  1728000, HFPLL, 1, 0x40 }, L2(14), 1125000 },
+#ifdef CONFIG_CPU_OVERCLOCK
+	{ 1, {  1836000, HFPLL, 1, 0x44 }, L2(14), 1150000 },
+	{ 1, {  1890000, HFPLL, 1, 0x46 }, L2(14), 1175000 },
+	{ 1, {  1944000, HFPLL, 1, 0x48 }, L2(14), 1200000 },
+	{ 1, {  1998000, HFPLL, 1, 0x4A }, L2(14), 1225000 },
+#endif
+#ifdef CONFIG_OC_ULTIMATE
+	{ 1, {  2052000, HFPLL, 1, 0x4C }, L2(14), 1250000 },
+	{ 1, {  2106000, HFPLL, 1, 0x4E }, L2(14), 1275000 },
+	{ 1, {  2133000, HFPLL, 1, 0x4F }, L2(14), 1300000 },
+	{ 1, {  2160000, HFPLL, 1, 0x50 }, L2(14), 1325000 },
+	{ 1, {  2214000, HFPLL, 1, 0x52 }, L2(14), 1325000 },
+	{ 1, {  2295000, HFPLL, 1, 0x55 }, L2(14), 1325000 },
+#endif
 	{ 0, { 0 } }
 };
 
@@ -437,6 +628,20 @@ static struct acpu_level tbl_PVS4_1700MHz[] __initdata = {
 	{ 1, {  1566000, HFPLL, 1, 0x3A }, L2(14), 1037500 },
 	{ 1, {  1674000, HFPLL, 1, 0x3E }, L2(14), 1075000 },
 	{ 1, {  1728000, HFPLL, 1, 0x40 }, L2(14), 1100000 },
+#ifdef CONFIG_CPU_OVERCLOCK
+	{ 1, {  1836000, HFPLL, 1, 0x44 }, L2(14), 1125000 },
+	{ 1, {  1890000, HFPLL, 1, 0x46 }, L2(14), 1150000 },
+	{ 1, {  1944000, HFPLL, 1, 0x48 }, L2(14), 1175000 },
+	{ 1, {  1998000, HFPLL, 1, 0x4A }, L2(14), 1200000 },
+#endif
+#ifdef CONFIG_OC_ULTIMATE
+	{ 1, {  2052000, HFPLL, 1, 0x4C }, L2(14), 1225000 },
+	{ 1, {  2106000, HFPLL, 1, 0x4E }, L2(14), 1250000 },
+	{ 1, {  2133000, HFPLL, 1, 0x4F }, L2(14), 1275000 },
+	{ 1, {  2160000, HFPLL, 1, 0x50 }, L2(14), 1300000 },
+	{ 1, {  2214000, HFPLL, 1, 0x52 }, L2(14), 1325000 },
+	{ 1, {  2295000, HFPLL, 1, 0x55 }, L2(14), 1325000 },
+#endif
 	{ 0, { 0 } }
 };
 
@@ -455,6 +660,20 @@ static struct acpu_level tbl_PVS5_1700MHz[] __initdata = {
 	{ 1, {  1566000, HFPLL, 1, 0x3A }, L2(14), 1012500 },
 	{ 1, {  1674000, HFPLL, 1, 0x3E }, L2(14), 1050000 },
 	{ 1, {  1728000, HFPLL, 1, 0x40 }, L2(14), 1075000 },
+#ifdef CONFIG_CPU_OVERCLOCK
+	{ 1, {  1836000, HFPLL, 1, 0x44 }, L2(14), 1100000 },
+	{ 1, {  1890000, HFPLL, 1, 0x46 }, L2(14), 1125000 },
+	{ 1, {  1944000, HFPLL, 1, 0x48 }, L2(14), 1150000 },
+	{ 1, {  1998000, HFPLL, 1, 0x4A }, L2(14), 1175000 },
+#endif
+#ifdef CONFIG_OC_ULTIMATE
+	{ 1, {  2052000, HFPLL, 1, 0x4C }, L2(14), 1200000 },
+	{ 1, {  2106000, HFPLL, 1, 0x4E }, L2(14), 1225000 },
+	{ 1, {  2133000, HFPLL, 1, 0x4F }, L2(14), 1250000 },
+	{ 1, {  2160000, HFPLL, 1, 0x50 }, L2(14), 1275000 },
+	{ 1, {  2214000, HFPLL, 1, 0x52 }, L2(14), 1300000 },
+	{ 1, {  2295000, HFPLL, 1, 0x55 }, L2(14), 1325000 },
+#endif
 	{ 0, { 0 } }
 };
 
@@ -473,6 +692,20 @@ static struct acpu_level tbl_PVS6_1700MHz[] __initdata = {
 	{ 1, {  1566000, HFPLL, 1, 0x3A }, L2(14), 1000000 },
 	{ 1, {  1674000, HFPLL, 1, 0x3E }, L2(14), 1025000 },
 	{ 1, {  1728000, HFPLL, 1, 0x40 }, L2(14), 1050000 },
+#ifdef CONFIG_CPU_OVERCLOCK
+	{ 1, {  1836000, HFPLL, 1, 0x44 }, L2(14), 1075000 },
+	{ 1, {  1890000, HFPLL, 1, 0x46 }, L2(14), 1100000 },
+	{ 1, {  1944000, HFPLL, 1, 0x48 }, L2(14), 1125000 },
+	{ 1, {  1998000, HFPLL, 1, 0x4A }, L2(14), 1150000 },
+#endif
+#ifdef CONFIG_OC_ULTIMATE
+	{ 1, {  2052000, HFPLL, 1, 0x4C }, L2(14), 1175000 },
+	{ 1, {  2106000, HFPLL, 1, 0x4E }, L2(14), 1200000 },
+	{ 1, {  2133000, HFPLL, 1, 0x4F }, L2(14), 1250000 },
+	{ 1, {  2160000, HFPLL, 1, 0x50 }, L2(14), 1275000 },
+	{ 1, {  2214000, HFPLL, 1, 0x52 }, L2(14), 1300000 },
+	{ 1, {  2295000, HFPLL, 1, 0x55 }, L2(14), 1325000 },
+#endif
 	{ 0, { 0 } }
 };
 
diff --git a/arch/arm/mach-msm/acpuclock-krait.c b/arch/arm/mach-msm/acpuclock-krait.c
index bc29e4b..6fd782c 100644
--- a/arch/arm/mach-msm/acpuclock-krait.c
+++ b/arch/arm/mach-msm/acpuclock-krait.c
@@ -920,7 +920,7 @@ static struct cpufreq_frequency_table freq_table[NR_CPUS][35];
  #define CPU_VDD_MIN		700
  
  static unsigned int cnt;
-
+ 
  ssize_t show_UV_mV_table(struct cpufreq_policy *policy,
  					 char *buf)
  {
@@ -957,7 +957,7 @@ static struct cpufreq_frequency_table freq_table[NR_CPUS][35];
  			continue;
  
  		ret = sscanf(buf, "%u", &val);
-		if (!ret)
+ 		if (!ret)
  			return -EINVAL;
  
  		if (val > CPU_VDD_MAX)
diff --git a/arch/arm/mach-msm/asustek/flo/board-flo-pmic.c b/arch/arm/mach-msm/asustek/flo/board-flo-pmic.c
old mode 100755
new mode 100644
diff --git a/arch/arm/mach-msm/bms-batterydata-lg-2000.c b/arch/arm/mach-msm/bms-batterydata-lg-2000.c
old mode 100755
new mode 100644
diff --git a/arch/arm/mach-msm/bms-batterydata-lg-3000.c b/arch/arm/mach-msm/bms-batterydata-lg-3000.c
old mode 100755
new mode 100644
diff --git a/arch/arm/mach-msm/bms-batterydata-lg.c b/arch/arm/mach-msm/bms-batterydata-lg.c
old mode 100755
new mode 100644
diff --git a/arch/arm/mach-msm/bms-batterydata-samsung-2000.c b/arch/arm/mach-msm/bms-batterydata-samsung-2000.c
old mode 100755
new mode 100644
diff --git a/arch/arm/mach-msm/bms-batterydata-samsung-3000.c b/arch/arm/mach-msm/bms-batterydata-samsung-3000.c
old mode 100755
new mode 100644
diff --git a/arch/arm/mach-msm/bms-batterydata-samsung.c b/arch/arm/mach-msm/bms-batterydata-samsung.c
old mode 100755
new mode 100644
diff --git a/arch/arm/mach-msm/bms-batterydata-sony-3000.c b/arch/arm/mach-msm/bms-batterydata-sony-3000.c
old mode 100755
new mode 100644
diff --git a/arch/arm/mach-msm/bms-batterydata-sony.c b/arch/arm/mach-msm/bms-batterydata-sony.c
old mode 100755
new mode 100644
diff --git a/arch/arm/mach-msm/board-8064-camera.c b/arch/arm/mach-msm/board-8064-camera.c
old mode 100755
new mode 100644
diff --git a/arch/arm/mach-msm/board-8960-camera.c b/arch/arm/mach-msm/board-8960-camera.c
old mode 100755
new mode 100644
diff --git a/arch/arm/mach-msm/clock-8960.c b/arch/arm/mach-msm/clock-8960.c
index 7b20003..b8b75f0 100644
--- a/arch/arm/mach-msm/clock-8960.c
+++ b/arch/arm/mach-msm/clock-8960.c
@@ -3533,6 +3533,12 @@ static struct clk_freq_tbl clk_tbl_gfx3d[] = {
 	F_GFX3D(320000000, pll2,  2,  5),
 	F_GFX3D(400000000, pll2,  1,  2),
 	F_GFX3D(450000000, pll15, 1,  2),
+	F_GFX3D(477000000, pll15, 1,  2),
+	F_GFX3D(490500000, pll15, 1,  2),
+	F_GFX3D(504000000, pll15, 1,  2),
+	F_GFX3D(531000000, pll15, 1,  2),
+	F_GFX3D(558000000, pll15, 1,  2),
+	F_GFX3D(585000000, pll15, 1,  2),
 	F_END
 };
 
@@ -3587,8 +3593,8 @@ static unsigned long fmax_gfx3d_8064ab[VDD_DIG_NUM] = {
 
 static unsigned long fmax_gfx3d_8064[VDD_DIG_NUM] = {
 	[VDD_DIG_LOW]     = 128000000,
-	[VDD_DIG_NOMINAL] = 325000000,
-	[VDD_DIG_HIGH]    = 400000000
+	[VDD_DIG_NOMINAL] = 320000000,
+	[VDD_DIG_HIGH]    = 450000000
 };
 
 static unsigned long fmax_gfx3d_8930[VDD_DIG_NUM] = {
@@ -6336,7 +6342,7 @@ static struct pll_config pll4_config_393 __initdata = {
 	.main_output_mask = BIT(23),
 };
 
-static struct pll_config_regs pll15_regs __initdata = {
+static struct pll_config_regs pll15_regs = {
 	.l_reg = MM_PLL3_L_VAL_REG,
 	.m_reg = MM_PLL3_M_VAL_REG,
 	.n_reg = MM_PLL3_N_VAL_REG,
@@ -6344,10 +6350,10 @@ static struct pll_config_regs pll15_regs __initdata = {
 	.mode_reg = MM_PLL3_MODE_REG,
 };
 
-static struct pll_config pll15_config __initdata = {
-	.l = (0x24 | BVAL(31, 7, 0x620)),
+static struct pll_config pll15_config = {
+	.l = (0x21 | BVAL(31, 7, 0x620)),
 	.m = 0x1,
-	.n = 0x9,
+	.n = 0x3,
 	.vco_val = BVAL(17, 16, 0x2),
 	.vco_mask = BM(17, 16),
 	.pre_div_val = 0x0,
@@ -6601,6 +6607,20 @@ static void __init reg_init(void)
 	}
 }
 
+//GPU_OC
+
+extern void configure_pllOC(struct pll_config *config, struct pll_config_regs *regs, u32 ena_fsm_mode);
+
+void __ref SetGPUpll_config(u32 loc, unsigned long freq)
+{
+	pll15_config.l = (loc | BVAL(31, 7, 0x620));
+	pll15_config.m = 0x1;
+	pll15_config.n = 0x3;
+	configure_pllOC(&pll15_config, &pll15_regs, 0);
+	printk("ElementalX: set GPU OC %ld", freq / 1000000);
+}
+
+
 struct clock_init_data msm8960_clock_init_data __initdata;
 static void __init msm8960_clock_pre_init(void)
 {
diff --git a/arch/arm/mach-msm/clock-pll.c b/arch/arm/mach-msm/clock-pll.c
index aeb1c5e..0d4b0a0 100644
--- a/arch/arm/mach-msm/clock-pll.c
+++ b/arch/arm/mach-msm/clock-pll.c
@@ -501,6 +501,43 @@ void __init __configure_pll(struct pll_config *config,
 	writel_relaxed(regval, PLL_CONFIG_REG(regs));
 }
 
+//GPU_OC
+void configure_pllOC(struct pll_config *config,
+    struct pll_config_regs *regs, u32 ena_fsm_mode)
+{
+  u32 regval;
+
+  writel_relaxed(config->l, PLL_L_REG(regs));
+  writel_relaxed(config->m, PLL_M_REG(regs));
+  writel_relaxed(config->n, PLL_N_REG(regs));
+
+  regval = readl_relaxed(PLL_CONFIG_REG(regs));
+
+  /* Enable the MN accumulator  */
+  if (config->mn_ena_mask) {
+    regval &= ~config->mn_ena_mask;
+    regval |= config->mn_ena_val;
+  }
+
+  /* Enable the main output */
+ if (config->main_output_mask) {
+    regval &= ~config->main_output_mask;
+    regval |= config->main_output_val;
+  }
+
+  /* Set pre-divider and post-divider values */
+  regval &= ~config->pre_div_mask;
+  regval |= config->pre_div_val;
+  regval &= ~config->post_div_mask;
+  regval |= config->post_div_val;
+
+  /* Select VCO setting */
+  regval &= ~config->vco_mask;
+  regval |= config->vco_val;
+  writel_relaxed(regval, PLL_CONFIG_REG(regs));
+} 
+
+
 void __init configure_sr_pll(struct pll_config *config,
 		struct pll_config_regs *regs, u32 ena_fsm_mode)
 {
diff --git a/arch/arm/mach-msm/cpufreq.c b/arch/arm/mach-msm/cpufreq.c
index 72ed4f0..2192770 100644
--- a/arch/arm/mach-msm/cpufreq.c
+++ b/arch/arm/mach-msm/cpufreq.c
@@ -318,6 +318,18 @@ int msm_cpufreq_set_freq_limits(uint32_t cpu, uint32_t min, uint32_t max)
 }
 EXPORT_SYMBOL(msm_cpufreq_set_freq_limits);
 
+#ifdef CONFIG_LOW_CPUCLOCKS
+#define LOW_CPUCLOCKS_FREQ_MIN	162000
+#endif
+
+#ifdef CONFIG_CPU_OVERCLOCK
+#ifdef CONFIG_OC_ULTIMATE
+#define OC_CPU_FREQ_MAX 1944000
+#else
+#define OC_CPU_FREQ_MAX 1836000
+#endif
+#endif
+
 static int __cpuinit msm_cpufreq_init(struct cpufreq_policy *policy)
 {
 	int cur_freq;
@@ -339,14 +351,30 @@ static int __cpuinit msm_cpufreq_init(struct cpufreq_policy *policy)
 
 	if (cpufreq_frequency_table_cpuinfo(policy, table)) {
 #ifdef CONFIG_MSM_CPU_FREQ_SET_MIN_MAX
+#ifdef CONFIG_LOW_CPUCLOCKS
+		policy->cpuinfo.min_freq = LOW_CPUCLOCKS_FREQ_MIN;
+#else
 		policy->cpuinfo.min_freq = CONFIG_MSM_CPU_FREQ_MIN;
+#endif
+#ifdef CONFIG_CPU_OVERCLOCK
+		policy->cpuinfo.max_freq = OC_CPU_FREQ_MAX;
+#else
 		policy->cpuinfo.max_freq = CONFIG_MSM_CPU_FREQ_MAX;
 #endif
+#endif
 	}
 #ifdef CONFIG_MSM_CPU_FREQ_SET_MIN_MAX
+#ifdef CONFIG_LOW_CPUCLOCKS
+	policy->min = LOW_CPUCLOCKS_FREQ_MIN;
+#else
 	policy->min = CONFIG_MSM_CPU_FREQ_MIN;
+#endif
+#ifdef CONFIG_CPU_OVERCLOCK
+	policy->max = OC_CPU_FREQ_MAX;
+#else
 	policy->max = CONFIG_MSM_CPU_FREQ_MAX;
 #endif
+#endif
 
 	if (is_clk)
 		cur_freq = clk_get_rate(cpu_clk[policy->cpu])/1000;
diff --git a/arch/arm/mach-msm/hotplug.c b/arch/arm/mach-msm/hotplug.c
index 20e3c3b..82cf486 100644
--- a/arch/arm/mach-msm/hotplug.c
+++ b/arch/arm/mach-msm/hotplug.c
@@ -11,8 +11,9 @@
 #include <linux/errno.h>
 #include <linux/smp.h>
 #include <linux/cpu.h>
+#include <linux/ratelimit.h>
+#include <linux/notifier.h>
 
-#include <asm/cacheflush.h>
 #include <asm/smp_plat.h>
 #include <asm/vfp.h>
 
@@ -30,9 +31,6 @@ static DEFINE_PER_CPU(unsigned int, warm_boot_flag);
 
 static inline void cpu_enter_lowpower(void)
 {
-	/* Just flush the cache. Changing the coherency is not yet
-	 * available on msm. */
-	flush_cache_all();
 }
 
 static inline void cpu_leave_lowpower(void)
@@ -150,6 +148,29 @@ static struct notifier_block hotplug_rtb_notifier = {
 	.notifier_call = hotplug_rtb_callback,
 };
 
+static int hotplug_cpu_check_callback(struct notifier_block *nfb,
+				      unsigned long action, void *hcpu)
+{
+	int cpu = (int)hcpu;
+
+	switch (action & (~CPU_TASKS_FROZEN)) {
+	case CPU_DOWN_PREPARE:
+		if (cpu == 0) {
+			pr_err_ratelimited("CPU0 hotplug is not supported\n");
+			return NOTIFY_BAD;
+		}
+		break;
+	default:
+		break;
+	}
+
+	return NOTIFY_OK;
+}
+static struct notifier_block hotplug_cpu_check_notifier = {
+	.notifier_call = hotplug_cpu_check_callback,
+	.priority = INT_MAX,
+};
+
 int msm_platform_secondary_init(unsigned int cpu)
 {
 	int ret;
@@ -170,6 +191,12 @@ int msm_platform_secondary_init(unsigned int cpu)
 
 static int __init init_hotplug(void)
 {
-	return register_hotcpu_notifier(&hotplug_rtb_notifier);
+	int rc;
+
+	rc = register_hotcpu_notifier(&hotplug_rtb_notifier);
+	if (rc)
+		return rc;
+
+	return register_hotcpu_notifier(&hotplug_cpu_check_notifier);
 }
 early_initcall(init_hotplug);
diff --git a/arch/arm/mach-msm/include/mach/kgsl.h b/arch/arm/mach-msm/include/mach/kgsl.h
index 2d7e8df..fc9ab5e 100644
--- a/arch/arm/mach-msm/include/mach/kgsl.h
+++ b/arch/arm/mach-msm/include/mach/kgsl.h
@@ -41,6 +41,8 @@
 	 (((_mi) & 0xFF) << 8) | \
 	 ((_pa) & 0xFF))
 
+extern uint32_t max_gpu;
+
 enum kgsl_iommu_context_id {
 	KGSL_IOMMU_CONTEXT_USER = 0,
 	KGSL_IOMMU_CONTEXT_PRIV = 1,
diff --git a/arch/arm/mach-msm/msm_dcvs.c b/arch/arm/mach-msm/msm_dcvs.c
index 1a919fc..f275c02 100644
--- a/arch/arm/mach-msm/msm_dcvs.c
+++ b/arch/arm/mach-msm/msm_dcvs.c
@@ -146,7 +146,7 @@ static struct dcvs_core core_list[CORES_MAX];
 
 static struct kobject *cores_kobj;
 
-#define DCVS_MAX_NUM_FREQS 15
+#define DCVS_MAX_NUM_FREQS 19
 static struct msm_dcvs_freq_entry cpu_freq_tbl[DCVS_MAX_NUM_FREQS];
 static unsigned num_cpu_freqs;
 static struct msm_dcvs_platform_data *dcvs_pdata;
diff --git a/arch/arm/mach-msm/smd_rpc_sym b/arch/arm/mach-msm/smd_rpc_sym
old mode 100755
new mode 100644
diff --git a/arch/arm/mach-msm/xiaomi/aries/board-aries-gpu.c b/arch/arm/mach-msm/xiaomi/aries/board-aries-gpu.c
index 23a00d2..1571f7c 100644
--- a/arch/arm/mach-msm/xiaomi/aries/board-aries-gpu.c
+++ b/arch/arm/mach-msm/xiaomi/aries/board-aries-gpu.c
@@ -21,6 +21,7 @@
 
 #include "devices.h"
 #include "board-aries.h"
+uint32_t max_gpu = 1;
 
 #ifdef CONFIG_MSM_DCVS
 static struct msm_dcvs_freq_entry grp3d_freq[] = {
@@ -93,13 +94,13 @@ static struct msm_bus_vectors grp3d_low_vectors[] = {
 		.src = MSM_BUS_MASTER_GRAPHICS_3D,
 		.dst = MSM_BUS_SLAVE_EBI_CH0,
 		.ab = 0,
-		.ib = KGSL_CONVERT_TO_MBPS(1000),
+		.ib = KGSL_CONVERT_TO_MBPS(1200),
 	},
 	{
 		.src = MSM_BUS_MASTER_GRAPHICS_3D_PORT1,
 		.dst = MSM_BUS_SLAVE_EBI_CH0,
 		.ab = 0,
-		.ib = KGSL_CONVERT_TO_MBPS(1000),
+		.ib = KGSL_CONVERT_TO_MBPS(1200),
 	},
 };
 
@@ -138,13 +139,13 @@ static struct msm_bus_vectors grp3d_max_vectors[] = {
 		.src = MSM_BUS_MASTER_GRAPHICS_3D,
 		.dst = MSM_BUS_SLAVE_EBI_CH0,
 		.ab = 0,
-		.ib = KGSL_CONVERT_TO_MBPS(4264),
+		.ib = KGSL_CONVERT_TO_MBPS(4800),
 	},
 	{
 		.src = MSM_BUS_MASTER_GRAPHICS_3D_PORT1,
 		.dst = MSM_BUS_SLAVE_EBI_CH0,
 		.ab = 0,
-		.ib = KGSL_CONVERT_TO_MBPS(4264),
+		.ib = KGSL_CONVERT_TO_MBPS(4800),
 	},
 };
 
@@ -227,7 +228,7 @@ static struct kgsl_device_iommu_data kgsl_3d0_iommu_data[] = {
 static struct kgsl_device_platform_data kgsl_3d0_pdata = {
 	.pwrlevel = {
 		{
-			.gpu_freq = 400000000,
+			.gpu_freq = 450000000,
 			.bus_freq = 4,
 			.io_fraction = 0,
 		},
@@ -277,12 +278,29 @@ struct platform_device device_kgsl_3d0 = {
 	},
 };
 
+/*gpuoc*/
+
+static int __init read_max_gpu(char *gpu_oc)
+{
+	if (strcmp(gpu_oc, "1") == 0) {
+		max_gpu = 1;
+	} else {
+		max_gpu = 0;
+	}	
+	return 0;
+}
+
+__setup("gpu_oc=", read_max_gpu);
+/*end gpuoc*/
+
+
 void __init apq8064_init_gpu(void)
 {
 	unsigned int version = socinfo_get_version();
-
+	if (max_gpu == 0)
+		kgsl_3d0_pdata.pwrlevel[0].gpu_freq = 400000000;
 	if (cpu_is_apq8064ab())
-		kgsl_3d0_pdata.pwrlevel[0].gpu_freq = 450000000;
+		kgsl_3d0_pdata.pwrlevel[0].gpu_freq = 400000000;
 	if (SOCINFO_VERSION_MAJOR(version) == 2) {
 		kgsl_3d0_pdata.chipid = ADRENO_CHIPID(3, 2, 0, 2);
 	} else {
diff --git a/arch/arm/mach-msm/xiaomi/aries/board-aries-regulator.c b/arch/arm/mach-msm/xiaomi/aries/board-aries-regulator.c
index 19d7b7d..45e29c7 100644
--- a/arch/arm/mach-msm/xiaomi/aries/board-aries-regulator.c
+++ b/arch/arm/mach-msm/xiaomi/aries/board-aries-regulator.c
@@ -545,15 +545,30 @@ mpq8064_gpio_regulator_pdata[] __devinitdata = {
 /* SAW regulator constraints */
 struct regulator_init_data msm8064_saw_regulator_pdata_8921_s5 =
 	/*	      ID  vreg_name	       min_uV   max_uV */
+#ifdef CONFIG_CPU_OVERCLOCK
+	SAW_VREG_INIT(S5, "8921_s5",	       850000, 1450000);
+#else
 	SAW_VREG_INIT(S5, "8921_s5",	       850000, 1300000);
+#endif
 struct regulator_init_data msm8064_saw_regulator_pdata_8921_s6 =
+#ifdef CONFIG_CPU_OVERCLOCK
+	SAW_VREG_INIT(S6, "8921_s6",	       850000, 1450000);
+#else
 	SAW_VREG_INIT(S6, "8921_s6",	       850000, 1300000);
-
+#endif
 struct regulator_init_data msm8064_saw_regulator_pdata_8821_s0 =
 	/*	      ID       vreg_name	min_uV  max_uV */
+#ifdef CONFIG_CPU_OVERCLOCK
+	SAW_VREG_INIT(8821_S0, "8821_s0",       850000, 1450000);
+#else
 	SAW_VREG_INIT(8821_S0, "8821_s0",       850000, 1300000);
+#endif
 struct regulator_init_data msm8064_saw_regulator_pdata_8821_s1 =
+#ifdef CONFIG_CPU_OVERCLOCK
+	SAW_VREG_INIT(8821_S1, "8821_s1",       850000, 1450000);
+#else
 	SAW_VREG_INIT(8821_S1, "8821_s1",       850000, 1300000);
+#endif
 
 /* PM8921 regulator constraints */
 struct pm8xxx_regulator_platform_data
diff --git a/arch/arm/mach-msm/xiaomi/aries/board-aries.c b/arch/arm/mach-msm/xiaomi/aries/board-aries.c
index da283eb..d67352a 100644
--- a/arch/arm/mach-msm/xiaomi/aries/board-aries.c
+++ b/arch/arm/mach-msm/xiaomi/aries/board-aries.c
@@ -1452,6 +1452,12 @@ static struct msm_thermal_data msm_thermal_pdata = {
 	.limit_temp_degC = 60,
 	.temp_hysteresis_degC = 10,
 	.freq_step = 2,
+#ifdef CONFIG_INTELLI_THERMAL
+	.freq_control_mask = 0xf,
+	.core_limit_temp_degC = 80,
+	.core_temp_hysteresis_degC = 10,
+	.core_control_mask = 0xe,
+#endif
 };
 
 #define MSM_SHARED_RAM_PHYS 0x80000000
diff --git a/arch/arm/mach-omap2/omap-hotplug.c b/arch/arm/mach-omap2/omap-hotplug.c
index 56c345b..2b4c3dd 100644
--- a/arch/arm/mach-omap2/omap-hotplug.c
+++ b/arch/arm/mach-omap2/omap-hotplug.c
@@ -37,9 +37,6 @@ void __ref platform_cpu_die(unsigned int cpu)
 {
 	unsigned int this_cpu;
 
-	flush_cache_all();
-	dsb();
-
 	/*
 	 * we're ready for shutdown now, so do it
 	 */
diff --git a/arch/arm/mach-realview/hotplug.c b/arch/arm/mach-realview/hotplug.c
index 57d9efb..c5f5e1e 100644
--- a/arch/arm/mach-realview/hotplug.c
+++ b/arch/arm/mach-realview/hotplug.c
@@ -12,7 +12,6 @@
 #include <linux/errno.h>
 #include <linux/smp.h>
 
-#include <asm/cacheflush.h>
 #include <asm/cp15.h>
 #include <asm/smp_plat.h>
 
@@ -22,7 +21,6 @@ static inline void cpu_enter_lowpower(void)
 {
 	unsigned int v;
 
-	flush_cache_all();
 	asm volatile(
 	"	mcr	p15, 0, %1, c7, c5, 0\n"
 	"	mcr	p15, 0, %1, c7, c10, 4\n"
diff --git a/arch/arm/mach-tegra/hotplug.c b/arch/arm/mach-tegra/hotplug.c
index d8dc9dd..36d6238 100644
--- a/arch/arm/mach-tegra/hotplug.c
+++ b/arch/arm/mach-tegra/hotplug.c
@@ -12,7 +12,6 @@
 #include <linux/errno.h>
 #include <linux/smp.h>
 
-#include <asm/cacheflush.h>
 #include <asm/cp15.h>
 
 static inline void cpu_enter_lowpower(void)
diff --git a/arch/arm/mach-ux500/hotplug.c b/arch/arm/mach-ux500/hotplug.c
index c76f0f4..07040fc 100644
--- a/arch/arm/mach-ux500/hotplug.c
+++ b/arch/arm/mach-ux500/hotplug.c
@@ -12,14 +12,12 @@
 #include <linux/errno.h>
 #include <linux/smp.h>
 
-#include <asm/cacheflush.h>
 #include <asm/smp_plat.h>
 
 extern volatile int pen_release;
 
 static inline void platform_do_lowpower(unsigned int cpu)
 {
-	flush_cache_all();
 
 	/* we put the platform to just WFI */
 	for (;;) {
diff --git a/arch/arm/mach-vexpress/hotplug.c b/arch/arm/mach-vexpress/hotplug.c
index c504a72..b448943 100644
--- a/arch/arm/mach-vexpress/hotplug.c
+++ b/arch/arm/mach-vexpress/hotplug.c
@@ -12,7 +12,6 @@
 #include <linux/errno.h>
 #include <linux/smp.h>
 
-#include <asm/cacheflush.h>
 #include <asm/smp_plat.h>
 #include <asm/cp15.h>
 
@@ -22,7 +21,6 @@ static inline void cpu_enter_lowpower(void)
 {
 	unsigned int v;
 
-	flush_cache_all();
 	asm volatile(
 		"mcr	p15, 0, %1, c7, c5, 0\n"
 	"	mcr	p15, 0, %1, c7, c10, 4\n"
diff --git a/arch/arm/mm/alignment.c b/arch/arm/mm/alignment.c
index 94b1e61..4f95662 100644
--- a/arch/arm/mm/alignment.c
+++ b/arch/arm/mm/alignment.c
@@ -746,11 +746,10 @@ do_alignment_t32_to_handler(unsigned long *pinstr, struct pt_regs *regs,
 static int
 do_alignment(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 {
-	union offset_union offset;
+	union offset_union uninitialized_var(offset);
 	unsigned long instr = 0, instrptr;
 	int (*handler)(unsigned long addr, unsigned long instr, struct pt_regs *regs);
 	unsigned int type;
-	mm_segment_t fs;
 	unsigned int fault;
 	u16 tinstr = 0;
 	int isize = 4;
@@ -761,16 +760,15 @@ do_alignment(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 
 	instrptr = instruction_pointer(regs);
 
-	fs = get_fs();
-	set_fs(KERNEL_DS);
 	if (thumb_mode(regs)) {
-		fault = __get_user(tinstr, (u16 *)(instrptr & ~1));
+		u16 *ptr = (u16 *)(instrptr & ~1);
+		fault = probe_kernel_address(ptr, tinstr);
 		if (!fault) {
 			if (cpu_architecture() >= CPU_ARCH_ARMv7 &&
 			    IS_T32(tinstr)) {
 				/* Thumb-2 32-bit */
 				u16 tinst2 = 0;
-				fault = __get_user(tinst2, (u16 *)(instrptr+2));
+				fault = probe_kernel_address(ptr + 1, tinst2);
 				instr = (tinstr << 16) | tinst2;
 				thumb2_32b = 1;
 			} else {
@@ -779,8 +777,7 @@ do_alignment(unsigned long addr, unsigned int fsr, struct pt_regs *regs)
 			}
 		}
 	} else
-		fault = __get_user(instr, (u32 *)instrptr);
-	set_fs(fs);
+		fault = probe_kernel_address(instrptr, instr);
 
 	if (fault) {
 		type = TYPE_FAULT;
diff --git a/arch/arm/mm/context.c b/arch/arm/mm/context.c
index 847ea19..0f41f15 100644
--- a/arch/arm/mm/context.c
+++ b/arch/arm/mm/context.c
@@ -2,6 +2,9 @@
  *  linux/arch/arm/mm/context.c
  *
  *  Copyright (C) 2002-2003 Deep Blue Solutions Ltd, all rights reserved.
+ *  Copyright (C) 2012 ARM Limited
+ *
+ *  Author: Will Deacon <will.deacon@arm.com>
  *
  * This program is free software; you can redistribute it and/or modify
  * it under the terms of the GNU General Public License version 2 as
@@ -14,51 +17,100 @@
 #include <linux/percpu.h>
 
 #include <asm/mmu_context.h>
+#include <asm/smp_plat.h>
 #include <asm/thread_notify.h>
 #include <asm/tlbflush.h>
 
 #include <mach/msm_rtb.h>
 
+/*
+ * On ARMv6, we have the following structure in the Context ID:
+ *
+ * 31                         7          0
+ * +-------------------------+-----------+
+ * |      process ID         |   ASID    |
+ * +-------------------------+-----------+
+ * |              context ID             |
+ * +-------------------------------------+
+ *
+ * The ASID is used to tag entries in the CPU caches and TLBs.
+ * The context ID is used by debuggers and trace logic, and
+ * should be unique within all running processes.
+ *
+ * In big endian operation, the two 32 bit words are swapped if accesed by
+ * non 64-bit operations.
+ */
+#define ASID_FIRST_VERSION	(1ULL << ASID_BITS)
+#define NUM_USER_ASIDS		ASID_FIRST_VERSION
+
 static DEFINE_RAW_SPINLOCK(cpu_asid_lock);
-unsigned int cpu_last_asid = ASID_FIRST_VERSION;
-#ifdef CONFIG_SMP
-DEFINE_PER_CPU(struct mm_struct *, current_mm);
-#endif
+static atomic64_t asid_generation = ATOMIC64_INIT(ASID_FIRST_VERSION);
+static DECLARE_BITMAP(asid_map, NUM_USER_ASIDS);
 
-#ifdef CONFIG_ARM_LPAE
-#define cpu_set_asid(asid) {						\
-	unsigned long ttbl, ttbh;					\
-	asm volatile(							\
-	"	mrrc	p15, 0, %0, %1, c2		@ read TTBR0\n"	\
-	"	mov	%1, %2, lsl #(48 - 32)		@ set ASID\n"	\
-	"	mcrr	p15, 0, %0, %1, c2		@ set TTBR0\n"	\
-	: "=&r" (ttbl), "=&r" (ttbh)					\
-	: "r" (asid & ~ASID_MASK));					\
+static DEFINE_PER_CPU(atomic64_t, active_asids);
+static DEFINE_PER_CPU(u64, reserved_asids);
+static cpumask_t tlb_flush_pending;
+
+#ifdef CONFIG_ARM_ERRATA_798181
+void a15_erratum_get_cpumask(int this_cpu, struct mm_struct *mm,
+			     cpumask_t *mask)
+{
+	int cpu;
+	unsigned long flags;
+	u64 context_id, asid;
+
+	raw_spin_lock_irqsave(&cpu_asid_lock, flags);
+	context_id = mm->context.id.counter;
+	for_each_online_cpu(cpu) {
+		if (cpu == this_cpu)
+			continue;
+		/*
+		 * We only need to send an IPI if the other CPUs are
+		 * running the same ASID as the one being invalidated.
+		 */
+		asid = per_cpu(active_asids, cpu).counter;
+		if (asid == 0)
+			asid = per_cpu(reserved_asids, cpu);
+		if (context_id == asid)
+			cpumask_set_cpu(cpu, mask);
+	}
+	raw_spin_unlock_irqrestore(&cpu_asid_lock, flags);
 }
-#else
-#define cpu_set_asid(asid) \
-	asm("	mcr	p15, 0, %0, c13, c0, 1\n" : : "r" (asid))
 #endif
 
-static void write_contextidr(u32 contextidr)
+#ifdef CONFIG_ARM_LPAE
+static void cpu_set_reserved_ttbr0(void)
 {
-	uncached_logk(LOGK_CTXID, (void *)contextidr);
-	asm("mcr	p15, 0, %0, c13, c0, 1" : : "r" (contextidr));
+	unsigned long ttbl = __pa(swapper_pg_dir);
+	unsigned long ttbh = 0;
+
+	/*
+	 * Set TTBR0 to swapper_pg_dir which contains only global entries. The
+	 * ASID is set to 0.
+	 */
+	asm volatile(
+	"	mcrr	p15, 0, %0, %1, c2		@ set TTBR0\n"
+	:
+	: "r" (ttbl), "r" (ttbh));
 	isb();
 }
-
-#ifdef CONFIG_PID_IN_CONTEXTIDR
-static u32 read_contextidr(void)
+#else
+static void cpu_set_reserved_ttbr0(void)
 {
-	u32 contextidr;
-	asm("mrc	p15, 0, %0, c13, c0, 1" : "=r" (contextidr));
-	return contextidr;
+	u32 ttb;
+	/* Copy TTBR1 into TTBR0 */
+	asm volatile(
+	"	mrc	p15, 0, %0, c2, c0, 1		@ read TTBR1\n"
+	"	mcr	p15, 0, %0, c2, c0, 0		@ set TTBR0\n"
+	: "=r" (ttb));
+	isb();
 }
+#endif
 
+#ifdef CONFIG_PID_IN_CONTEXTIDR
 static int contextidr_notifier(struct notifier_block *unused, unsigned long cmd,
 			       void *t)
 {
-	unsigned long flags;
 	u32 contextidr;
 	pid_t pid;
 	struct thread_info *thread = t;
@@ -66,13 +118,16 @@ static int contextidr_notifier(struct notifier_block *unused, unsigned long cmd,
 	if (cmd != THREAD_NOTIFY_SWITCH)
 		return NOTIFY_DONE;
 
-	pid = task_pid_nr(thread->task);
-	local_irq_save(flags);
-	contextidr = read_contextidr();
-	contextidr &= ~ASID_MASK;
-	contextidr |= pid << ASID_BITS;
-	write_contextidr(contextidr);
-	local_irq_restore(flags);
+	pid = task_pid_nr(thread->task) << ASID_BITS;
+	asm volatile(
+	"	mrc	p15, 0, %0, c13, c0, 1\n"
+	"	and	%0, %0, %2\n"
+	"	orr	%0, %0, %1\n"
+	"	mcr	p15, 0, %0, c13, c0, 1\n"
+	: "=r" (contextidr), "+r" (pid)
+	: "I" (~ASID_MASK));
+	uncached_logk(LOGK_CTXID, (void *)contextidr);
+	isb();
 
 	return NOTIFY_OK;
 }
@@ -86,149 +141,125 @@ static int __init contextidr_notifier_init(void)
 	return thread_register_notifier(&contextidr_notifier_block);
 }
 arch_initcall(contextidr_notifier_init);
-
-static void set_asid(unsigned int asid)
-{
-	u32 contextidr = read_contextidr();
-	contextidr &= ASID_MASK;
-	contextidr |= asid & ~ASID_MASK;
-	write_contextidr(contextidr);
-}
-#else
-static void set_asid(unsigned int asid)
-{
-	write_contextidr(asid);
-}
 #endif
 
-/*
- * We fork()ed a process, and we need a new context for the child
- * to run in.  We reserve version 0 for initial tasks so we will
- * always allocate an ASID. The ASID 0 is reserved for the TTBR
- * register changing sequence.
- */
-void __init_new_context(struct task_struct *tsk, struct mm_struct *mm)
+static void flush_context(unsigned int cpu)
 {
-	mm->context.id = 0;
-	raw_spin_lock_init(&mm->context.id_lock);
-}
+	int i;
+	u64 asid;
 
-static void flush_context(void)
-{
-	/* set the reserved ASID before flushing the TLB */
-	set_asid(0);
-	local_flush_tlb_all();
-	if (icache_is_vivt_asid_tagged()) {
-		__flush_icache_all();
-		dsb();
+	/* Update the list of reserved ASIDs and the ASID bitmap. */
+	bitmap_clear(asid_map, 0, NUM_USER_ASIDS);
+	for_each_possible_cpu(i) {
+		if (i == cpu) {
+			asid = 0;
+		} else {
+			asid = atomic64_xchg(&per_cpu(active_asids, i), 0);
+			/*
+			 * If this CPU has already been through a
+			 * rollover, but hasn't run another task in
+			 * the meantime, we must preserve its reserved
+			 * ASID, as this is the only trace we have of
+			 * the process it is still running.
+			 */
+			if (asid == 0)
+				asid = per_cpu(reserved_asids, i);
+			__set_bit(asid & ~ASID_MASK, asid_map);
+		}
+		per_cpu(reserved_asids, i) = asid;
 	}
+
+	/* Queue a TLB invalidate and flush the I-cache if necessary. */
+	if (!tlb_ops_need_broadcast())
+		cpumask_set_cpu(cpu, &tlb_flush_pending);
+	else
+		cpumask_setall(&tlb_flush_pending);
+
+	if (icache_is_vivt_asid_tagged())
+		__flush_icache_all();
 }
 
-#ifdef CONFIG_SMP
+static int is_reserved_asid(u64 asid)
+{
+	int cpu;
+	for_each_possible_cpu(cpu)
+		if (per_cpu(reserved_asids, cpu) == asid)
+			return 1;
+	return 0;
+}
 
-static void set_mm_context(struct mm_struct *mm, unsigned int asid)
+static u64 new_context(struct mm_struct *mm, unsigned int cpu)
 {
-	unsigned long flags;
+	u64 asid = atomic64_read(&mm->context.id);
+	u64 generation = atomic64_read(&asid_generation);
 
-	/*
-	 * Locking needed for multi-threaded applications where the
-	 * same mm->context.id could be set from different CPUs during
-	 * the broadcast. This function is also called via IPI so the
-	 * mm->context.id_lock has to be IRQ-safe.
-	 */
-	raw_spin_lock_irqsave(&mm->context.id_lock, flags);
-	if (likely((mm->context.id ^ cpu_last_asid) >> ASID_BITS)) {
+	if (asid != 0 && is_reserved_asid(asid)) {
+		/*
+		 * Our current ASID was active during a rollover, we can
+		 * continue to use it and this was just a false alarm.
+		 */
+		asid = generation | (asid & ~ASID_MASK);
+	} else {
 		/*
-		 * Old version of ASID found. Set the new one and
-		 * reset mm_cpumask(mm).
+		 * Allocate a free ASID. If we can't find one, take a
+		 * note of the currently active ASIDs and mark the TLBs
+		 * as requiring flushes. We always count from ASID #1,
+		 * as we reserve ASID #0 to switch via TTBR0 and indicate
+		 * rollover events.
 		 */
-		mm->context.id = asid;
+		asid = find_next_zero_bit(asid_map, NUM_USER_ASIDS, 1);
+		if (asid == NUM_USER_ASIDS) {
+			generation = atomic64_add_return(ASID_FIRST_VERSION,
+							 &asid_generation);
+			flush_context(cpu);
+			asid = find_next_zero_bit(asid_map, NUM_USER_ASIDS, 1);
+		}
+		__set_bit(asid, asid_map);
+		asid |= generation;
 		cpumask_clear(mm_cpumask(mm));
 	}
-	raw_spin_unlock_irqrestore(&mm->context.id_lock, flags);
 
-	/*
-	 * Set the mm_cpumask(mm) bit for the current CPU.
-	 */
-	cpumask_set_cpu(smp_processor_id(), mm_cpumask(mm));
+	return asid;
 }
 
-/*
- * Reset the ASID on the current CPU. This function call is broadcast
- * from the CPU handling the ASID rollover and holding cpu_asid_lock.
- */
-static void reset_context(void *info)
+void check_and_switch_context(struct mm_struct *mm, struct task_struct *tsk)
 {
-	unsigned int asid;
+	unsigned long flags;
 	unsigned int cpu = smp_processor_id();
-	struct mm_struct *mm = per_cpu(current_mm, cpu);
+	u64 asid;
+
+	if (unlikely(mm->context.kvm_seq != init_mm.context.kvm_seq))
+		__check_kvm_seq(mm);
 
 	/*
-	 * Check if a current_mm was set on this CPU as it might still
-	 * be in the early booting stages and using the reserved ASID.
+	 * Required during context switch to avoid speculative page table
+	 * walking with the wrong TTBR.
 	 */
-	if (!mm)
-		return;
-
-	smp_rmb();
-	asid = cpu_last_asid + cpu + 1;
+	cpu_set_reserved_ttbr0();
 
-	flush_context();
-	set_mm_context(mm, asid);
+	asid = atomic64_read(&mm->context.id);
+	if (!((asid ^ atomic64_read(&asid_generation)) >> ASID_BITS)
+	    && atomic64_xchg(&per_cpu(active_asids, cpu), asid))
+		goto switch_mm_fastpath;
 
-	/* set the new ASID */
-	set_asid(mm->context.id);
-}
-
-#else
-
-static inline void set_mm_context(struct mm_struct *mm, unsigned int asid)
-{
-	mm->context.id = asid;
-	cpumask_copy(mm_cpumask(mm), cpumask_of(smp_processor_id()));
-}
-
-#endif
-
-void __new_context(struct mm_struct *mm)
-{
-	unsigned int asid;
-
-	raw_spin_lock(&cpu_asid_lock);
-#ifdef CONFIG_SMP
-	/*
-	 * Check the ASID again, in case the change was broadcast from
-	 * another CPU before we acquired the lock.
-	 */
-	if (unlikely(((mm->context.id ^ cpu_last_asid) >> ASID_BITS) == 0)) {
-		cpumask_set_cpu(smp_processor_id(), mm_cpumask(mm));
-		raw_spin_unlock(&cpu_asid_lock);
-		return;
+	raw_spin_lock_irqsave(&cpu_asid_lock, flags);
+	/* Check that our ASID belongs to the current generation. */
+	asid = atomic64_read(&mm->context.id);
+	if ((asid ^ atomic64_read(&asid_generation)) >> ASID_BITS) {
+		asid = new_context(mm, cpu);
+		atomic64_set(&mm->context.id, asid);
 	}
-#endif
-	/*
-	 * At this point, it is guaranteed that the current mm (with
-	 * an old ASID) isn't active on any other CPU since the ASIDs
-	 * are changed simultaneously via IPI.
-	 */
-	asid = ++cpu_last_asid;
-	if (asid == 0)
-		asid = cpu_last_asid = ASID_FIRST_VERSION;
 
-	/*
-	 * If we've used up all our ASIDs, we need
-	 * to start a new version and flush the TLB.
-	 */
-	if (unlikely((asid & ~ASID_MASK) == 0)) {
-		asid = cpu_last_asid + smp_processor_id() + 1;
-		flush_context();
-#ifdef CONFIG_SMP
-		smp_wmb();
-		smp_call_function(reset_context, NULL, 1);
-#endif
-		cpu_last_asid += NR_CPUS;
+	if (cpumask_test_and_clear_cpu(cpu, &tlb_flush_pending)) {
+		local_flush_bp_all();
+		local_flush_tlb_all();
+		dummy_flush_tlb_a15_erratum();
 	}
 
-	set_mm_context(mm, asid);
-	raw_spin_unlock(&cpu_asid_lock);
+	atomic64_set(&per_cpu(active_asids, cpu), asid);
+	cpumask_set_cpu(cpu, mm_cpumask(mm));
+	raw_spin_unlock_irqrestore(&cpu_asid_lock, flags);
+
+switch_mm_fastpath:
+	cpu_switch_mm(mm->pgd, mm);
 }
diff --git a/arch/arm/mm/idmap.c b/arch/arm/mm/idmap.c
index ab88ed4..ddc6376 100644
--- a/arch/arm/mm/idmap.c
+++ b/arch/arm/mm/idmap.c
@@ -92,6 +92,9 @@ static int __init init_static_idmap(void)
 		(long long)idmap_start, (long long)idmap_end);
 	identity_mapping_add(idmap_pgd, idmap_start, idmap_end);
 
+	/* Flush L1 for the hardware to see this page table content */
+	flush_cache_louis();
+
 	return 0;
 }
 early_initcall(init_static_idmap);
@@ -103,12 +106,16 @@ early_initcall(init_static_idmap);
  */
 void setup_mm_for_reboot(void)
 {
-	/* Clean and invalidate L1. */
-	flush_cache_all();
-
 	/* Switch to the identity mapping. */
 	cpu_switch_mm(idmap_pgd, &init_mm);
-
-	/* Flush the TLB. */
+	local_flush_bp_all();
+
+#ifdef CONFIG_CPU_HAS_ASID
+	/*
+	 * We don't have a clean ASID for the identity mapping, which
+	 * may clash with virtual addresses of the previous page tables
+	 * and therefore potentially in the TLB.
+	 */
 	local_flush_tlb_all();
+#endif
 }
diff --git a/arch/blackfin/kernel/process.c b/arch/blackfin/kernel/process.c
index c0f4fe2..22e7c79 100644
--- a/arch/blackfin/kernel/process.c
+++ b/arch/blackfin/kernel/process.c
@@ -171,7 +171,7 @@ asmlinkage int bfin_clone(struct pt_regs *regs)
 	unsigned long newsp;
 
 #ifdef __ARCH_SYNC_CORE_DCACHE
-	if (current->rt.nr_cpus_allowed == num_possible_cpus())
+	if (current->nr_cpus_allowed == num_possible_cpus())
 		set_cpus_allowed_ptr(current, cpumask_of(smp_processor_id()));
 #endif
 
diff --git a/arch/ia64/scripts/check-gas b/arch/ia64/scripts/check-gas
old mode 100755
new mode 100644
diff --git a/arch/ia64/scripts/toolchain-flags b/arch/ia64/scripts/toolchain-flags
old mode 100755
new mode 100644
diff --git a/arch/powerpc/boot/wrapper b/arch/powerpc/boot/wrapper
old mode 100755
new mode 100644
diff --git a/arch/powerpc/relocs_check.pl b/arch/powerpc/relocs_check.pl
old mode 100755
new mode 100644
diff --git a/arch/x86/include/asm/spinlock.h b/arch/x86/include/asm/spinlock.h
index 76bfa2c..dadef77 100644
--- a/arch/x86/include/asm/spinlock.h
+++ b/arch/x86/include/asm/spinlock.h
@@ -236,8 +236,4 @@ static inline void arch_write_unlock(arch_rwlock_t *rw)
 #define arch_read_relax(lock)	cpu_relax()
 #define arch_write_relax(lock)	cpu_relax()
 
-/* The {read|write|spin}_lock() on x86 are full memory barriers. */
-static inline void smp_mb__after_lock(void) { }
-#define ARCH_HAS_SMP_MB_AFTER_LOCK
-
 #endif /* _ASM_X86_SPINLOCK_H */
diff --git a/arch/x86/kernel/smpboot.c b/arch/x86/kernel/smpboot.c
index 6e1e406..607ce22 100644
--- a/arch/x86/kernel/smpboot.c
+++ b/arch/x86/kernel/smpboot.c
@@ -398,8 +398,7 @@ const struct cpumask *cpu_coregroup_mask(int cpu)
 	 * For perf, we return last level cache shared map.
 	 * And for power savings, we return cpu_core_map
 	 */
-	if ((sched_mc_power_savings || sched_smt_power_savings) &&
-	    !(cpu_has(c, X86_FEATURE_AMD_DCM)))
+	if (!(cpu_has(c, X86_FEATURE_AMD_DCM)))
 		return cpu_core_mask(cpu);
 	else
 		return cpu_llc_shared_mask(cpu);
diff --git a/arch/x86/vdso/checkundef.sh b/arch/x86/vdso/checkundef.sh
old mode 100755
new mode 100644
diff --git a/block/Kconfig.iosched b/block/Kconfig.iosched
index 5fd98ea..c38017d 100644
--- a/block/Kconfig.iosched
+++ b/block/Kconfig.iosched
@@ -32,6 +32,24 @@ config IOSCHED_DEADLINE
 	  a new point in the service tree and doing a batch of IO from there
 	  in case of expiry.
 
+config IOSCHED_FIOPS
+	tristate "IOPS based I/O scheduler"
+	default y
+	---help---
+	  This is an IOPS based I/O scheduler. It will try to distribute
+          IOPS equally among all processes in the system. It's mainly for
+          Flash based storage.
+
+config IOSCHED_SIO
+	tristate "Simple I/O scheduler"
+	default y
+	---help---
+	  The Simple I/O scheduler is an extremely simple scheduler,
+	  based on noop and deadline, that relies on deadlines to
+	  ensure fairness. The algorithm does not do any sorting but
+	  basic merging, trying to keep a minimum overhead. It is aimed
+	  mainly for aleatory access devices (eg: flash devices).
+
 config IOSCHED_ROW
 	tristate "ROW I/O scheduler"
 	default y
@@ -91,6 +109,12 @@ choice
 	config DEFAULT_NOOP
 		bool "No-op"
 
+	config DEFAULT_FIOPS
+		bool "FIOPS" if IOSCHED_FIOPS=y
+
+	config DEFAULT_SIO
+		bool "SIO" if IOSCHED_SIO=y
+
 endchoice
 
 config DEFAULT_IOSCHED
@@ -98,7 +122,9 @@ config DEFAULT_IOSCHED
 	default "deadline" if DEFAULT_DEADLINE
 	default "row" if DEFAULT_ROW
 	default "cfq" if DEFAULT_CFQ
+	default "fiops" if DEFAULT_FIOPS
 	default "noop" if DEFAULT_NOOP
+	default "sio" if DEFAULT_SIO
 
 endmenu
 
diff --git a/block/Makefile b/block/Makefile
index b5e6637..b106d46 100644
--- a/block/Makefile
+++ b/block/Makefile
@@ -16,6 +16,8 @@ obj-$(CONFIG_IOSCHED_NOOP)	+= noop-iosched.o
 obj-$(CONFIG_IOSCHED_DEADLINE)	+= deadline-iosched.o
 obj-$(CONFIG_IOSCHED_ROW)	+= row-iosched.o
 obj-$(CONFIG_IOSCHED_CFQ)	+= cfq-iosched.o
+obj-$(CONFIG_IOSCHED_FIOPS)	+= fiops-iosched.o
+obj-$(CONFIG_IOSCHED_SIO)       += sio-iosched.o
 obj-$(CONFIG_IOSCHED_TEST)	+= test-iosched.o
 
 obj-$(CONFIG_BLOCK_COMPAT)	+= compat_ioctl.o
diff --git a/drivers/base/cpu.c b/drivers/base/cpu.c
index adf937b..6345294 100644
--- a/drivers/base/cpu.c
+++ b/drivers/base/cpu.c
@@ -330,8 +330,4 @@ void __init cpu_dev_init(void)
 		panic("Failed to register CPU subsystem");
 
 	cpu_dev_register_generic();
-
-#if defined(CONFIG_SCHED_MC) || defined(CONFIG_SCHED_SMT)
-	sched_create_sysfs_power_savings_entries(cpu_subsys.dev_root);
-#endif
 }
diff --git a/drivers/cpufreq/Kconfig b/drivers/cpufreq/Kconfig
index 57f96eb..6b7762a 100644
--- a/drivers/cpufreq/Kconfig
+++ b/drivers/cpufreq/Kconfig
@@ -50,6 +50,22 @@ choice
 	  This option sets which CPUFreq governor shall be loaded at
 	  startup. If in doubt, select 'performance'.
 
+config CPU_FREQ_DEFAULT_GOV_INTELLIDEMAND
+	bool "intellidemand"
+	select CPU_FREQ_GOV_INTELLIDEMAND
+	help
+	  Use the CPUFreq governor 'intellidemand' as default. This is
+	  based on Ondemand with browsing detection based on GPU loading
+
+config CPU_FREQ_DEFAULT_GOV_INTELLIACTIVE
+	bool "intelliactive"
+	select CPU_FREQ_GOV_INTELLIACTIVE
+	help
+	  Use the CPUFreq governor 'intelliactive' as default. This allows
+	  you to get a full dynamic cpu frequency capable system by simply
+	  loading your cpufreq low-level hardware driver, using the
+	  'interactive' governor for latency-sensitive workloads.
+
 config CPU_FREQ_DEFAULT_GOV_PERFORMANCE
 	bool "performance"
 	select CPU_FREQ_GOV_PERFORMANCE
@@ -206,6 +222,68 @@ config CPU_FREQ_GOV_CONSERVATIVE
 
 	  If in doubt, say N.
 
+config CPU_FREQ_GOV_INTELLIDEMAND
+        tristate "'intellidemand' cpufreq policy governor"
+        select CPU_FREQ_TABLE
+        help
+          'intellidemand' - This driver adds a dynamic cpufreq policy governor.
+          The governor does a periodic polling and
+          changes frequency based on the CPU utilization.
+          The support for this governor depends on CPU capability to
+          do fast frequency switching (i.e, very low latency frequency
+          transitions). with browsing detection based on GPU loading
+
+          To compile this driver as a module, choose M here: the
+          module will be called cpufreq_ondemand.
+
+          For details, take a look at linux/Documentation/cpu-freq.
+
+          If in doubt, say N.
+
+config INTELLI_MAX_ACTIVE_FREQ
+	int "Max Active Freq for Intellidemand"
+	depends on CPU_FREQ_GOV_INTELLIDEMAND
+	default	1728000
+	help
+		Set default max active frequency for intellidemand
+
+config INTELLI_MAX_INACTIVE_FREQ
+	int "Max Inactive Freq for Intellidemand"
+	depends on CPU_FREQ_GOV_INTELLIDEMAND
+	default	1134000
+	help
+		Set default max inactive frequency for intellidemand
+
+config CPUFREQ_LIMIT_MAX_FREQ
+	bool "Limit Max Freq"
+	depends on CPU_FREQ_GOV_INTELLIDEMAND
+	help
+		Limit Max Freq while screen is on for Intellidemand governor
+
+config CPUFREQ_ID_PERFLOCK
+	bool "Intellidemand Performance Lock"
+	depends on CPU_FREQ_GOV_INTELLIDEMAND
+	default n
+	help
+		Minimum CPU performance lock for Intellidemand governor
+
+config CPU_FREQ_GOV_INTELLIACTIVE
+	tristate "'intelliactive' cpufreq policy governor"
+	help
+	  'intelliactive' - This driver adds a dynamic cpufreq policy governor
+	  designed for latency-sensitive workloads.
+
+	  This governor attempts to reduce the latency of clock
+	  increases so that the system is more responsive to
+	  interactive workloads.
+
+	  To compile this driver as a module, choose M here: the
+	  module will be called cpufreq_interactive.
+
+	  For details, take a look at linux/Documentation/cpu-freq.
+
+	  If in doubt, say N.
+
 menu "x86 CPU frequency scaling drivers"
 depends on X86
 source "drivers/cpufreq/Kconfig.x86"
diff --git a/drivers/cpufreq/Makefile b/drivers/cpufreq/Makefile
index 83ab92b..cf87403 100644
--- a/drivers/cpufreq/Makefile
+++ b/drivers/cpufreq/Makefile
@@ -10,6 +10,9 @@ obj-$(CONFIG_CPU_FREQ_GOV_USERSPACE)	+= cpufreq_userspace.o
 obj-$(CONFIG_CPU_FREQ_GOV_ONDEMAND)	+= cpufreq_ondemand.o
 obj-$(CONFIG_CPU_FREQ_GOV_CONSERVATIVE)	+= cpufreq_conservative.o
 obj-$(CONFIG_CPU_FREQ_GOV_INTERACTIVE)	+= cpufreq_interactive.o
+obj-$(CONFIG_CPU_FREQ_GOV_INTELLIDEMAND)+= cpufreq_intellidemand.o
+obj-$(CONFIG_CPU_FREQ_GOV_INTELLIACTIVE)+= cpufreq_intelliactive.o
+
 
 # CPUfreq cross-arch helpers
 obj-$(CONFIG_CPU_FREQ_TABLE)		+= freq_table.o
diff --git a/drivers/cpufreq/cpu-boost.c b/drivers/cpufreq/cpu-boost.c
index f3bf5bc..2f7faf9 100644
--- a/drivers/cpufreq/cpu-boost.c
+++ b/drivers/cpufreq/cpu-boost.c
@@ -35,6 +35,7 @@ struct cpu_sync {
 	int src_cpu;
 	unsigned int boost_min;
 	unsigned int input_boost_min;
+	unsigned int task_load;
 };
 
 static DEFINE_PER_CPU(struct cpu_sync, sync_info);
@@ -55,6 +56,12 @@ module_param(input_boost_freq, uint, 0644);
 static unsigned int input_boost_ms = 40;
 module_param(input_boost_ms, uint, 0644);
 
+static unsigned int migration_load_threshold = 15;
+module_param(migration_load_threshold, uint, 0644);
+
+static bool load_based_syncs;
+module_param(load_based_syncs, bool, 0644);
+
 static u64 last_input_time;
 #define MIN_INPUT_INTERVAL (150 * USEC_PER_MSEC)
 
@@ -133,6 +140,7 @@ static void run_boost_migration(unsigned int cpu)
 	struct cpufreq_policy dest_policy;
 	struct cpufreq_policy src_policy;
 	unsigned long flags;
+	unsigned int req_freq;
 
 	spin_lock_irqsave(&s->lock, flags);
 	s->pending = false;
@@ -147,17 +155,21 @@ static void run_boost_migration(unsigned int cpu)
 	if (ret)
 		return;
 
-	if (src_policy.min == src_policy.cpuinfo.min_freq) {
-		pr_debug("No sync. Source CPU%d@%dKHz at min freq\n",
-				src_cpu, src_policy.cur);
-		return;
+	req_freq = load_based_syncs ?
+			(dest_policy.cpuinfo.max_freq * s->task_load) / 100 :
+								src_policy.cur;
+
+	if (req_freq <= dest_policy.cpuinfo.min_freq) {
+	    pr_debug("No sync. Sync Freq:%u\n", req_freq);
+	    return;
 	}
 
-	cancel_delayed_work_sync(&s->boost_rem);
 	if (sync_threshold)
-		s->boost_min = min(sync_threshold, src_policy.cur);
-	else
-		s->boost_min = src_policy.cur;
+		req_freq = min(sync_threshold, req_freq);
+
+	cancel_delayed_work_sync(&s->boost_rem);
+
+	s->boost_min = req_freq;
 
 	/* Force policy re-evaluation to trigger adjust notifier. */
 	get_online_cpus();
@@ -190,10 +202,22 @@ static struct smp_hotplug_thread cpuboost_threads = {
 };
 
 static int boost_migration_notify(struct notifier_block *nb,
-				unsigned long dest_cpu, void *arg)
+				unsigned long unused, void *arg)
 {
+	struct migration_notify_data *mnd = arg;
 	unsigned long flags;
-	struct cpu_sync *s = &per_cpu(sync_info, dest_cpu);
+	struct cpu_sync *s = &per_cpu(sync_info, mnd->dest_cpu);
+
+	if (load_based_syncs && (mnd->load <= migration_load_threshold))
+		return NOTIFY_OK;
+
+	if (load_based_syncs && ((mnd->load < 0) || (mnd->load > 100))) {
+		pr_err("cpu-boost:Invalid load: %d\n", mnd->load);
+		return NOTIFY_OK;
+	}
+
+	if (!load_based_syncs && (mnd->src_cpu == mnd->dest_cpu))
+		return NOTIFY_OK;
 
 	if (!boost_ms)
 		return NOTIFY_OK;
@@ -202,10 +226,11 @@ static int boost_migration_notify(struct notifier_block *nb,
 	if (thread == current)
 		return NOTIFY_OK;
 
-	pr_debug("Migration: CPU%d --> CPU%d\n", (int) arg, (int) dest_cpu);
+	pr_debug("Migration: CPU%d --> CPU%d\n", mnd->src_cpu, mnd->dest_cpu);
 	spin_lock_irqsave(&s->lock, flags);
 	s->pending = true;
-	s->src_cpu = (int) arg;
+	s->src_cpu = mnd->src_cpu;
+	s->task_load = load_based_syncs ? mnd->load : 0;
 	spin_unlock_irqrestore(&s->lock, flags);
 
 	return NOTIFY_OK;
diff --git a/drivers/cpufreq/cpufreq.c b/drivers/cpufreq/cpufreq.c
index e85815b..21029c6 100644
--- a/drivers/cpufreq/cpufreq.c
+++ b/drivers/cpufreq/cpufreq.c
@@ -694,9 +694,9 @@ static struct attribute *default_attrs[] = {
 	&scaling_driver.attr,
 	&scaling_available_governors.attr,
 	&scaling_setspeed.attr,
-	#ifdef CONFIG_MSM_CPU_VOLTAGE_CONTROL
+#ifdef CONFIG_MSM_CPU_VOLTAGE_CONTROL
  	&UV_mV_table.attr,
-	#endif
+#endif
         &dvfs_test.attr,
 	NULL
 };
diff --git a/drivers/gpu/msm/kgsl_pwrctrl.c b/drivers/gpu/msm/kgsl_pwrctrl.c
index 7ee305f..adacaf5 100644
--- a/drivers/gpu/msm/kgsl_pwrctrl.c
+++ b/drivers/gpu/msm/kgsl_pwrctrl.c
@@ -18,6 +18,7 @@
 #include <mach/msm_iomap.h>
 #include <mach/msm_bus.h>
 #include <linux/ktime.h>
+#include <mach/kgsl.h>
 #include <linux/delay.h>
 
 #include "kgsl.h"
@@ -44,6 +45,8 @@
 #define INIT_UDELAY		200
 #define MAX_UDELAY		2000
 
+unsigned long internal_max = 450000000;
+
 struct clk_pair {
 	const char *name;
 	uint map;
@@ -391,6 +394,8 @@ static int _get_nearest_pwrlevel(struct kgsl_pwrctrl *pwr, unsigned int clock)
 	return -ERANGE;
 }
 
+extern void SetGPUpll_config(u32 loc, unsigned long freq);
+
 static int kgsl_pwrctrl_max_gpuclk_store(struct device *dev,
 					 struct device_attribute *attr,
 					 const char *buf, size_t count)
@@ -409,6 +414,34 @@ static int kgsl_pwrctrl_max_gpuclk_store(struct device *dev,
 	if (ret != 1)
 		return count;
 
+	if (max_gpu) {
+
+		if (val == 450000000) {
+			SetGPUpll_config(0x21, val);
+		}
+		else if (val == 477000000) {
+			SetGPUpll_config(0x23, val);
+		}
+		else if (val == 490500000) {
+			SetGPUpll_config(0x24, val);
+		}
+		else if (val == 504000000) {
+			SetGPUpll_config(0x25, val);
+		}
+		else if (val == 531000000) {
+			SetGPUpll_config(0x27, val);
+		}
+		else if (val == 558000000) {
+			SetGPUpll_config(0x29, val);
+		}
+		else if (val == 585000000) {
+			SetGPUpll_config(0x2B, val);
+		}
+	
+		internal_max = val;
+
+	}	
+	
 	mutex_lock(&device->mutex);
 	level = _get_nearest_pwrlevel(pwr, val);
 	if (level < 0)
@@ -439,8 +472,12 @@ static int kgsl_pwrctrl_max_gpuclk_show(struct device *dev,
 	if (device == NULL)
 		return 0;
 	pwr = &device->pwrctrl;
-	return snprintf(buf, PAGE_SIZE, "%d\n",
-			pwr->pwrlevels[pwr->thermal_pwrlevel].gpu_freq);
+	if (max_gpu)
+		return snprintf(buf, PAGE_SIZE, "%ld\n",
+				internal_max);
+	else
+		return snprintf(buf, PAGE_SIZE, "%d\n",
+				pwr->pwrlevels[pwr->thermal_pwrlevel].gpu_freq);
 }
 
 static int kgsl_pwrctrl_gpuclk_store(struct device *dev,
@@ -479,8 +516,12 @@ static int kgsl_pwrctrl_gpuclk_show(struct device *dev,
 	if (device == NULL)
 		return 0;
 	pwr = &device->pwrctrl;
-	return snprintf(buf, PAGE_SIZE, "%d\n",
+	if (pwr->active_pwrlevel != 0 || !max_gpu)
+		return snprintf(buf, PAGE_SIZE, "%d\n",
 			pwr->pwrlevels[pwr->active_pwrlevel].gpu_freq);
+	else
+		return snprintf(buf, PAGE_SIZE, "%ld\n",
+			internal_max);
 }
 
 static int kgsl_pwrctrl_idle_timer_store(struct device *dev,
@@ -626,8 +667,19 @@ static int kgsl_pwrctrl_gpu_available_frequencies_show(
 		return 0;
 	pwr = &device->pwrctrl;
 	for (index = 0; index < pwr->num_pwrlevels - 1; index++)
-		num_chars += snprintf(buf + num_chars, PAGE_SIZE, "%d ",
-		pwr->pwrlevels[index].gpu_freq);
+
+		if (index == 0 && max_gpu > 0)
+		{
+			num_chars += snprintf(buf + num_chars, PAGE_SIZE, "%d ",585000000);
+			num_chars += snprintf(buf + num_chars, PAGE_SIZE, "%d ",558000000);
+			num_chars += snprintf(buf + num_chars, PAGE_SIZE, "%d ",531000000);
+			num_chars += snprintf(buf + num_chars, PAGE_SIZE, "%d ",504000000);
+			num_chars += snprintf(buf + num_chars, PAGE_SIZE, "%d ",490500000);
+			num_chars += snprintf(buf + num_chars, PAGE_SIZE, "%d ",477000000);
+			num_chars += snprintf(buf + num_chars, PAGE_SIZE, "%d ",450000000);
+		}
+		else
+			num_chars += snprintf(buf + num_chars, PAGE_SIZE, "%d ",pwr->pwrlevels[index].gpu_freq);
 	buf[num_chars++] = '\n';
 	return num_chars;
 }
diff --git a/drivers/gpu/msm/kgsl_sharedmem.c b/drivers/gpu/msm/kgsl_sharedmem.c
old mode 100755
new mode 100644
diff --git a/drivers/hwmon/cap1106.c b/drivers/hwmon/cap1106.c
old mode 100755
new mode 100644
diff --git a/drivers/input/touchscreen/atmel_mxt_ts.c b/drivers/input/touchscreen/atmel_mxt_ts.c
index d89415a..b462c38 100644
--- a/drivers/input/touchscreen/atmel_mxt_ts.c
+++ b/drivers/input/touchscreen/atmel_mxt_ts.c
@@ -64,6 +64,32 @@ static const struct mxt_address_pair mxt_slave_addresses[] = {
 
 enum mxt_device_state { INIT, APPMODE, BOOTLOADER };
 
+struct mxt_wake_common {
+	int suspended;
+	int keyarray_ctrl;
+};
+
+struct mxt_dt2w {
+	struct work_struct work;
+	struct input_dev *pwrdev;
+
+	int enabled;
+	unsigned int timeout_max;
+	unsigned int timeout_min;
+	unsigned int delta_x;
+	unsigned int delta_y;
+};
+
+struct mxt_s2w {
+	struct work_struct work;
+	struct input_dev *pwrdev;
+
+	int enabled;
+	unsigned int start;
+	unsigned int end;
+	bool started;
+};
+
 /* Firmware */
 #define MXT_FW_NAME		"maxtouch.fw"
 
@@ -317,6 +343,16 @@ enum mxt_device_state { INIT, APPMODE, BOOTLOADER };
 
 #define MXT_MAX_FINGER		16
 
+#define DT2W_ENABLED 1
+#define DT2W_TIMEOUT_MAX 400
+#define DT2W_TIMEOUT_MIN 100
+#define DT2W_DELTA_X 60
+#define DT2W_DELTA_Y 60
+
+#define S2W_ENABLED 1
+#define S2W_START -1
+#define S2W_END -1
+
 #define T7_DATA_SIZE		3
 #define T8_DATA_SIZE		10
 #define MXT_MAX_RW_TRIES	3
@@ -422,8 +458,338 @@ struct mxt_data {
 	bool is_crc_got;
 	bool is_key_verify;
 	bool disable_keys;
+	struct mxt_wake_common wake_common;
+	struct mxt_dt2w dt2w;
+	struct mxt_s2w s2w;
+};
+
+static ssize_t dt2w_enabled_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct mxt_data *data = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", data->dt2w.enabled);
+}
+
+static ssize_t s2w_enabled_show(struct device *dev,
+				struct device_attribute *attr, char *buf)
+{
+	struct mxt_data *data = dev_get_drvdata(dev);
+
+	return sprintf(buf, "%d\n", data->s2w.enabled);
+}
+
+static ssize_t dt2w_enabled_store(struct device *dev,
+				struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct mxt_data *data = dev_get_drvdata(dev);
+	int val;
+
+	if (data->wake_common.suspended) {
+		dev_err(dev, "%s: the screen must be on\n", __func__);
+		return -EPERM;
+	}
+
+	sscanf(buf, "%d", &val);
+	if (val != 0 && data->dt2w.enabled == 0) {
+		data->dt2w.enabled = 1;
+		irq_set_irq_wake(data->irq, 1);
+	} else if (data->dt2w.enabled == 1) {
+		data->dt2w.enabled = 0;
+		irq_set_irq_wake(data->irq, 0);
+	}
+
+	return count;
+}
+
+static ssize_t s2w_enabled_store(struct device *dev,
+				struct device_attribute *attr, const char *buf, size_t count)
+{
+	struct mxt_data *data = dev_get_drvdata(dev);
+	int val;
+
+	if (data->wake_common.suspended) {
+		dev_err(dev, "%s: the screen must be on\n", __func__);
+		return -EPERM;
+	}
+
+	sscanf(buf, "%d", &val);
+	if (val != 0 && data->s2w.enabled == 0) {
+		data->s2w.enabled = 1;
+		irq_set_irq_wake(data->irq, 1);
+	} else if (data->s2w.enabled == 1) {
+		data->s2w.enabled = 0;
+		irq_set_irq_wake(data->irq, 0);
+	}
+
+	return count;
+}
+
+static DEVICE_ATTR(dt2w_enabled, S_IWUSR | S_IRUGO,
+		dt2w_enabled_show, dt2w_enabled_store);
+
+static DEVICE_ATTR(s2w_enabled, S_IWUSR | S_IRUGO,
+		s2w_enabled_show,s2w_enabled_store);
+
+#define dt2w_dev_attr(_dev_name, _name_show, _name_store, _ret_val)	\
+				static ssize_t _name_show(struct device *dev,		\
+				struct device_attribute *attr, char *buf)			\
+{																	\
+	struct mxt_data *data = dev_get_drvdata(dev);					\
+	return sprintf(buf, "%u\n", _ret_val);							\
+}																	\
+static ssize_t _name_store(struct device *dev,						\
+				struct device_attribute *attr,						\
+				const char *buf, size_t count)						\
+{																	\
+	struct mxt_data *data = dev_get_drvdata(dev);					\
+	sscanf(buf, "%u", &_ret_val);									\
+	return count;													\
+}																	\
+static DEVICE_ATTR(_dev_name, S_IWUSR | S_IRUGO,					\
+				_name_show, _name_store);
+
+dt2w_dev_attr(dt2w_timeout_max, dt2w_timeout_max_show,
+				dt2w_timeout_max_store, data->dt2w.timeout_max)
+dt2w_dev_attr(dt2w_timeout_min, dt2w_timeout_min_show,
+				dt2w_timeout_min_store, data->dt2w.timeout_min)
+dt2w_dev_attr(dt2w_delta_x, dt2w_delta_x_show,
+				dt2w_delta_x_store, data->dt2w.delta_x)
+dt2w_dev_attr(dt2w_delta_y, dt2w_delta_y_show,
+				dt2w_delta_y_store, data->dt2w.delta_y)
+
+
+#define s2w_dev_attr(_dev_name, _name_show, _name_store, _ret_val)	\
+static ssize_t _name_show(struct device *dev,						\
+				struct device_attribute *attr, char *buf)			\
+{																	\
+	struct mxt_data *data = dev_get_drvdata(dev);					\
+	return sprintf(buf, "%u\n", _ret_val);							\
+}																	\
+static ssize_t _name_store(struct device *dev,						\
+				struct device_attribute *attr,						\
+				const char *buf, size_t count)						\
+{																	\
+	struct mxt_data *data = dev_get_drvdata(dev);					\
+	sscanf(buf, "%u", &_ret_val);									\
+	return count;													\
+}																	\
+static DEVICE_ATTR(_dev_name, S_IWUSR | S_IRUGO,					\
+				_name_show, _name_store);
+
+s2w_dev_attr(s2w_start, s2w_start_show, s2w_start_store, data->s2w.start)
+s2w_dev_attr(s2w_end, s2w_end_show, s2w_end_store, data->s2w.end)
+
+static struct attribute *s2w_attrs[] = {
+	&dev_attr_s2w_enabled.attr,
+	&dev_attr_s2w_start.attr,
+	&dev_attr_s2w_end.attr,
+	NULL
 };
 
+
+static struct attribute *dt2w_attrs[] = {
+	&dev_attr_dt2w_enabled.attr,
+	&dev_attr_dt2w_timeout_max.attr,
+	&dev_attr_dt2w_timeout_min.attr,
+	&dev_attr_dt2w_delta_x.attr,
+	&dev_attr_dt2w_delta_y.attr,
+	NULL
+};
+
+static const struct attribute_group dt2w_attr_group = {
+	.attrs = dt2w_attrs,
+};
+
+static const struct attribute_group s2w_attr_group = {
+	.attrs = s2w_attrs,
+};
+
+static void dt2w_presspwr_work(struct work_struct *work)
+{
+	struct mxt_dt2w *dt2w = container_of(work, struct mxt_dt2w, work);
+	struct input_dev *pwrdev = dt2w->pwrdev;
+
+	if (!mutex_trylock(&pwrdev->mutex))
+		return;
+	input_event(pwrdev, EV_KEY, KEY_POWER, 1);
+	input_event(pwrdev, EV_SYN, 0, 0);
+	msleep(30);
+	input_event(pwrdev, EV_KEY, KEY_POWER, 0);
+	input_event(pwrdev, EV_SYN, 0, 0);
+	msleep(30);
+	mutex_unlock(&pwrdev->mutex);
+}
+
+static void s2w_presspwr_work(struct work_struct *work)
+{
+	struct mxt_s2w *s2w = container_of(work, struct mxt_s2w, work);
+	struct input_dev *pwrdev = s2w->pwrdev;
+
+	if (!mutex_trylock(&pwrdev->mutex))
+		return;
+	input_event(pwrdev, EV_KEY, KEY_POWER, 1);
+	input_event(pwrdev, EV_SYN, 0, 0);
+	msleep(30);
+	input_event(pwrdev, EV_KEY, KEY_POWER, 0);
+	input_event(pwrdev, EV_SYN, 0, 0);
+	msleep(30);
+	mutex_unlock(&pwrdev->mutex);
+}
+
+static void s2w_detect(struct mxt_data *data,
+				struct mxt_message *message, int id)
+{
+	static unsigned long s2w_time = 0;
+	static int s2w_id = 0;
+	int x;
+	int y;
+	u8 status = message->message[0];
+
+	if(data->s2w.started == false)
+	{
+		x = (message->message[1] << 4) | ((message->message[3] >> 4) & 0xf);
+		y = (message->message[2] << 4) | ((message->message[3] & 0xf));
+
+		if (data->pdata->panel_maxx < 1024)
+			x >>= 2;
+			//x = x >> 2;
+		if (data->pdata->panel_maxy < 1024)
+			y >>= 2;
+			//y = y >> 2;
+
+		// left 2 right check start point
+		if (x < 140 && y > 140 && y < 1140)
+		{
+			data->s2w.started = true;
+			data->s2w.start = 0; // l2r int
+		}
+		// right 2 left check start point
+		if (x > 660 && y > 140 && y < 1140)
+		{
+			data->s2w.started = true;
+			data->s2w.start = 1; // r2l int
+		}
+		// top 2 bottom check start point
+		if (y < 140 && x > 140 && x < 660)
+		{
+			data->s2w.started = true;
+			data->s2w.start = 2; // t2b int
+		}
+		// bottom 2 top check start point
+		if (y > 1140 && x > 140 && x < 660)
+		{
+			data->s2w.started = true;
+			data->s2w.start = 3; // b2t int
+		}
+		return;
+	}
+	else
+	{
+		/* If different finger, start over */
+		if (s2w_id != id) {
+			s2w_id = id;
+			s2w_time = 0;
+			data->s2w.started = false;
+			return;
+		}
+
+		if (!(status & MXT_RELEASE))
+			return;
+
+		x = (message->message[1] << 4) | ((message->message[3] >> 4) & 0xf);
+		y = (message->message[2] << 4) | ((message->message[3] & 0xf));
+		if (data->pdata->panel_maxx < 1024)
+			x >>= 2;
+			//x = x >> 2;
+		if (data->pdata->panel_maxy < 1024)
+			y >>= 2;
+			//y = y >> 2;
+
+		// left 2 right check end point
+		if (x > 660 && y > 140 && y < 1140)
+		{
+			data->s2w.end = 0; // l2r int
+		}
+		// right 2 left check end point
+		if (x < 140 && y > 140 && y < 1140)
+		{
+			data->s2w.end = 1; // r2l int
+		}
+		// top 2 bottom check end point
+		if (y > 1140 && x > 140 && x < 660)
+		{
+			data->s2w.end = 2; // t2b int
+		}
+		// bottom 2 top check end point
+		if (y < 140 && x > 140 && x < 660)
+		{
+			data->s2w.end = 3; // b2t int
+		}
+
+		if(data->s2w.start == data->s2w.end)
+		{
+			data->s2w.started = false;
+			schedule_work(&data->s2w.work);
+		}
+		else
+		{
+			data->s2w.started = false;
+		}
+	}
+}
+
+static void dt2w_detect(struct mxt_data *data,
+				struct mxt_message *message, int id)
+{
+	static int dt2w_x = 0;
+	static int dt2w_y = 0;
+	static unsigned long dt2w_time = 0;
+	static int dt2w_id = 0;
+	int x;
+	int y;
+	unsigned long now = jiffies;
+	unsigned int delta_x;
+	unsigned int delta_y;
+	unsigned long delta_t;
+	u8 status = message->message[0];
+
+	/* If different finger, start over */
+	if (dt2w_id != id) {
+		dt2w_id = id;
+		dt2w_time = 0;
+		return;
+	}
+
+
+	if (!(status & MXT_RELEASE))
+		return;
+
+	x = (message->message[1] << 4) | ((message->message[3] >> 4) & 0xf);
+	y = (message->message[2] << 4) | ((message->message[3] & 0xf));
+	if (data->pdata->panel_maxx < 1024)
+		x >>= 2;
+		//x = x >> 2;
+	if (data->pdata->panel_maxy < 1024)
+		y >>= 2;
+		//y = y >> 2;
+
+	delta_x = abs(x - dt2w_x);
+	delta_y = abs(y - dt2w_y);
+	delta_t = jiffies_to_msecs(now - dt2w_time);
+
+	if (delta_t > data->dt2w.timeout_min &&
+		delta_t < data->dt2w.timeout_max)
+	if (delta_x < data->dt2w.delta_x &&
+		delta_y < data->dt2w.delta_y)
+	schedule_work(&data->dt2w.work);
+
+	dt2w_id = id;
+	dt2w_x = x;
+	dt2w_y = y;
+	dt2w_time = jiffies;
+}
+
 static struct dentry *debug_base;
 
 static bool mxt_object_writable(unsigned int type)
@@ -1228,8 +1594,16 @@ static irqreturn_t mxt_interrupt(int irq, void *dev_id)
 		id = reportid - data->t9_min_reportid;
 
 		if (reportid >= data->t9_min_reportid &&
-					reportid <= data->t9_max_reportid)
-			mxt_input_touchevent(data, &message, id);
+					reportid <= data->t9_max_reportid) {
+			if(data->wake_common.suspended) {
+				if (data->dt2w.enabled)
+						dt2w_detect(data, &message, id);
+				if(data->s2w.enabled)
+						s2w_detect(data, &message, id);
+			}
+			else
+				mxt_input_touchevent(data, &message, id);
+		}
 		else if (reportid >= data->t15_min_reportid &&
 					reportid <= data->t15_max_reportid)
 			mxt_handle_key_array(data, &message);
@@ -1788,7 +2162,7 @@ static int mxt_initialize(struct mxt_data *data)
 		error = mxt_update_fw_for_abnormal(data, BOOTLOADER_MODE);
 		if (error)
 			return error;
-		return 0;
+		goto out;
 	}
 
 	dev_info(&client->dev,
@@ -1856,7 +2230,7 @@ static int mxt_initialize(struct mxt_data *data)
 		error = mxt_update_fw_for_abnormal(data, NO_CONFIG_MODE);
 		if (error)
 			return error;
-		return 0;
+		goto out;
 	}
 
 	error = __mxt_read_reg(client, data->t7_start_addr,
@@ -1890,6 +2264,32 @@ static int mxt_initialize(struct mxt_data *data)
 			"Matrix X Size: %d Matrix Y Size: %d\n",
 			info->matrix_xsize, info->matrix_ysize);
 
+	// wake common
+	data->wake_common.suspended = 0;
+
+	error = mxt_read_object(data,
+					MXT_TOUCH_KEYARRAY_T15, MXT_TOUCH_CTRL, &val);
+	if (error) {
+		dev_err(&client->dev, "Failed to get keyarray ctrl\n");
+		data->wake_common.keyarray_ctrl = 0;
+	} else
+		data->wake_common.keyarray_ctrl = val;
+
+	// sleep2wake
+	data->s2w.enabled = S2W_ENABLED;
+
+	// doubletape2wake
+	data->dt2w.enabled = DT2W_ENABLED;
+	data->dt2w.timeout_max = DT2W_TIMEOUT_MAX;
+	data->dt2w.timeout_min = DT2W_TIMEOUT_MIN;
+	data->dt2w.delta_x = DT2W_DELTA_X;
+	data->dt2w.delta_y = DT2W_DELTA_Y;
+
+	if (data->s2w.enabled || data->dt2w.enabled)
+		irq_set_irq_wake(data->irq, 1);
+	
+
+out:
 	return 0;
 
 free_object_table:
@@ -2179,6 +2579,16 @@ static ssize_t mxt_update_fw_store(struct device *dev,
 	u8 bootldr_id;
 	struct input_dev *input_dev = data->input_dev;
 
+	if (data->dt2w.enabled) {
+		dev_err(dev, "Disable DoubleTap2Wake first\n");
+		return -EPERM;
+	}
+
+	if (data->s2w.enabled) {
+		dev_err(dev, "Disable Sweep2Wake first\n");
+		return -EPERM;
+	}
+
 	if (count > 0) {
 		fw_name = buf;
 		dev_info(dev, "Identify firmware name :%s \n", fw_name);
@@ -2866,6 +3276,16 @@ static int mxt_suspend(struct device *dev)
 	struct input_dev *input_dev = data->input_dev;
 	int error;
 
+	data->wake_common.suspended = 1;
+	data->s2w.started = false;
+	if (data->dt2w.enabled || data->s2w.enabled) {
+		/* Disable touchkeys */
+		mxt_write_object(data, MXT_TOUCH_KEYARRAY_T15,
+						MXT_TOUCH_CTRL, 0);
+
+		return 0;
+	}
+
 	disable_irq(data->irq);
 
 	mutex_lock(&input_dev->mutex);
@@ -2907,6 +3327,18 @@ static int mxt_resume(struct device *dev)
 	struct input_dev *input_dev = data->input_dev;
 	int error;
 
+	data->wake_common.suspended = 0;
+	if (data->dt2w.enabled || data->s2w.enabled) {
+		/* Enable touchkeys */
+		mxt_write_object(data, MXT_TOUCH_KEYARRAY_T15,
+				MXT_TOUCH_CTRL, data->wake_common.keyarray_ctrl);
+
+		/* Even if the chip hasn't been in deep sleep,
+		 * a calibration could be required. */
+		mxt_do_force_calibration(data);
+		return 0;
+	}
+
 	/* put regulators in high power mode */
 	error = mxt_regulator_lpm(data, false);
 	if (error < 0) {
@@ -3241,6 +3673,55 @@ static int __devinit mxt_probe(struct i2c_client *client,
 	if (error)
 		goto err_unregister_device;
 
+	INIT_WORK(&data->dt2w.work, dt2w_presspwr_work);
+
+	data->dt2w.pwrdev = input_allocate_device();
+	if (!data->dt2w.pwrdev) {
+		dev_err(&client->dev, "Can't allocate power button\n");
+		goto err_free_dt2w;
+	}
+
+	input_set_capability(data->dt2w.pwrdev, EV_KEY, KEY_POWER);
+	data->dt2w.pwrdev->name = "dt2w_pwrkey";
+	data->dt2w.pwrdev->phys = "dt2w_pwrkey/input0";
+
+	error = input_register_device(data->dt2w.pwrdev);
+	if (error) {
+		dev_err(&client->dev, "Can't register power button: %d\n", error);
+		goto err_free_dt2w;
+	}
+
+	error = sysfs_create_group(&client->dev.kobj, &dt2w_attr_group);
+	if (error) {
+		dev_err(&client->dev, "Can't create dt2w device group: %d\n", error);
+		goto err_unregister_dt2w;
+	}
+
+
+	INIT_WORK(&data->s2w.work, s2w_presspwr_work);
+
+	data->s2w.pwrdev = input_allocate_device();
+	if (!data->s2w.pwrdev) {
+		dev_err(&client->dev, "Can't allocate power button\n");
+		goto err_free_dt2w;
+	}
+
+	input_set_capability(data->s2w.pwrdev, EV_KEY, KEY_POWER);
+	data->s2w.pwrdev->name = "s2w_pwrkey";
+	data->s2w.pwrdev->phys = "s2w_pwrkey/input0";
+
+	error = input_register_device(data->s2w.pwrdev);
+	if (error) {
+		dev_err(&client->dev, "Can't register power button: %d\n", error);
+		goto err_free_s2w;
+	}
+
+	error = sysfs_create_group(&client->dev.kobj, &s2w_attr_group);
+	if (error) {
+		dev_err(&client->dev, "Can't create s2w device group: %d\n", error);
+		goto err_unregister_s2w;
+	}
+
 #if defined(CONFIG_HAS_EARLYSUSPEND)
 	data->early_suspend.level = EARLY_SUSPEND_LEVEL_BLANK_SCREEN +
 						MXT_SUSPEND_LEVEL;
@@ -3271,6 +3752,22 @@ static int __devinit mxt_probe(struct i2c_client *client,
 	mxt_handle_extra_touchdata(data, MXT_REFERENCE_DATA);
 	return 0;
 
+err_unregister_dt2w:
+	input_unregister_device(data->dt2w.pwrdev);
+err_free_dt2w:
+	input_free_device(data->dt2w.pwrdev);
+	data->dt2w.pwrdev = NULL;
+	/* Force disable */
+	data->dt2w.enabled = 0;
+	return error;
+err_unregister_s2w:
+	input_unregister_device(data->s2w.pwrdev);
+	err_free_s2w:
+	input_free_device(data->s2w.pwrdev);
+	data->s2w.pwrdev = NULL;
+	/* Force disable */
+	data->s2w.enabled = 0;
+	return error;
 err_remove_sysfs_group:
 	sysfs_remove_group(&client->dev.kobj, &mxt_attr_group);
 err_unregister_device:
@@ -3311,6 +3808,12 @@ static int __devexit mxt_remove(struct i2c_client *client)
 	cancel_delayed_work_sync(&data->force_calibrate_delayed_work);
 	cancel_delayed_work_sync(&data->disable_antipalm_delayed_work);
 	free_irq(data->irq, data);
+
+	sysfs_remove_group(&client->dev.kobj, &dt2w_attr_group);
+	sysfs_remove_group(&client->dev.kobj, &s2w_attr_group);
+	input_unregister_device(data->dt2w.pwrdev);
+	input_unregister_device(data->s2w.pwrdev);
+
 	input_unregister_device(data->input_dev);
 #if defined(CONFIG_HAS_EARLYSUSPEND)
 	unregister_early_suspend(&data->early_suspend);
diff --git a/drivers/input/touchscreen/ektf3k.c b/drivers/input/touchscreen/ektf3k.c
old mode 100755
new mode 100644
diff --git a/drivers/input/touchscreen/fw_data.b b/drivers/input/touchscreen/fw_data.b
old mode 100755
new mode 100644
index d4b4bd6..2c4238c
--- a/drivers/input/touchscreen/fw_data.b
+++ b/drivers/input/touchscreen/fw_data.b
@@ -1,368 +1,368 @@
-0xc0, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x5f, 
-0x40, 0x02, 0x98, 0x3f, 0x5e, 0x52, 0x98, 0x3f, 0x5f, 0x52, 0x98, 0x3f, 0x60, 0x52, 0x98, 0x3f, 0xc2, 0x52, 0x98, 0x3f, 0xc3, 0x52, 0x98, 0x3f, 0xc4, 0x52, 0x98, 0x3f, 0xc9, 0x52, 0x98, 0x3f, 0xce, 0x52, 0x98, 0x3f, 0xcf, 0x52, 0x98, 0x3f, 0xd0, 0x52, 0x98, 0x3f, 0xd1, 0x52, 0x98, 0x3f, 0xd2, 0x52, 0x98, 0x3f, 0xd3, 0x52, 0x98, 0x3f, 0xd4, 0x52, 0x98, 0x3f, 0xd5, 0x52, 0x98, 0x3f, 0xd6, 0x52, 0x98, 0x3f, 0xd7, 0x52, 0x98, 0x3f, 0xd8, 0x52, 0x98, 0x3f, 0xd9, 0x52, 0x98, 0x3f, 0xda, 0x52, 0x98, 0x3f, 0xdb, 0x52, 0x98, 0x3f, 0xdc, 0x52, 0x98, 0x3f, 0xdd, 0x52, 0x98, 0x3f, 0xde, 0x52, 0x98, 0x3f, 0xdf, 0x52, 0x98, 0x3f, 0xe0, 0x52, 0x98, 0x3f, 0xf4, 0x52, 0x98, 0x3f, 0xf5, 0x52, 0x98, 0x3f, 0x04, 0x53, 0x98, 0x3f, 0x05, 0x53, 0x98, 0x3f, 0x9c, 0x50, 0x98, 0x3f, 0x06, 0x53, 0xf8, 0x4c, 
-0x80, 0x02, 0x98, 0x3f, 0xdc, 0x53, 0x98, 0x3f, 0xdd, 0x53, 0x1a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0xbd, 0x1d, 0x00, 0x60, 0xbe, 0x58, 0xbe, 0x1d, 0x00, 0x60, 0xbe, 0x58, 0xbf, 0x1d, 0x00, 0x60, 0xbe, 0x58, 0xc1, 0x1d, 0x00, 0x60, 0xbe, 0x58, 0x1b, 0x1f, 0x00, 0x60, 0xbe, 0x58, 0x1c, 0x1f, 0x7a, 0xad, 0xfe, 0x93, 0x1a, 0x38, 0x02, 0xa9, 0x00, 0xbc, 0xb1, 0x00, 0x48, 0xaa, 0x40, 0xaa, 0x00, 0xbd, 0xb1, 0x00, 0xf2, 0x62, 0x72, 0x6a, 0x40, 0xbd, 0xb0, 0x00, 0x02, 0xab, 0x1a, 0x38, 0x02, 0x60, 0x80, 0x68, 0xb2, 0x61, 0x2f, 0x38, 0xae, 0x02, 0x0b, 0x5a, 0x8a, 0xb9, 0x19, 0x01, 0x7a, 0xad, 0xfe, 0x93, 0x04, 0x60, 0x80, 0x68, 0xb4, 0x61, 0x6f, 0x38, 0xb8, 0x02, 0x0b, 0x5a, 0x8a, 0xb9, 0x19, 0x01, 0x1a, 0x38, 0x7f, 0x60, 0x1f, 0x68, 0x91, 0xb0, 0x1f, 0x60, 0x1f, 0x68, 0x00, 0xbd, 0xe2, 0x36, 
-0xc0, 0x02, 0x16, 0x00, 0x41, 0xa9, 0xff, 0x60, 0x1f, 0x68, 0x00, 0xbd, 0x91, 0x00, 0x80, 0x60, 0x1f, 0x68, 0x00, 0xbd, 0x96, 0x00, 0x41, 0xab, 0x5a, 0xa9, 0x4f, 0x60, 0x0b, 0x68, 0x1e, 0x58, 0x5a, 0xab, 0x00, 0x60, 0x82, 0xb0, 0xeb, 0xc6, 0xe3, 0xc6, 0x19, 0x38, 0x20, 0x5a, 0xbe, 0xa8, 0xe0, 0xa8, 0xcd, 0xc6, 0xf2, 0xc6, 0x94, 0xef, 0x19, 0x38, 0x24, 0x5a, 0xb9, 0xfc, 0xf8, 0xc7, 0xaf, 0x61, 0x1a, 0x69, 0x78, 0xa9, 0x94, 0xa9, 0x92, 0xaa, 0x82, 0xaa, 0x51, 0xc7, 0x18, 0xc7, 0x19, 0x38, 0x22, 0x5a, 0xff, 0xf0, 0xa7, 0xaa, 0xd5, 0xc8, 0x77, 0xee, 0x92, 0xac, 0xfe, 0x91, 0x16, 0xc5, 0xdc, 0xc5, 0x88, 0xc7, 0xe5, 0xaa, 0x00, 0x60, 0xbe, 0x58, 0xe7, 0x00, 0x00, 0x60, 0x05, 0x68, 0xbe, 0x58, 0xe9, 0x00, 0x18, 0x60, 0x08, 0x68, 0xbe, 0x58, 0xe8, 0x00, 0xf5, 0xac, 0x00, 0x92, 0x4a, 0x8e, 
-0x00, 0x03, 0x8f, 0xa8, 0x97, 0xaa, 0x58, 0xd9, 0xed, 0xac, 0x03, 0x92, 0x19, 0x38, 0x91, 0x4b, 0x02, 0x9e, 0x19, 0x38, 0xde, 0x53, 0x02, 0x60, 0x72, 0x68, 0x05, 0xec, 0xff, 0xc8, 0x19, 0x38, 0xd9, 0x54, 0x02, 0xc9, 0xf2, 0x60, 0x72, 0x68, 0x05, 0xec, 0x08, 0x60, 0x1e, 0x58, 0xbc, 0xea, 0x3e, 0x58, 0x19, 0x10, 0xfb, 0x89, 0x00, 0x60, 0xbe, 0x58, 0xdd, 0x00, 0x00, 0x60, 0x1e, 0x58, 0x78, 0xa9, 0xbc, 0xea, 0x3e, 0x58, 0x19, 0x00, 0x9a, 0xc7, 0x18, 0x10, 0xf8, 0x89, 0x19, 0x38, 0x32, 0x4e, 0x02, 0x60, 0x72, 0x68, 0x05, 0xec, 0xff, 0xc8, 0x19, 0x38, 0x1a, 0x55, 0x02, 0xc9, 0xf2, 0x60, 0x72, 0x68, 0x05, 0xec, 0xf5, 0xaa, 0x08, 0x60, 0x1e, 0x58, 0x0c, 0xf1, 0x3e, 0x58, 0x19, 0x10, 0xfb, 0x89, 0x00, 0x60, 0x1e, 0x58, 0x78, 0xa9, 0x0c, 0xf1, 0x3e, 0x58, 0x19, 0x00, 0xcc, 0xc7, 0xa7, 0xc2, 
-0x40, 0x03, 0x18, 0x10, 0xf8, 0x89, 0xe3, 0xc8, 0xc5, 0xfc, 0xe5, 0xa8, 0x26, 0x60, 0x04, 0x68, 0x3e, 0x61, 0x04, 0x69, 0x9e, 0x5a, 0xbb, 0x00, 0x57, 0x38, 0x3d, 0x58, 0x1a, 0x38, 0x34, 0x60, 0x12, 0x68, 0xbe, 0x58, 0xbd, 0x1d, 0x78, 0x60, 0x56, 0x68, 0xbe, 0x58, 0xbe, 0x1d, 0xbc, 0x60, 0x9a, 0x68, 0xbe, 0x58, 0xbf, 0x1d, 0xaa, 0x60, 0x55, 0x68, 0xbe, 0x58, 0x1b, 0x1f, 0x55, 0x60, 0xaa, 0x68, 0xbe, 0x58, 0x1c, 0x1f, 0x1a, 0x38, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x18, 0xec, 0xf5, 0xac, 0x07, 0x90, 0x7f, 0xeb, 0x00, 0x60, 0xbe, 0x58, 0x40, 0x1b, 0xbe, 0x58, 0x3c, 0x02, 0x7e, 0x9f, 0xdd, 0xac, 0x5a, 0x90, 0xed, 0xac, 0x3c, 0x92, 0x8d, 0xac, 0x23, 0x92, 0x00, 0x9e, 0x9e, 0x58, 0x50, 0x01, 0xbe, 0x58, 0x00, 0xf8, 0x9e, 0x58, 0xc5, 0xa6, 
-0x80, 0x03, 0xd5, 0x1a, 0xbe, 0x58, 0x02, 0xf8, 0x9e, 0x58, 0xd6, 0x1a, 0xbe, 0x58, 0x04, 0xf8, 0x9e, 0x58, 0xd7, 0x1a, 0xbe, 0x58, 0x05, 0xf8, 0x9e, 0x58, 0xd8, 0x1a, 0xbe, 0x58, 0x0a, 0xf8, 0x9e, 0x58, 0x57, 0x01, 0xbe, 0x58, 0x0c, 0xf8, 0x9e, 0x58, 0x5b, 0x01, 0xbe, 0x58, 0x0b, 0xf8, 0x9e, 0x58, 0x07, 0xf8, 0x19, 0x28, 0xbe, 0x58, 0x07, 0xf8, 0x32, 0x9e, 0x9e, 0x58, 0x50, 0x01, 0xbe, 0x58, 0x00, 0xf8, 0x21, 0x60, 0xbe, 0x58, 0x02, 0xf8, 0x48, 0x60, 0xbe, 0x58, 0x04, 0xf8, 0x04, 0x60, 0xbe, 0x58, 0x05, 0xf8, 0x04, 0x60, 0xbe, 0x58, 0x0a, 0xf8, 0x64, 0x60, 0xbe, 0x58, 0x0c, 0xf8, 0x0b, 0x60, 0xbe, 0x58, 0x0b, 0xf8, 0x1b, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0x00, 0xf8, 0x21, 0x60, 0xbe, 0x58, 0x02, 0xf8, 0x94, 0x60, 0xbe, 0x58, 0x04, 0xf8, 0x2d, 0x60, 0xbe, 0x58, 0x05, 0xf8, 0x23, 0xab, 
-0xc0, 0x03, 0x2d, 0x60, 0xbe, 0x58, 0x0a, 0xf8, 0x94, 0x60, 0xbe, 0x58, 0x0c, 0xf8, 0x0f, 0x60, 0xbe, 0x58, 0x0b, 0xf8, 0x9e, 0x58, 0x07, 0xf8, 0x04, 0x38, 0xfe, 0xff, 0xbe, 0x58, 0x07, 0xf8, 0xdd, 0xaa, 0xa5, 0xac, 0x01, 0x90, 0xf3, 0xc8, 0x99, 0xe9, 0x19, 0x38, 0xf2, 0x41, 0xed, 0xac, 0x7a, 0x92, 0xd5, 0xaa, 0xe5, 0xa8, 0x4f, 0xe5, 0x0c, 0xf1, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x18, 0xec, 0x9e, 0x58, 0x36, 0x1d, 0x1d, 0x10, 0x21, 0x8a, 0x9e, 0x58, 0x36, 0x1d, 0x1b, 0x10, 0x1d, 0x8a, 0xdb, 0xf1, 0x86, 0xf6, 0x00, 0x60, 0xbe, 0x58, 0x43, 0x1a, 0x9e, 0x58, 0xb8, 0x04, 0x18, 0x10, 0x14, 0x88, 0x9e, 0x58, 0xc6, 0x00, 0x19, 0x10, 0x10, 0x8a, 0x9e, 0x58, 0xea, 0x19, 0x00, 0x58, 0xbe, 0x58, 0xd3, 0x00, 0x9e, 0x58, 0xeb, 0x19, 0x9f, 0xe2, 
-0x00, 0x04, 0x00, 0x58, 0xbe, 0x58, 0xd4, 0x00, 0x9e, 0x58, 0xec, 0x19, 0x00, 0x58, 0xbe, 0x58, 0xd5, 0x00, 0x0c, 0x9e, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0xd3, 0x00, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0xd4, 0x00, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0xd5, 0x00, 0x9e, 0x58, 0xfc, 0x01, 0x78, 0xac, 0x08, 0x90, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0xd5, 0x00, 0xbe, 0x58, 0xd4, 0x00, 0xbe, 0x58, 0xd3, 0x00, 0x9d, 0xeb, 0xd7, 0xea, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x18, 0xec, 0x26, 0x60, 0x04, 0x68, 0x3e, 0x61, 0x04, 0x69, 0x9e, 0x5a, 0xbb, 0x00, 0x57, 0x38, 0x3d, 0x58, 0x06, 0x70, 0x00, 0xac, 0x12, 0x90, 0x9e, 0x58, 0xfc, 0x1c, 0x18, 0x10, 0x0e, 0x88, 0x9e, 0x58, 0x47, 0x1e, 0x78, 0xac, 0x01, 0x90, 0x0d, 0x9e, 0x73, 0xed, 0x3d, 0xb7, 
-0x40, 0x04, 0x9e, 0x58, 0x1e, 0x1e, 0x18, 0x10, 0x0d, 0x8a, 0xef, 0xec, 0x4f, 0xed, 0x61, 0xed, 0x99, 0xed, 0x9e, 0x58, 0x47, 0x1e, 0x78, 0xac, 0x05, 0x90, 0x78, 0xaa, 0xbe, 0x58, 0x47, 0x1e, 0xbe, 0x58, 0x04, 0xf8, 0x02, 0x9e, 0x9d, 0xf7, 0x00, 0x9e, 0x4f, 0xf7, 0x19, 0x38, 0xd7, 0x41, 0xe6, 0xff, 0x5c, 0xca, 0x8f, 0xca, 0xc2, 0xca, 0x19, 0x38, 0xa1, 0x51, 0xba, 0xac, 0x0f, 0x92, 0x9e, 0x58, 0xc1, 0x1d, 0x06, 0x39, 0x55, 0x00, 0x05, 0x8a, 0x06, 0x39, 0xa5, 0x00, 0x02, 0x8a, 0x42, 0xa9, 0x78, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xa9, 0x32, 0xc8, 0xba, 0xac, 0x71, 0x92, 0x9e, 0x58, 0xc1, 0x1d, 0x06, 0x39, 0x55, 0x00, 0x05, 0x8a, 0x06, 0x39, 0xa5, 0x00, 0x02, 0x8a, 0x42, 0xa9, 0x67, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xa9, 0x95, 0xac, 0x05, 0x90, 0xd2, 0xd2, 
-0x80, 0x04, 0x9e, 0x5f, 0xfb, 0x04, 0xbe, 0x5f, 0xfb, 0x04, 0x95, 0xaa, 0x9e, 0x58, 0xc1, 0x1d, 0x06, 0x39, 0x55, 0x00, 0x05, 0x8a, 0x06, 0x39, 0xa5, 0x00, 0x02, 0x8a, 0x42, 0xa9, 0x52, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xa9, 0xb9, 0xac, 0xd9, 0x91, 0xfd, 0xac, 0x1a, 0x90, 0x9e, 0x58, 0xc1, 0x1d, 0x06, 0x39, 0x55, 0x00, 0x05, 0x8a, 0x06, 0x39, 0xa5, 0x00, 0x02, 0x8a, 0x42, 0xa9, 0x40, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xa9, 0x80, 0x62, 0x57, 0x6a, 0x48, 0x63, 0x0e, 0x6b, 0x0c, 0x61, 0x24, 0x60, 0x01, 0x40, 0x19, 0x10, 0x07, 0x38, 0xb0, 0x04, 0x4b, 0x5c, 0x9d, 0x5b, 0x85, 0xac, 0x1f, 0x90, 0x9e, 0x58, 0xc1, 0x1d, 0x06, 0x39, 0x55, 0x00, 0x05, 0x8a, 0x06, 0x39, 0xa5, 0x00, 0x02, 0x8a, 0x42, 0xa9, 0x24, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x16, 0x62, 
-0xc0, 0x04, 0xff, 0xa9, 0x48, 0x62, 0x0e, 0x6a, 0x7a, 0x63, 0x02, 0x6b, 0x9e, 0x5c, 0xbb, 0x00, 0x9e, 0x5d, 0xbc, 0x00, 0xa4, 0x05, 0x19, 0x15, 0xa7, 0x38, 0xd1, 0x04, 0x63, 0x5c, 0x83, 0x5d, 0xbb, 0x5a, 0x19, 0x02, 0x19, 0x03, 0x9e, 0x58, 0xc1, 0x1d, 0x06, 0x39, 0x55, 0x00, 0x05, 0x8a, 0x06, 0x39, 0xa5, 0x00, 0x02, 0x8a, 0x42, 0xa9, 0x05, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xa9, 0x7a, 0xeb, 0x34, 0x61, 0x12, 0x69, 0x9e, 0x58, 0xbd, 0x1d, 0x38, 0x48, 0x02, 0x8a, 0x42, 0xa9, 0x0f, 0x9e, 0x78, 0x61, 0x56, 0x69, 0x9e, 0x58, 0xbe, 0x1d, 0x38, 0x48, 0x02, 0x8a, 0x42, 0xa9, 0x07, 0x9e, 0xbc, 0x61, 0x9a, 0x69, 0x9e, 0x58, 0xbf, 0x1d, 0x38, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xa9, 0x1a, 0x38, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0x70, 0x4c, 
-0x00, 0x05, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x18, 0xec, 0x9e, 0x58, 0xf8, 0x04, 0x19, 0x00, 0xbe, 0x58, 0xf8, 0x04, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x04, 0x88, 0x1a, 0x38, 0x1a, 0x38, 0x1a, 0x38, 0x42, 0xa9, 0x98, 0x3f, 0x62, 0x03, 0x9e, 0x5e, 0x50, 0x01, 0x00, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xbc, 0x01, 0x01, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xbd, 0x01, 0x1f, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xbe, 0x01, 0x20, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xbf, 0x01, 0x21, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd5, 0x1a, 0x02, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x51, 0x01, 0xc8, 0x58, 0xc0, 0x06, 0x08, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x52, 0x01, 0x03, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0xb2, 0xc8, 
-0x40, 0x05, 0x9e, 0x5e, 0xd6, 0x1a, 0x04, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd7, 0x1a, 0x05, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x55, 0x01, 0x06, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x56, 0x01, 0x07, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x57, 0x01, 0x0c, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x58, 0x01, 0x0e, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x59, 0x01, 0x12, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xba, 0x01, 0x09, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd8, 0x1a, 0x0a, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x5b, 0x01, 0x0b, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0xb4, 0x60, 0x01, 0x68, 0x22, 0x61, 0xf8, 0x69, 0xb9, 0x66, 0x01, 0x6e, 0xc2, 0x3e, 0xb4, 0x01, 0xc7, 0x38, 0x7d, 0x05, 0x05, 0x5a, 0x5d, 0x59, 0x9e, 0x5e, 0x5c, 0x01, 0xf6, 0x5e, 
-0x80, 0x05, 0x0f, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x5d, 0x01, 0x10, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x5e, 0x60, 0x01, 0x68, 0x28, 0x61, 0xf8, 0x69, 0x63, 0x66, 0x01, 0x6e, 0xc2, 0x3e, 0x5e, 0x01, 0xc7, 0x38, 0x93, 0x05, 0x05, 0x5a, 0x5d, 0x59, 0x9e, 0x5e, 0xbb, 0x01, 0x2e, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x64, 0x60, 0x01, 0x68, 0x2f, 0x61, 0xf8, 0x69, 0x6f, 0x66, 0x01, 0x6e, 0xc2, 0x3e, 0x64, 0x01, 0xc7, 0x38, 0xa4, 0x05, 0x05, 0x5a, 0x5d, 0x59, 0x70, 0x60, 0x01, 0x68, 0x3b, 0x61, 0xf8, 0x69, 0x7b, 0x66, 0x01, 0x6e, 0xc2, 0x3e, 0x70, 0x01, 0xc7, 0x38, 0xb0, 0x05, 0x05, 0x5a, 0x5d, 0x59, 0x7c, 0x60, 0x01, 0x68, 0x47, 0x61, 0xf8, 0x69, 0x52, 0x66, 0xf8, 0x6e, 0xc2, 0x3e, 0x47, 0xf8, 0xc7, 0x38, 0xbf, 0x05, 0x03, 0x5a, 0x05, 0x5b, 0xfe, 0x5b, 0x43, 0x2a, 0x5d, 0x59, 0xae, 0x6c, 
-0xc0, 0x05, 0x94, 0x60, 0x01, 0x68, 0x53, 0x61, 0xf8, 0x69, 0x5e, 0x66, 0xf8, 0x6e, 0xc2, 0x3e, 0x53, 0xf8, 0xc7, 0x38, 0xce, 0x05, 0x03, 0x5a, 0x05, 0x5b, 0xfe, 0x5b, 0x43, 0x2a, 0x5d, 0x59, 0xac, 0x60, 0x01, 0x68, 0x13, 0x61, 0xf8, 0x69, 0xb2, 0x66, 0x01, 0x6e, 0xc2, 0x3e, 0xac, 0x01, 0xc7, 0x38, 0xda, 0x05, 0x05, 0x5a, 0x5d, 0x59, 0x3a, 0x38, 0x9e, 0x5e, 0xc3, 0x01, 0xaa, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xc7, 0x01, 0xaf, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xc8, 0x01, 0xb0, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd9, 0x1a, 0xb1, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xca, 0x01, 0xb2, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xcd, 0x01, 0xb5, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xce, 0x01, 0xb6, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x78, 0x58, 
-0x00, 0x06, 0xcf, 0x01, 0xb7, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd0, 0x01, 0xd8, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd1, 0x01, 0xb8, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd3, 0x01, 0xba, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd4, 0x01, 0xbb, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd5, 0x01, 0xbc, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd6, 0x01, 0xbd, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd7, 0x01, 0xbe, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd8, 0x01, 0xbf, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd9, 0x01, 0xc0, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xda, 0x01, 0xc1, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xdb, 0x01, 0xc2, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xdc, 0x01, 0xc3, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0xb2, 0x4e, 
-0x40, 0x06, 0x9e, 0x5e, 0xdd, 0x01, 0xc4, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xde, 0x01, 0xc5, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xdf, 0x01, 0xc6, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe0, 0x01, 0xc7, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe1, 0x01, 0xc8, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe2, 0x01, 0xc9, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe3, 0x01, 0xca, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe4, 0x01, 0xcb, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe5, 0x01, 0xcc, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe6, 0x01, 0xcd, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe7, 0x01, 0xce, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe8, 0x01, 0xcf, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe9, 0x01, 0xd0, 0x60, 0xf8, 0x68, 0xeb, 0x55, 
-0x80, 0x06, 0xdb, 0x58, 0x9e, 0x5e, 0xea, 0x01, 0xd1, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xeb, 0x01, 0xd2, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xec, 0x01, 0xd3, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xed, 0x01, 0xd4, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xee, 0x01, 0xd5, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xef, 0x01, 0xd6, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf0, 0x01, 0xd7, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf1, 0x01, 0xea, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf2, 0x01, 0xeb, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf3, 0x01, 0xec, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf4, 0x01, 0xed, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf5, 0x01, 0xee, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf6, 0x01, 0xef, 0x60, 0xcc, 0x47, 
-0xc0, 0x06, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf7, 0x01, 0xf0, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf8, 0x01, 0xf1, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x3a, 0x38, 0x00, 0xbc, 0xb1, 0x00, 0x18, 0xaa, 0x10, 0xaa, 0x00, 0xbd, 0xb1, 0x00, 0x00, 0x60, 0x80, 0xb0, 0x00, 0x60, 0x81, 0xb0, 0x00, 0x60, 0x82, 0xb0, 0x00, 0x60, 0x83, 0xb0, 0x00, 0x60, 0x9c, 0xb0, 0xc0, 0x60, 0x13, 0x68, 0x9d, 0xb0, 0x00, 0x60, 0xcf, 0xb0, 0x3a, 0x38, 0x41, 0xab, 0x51, 0xb0, 0x78, 0xa8, 0x70, 0xa8, 0x68, 0xaa, 0x60, 0xaa, 0xd1, 0xb0, 0x3a, 0x38, 0x00, 0x60, 0x1f, 0x68, 0x00, 0x61, 0x00, 0x62, 0x17, 0x38, 0x5d, 0x59, 0x3a, 0x38, 0x3e, 0xb0, 0x08, 0xaa, 0x00, 0xaa, 0x18, 0xaa, 0x10, 0xaa, 0xbe, 0xb0, 0x10, 0x60, 0x9e, 0xb0, 0x30, 0xb0, 0x38, 0xa8, 0xb0, 0xb0, 0x3e, 0xb0, 0x38, 0xaa, 0xbe, 0xb0, 0x64, 0x58, 
-0x00, 0x07, 0x84, 0xb0, 0x3c, 0xa9, 0x3e, 0xb0, 0x78, 0xaa, 0xbe, 0xb0, 0x00, 0x60, 0x00, 0xbd, 0xaa, 0x00, 0x30, 0xb0, 0x08, 0xaa, 0x18, 0xaa, 0x00, 0xbd, 0x30, 0x00, 0x36, 0xb0, 0x08, 0xaa, 0x18, 0xaa, 0x00, 0xbd, 0x36, 0x00, 0x33, 0xb0, 0x08, 0xa8, 0x18, 0xa8, 0x00, 0xbd, 0x33, 0x00, 0x3a, 0x38, 0x04, 0x60, 0x69, 0x78, 0x55, 0x60, 0x6a, 0x78, 0x6b, 0x78, 0x6c, 0x78, 0x6d, 0x78, 0x82, 0xac, 0x28, 0x92, 0x00, 0x60, 0x88, 0x68, 0xae, 0xb0, 0x20, 0x60, 0xc4, 0x68, 0xd0, 0xb0, 0x1e, 0x59, 0x1e, 0x5a, 0x93, 0x60, 0x2f, 0x68, 0x09, 0x58, 0x04, 0x39, 0xff, 0x00, 0x04, 0x3a, 0x00, 0xff, 0xfe, 0x5a, 0x22, 0x32, 0xff, 0x61, 0x04, 0x38, 0xff, 0x00, 0x3a, 0x48, 0x01, 0x8a, 0x10, 0x60, 0xd2, 0xb0, 0x3e, 0x5a, 0x3e, 0x59, 0x00, 0x60, 0x5d, 0x78, 0x19, 0x38, 0x8c, 0x50, 0x92, 0xaa, 0x0b, 0x60, 
-0x40, 0x07, 0xaa, 0xac, 0x01, 0x90, 0x92, 0xa8, 0xaa, 0xaa, 0xf9, 0xab, 0xf1, 0xab, 0xfd, 0xa9, 0xf5, 0xa9, 0x01, 0x9e, 0x1a, 0x38, 0xaa, 0xac, 0x04, 0x92, 0xa2, 0xa8, 0x90, 0xc7, 0x82, 0xac, 0x00, 0x90, 0x3a, 0x38, 0x90, 0xaa, 0xa2, 0xaa, 0x81, 0xaa, 0xb9, 0xaa, 0xba, 0xa8, 0xb0, 0xa8, 0xb8, 0xaa, 0x02, 0x60, 0xbe, 0x58, 0x12, 0x00, 0x01, 0x60, 0xbe, 0x58, 0x11, 0x00, 0x01, 0x60, 0xbe, 0x58, 0xfb, 0x1c, 0xff, 0xaa, 0x00, 0x60, 0xbe, 0x58, 0x1b, 0x00, 0xbe, 0x58, 0xc6, 0x00, 0x00, 0x60, 0xbe, 0x58, 0xa3, 0x1c, 0xbe, 0x58, 0xa4, 0x1c, 0xbe, 0x58, 0xa5, 0x1c, 0xbe, 0x58, 0xfc, 0x1c, 0xbe, 0x58, 0xfd, 0x1c, 0xe6, 0xa8, 0x88, 0xb0, 0x89, 0xb0, 0x78, 0xa9, 0x3a, 0x38, 0x30, 0x60, 0x80, 0x68, 0xcf, 0xb0, 0xcd, 0xa9, 0x00, 0x60, 0xbe, 0x58, 0xae, 0x00, 0x00, 0x60, 0xbe, 0x58, 0xba, 0x14, 
-0x80, 0x07, 0xaf, 0x00, 0xbe, 0x58, 0xc2, 0x1d, 0xbe, 0x58, 0xc3, 0x1d, 0xbe, 0x58, 0xc4, 0x1d, 0x3a, 0x38, 0x36, 0x60, 0x80, 0x68, 0x8f, 0xb0, 0xdd, 0xa9, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x3a, 0x38, 0x39, 0xb0, 0x38, 0xaa, 0xb9, 0xb0, 0x30, 0xb0, 0x38, 0xa8, 0xb0, 0xb0, 0x3c, 0xab, 0x3a, 0x38, 0x3c, 0xa9, 0x3a, 0x38, 0x02, 0x3f, 0x01, 0x00, 0x0c, 0x98, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5d, 0xe8, 0x00, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0xa7, 0x07, 0xa5, 0x59, 0x3d, 0x5e, 0x22, 0x9e, 0x12, 0x3f, 0x22, 0x00, 0x1f, 0x98, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5d, 0xe8, 0x00, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0xb7, 0x07, 0xa5, 0x5f, 0xd7, 0x07, 0xfd, 0x5e, 0x12, 0x3f, 0x22, 0x00, 0x10, 0x88, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5d, 0x22, 0x00, 0x9e, 0x5f, 0xdc, 0x4b, 
-0xc0, 0x07, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0xc9, 0x07, 0x00, 0x61, 0xc3, 0x58, 0x1c, 0x5d, 0x1d, 0x5e, 0x1a, 0x38, 0x1a, 0x38, 0x00, 0x60, 0x3a, 0x38, 0x02, 0x3f, 0x01, 0x00, 0x0a, 0x98, 0x29, 0x66, 0x03, 0x6e, 0xb5, 0x65, 0x02, 0x6d, 0x39, 0x67, 0xe7, 0x38, 0xd7, 0x07, 0xa5, 0x59, 0x3d, 0x5e, 0x1e, 0x9e, 0x12, 0x3f, 0x22, 0x00, 0x1b, 0x98, 0x29, 0x66, 0x03, 0x6e, 0xb5, 0x65, 0x02, 0x6d, 0x39, 0x67, 0xe7, 0x38, 0xe5, 0x07, 0xa5, 0x5f, 0xd7, 0x07, 0xfd, 0x5e, 0x12, 0x3f, 0x22, 0x00, 0x0e, 0x88, 0x29, 0x66, 0x03, 0x6e, 0x9e, 0x5d, 0x22, 0x00, 0x39, 0x67, 0xe7, 0x38, 0xf5, 0x07, 0x00, 0x61, 0xc3, 0x58, 0x1c, 0x5d, 0x1d, 0x5e, 0x1a, 0x38, 0x1a, 0x38, 0x00, 0x60, 0x3a, 0x38, 0xaf, 0x61, 0x1a, 0x69, 0x19, 0x01, 0x00, 0x60, 0x2f, 0x68, 0x93, 0x62, 0x57, 0x38, 0x0f, 0x59, 0x1b, 0xed, 
-0x00, 0x08, 0x1a, 0x38, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x08, 0x60, 0x1e, 0x58, 0xbc, 0xea, 0x3e, 0x58, 0x19, 0x10, 0xfb, 0x89, 0x00, 0x60, 0x1e, 0x58, 0x78, 0xa9, 0xbc, 0xea, 0x3e, 0x58, 0x19, 0x00, 0x9a, 0xc7, 0x18, 0x10, 0xf8, 0x89, 0x08, 0x60, 0x1e, 0x58, 0x0c, 0xf1, 0x3e, 0x58, 0x19, 0x10, 0xfb, 0x89, 0x00, 0x60, 0x1e, 0x58, 0x78, 0xa9, 0x0c, 0xf1, 0x3e, 0x58, 0x19, 0x00, 0xcc, 0xc7, 0x18, 0x10, 0xf8, 0x89, 0xe5, 0xa8, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0xa2, 0x72, 0x07, 0x61, 0x22, 0x23, 0x03, 0x61, 0x23, 0x32, 0x0a, 0x8a, 0x1e, 0x49, 
-0x40, 0x08, 0x04, 0x61, 0x23, 0x32, 0x0e, 0x8a, 0x00, 0x61, 0x23, 0x32, 0x24, 0x8a, 0x02, 0x61, 0x23, 0x32, 0x2a, 0x8a, 0x2f, 0x9e, 0x9e, 0x5b, 0xe8, 0x00, 0xb5, 0x66, 0x02, 0x6e, 0xbe, 0x5e, 0x28, 0x1d, 0x28, 0x9e, 0x48, 0x63, 0x0e, 0x6b, 0x48, 0x66, 0x1d, 0x6e, 0x9e, 0x59, 0xbe, 0x00, 0x00, 0x64, 0x3c, 0x48, 0x0d, 0x8a, 0xfa, 0x06, 0x48, 0x67, 0x1d, 0x6f, 0xfa, 0x07, 0x19, 0x11, 0x27, 0x38, 0x64, 0x08, 0xe3, 0x59, 0x3b, 0x5e, 0x19, 0x07, 0x19, 0x06, 0x48, 0x66, 0x1d, 0x6e, 0xbe, 0x5e, 0x28, 0x1d, 0x0f, 0x9e, 0x16, 0xca, 0x48, 0x63, 0x0e, 0x6b, 0x2a, 0xc9, 0x7a, 0x66, 0x02, 0x6e, 0xbe, 0x5e, 0x28, 0x1d, 0x06, 0x9e, 0x30, 0x63, 0x0b, 0x6b, 0x29, 0x66, 0x03, 0x6e, 0xbe, 0x5e, 0x28, 0x1d, 0x60, 0x62, 0x11, 0x6a, 0xc0, 0x61, 0x03, 0x69, 0x24, 0x64, 0x16, 0x65, 0x9e, 0x58, 0xe3, 0x8e, 
-0x80, 0x08, 0x28, 0x1d, 0x05, 0x00, 0x19, 0x05, 0x00, 0x66, 0x00, 0x67, 0xbe, 0x5f, 0x29, 0x1d, 0x27, 0x38, 0xcb, 0x08, 0x19, 0x06, 0xbe, 0x48, 0x09, 0x8a, 0x1e, 0x58, 0x9e, 0x58, 0x29, 0x1d, 0x00, 0xac, 0x02, 0x92, 0x65, 0x58, 0x1d, 0x5a, 0x3e, 0x58, 0x36, 0x9e, 0x05, 0x5e, 0xdd, 0x5a, 0x00, 0x66, 0x19, 0x07, 0xfc, 0x48, 0x01, 0x8a, 0x2f, 0x9e, 0x13, 0xb8, 0x14, 0xb8, 0x15, 0xb8, 0x1e, 0x5e, 0x9e, 0x58, 0x28, 0x1d, 0x9e, 0x5c, 0xb8, 0x00, 0x87, 0x38, 0xa7, 0x08, 0x05, 0x5e, 0xdd, 0x5a, 0x3e, 0x5e, 0x95, 0xb8, 0x94, 0xb8, 0x93, 0xb8, 0x19, 0x12, 0x01, 0x76, 0xdd, 0x5a, 0x9e, 0x58, 0x28, 0x1d, 0xfa, 0x00, 0x05, 0x5e, 0xdd, 0x5a, 0x05, 0x5e, 0xdd, 0x5a, 0x05, 0x5e, 0xdd, 0x5a, 0x05, 0x5e, 0xdd, 0x5a, 0x05, 0x5e, 0xdd, 0x5a, 0x05, 0x5e, 0xdd, 0x5a, 0x05, 0x5e, 0xdd, 0x5a, 0xe8, 0x1d, 
-0xc0, 0x08, 0x9e, 0x5e, 0xe3, 0x19, 0xdd, 0x5a, 0xbb, 0x66, 0xdd, 0x5a, 0xbb, 0x66, 0xdd, 0x5a, 0xff, 0x66, 0xbe, 0x5e, 0x29, 0x1d, 0x1a, 0x38, 0x1a, 0x38, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x00, 0x67, 0x03, 0x6f, 0xbe, 0x5f, 0xdb, 0x00, 0x7f, 0x67, 0xbe, 0x5f, 0xde, 0x00, 0x00, 0x67, 0xbe, 0x5f, 0xe1, 0x00, 0x40, 0x67, 0xbe, 0x5f, 0xe0, 0x00, 0x3a, 0x38, 0xad, 0xac, 0x0d, 0x90, 0x04, 0x60, 0x69, 0x78, 0x66, 0x60, 0x6a, 0x78, 0x6b, 0x78, 0x6c, 0x78, 0x6d, 0x78, 0xb2, 0xa8, 0x3c, 0xab, 0xad, 0xaa, 0x00, 0x60, 0xbe, 0x58, 0xc2, 0x1d, 0x3a, 0x38, 0x02, 0x60, 0x72, 0x68, 0x05, 0xec, 0xff, 0xc8, 0x19, 0x38, 0xd9, 0x54, 0x02, 0xc9, 0xf2, 0x60, 0x72, 0x68, 0x05, 0xec, 0xa5, 0xaa, 0x3a, 0x38, 0x1e, 0x5c, 0x62, 0xbb, 
-0x00, 0x09, 0x04, 0xaa, 0x02, 0x9e, 0x1e, 0x5c, 0x04, 0xa8, 0x46, 0x62, 0x31, 0x6a, 0x40, 0xbd, 0xbd, 0x00, 0x02, 0x62, 0x40, 0xbd, 0xbe, 0x00, 0x00, 0x61, 0x10, 0x69, 0x07, 0x60, 0xc0, 0x68, 0x3f, 0x38, 0x0f, 0x59, 0x00, 0x61, 0x10, 0x69, 0x23, 0x5a, 0x32, 0xa8, 0x04, 0xac, 0x01, 0x92, 0x32, 0xaa, 0x5b, 0x59, 0x01, 0x62, 0x40, 0xbd, 0xbe, 0x00, 0x07, 0x60, 0xc0, 0x68, 0x3f, 0x38, 0x7a, 0x38, 0x02, 0x62, 0x40, 0xbd, 0xbe, 0x00, 0x00, 0x62, 0x40, 0xbd, 0xbd, 0x00, 0x40, 0xbd, 0xbe, 0x00, 0x3e, 0x5c, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0xe6, 0xac, 0x05, 0x92, 0xe0, 0x61, 0x1a, 0x69, 0x00, 0x62, 0x1b, 0x6a, 0x04, 0x9e, 0x40, 0x61, 0x57, 0x69, 0x60, 0x62, 0x57, 0x6a, 0x90, 0x63, 0x5e, 0x6b, 0xb6, 0x64, 0x90, 0x39, 
-0x40, 0x09, 0x5e, 0x6c, 0x39, 0x65, 0x00, 0x66, 0x00, 0x67, 0xa7, 0x38, 0x0c, 0x0a, 0x15, 0x65, 0xfd, 0x48, 0x21, 0x9c, 0xe6, 0xac, 0x05, 0x92, 0xec, 0x61, 0x1a, 0x69, 0x0c, 0x62, 0x1b, 0x6a, 0x04, 0x9e, 0x4c, 0x61, 0x57, 0x69, 0x6c, 0x62, 0x57, 0x6a, 0x16, 0x65, 0xa0, 0x38, 0x7a, 0x02, 0x5e, 0x17, 0x07, 0x00, 0x5e, 0x07, 0x6b, 0x5d, 0xbe, 0x5d, 0x2e, 0x1d, 0x48, 0x66, 0xbe, 0x48, 0xac, 0x8a, 0x09, 0x66, 0xbe, 0x48, 0x1b, 0x9c, 0x13, 0x66, 0xbe, 0x48, 0x35, 0x9c, 0x1d, 0x66, 0xbe, 0x48, 0x15, 0x9c, 0x31, 0x9e, 0x7a, 0x60, 0x02, 0x68, 0x8b, 0x5d, 0xbe, 0x5d, 0x2e, 0x1d, 0x48, 0x66, 0xdd, 0x48, 0x77, 0x8a, 0x05, 0x66, 0xfe, 0x48, 0x4b, 0x9c, 0x0b, 0x66, 0xfe, 0x48, 0x5d, 0x9c, 0x11, 0x66, 0xfe, 0x48, 0x45, 0x9c, 0x15, 0x66, 0xfe, 0x48, 0x57, 0x9c, 0x9e, 0x5d, 0x2e, 0x1d, 0x11, 0x13, 
-0x80, 0x09, 0x0a, 0x66, 0xbe, 0x48, 0x01, 0x96, 0xa6, 0x15, 0x25, 0x01, 0x45, 0x02, 0xff, 0x65, 0xe6, 0xac, 0x02, 0x92, 0x35, 0x26, 0x04, 0x9e, 0x1e, 0x58, 0x29, 0x58, 0x05, 0x26, 0x3e, 0x58, 0xfe, 0x5e, 0xe6, 0xac, 0x02, 0x92, 0x55, 0x25, 0x04, 0x9e, 0x1e, 0x58, 0x49, 0x58, 0x05, 0x25, 0x3e, 0x58, 0xc5, 0x2e, 0xdb, 0x58, 0x71, 0x9e, 0xe6, 0xac, 0x05, 0x92, 0xec, 0x61, 0x1a, 0x69, 0x0c, 0x62, 0x1b, 0x6a, 0x04, 0x9e, 0x4c, 0x61, 0x57, 0x69, 0x6c, 0x62, 0x57, 0x6a, 0x9e, 0x5d, 0x2e, 0x1d, 0x0a, 0x66, 0xa6, 0x15, 0xbe, 0x48, 0x01, 0x96, 0xa6, 0x15, 0x25, 0x01, 0x45, 0x02, 0x00, 0x65, 0xff, 0x6d, 0xe6, 0xac, 0x03, 0x92, 0x35, 0x26, 0x55, 0x25, 0x06, 0x9e, 0x1e, 0x58, 0x29, 0x58, 0x05, 0x26, 0x49, 0x58, 0x05, 0x25, 0x3e, 0x58, 0xfe, 0x5d, 0xc5, 0x2e, 0xdb, 0x58, 0x4c, 0x9e, 0x04, 0xd9, 
-0xc0, 0x09, 0xff, 0x65, 0xe6, 0xac, 0x04, 0x92, 0x35, 0x26, 0xfe, 0x5e, 0x55, 0x25, 0x07, 0x9e, 0x1e, 0x58, 0x29, 0x58, 0x05, 0x26, 0xfe, 0x5e, 0x49, 0x58, 0x05, 0x25, 0x3e, 0x58, 0xc5, 0x2e, 0x9e, 0x5d, 0x2e, 0x1d, 0x05, 0x00, 0xdb, 0x58, 0x05, 0x10, 0x14, 0x9e, 0x00, 0x65, 0xff, 0x6d, 0xe6, 0xac, 0x03, 0x92, 0x35, 0x26, 0x55, 0x25, 0x06, 0x9e, 0x1e, 0x58, 0x29, 0x58, 0x05, 0x26, 0x49, 0x58, 0x05, 0x25, 0x3e, 0x58, 0xfe, 0x5d, 0xc5, 0x2e, 0x9e, 0x5d, 0x2e, 0x1d, 0x05, 0x00, 0xdb, 0x58, 0x05, 0x10, 0x05, 0x66, 0xdf, 0x48, 0x09, 0x8a, 0x0b, 0x66, 0xdf, 0x48, 0x12, 0x8a, 0x11, 0x66, 0xdf, 0x48, 0x0f, 0x8a, 0x19, 0x01, 0x19, 0x02, 0x17, 0x9e, 0xe6, 0xac, 0x05, 0x92, 0xe0, 0x61, 0x1a, 0x69, 0x00, 0x62, 0x1b, 0x6a, 0x04, 0x9e, 0x40, 0x61, 0x57, 0x69, 0x60, 0x62, 0x57, 0x6a, 0xdf, 0x21, 
-0x00, 0x0a, 0x0b, 0x9e, 0xe6, 0xac, 0x05, 0x92, 0xe6, 0x61, 0x1a, 0x69, 0x06, 0x62, 0x1b, 0x6a, 0x04, 0x9e, 0x46, 0x61, 0x57, 0x69, 0x66, 0x62, 0x57, 0x6a, 0x19, 0x07, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x90, 0x60, 0x5e, 0x68, 0x48, 0x64, 0x0e, 0x6c, 0x00, 0x65, 0x00, 0x66, 0x00, 0x67, 0xff, 0x63, 0xff, 0x6b, 0x6f, 0x3c, 0x5a, 0x0a, 0x09, 0x5a, 0x48, 0x65, 0x5d, 0x48, 0x34, 0x8a, 0x1e, 0x58, 0x19, 0x03, 0x0c, 0x65, 0x65, 0x40, 0xe6, 0xac, 0x03, 0x92, 0x00, 0x61, 0x05, 0x69, 0x02, 0x9e, 0x80, 0x61, 0x57, 0x69, 0x20, 0x01, 0xb6, 0x62, 0x5e, 0x6a, 0x13, 0xb8, 0x14, 0xb8, 0x15, 0xb8, 0x6f, 0x39, 0x52, 0x0a, 0xe6, 0xac, 0x02, 0x92, 0x23, 0x5e, 0x01, 0x9e, 0x29, 0x5e, 0xc4, 0x3f, 0x00, 0xff, 0xfe, 0x5f, 0x3c, 0x29, 
-0x40, 0x0a, 0xc4, 0x3e, 0xff, 0x00, 0x49, 0x5d, 0x48, 0x60, 0x1d, 0x48, 0x03, 0x8a, 0x85, 0x04, 0xdb, 0x5c, 0x85, 0x14, 0x19, 0x02, 0x49, 0x5d, 0x48, 0x60, 0x1d, 0x48, 0x03, 0x8a, 0x85, 0x04, 0xfb, 0x5c, 0x85, 0x14, 0x19, 0x02, 0x19, 0x01, 0x95, 0xb8, 0x94, 0xb8, 0x93, 0xb8, 0x16, 0x65, 0x85, 0x04, 0x3e, 0x58, 0x1a, 0x38, 0x19, 0x00, 0x3a, 0x38, 0x9e, 0x59, 0xf1, 0x1e, 0x1c, 0x11, 0x1e, 0x98, 0x9e, 0x59, 0xf2, 0x1e, 0x22, 0x39, 0x88, 0x00, 0x11, 0x8a, 0x9e, 0x59, 0x58, 0x1a, 0x1a, 0x11, 0x01, 0x94, 0x14, 0x9e, 0x88, 0x61, 0xbe, 0x59, 0xf2, 0x1e, 0x8d, 0x61, 0x9e, 0x58, 0xef, 0x1e, 0x1b, 0x59, 0x97, 0x61, 0x9e, 0x58, 0xee, 0x1e, 0x1b, 0x59, 0x18, 0x9e, 0x9e, 0x59, 0x58, 0x1a, 0x19, 0x11, 0xf0, 0x95, 0x9e, 0x59, 0xf1, 0x1e, 0x1c, 0x11, 0x00, 0x98, 0x00, 0x61, 0xbe, 0x59, 0x00, 0xa0, 
-0x80, 0x0a, 0xf2, 0x1e, 0x9e, 0x59, 0xf0, 0x1e, 0x22, 0x39, 0x66, 0x00, 0x08, 0x88, 0x8d, 0x61, 0x23, 0x58, 0xbe, 0x58, 0xef, 0x1e, 0x97, 0x61, 0x23, 0x58, 0xbe, 0x58, 0xee, 0x1e, 0x3a, 0x38, 0x9e, 0x59, 0xf3, 0x1e, 0x1c, 0x11, 0x1e, 0x98, 0x9e, 0x59, 0xf7, 0x1e, 0x22, 0x39, 0x88, 0x00, 0x11, 0x8a, 0x9e, 0x59, 0x58, 0x1a, 0x1b, 0x11, 0x01, 0x94, 0x14, 0x9e, 0x88, 0x61, 0xbe, 0x59, 0xf7, 0x1e, 0x8e, 0x61, 0x9e, 0x58, 0xf5, 0x1e, 0x1b, 0x59, 0x98, 0x61, 0x9e, 0x58, 0xf6, 0x1e, 0x1b, 0x59, 0x18, 0x9e, 0x9e, 0x59, 0x58, 0x1a, 0x1a, 0x11, 0xf0, 0x95, 0x9e, 0x59, 0xf3, 0x1e, 0x1c, 0x11, 0x00, 0x98, 0x00, 0x61, 0xbe, 0x59, 0xf7, 0x1e, 0x9e, 0x59, 0xf4, 0x1e, 0x22, 0x39, 0x66, 0x00, 0x08, 0x88, 0x8e, 0x61, 0x23, 0x58, 0xbe, 0x58, 0xf5, 0x1e, 0x98, 0x61, 0x23, 0x58, 0xbe, 0x58, 0x07, 0x85, 
-0xc0, 0x0a, 0xf6, 0x1e, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x9e, 0x58, 0xea, 0x04, 0x18, 0x10, 0x0a, 0x88, 0x00, 0x60, 0x01, 0x61, 0x1f, 0x69, 0x06, 0x62, 0x1f, 0x6a, 0x8f, 0x38, 0xd5, 0x0a, 0x1d, 0x59, 0x1d, 0x5a, 0x1a, 0x38, 0x9e, 0x58, 0x00, 0x1f, 0x19, 0x10, 0x23, 0x8a, 0x00, 0x64, 0x7f, 0x6c, 0x8d, 0x61, 0x01, 0x62, 0x1f, 0x6a, 0x8f, 0x38, 0xeb, 0x0a, 0x23, 0x58, 0x04, 0x15, 0x06, 0x8a, 0x43, 0x5b, 0x18, 0x13, 0x01, 0x88, 0x1b, 0x5a, 0x43, 0x58, 0x1b, 0x59, 0x19, 0x01, 0x19, 0x02, 0x30, 0x64, 0x97, 0x61, 0x06, 0x62, 0x1f, 0x6a, 0x8f, 0x38, 0xfc, 0x0a, 0x23, 0x58, 0x04, 0x15, 0x06, 0x8a, 0x43, 0x5b, 0x18, 0x13, 0x01, 0x88, 0x1b, 0x5a, 0x43, 0x58, 0x1b, 0x59, 0x19, 0x01, 0x19, 0x02, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x64, 0xd2, 
-0x00, 0x0b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x06, 0x00, 0x06, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x02, 0x00, 0xff, 0x01, 0xff, 0x00, 0x7f, 0x00, 0x3f, 0x00, 0x1f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x96, 0x54, 
-0x40, 0x0b, 0x05, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x9e, 0x58, 0xe7, 0x00, 0x19, 0x10, 0x01, 0x98, 0xfd, 0x38, 0x6c, 0xcb, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x01, 0x60, 0xbe, 0x58, 0xea, 0x00, 0xbe, 0x58, 0xe7, 0x00, 0xed, 0x9f, 0x9e, 0x58, 0xe7, 0x00, 0x19, 0x10, 0x01, 0x98, 0xfd, 0x38, 0x99, 0xcc, 0x01, 0x60, 0xbe, 0x58, 0xe7, 0x00, 0xf6, 0x9f, 0x1a, 0x38, 0x1a, 0x38, 0x9e, 0x58, 0x36, 0x1d, 0x1b, 0x10, 0x98, 0x3a, 0x74, 0x0c, 0xfb, 0xcd, 0x02, 0x60, 0xbe, 0x58, 0xdd, 0x1e, 0x7d, 0xe4, 0xc7, 0xdd, 0x8a, 0xde, 0xa1, 0xdd, 0xac, 0xe5, 0xa1, 0xcc, 0xd4, 0xdb, 0x4a, 0xee, 0xb7, 0xcc, 0x6e, 0xfd, 
-0x80, 0x0b, 0xd4, 0xcc, 0x48, 0x66, 0x0e, 0x6e, 0xa4, 0xed, 0xf8, 0xcc, 0xd2, 0xde, 0x7f, 0xe2, 0x80, 0x60, 0xbe, 0x58, 0xfd, 0x1e, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0x01, 0x00, 0x1a, 0x10, 0x13, 0x88, 0x9e, 0x58, 0x45, 0x04, 0x02, 0x38, 0x00, 0x01, 0x08, 0x98, 0x9e, 0x58, 0x4d, 0x04, 0x9e, 0x59, 0x4f, 0x04, 0x01, 0x00, 0x02, 0x39, 0x00, 0x02, 0x8a, 0x80, 0x88, 0x60, 0xbe, 0x58, 0xfd, 0x1e, 0xa8, 0xe8, 0x2e, 0xe9, 0x84, 0x9e, 0x1a, 0x38, 0x9e, 0x58, 0xe9, 0x1e, 0x18, 0x10, 0x01, 0x8a, 0x7e, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0x20, 0x1d, 0x1b, 0x60, 0xbe, 0x58, 0x44, 0x1a, 0x9e, 0x58, 0xcd, 0x04, 0xfc, 0x10, 0x1b, 0x98, 0x06, 0x70, 0x50, 0xac, 0x18, 0x92, 0x9e, 0x58, 0x45, 0x04, 0x02, 0x38, 0x00, 0x01, 0x0a, 0x98, 0x9e, 0x58, 0x4d, 0x04, 0x02, 0x38, 0x40, 0x01, 0x4d, 0x4c, 
-0xc0, 0x0b, 0x0e, 0x80, 0x9e, 0x58, 0x4f, 0x04, 0x02, 0x38, 0x40, 0x01, 0x09, 0x80, 0xeb, 0xe5, 0x9e, 0x58, 0x20, 0x1d, 0x18, 0x10, 0x04, 0x8a, 0x05, 0x60, 0xbe, 0x58, 0x44, 0x1a, 0x59, 0x9e, 0x1a, 0x38, 0x06, 0x70, 0x08, 0xac, 0x38, 0x92, 0x00, 0xac, 0x36, 0x92, 0x50, 0xac, 0x34, 0x92, 0x00, 0x60, 0xbe, 0x58, 0x43, 0x04, 0x9e, 0x58, 0xdb, 0x1e, 0x9e, 0x59, 0xdc, 0x1e, 0x01, 0x00, 0x1a, 0x10, 0x2a, 0x8a, 0x9e, 0x58, 0xf1, 0x04, 0x1a, 0x10, 0x01, 0x8a, 0x04, 0x9e, 0x9e, 0x58, 0xf2, 0x04, 0x1a, 0x10, 0x21, 0x8a, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0x01, 0x00, 0x1b, 0x10, 0x14, 0x9a, 0x9e, 0x58, 0x45, 0x04, 0x02, 0x38, 0x60, 0x00, 0x15, 0x80, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0x01, 0x00, 0x1b, 0x10, 0x08, 0x88, 0x9e, 0x58, 0xf1, 0x1e, 0x9e, 0x59, 0x10, 0xe2, 
-0x00, 0x0c, 0xf3, 0x1e, 0x01, 0x00, 0x08, 0x58, 0x1d, 0x10, 0x06, 0x98, 0x1f, 0xdf, 0x9e, 0x58, 0x43, 0x04, 0x01, 0x61, 0x19, 0x48, 0x1d, 0x8a, 0x9e, 0x58, 0x8a, 0x04, 0x1f, 0x10, 0x07, 0x80, 0x9e, 0x58, 0x8b, 0x04, 0x1f, 0x10, 0x03, 0x80, 0x05, 0x60, 0xbe, 0x58, 0x44, 0x1a, 0x9e, 0x58, 0x36, 0x1d, 0x1a, 0x10, 0x08, 0x8a, 0x9e, 0x58, 0x36, 0x1d, 0x1c, 0x10, 0x03, 0x8a, 0x98, 0xe2, 0x98, 0xe2, 0x01, 0x9e, 0x98, 0xe2, 0x9e, 0x58, 0x45, 0x04, 0x02, 0x38, 0x80, 0x01, 0x01, 0x80, 0x69, 0xe2, 0xcb, 0xce, 0x1f, 0xcd, 0x9e, 0xce, 0xb0, 0xce, 0x2a, 0xcf, 0x72, 0xdc, 0x17, 0xd2, 0x9e, 0x58, 0x43, 0x04, 0x01, 0x61, 0x19, 0x48, 0x0a, 0x8a, 0x9e, 0x58, 0xb1, 0x04, 0x19, 0x10, 0x06, 0x8a, 0x9e, 0x58, 0xb8, 0x04, 0x18, 0x10, 0x02, 0x88, 0x2c, 0xe4, 0xc3, 0xe1, 0xc1, 0xf8, 0x8a, 0xf8, 0x7f, 0x91, 
-0x40, 0x0c, 0x56, 0xd0, 0x19, 0x38, 0x92, 0x4a, 0x9e, 0x58, 0x43, 0x04, 0x01, 0x61, 0x19, 0x48, 0x0c, 0x8a, 0x9e, 0x58, 0x20, 0x1d, 0x18, 0x10, 0x08, 0x88, 0x19, 0x38, 0xc6, 0x4a, 0x19, 0x38, 0xc5, 0x48, 0x19, 0x38, 0x94, 0x49, 0x19, 0x38, 0xd6, 0x4a, 0x03, 0xda, 0x4d, 0xda, 0xf6, 0xed, 0x6b, 0xd3, 0xe1, 0xd3, 0xec, 0xd6, 0x8a, 0xda, 0x9e, 0x58, 0x58, 0x1a, 0x19, 0x10, 0x12, 0x88, 0x9e, 0x58, 0x8a, 0x04, 0x9e, 0x59, 0x8b, 0x04, 0x01, 0x00, 0x02, 0x39, 0x05, 0x00, 0x0a, 0x98, 0xaa, 0x61, 0x15, 0x69, 0x23, 0x58, 0x02, 0x39, 0x0d, 0x00, 0x04, 0x80, 0xaa, 0x61, 0x15, 0x69, 0x0d, 0x60, 0x1b, 0x59, 0xbf, 0xdc, 0x7a, 0xdd, 0x3a, 0x38, 0xfb, 0xcd, 0xa1, 0xcc, 0xd4, 0xdb, 0xc8, 0xcc, 0xd4, 0xcc, 0xf8, 0xcc, 0x7f, 0xe2, 0xcb, 0xce, 0x1f, 0xcd, 0x9e, 0xce, 0xb0, 0xce, 0x2a, 0xcf, 0x3f, 0xb2, 
-0x80, 0x0c, 0x17, 0xd2, 0x56, 0xd0, 0x03, 0xda, 0x4d, 0xda, 0x6b, 0xd3, 0xe1, 0xd3, 0xec, 0xd6, 0x8a, 0xda, 0xbf, 0xdc, 0x7a, 0xdd, 0x3a, 0x38, 0xfb, 0xcd, 0xa1, 0xcc, 0xd4, 0xcc, 0xf8, 0xcc, 0x7a, 0xce, 0xcb, 0xce, 0x1f, 0xcd, 0x9e, 0xce, 0xb0, 0xce, 0x2a, 0xcf, 0x17, 0xd2, 0x56, 0xd0, 0x03, 0xda, 0x3a, 0x38, 0x4d, 0xda, 0x6b, 0xd3, 0xe1, 0xd3, 0xec, 0xd6, 0x8a, 0xda, 0xbf, 0xdc, 0x7a, 0xdd, 0x3a, 0x38, 0x30, 0x67, 0x0b, 0x6f, 0x9e, 0x5e, 0xe9, 0x00, 0x48, 0x65, 0x0e, 0x6d, 0x9e, 0x5c, 0xda, 0x00, 0x19, 0x14, 0x87, 0x38, 0xb5, 0x0c, 0xc5, 0x5c, 0xf4, 0x14, 0x7c, 0xac, 0x04, 0x92, 0x00, 0x61, 0x02, 0x62, 0x82, 0x40, 0x01, 0x5c, 0x9d, 0x5d, 0x19, 0x07, 0x3a, 0x38, 0x30, 0x60, 0x1c, 0x78, 0x06, 0x70, 0x50, 0xac, 0x08, 0x92, 0x08, 0xac, 0x04, 0x92, 0x00, 0xac, 0x02, 0x92, 0x2d, 0x02, 
-0xc0, 0x0c, 0x10, 0x60, 0x03, 0x9e, 0x30, 0x60, 0x01, 0x9e, 0x68, 0x60, 0x25, 0x78, 0x26, 0x78, 0x3a, 0x38, 0x30, 0x60, 0x1c, 0x78, 0x30, 0x60, 0x25, 0x78, 0x26, 0x78, 0x3a, 0x38, 0x40, 0x60, 0x1c, 0x78, 0x30, 0x60, 0x25, 0x78, 0x26, 0x78, 0x3a, 0x38, 0x48, 0x67, 0x0e, 0x6f, 0x9e, 0x5d, 0xfd, 0x1b, 0x19, 0x15, 0x9e, 0x5e, 0xfe, 0x1b, 0xff, 0x64, 0x7f, 0x6c, 0xa7, 0x38, 0xe2, 0x0c, 0x9f, 0x49, 0x01, 0x9a, 0xe3, 0x5c, 0x19, 0x07, 0x18, 0x14, 0x01, 0x94, 0x00, 0x64, 0x90, 0x3c, 0x26, 0x00, 0x90, 0x3c, 0x05, 0x1c, 0xf2, 0x3f, 0xfd, 0x1b, 0x00, 0x62, 0xa7, 0x38, 0xf4, 0x0c, 0xf2, 0x13, 0x03, 0x96, 0xf4, 0x13, 0x01, 0x94, 0x00, 0x63, 0x7d, 0x5f, 0x19, 0x16, 0xe4, 0x89, 0x3a, 0x38, 0x48, 0x67, 0x0e, 0x6f, 0x9e, 0x5d, 0xfd, 0x1b, 0x9e, 0x5e, 0xfe, 0x1b, 0x19, 0x16, 0xff, 0x64, 0x7d, 0x69, 
-0x00, 0x0d, 0x7f, 0x6c, 0xc7, 0x38, 0x08, 0x0d, 0x9f, 0x49, 0x01, 0x9a, 0xe3, 0x5c, 0xf0, 0x3f, 0xfd, 0x1b, 0x1a, 0x38, 0x18, 0x14, 0x01, 0x94, 0x00, 0x64, 0x90, 0x3c, 0x25, 0x00, 0x90, 0x3c, 0x05, 0x1c, 0x00, 0x62, 0xc7, 0x38, 0x1a, 0x0d, 0xf2, 0x3f, 0xfd, 0x1b, 0xf2, 0x13, 0x03, 0x96, 0xf4, 0x13, 0x01, 0x94, 0x00, 0x63, 0x7b, 0x5f, 0x19, 0x07, 0x19, 0x15, 0xe1, 0x89, 0x3a, 0x38, 0x05, 0x71, 0x49, 0xaa, 0x05, 0x79, 0x00, 0x66, 0x60, 0x65, 0x11, 0x6d, 0x48, 0x64, 0x0e, 0x6c, 0x9e, 0x5b, 0xfd, 0x1b, 0x1a, 0x05, 0xa3, 0x05, 0x00, 0x67, 0x9e, 0x58, 0xfd, 0x1b, 0x19, 0x10, 0x07, 0x38, 0xbb, 0x0d, 0x1d, 0x70, 0x1c, 0x49, 0x85, 0x94, 0x05, 0x71, 0x49, 0xa8, 0x05, 0x79, 0x00, 0x60, 0xa2, 0x3b, 0x01, 0x00, 0x63, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x29, 0x88, 0xb2, 0x3b, 0xd3, 0x97, 
-0x40, 0x0d, 0xfd, 0x1b, 0x19, 0x13, 0x63, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x21, 0x88, 0xa3, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x6d, 0x88, 0x9e, 0x5b, 0xf0, 0x04, 0x4b, 0x62, 0x1a, 0x6a, 0x7a, 0x49, 0x06, 0x98, 0xa3, 0x59, 0x24, 0x39, 0x00, 0x80, 0x23, 0x29, 0x3b, 0x5d, 0x08, 0x9e, 0x43, 0x5b, 0x19, 0x03, 0x7b, 0x5a, 0xa3, 0x59, 0x24, 0x39, 0x00, 0x80, 0x23, 0x29, 0x3b, 0x5d, 0x19, 0x13, 0x60, 0x3a, 0xaa, 0x15, 0x43, 0x59, 0x19, 0x01, 0x3b, 0x5a, 0xdf, 0xce, 0x51, 0x9e, 0xa3, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x4c, 0x88, 0xa2, 0x3b, 0x01, 0x00, 0xb2, 0x3a, 0xfd, 0x1b, 0x19, 0x12, 0x63, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x1f, 0x8a, 0x43, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x1a, 0x8a, 0x63, 0x59, 0x24, 0x39, 0xff, 0x00, 0x43, 0x58, 0x9e, 0xe0, 
-0x80, 0x0d, 0x04, 0x38, 0xff, 0x00, 0x38, 0x48, 0x12, 0x8a, 0x20, 0x39, 0xbd, 0x15, 0x43, 0x58, 0x00, 0x38, 0xbd, 0x15, 0x03, 0x58, 0x19, 0x49, 0x01, 0x94, 0x1b, 0x59, 0x00, 0x39, 0xbd, 0x15, 0x63, 0x58, 0x00, 0x38, 0xbd, 0x15, 0x03, 0x58, 0x19, 0x49, 0x01, 0x94, 0x1b, 0x59, 0x00, 0x60, 0x43, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x09, 0x8a, 0x43, 0x5b, 0x64, 0x3b, 0xff, 0x00, 0xa3, 0x59, 0x24, 0x39, 0x00, 0x80, 0x23, 0x29, 0x3b, 0x5d, 0x0d, 0x9e, 0x63, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x08, 0x8a, 0x63, 0x5b, 0x64, 0x3b, 0xff, 0x00, 0xa3, 0x59, 0x24, 0x39, 0x00, 0x80, 0x23, 0x29, 0x3b, 0x5d, 0x19, 0x13, 0x60, 0x3a, 0xaa, 0x15, 0x43, 0x59, 0x19, 0x01, 0x3b, 0x5a, 0xec, 0xce, 0x19, 0x04, 0x19, 0x05, 0x19, 0x07, 0x19, 0x05, 0x19, 0x06, 0x9e, 0x5a, 0xfe, 0x1b, 0xa8, 0xc2, 
-0xc0, 0x0d, 0x5e, 0x48, 0x69, 0x99, 0x3a, 0x38, 0xe8, 0x67, 0x03, 0x6f, 0xbe, 0x5f, 0x54, 0x1a, 0x9e, 0x5c, 0x58, 0x1a, 0x82, 0x39, 0x00, 0x00, 0x20, 0x8a, 0x00, 0x67, 0xbe, 0x5f, 0x54, 0x1a, 0x9e, 0x5a, 0xfd, 0x1b, 0x72, 0x65, 0x19, 0x6d, 0x86, 0x66, 0x19, 0x6e, 0x19, 0x14, 0xff, 0x61, 0x7f, 0x69, 0x00, 0x63, 0x87, 0x38, 0xe5, 0x0d, 0xa5, 0x58, 0x46, 0x4a, 0x00, 0x38, 0x48, 0x0e, 0x38, 0x49, 0x01, 0x9a, 0x03, 0x59, 0x78, 0x49, 0x01, 0x94, 0x03, 0x5b, 0x17, 0x07, 0x19, 0x04, 0xe1, 0x58, 0x00, 0x61, 0x1c, 0x5c, 0xbe, 0x58, 0x54, 0x1a, 0x3a, 0x38, 0x9e, 0x58, 0xe3, 0x19, 0x00, 0x67, 0x27, 0x76, 0x19, 0x16, 0xc7, 0x38, 0xf7, 0x0d, 0x04, 0x39, 0x01, 0x00, 0xe1, 0x07, 0x08, 0x58, 0xbe, 0x5f, 0xea, 0x04, 0x3a, 0x38, 0x9e, 0x58, 0x00, 0x1f, 0x9e, 0x5f, 0x20, 0x1d, 0x18, 0x17, 0x57, 0x53, 
-0x00, 0x0e, 0x01, 0x8a, 0x1b, 0x00, 0xbe, 0x58, 0x11, 0x00, 0x7a, 0x67, 0x02, 0x6f, 0x00, 0x66, 0x9e, 0x58, 0x5d, 0x1a, 0x19, 0x10, 0x07, 0x38, 0x0e, 0x0e, 0xdd, 0x5f, 0x1a, 0x38, 0x1a, 0x38, 0xed, 0xcd, 0xc3, 0xcd, 0x9e, 0x5f, 0xea, 0x04, 0x0a, 0x67, 0xbe, 0x5f, 0xe4, 0x19, 0x9e, 0x58, 0x54, 0x1a, 0x9e, 0x59, 0x48, 0x1a, 0x24, 0x3a, 0x00, 0xe0, 0x07, 0x8a, 0x22, 0x39, 0x00, 0x20, 0xbe, 0x59, 0x48, 0x1a, 0x24, 0x38, 0xff, 0x1f, 0x17, 0x9e, 0x18, 0x10, 0x0b, 0x8a, 0x9e, 0x59, 0x48, 0x1a, 0x18, 0x11, 0x05, 0x8a, 0x26, 0x5a, 0x41, 0x02, 0x02, 0x00, 0x08, 0x58, 0x08, 0x58, 0xbe, 0x58, 0x48, 0x1a, 0x9e, 0x59, 0xe2, 0x19, 0x3f, 0x48, 0x07, 0x8a, 0x9e, 0x58, 0x48, 0x1a, 0x05, 0x39, 0x00, 0x80, 0xbe, 0x59, 0x48, 0x1a, 0x06, 0x58, 0x24, 0x3a, 0x00, 0xe0, 0x00, 0x8a, 0x30, 0x62, 0xa0, 0x62, 
-0x40, 0x0e, 0x0b, 0x6a, 0x50, 0x3a, 0x4b, 0x1a, 0x49, 0x5a, 0x02, 0x40, 0x00, 0x61, 0x02, 0x69, 0x01, 0x40, 0xbe, 0x59, 0x05, 0x1c, 0x9e, 0x59, 0x4b, 0x1a, 0xbe, 0x59, 0x03, 0x1c, 0x00, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0x58, 0x1a, 0x60, 0x66, 0x11, 0x6e, 0x00, 0x61, 0x80, 0x69, 0x9e, 0x5f, 0xff, 0x1b, 0x19, 0x17, 0xe7, 0x38, 0x5c, 0x0e, 0xd1, 0x22, 0x5d, 0x5e, 0xaa, 0x63, 0x15, 0x6b, 0xbe, 0x62, 0x15, 0x6a, 0x00, 0x61, 0x9e, 0x5f, 0xf0, 0x04, 0x19, 0x17, 0xe7, 0x38, 0x69, 0x0e, 0x1d, 0x5b, 0x19, 0x01, 0x3d, 0x5a, 0xbe, 0x58, 0x4b, 0x1a, 0xc8, 0x63, 0x1b, 0x6b, 0x00, 0x60, 0x13, 0x67, 0xe7, 0x38, 0x74, 0x0e, 0x1d, 0x5b, 0x1a, 0x38, 0x1a, 0x38, 0x9e, 0x58, 0x06, 0x1c, 0xbe, 0x58, 0x1c, 0x00, 0x3a, 0x38, 0x60, 0x67, 0x11, 0x6f, 0x48, 0x66, 0x0e, 0x6e, 0x00, 0x64, 0x01, 0x63, 0xf6, 0x44, 
-0x80, 0x0e, 0x24, 0x72, 0x9e, 0x58, 0x05, 0x1c, 0x08, 0x58, 0x40, 0x02, 0x00, 0x61, 0x80, 0x69, 0x20, 0x58, 0x9e, 0x5d, 0xda, 0x00, 0x19, 0x15, 0xa7, 0x38, 0x9c, 0x0e, 0xf1, 0x25, 0x08, 0x8a, 0xd3, 0x15, 0x0a, 0x98, 0xf0, 0x25, 0xbb, 0x5f, 0x9e, 0x49, 0x06, 0x98, 0x9b, 0x5e, 0x04, 0x9e, 0xd2, 0x15, 0xfa, 0x9b, 0xf1, 0x2d, 0xbb, 0x5f, 0x19, 0x07, 0x19, 0x06, 0x3a, 0x38, 0xbe, 0x63, 0x15, 0x6b, 0x00, 0x65, 0x9e, 0x5c, 0x4b, 0x1a, 0x18, 0x14, 0x0a, 0x8a, 0x19, 0x14, 0x87, 0x38, 0xae, 0x0e, 0x65, 0x04, 0x83, 0x5e, 0x19, 0x16, 0x66, 0x07, 0xe3, 0x5e, 0xdb, 0x5c, 0x19, 0x05, 0x3a, 0x38, 0x9e, 0x5e, 0x4b, 0x1a, 0x0f, 0x9a, 0x0e, 0x8a, 0x19, 0x16, 0xc7, 0x38, 0xc1, 0x0e, 0xc0, 0x3d, 0xbe, 0x15, 0xa3, 0x5f, 0x19, 0x17, 0xdf, 0x48, 0x04, 0x8a, 0xaa, 0x62, 0x15, 0x6a, 0xc3, 0xce, 0x95, 0xc4, 
-0xc0, 0x0e, 0x01, 0xcf, 0x19, 0x16, 0x3a, 0x38, 0xe2, 0x04, 0x83, 0x58, 0xc2, 0x02, 0x50, 0x00, 0x1b, 0x5c, 0xde, 0x5a, 0x00, 0x00, 0x3a, 0x38, 0x00, 0x60, 0xff, 0x61, 0xde, 0x66, 0x15, 0x6e, 0xf2, 0x65, 0x15, 0x6d, 0x06, 0x64, 0x16, 0x6c, 0x1a, 0x63, 0x16, 0x6b, 0x9e, 0x5f, 0xf0, 0x04, 0x19, 0x17, 0xe7, 0x38, 0xdd, 0x0e, 0x3d, 0x5e, 0x1d, 0x5d, 0x1d, 0x5c, 0x3d, 0x5b, 0x3a, 0x38, 0x60, 0x38, 0xde, 0x15, 0xfb, 0x58, 0x60, 0x38, 0xf2, 0x15, 0xfb, 0x58, 0x60, 0x38, 0x06, 0x16, 0xdb, 0x58, 0x60, 0x38, 0x1a, 0x16, 0xdb, 0x58, 0x3a, 0x38, 0x60, 0x38, 0xde, 0x15, 0xf8, 0x49, 0x01, 0x94, 0xfb, 0x58, 0x60, 0x38, 0xf2, 0x15, 0xf8, 0x49, 0x01, 0x9a, 0xfb, 0x58, 0x60, 0x38, 0x06, 0x16, 0xd8, 0x49, 0x01, 0x9a, 0xdb, 0x58, 0x60, 0x38, 0x1a, 0x16, 0xd8, 0x49, 0x01, 0x94, 0xdb, 0x58, 0x72, 0xe8, 
-0x00, 0x0f, 0x3a, 0x38, 0xc0, 0x38, 0xde, 0x15, 0x03, 0x59, 0xe0, 0x3a, 0xde, 0x15, 0x3a, 0x49, 0x01, 0x94, 0x3b, 0x5a, 0xde, 0x58, 0xff, 0x00, 0xc0, 0x38, 0xf2, 0x15, 0x03, 0x59, 0xe0, 0x3a, 0xf2, 0x15, 0x3a, 0x49, 0x01, 0x9a, 0x3b, 0x5a, 0xde, 0x58, 0x00, 0x00, 0xc0, 0x38, 0x06, 0x16, 0x03, 0x59, 0xe0, 0x3a, 0x06, 0x16, 0x3a, 0x49, 0x01, 0x9a, 0x3b, 0x5a, 0xde, 0x58, 0x00, 0x00, 0xc0, 0x38, 0x1a, 0x16, 0x03, 0x59, 0xe0, 0x3a, 0x1a, 0x16, 0x3a, 0x49, 0x01, 0x94, 0x3b, 0x5a, 0xde, 0x58, 0xff, 0x00, 0x3a, 0x38, 0x00, 0x61, 0xbe, 0x59, 0x58, 0x1a, 0x00, 0x67, 0x23, 0x70, 0xe0, 0x39, 0xaa, 0x15, 0x19, 0x49, 0x32, 0x98, 0x02, 0xdc, 0x9e, 0x58, 0xe9, 0x1e, 0x18, 0x10, 0x0e, 0x8a, 0x06, 0x70, 0x08, 0xac, 0x08, 0x92, 0x00, 0xac, 0x06, 0x92, 0x50, 0xac, 0x04, 0x92, 0x20, 0x60, 0x7b, 0x06, 
-0x40, 0x0f, 0x01, 0x68, 0x1c, 0x78, 0x03, 0x9e, 0x00, 0x60, 0x02, 0x68, 0x1c, 0x78, 0x9e, 0x58, 0x20, 0x1d, 0x02, 0x38, 0x80, 0x01, 0x03, 0x88, 0x40, 0x60, 0xbe, 0x58, 0x1c, 0x00, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5e, 0xe0, 0x3b, 0xde, 0x15, 0x63, 0x5d, 0x14, 0x60, 0x58, 0x62, 0x1a, 0x6a, 0x1a, 0x49, 0x12, 0x9a, 0x6d, 0xcf, 0x19, 0x05, 0xe0, 0x3b, 0xf2, 0x15, 0xbb, 0x49, 0xf5, 0x9b, 0x19, 0x06, 0xe0, 0x38, 0x06, 0x16, 0xd8, 0x49, 0xed, 0x9b, 0x66, 0xdc, 0x19, 0x07, 0x9e, 0x58, 0x4b, 0x1a, 0xf8, 0x48, 0xc4, 0x97, 0x01, 0x9e, 0x66, 0xdc, 0x3a, 0x38, 0x9e, 0x5a, 0xfd, 0x1b, 0xa0, 0x38, 0x48, 0x0e, 0x46, 0x48, 0x03, 0x5c, 0xe0, 0x3b, 0xc8, 0x1b, 0x63, 0x58, 0x04, 0x00, 0x1b, 0x5b, 0x1c, 0x73, 0x9b, 0x48, 0x31, 0x96, 0x1e, 0x5f, 0x01, 0x67, 0xe0, 0x39, 0x0c, 0x10, 0x29, 0x59, 0xae, 0x85, 
-0x80, 0x0f, 0x25, 0x03, 0x62, 0x39, 0x00, 0x00, 0x14, 0x96, 0x72, 0x39, 0xfd, 0x1b, 0x11, 0x94, 0xe0, 0x39, 0x15, 0x10, 0x29, 0x59, 0x26, 0x02, 0x42, 0x39, 0x00, 0x00, 0x0a, 0x96, 0x52, 0x39, 0xfe, 0x1b, 0x07, 0x94, 0x9e, 0x59, 0xfd, 0x1b, 0x60, 0x38, 0x48, 0x0e, 0x22, 0x48, 0x98, 0x49, 0x13, 0x96, 0x19, 0x07, 0xe2, 0x38, 0x09, 0x00, 0xe1, 0x97, 0x3e, 0x5f, 0x58, 0x61, 0x1a, 0x69, 0x23, 0x58, 0x00, 0x3a, 0x72, 0x19, 0xfe, 0x5f, 0xaf, 0x2a, 0xfe, 0x5f, 0x00, 0x3a, 0x86, 0x19, 0xdb, 0x5a, 0x08, 0x39, 0x01, 0x00, 0x01, 0x9e, 0x3e, 0x5f, 0x3a, 0x38, 0x1e, 0x5f, 0x00, 0x67, 0xe0, 0x3c, 0x0c, 0x10, 0x89, 0x5c, 0x85, 0x03, 0x62, 0x39, 0x00, 0x00, 0x50, 0x96, 0x72, 0x39, 0xfd, 0x1b, 0x4d, 0x94, 0xe0, 0x3c, 0x15, 0x10, 0x89, 0x5c, 0x86, 0x02, 0x42, 0x39, 0x00, 0x00, 0x46, 0x96, 0x5c, 0x6a, 
-0xc0, 0x0f, 0x52, 0x39, 0xfe, 0x1b, 0x43, 0x94, 0x9e, 0x59, 0xfd, 0x1b, 0x60, 0x38, 0x32, 0x16, 0x22, 0x48, 0x03, 0x5c, 0x82, 0x39, 0x00, 0x00, 0x3a, 0x9a, 0x1e, 0x5f, 0x1e, 0x5c, 0x1e, 0xd0, 0x81, 0x58, 0x3e, 0x5c, 0x19, 0x17, 0x20, 0x98, 0x19, 0x11, 0x1e, 0x98, 0x1e, 0x5c, 0x00, 0x3f, 0x72, 0x19, 0xe3, 0x5f, 0x00, 0x39, 0x86, 0x19, 0x23, 0x59, 0x9e, 0x5c, 0xfd, 0x1b, 0xe0, 0x38, 0x32, 0x16, 0x81, 0x48, 0x03, 0x5f, 0xa0, 0x38, 0x32, 0x16, 0x86, 0x48, 0x3e, 0x5c, 0x17, 0x07, 0x80, 0x41, 0x1c, 0x5f, 0x01, 0x5c, 0x3e, 0x5f, 0xe2, 0x38, 0x05, 0x00, 0x04, 0x96, 0xfd, 0x61, 0xb4, 0x69, 0x81, 0x40, 0x21, 0x5c, 0x1e, 0x5f, 0x50, 0x67, 0x1a, 0x6f, 0xe5, 0x58, 0xe3, 0x59, 0x83, 0x48, 0x3f, 0x5f, 0x1b, 0x5f, 0x52, 0x67, 0x1a, 0x6f, 0xe5, 0x58, 0xe3, 0x59, 0x82, 0x48, 0x3f, 0x5f, 0x1f, 0xab, 
-0x00, 0x10, 0x1b, 0x5f, 0x90, 0x38, 0x54, 0x1a, 0xbe, 0x58, 0x54, 0x1a, 0x3e, 0x5f, 0x19, 0x07, 0xe2, 0x38, 0x09, 0x00, 0xa5, 0x97, 0x3e, 0x5f, 0x3a, 0x38, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x01, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x01, 0x00, 0x9e, 0x5c, 0x58, 0x1a, 0x18, 0x14, 0x29, 0x9a, 0x19, 0x14, 0xff, 0x67, 0x7f, 0x6f, 0x87, 0x38, 0x3d, 0x10, 0x80, 0x38, 0x72, 0x19, 0x80, 0x39, 0x86, 0x19, 0xb8, 0x49, 0x02, 0x88, 0xd9, 0x49, 0x0e, 0x8a, 0x13, 0x10, 0x01, 0x8c, 0x02, 0x58, 0x32, 0x11, 0x01, 0x8c, 0x22, 0x59, 0x01, 0x00, 0xe4, 0x39, 0xff, 0x00, 0x19, 0x48, 0x03, 0x94, 0xfe, 0x5c, 0x04, 0x2f, 0xfe, 0x5c, 0x19, 0x14, 0xe4, 0x3c, 0x00, 0xff, 0x03, 0xe2, 
-0x40, 0x10, 0xfe, 0x5c, 0x80, 0x38, 0x72, 0x19, 0x13, 0x11, 0x01, 0x8c, 0x22, 0x59, 0x80, 0x38, 0x86, 0x19, 0x12, 0x17, 0x01, 0x8c, 0xe2, 0x5f, 0x3a, 0x38, 0x21, 0x72, 0x43, 0x43, 0x01, 0x5c, 0x43, 0x41, 0x24, 0x01, 0x9e, 0x5c, 0x54, 0x1a, 0x1c, 0x5c, 0x18, 0x00, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0xd2, 0x60, 0x15, 0x68, 0x03, 0x59, 0x22, 0x38, 0x01, 0x00, 0x03, 0x8a, 0x22, 0x38, 0x02, 0x00, 0x06, 0x8a, 0x00, 0x60, 0xbe, 0x58, 0x0b, 0x1f, 0xbe, 0x58, 0x0c, 0x1f, 0x0a, 0x9e, 0xb2, 0x60, 0x19, 0x68, 0x03, 0x59, 0xbe, 0x59, 0x0c, 0x1f, 0xbe, 0x60, 0x19, 0x68, 0x03, 0x59, 0xbe, 0x59, 0x0b, 0x1f, 0x3e, 0x59, 0x3e, 0x58, 0x00, 0x60, 0xbe, 0x58, 0xe2, 0x19, 0x58, 0x60, 0x1a, 0x68, 0x00, 0x61, 0x38, 0x49, 0x58, 0x8a, 0x00, 0x67, 0xe0, 0x38, 0x72, 0x19, 0x03, 0x5d, 0xe0, 0x38, 0x68, 0xec, 
-0x80, 0x10, 0x86, 0x19, 0x03, 0x5e, 0xd4, 0xd0, 0xf4, 0xd1, 0x9e, 0x58, 0x59, 0x1a, 0x19, 0x10, 0x05, 0x8a, 0xe0, 0xd0, 0x9e, 0x58, 0x59, 0x1a, 0x1a, 0x10, 0x01, 0x8a, 0xad, 0xcf, 0x51, 0x63, 0x1a, 0x6b, 0x4c, 0xd0, 0x9e, 0x5d, 0xe2, 0x19, 0xa0, 0x3b, 0xb2, 0x19, 0x1b, 0x5b, 0x53, 0x63, 0x1a, 0x6b, 0x4c, 0xd0, 0xa0, 0x3b, 0xbe, 0x19, 0x1b, 0x5b, 0x1e, 0x58, 0x1e, 0x59, 0xa2, 0x38, 0x00, 0x00, 0x13, 0x88, 0x9e, 0x58, 0x0b, 0x1f, 0x18, 0x10, 0x05, 0x88, 0x9e, 0x58, 0x0c, 0x1f, 0x18, 0x10, 0x01, 0x88, 0x0a, 0x9e, 0x9e, 0x58, 0x0b, 0x1f, 0xb2, 0x61, 0x19, 0x69, 0x1b, 0x59, 0x9e, 0x58, 0x0c, 0x1f, 0xbe, 0x61, 0x19, 0x69, 0x1b, 0x59, 0x3e, 0x59, 0x3e, 0x58, 0xe2, 0x62, 0x19, 0x6a, 0xca, 0x63, 0x19, 0x6b, 0x53, 0x03, 0xde, 0x5b, 0xff, 0xff, 0xd6, 0x63, 0x19, 0x6b, 0x53, 0x03, 0xd6, 0xe0, 
-0xc0, 0x10, 0xde, 0x5b, 0xff, 0x7f, 0x43, 0x5b, 0x68, 0x3a, 0x01, 0x00, 0x59, 0x60, 0x1a, 0x68, 0xde, 0x58, 0x00, 0x00, 0x9e, 0x58, 0xe2, 0x19, 0x12, 0x38, 0x27, 0x00, 0x05, 0x94, 0x19, 0x07, 0x58, 0x60, 0x1a, 0x68, 0xf8, 0x49, 0xa9, 0x81, 0x3a, 0x38, 0x50, 0x60, 0x1a, 0x68, 0x00, 0x61, 0x04, 0x62, 0x47, 0x38, 0xdb, 0x10, 0x3d, 0x58, 0x1a, 0x38, 0x59, 0x60, 0x1a, 0x68, 0x3b, 0x58, 0x3a, 0x38, 0xbe, 0x5d, 0xe1, 0x1b, 0xbe, 0x5e, 0xe2, 0x1b, 0x1e, 0x5f, 0x00, 0x67, 0xe0, 0x39, 0xde, 0x15, 0x23, 0x59, 0xe0, 0x3a, 0xf2, 0x15, 0x43, 0x5a, 0xe0, 0x3b, 0x06, 0x16, 0x63, 0x5b, 0xe0, 0x3c, 0x1a, 0x16, 0x83, 0x5c, 0xb9, 0x48, 0x07, 0x96, 0xba, 0x48, 0x05, 0x98, 0xdb, 0x48, 0x03, 0x98, 0xdc, 0x48, 0x01, 0x96, 0x05, 0x9e, 0x19, 0x07, 0xf2, 0x39, 0x4b, 0x1a, 0xe7, 0x97, 0xa9, 0x9e, 0xcb, 0x8d, 
-0x00, 0x11, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x00, 0x67, 0x00, 0x60, 0xe0, 0x3d, 0x72, 0x19, 0xa3, 0x5d, 0xe0, 0x3e, 0x86, 0x19, 0xc3, 0x5e, 0xb9, 0x48, 0x0a, 0x96, 0xba, 0x48, 0x08, 0x98, 0xdb, 0x48, 0x06, 0x98, 0xdc, 0x48, 0x04, 0x96, 0x19, 0x00, 0xfe, 0x5f, 0x07, 0x28, 0xfe, 0x5f, 0x19, 0x07, 0xf2, 0x3d, 0x58, 0x1a, 0xea, 0x97, 0x3e, 0x5f, 0x04, 0x3d, 0xff, 0x00, 0x19, 0x15, 0x01, 0x8a, 0x86, 0x9e, 0x41, 0x16, 0xc1, 0x5f, 0x64, 0x15, 0xdd, 0x48, 0x01, 0x94, 0xa1, 0x5f, 0x1d, 0x17, 0x7b, 0x98, 0x04, 0x3f, 0x00, 0xff, 0xfe, 0x5f, 0x1a, 0x16, 0x0d, 0x94, 0xe0, 0x38, 0x72, 0x19, 0x03, 0x58, 0x18, 0x10, 0x02, 0x9a, 0x02, 0x39, 0x01, 0x00, 0x12, 0x3e, 0xfd, 0x1b, 0x19, 0x06, 0x02, 0x94, 0x00, 0x3a, 0x01, 0x00, 0x1a, 0x15, 0x0d, 0x94, 0xe0, 0x38, 0x86, 0x19, 0x03, 0x58, 0xdb, 0x66, 
-0x40, 0x11, 0x18, 0x10, 0x02, 0x9a, 0x02, 0x3c, 0x01, 0x00, 0x12, 0x3e, 0xfe, 0x1b, 0x19, 0x06, 0x02, 0x94, 0x00, 0x3b, 0x01, 0x00, 0x1e, 0x59, 0x21, 0x5d, 0x9e, 0x5e, 0xfd, 0x1b, 0xa0, 0x38, 0x32, 0x16, 0xc4, 0x48, 0x03, 0x5e, 0x9e, 0x58, 0xe6, 0x1b, 0x00, 0x61, 0x01, 0x69, 0x19, 0x48, 0x12, 0x98, 0xb2, 0x38, 0xe1, 0x1b, 0x03, 0x88, 0x92, 0x38, 0xe2, 0x1b, 0x0c, 0x8a, 0x18, 0x16, 0x07, 0x9a, 0x08, 0x60, 0xc0, 0x40, 0x08, 0x5e, 0xc0, 0x06, 0xc8, 0x5e, 0xc8, 0x5e, 0xc8, 0x5e, 0x9e, 0x58, 0xe4, 0x1b, 0xc0, 0x06, 0x18, 0x16, 0x2b, 0x9a, 0x50, 0x67, 0x1a, 0x6f, 0xe5, 0x58, 0xe3, 0x59, 0xc5, 0x48, 0x3f, 0x5f, 0x1b, 0x5f, 0x52, 0x67, 0x1a, 0x6f, 0xe5, 0x58, 0xe3, 0x59, 0xc4, 0x48, 0x3f, 0x5f, 0x1b, 0x5f, 0xd0, 0x3f, 0x54, 0x1a, 0xbe, 0x5f, 0x54, 0x1a, 0x7f, 0xac, 0x17, 0x90, 0xbd, 0x55, 
-0x80, 0x11, 0xe8, 0x5f, 0xbe, 0x5f, 0x54, 0x1a, 0x9e, 0x58, 0x50, 0x1a, 0x9e, 0x59, 0x51, 0x1a, 0x28, 0x59, 0x0c, 0x58, 0xbe, 0x59, 0x51, 0x1a, 0xbe, 0x58, 0x50, 0x1a, 0x9e, 0x58, 0x52, 0x1a, 0x9e, 0x59, 0x53, 0x1a, 0x28, 0x59, 0x0c, 0x58, 0xbe, 0x59, 0x53, 0x1a, 0xbe, 0x58, 0x52, 0x1a, 0xa2, 0x37, 0x02, 0x8a, 0x19, 0x05, 0xb1, 0x9f, 0x3e, 0x59, 0x83, 0x37, 0x02, 0x8a, 0x19, 0x04, 0xaa, 0x9f, 0x02, 0x65, 0xbe, 0x5d, 0x59, 0x1a, 0x03, 0x9e, 0x03, 0x65, 0xbe, 0x5d, 0x59, 0x1a, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5f, 0x3a, 0x38, 0x1e, 0x5c, 0x9e, 0x5d, 0xe1, 0x1b, 0x9e, 0x5e, 0xe2, 0x1b, 0xa0, 0x38, 0x32, 0x16, 0x16, 0x67, 0x1e, 0x59, 0x00, 0x61, 0xc7, 0x48, 0x3e, 0x59, 0x03, 0x5f, 0x18, 0x17, 0x35, 0x9a, 0x1e, 0x59, 0x1e, 0x5a, 0x00, 0x61, 0xe1, 0x58, 0xbe, 0x5f, 0xe6, 0x1b, 0x35, 0x15, 
-0xc0, 0x11, 0x06, 0x58, 0x2a, 0x59, 0x06, 0x58, 0x2a, 0x59, 0x0c, 0x62, 0x1c, 0x5a, 0xbe, 0x58, 0xe3, 0x1b, 0x00, 0x61, 0xe1, 0x58, 0xa8, 0x62, 0x1c, 0x5a, 0xbe, 0x58, 0xe4, 0x1b, 0x3e, 0x5a, 0x3e, 0x59, 0x41, 0x10, 0x21, 0x5f, 0x07, 0x38, 0xea, 0x11, 0xfd, 0x48, 0x02, 0x88, 0x9e, 0x48, 0x12, 0x8a, 0x20, 0x38, 0x32, 0x16, 0x1e, 0x59, 0x1e, 0x5a, 0x16, 0x62, 0x00, 0x61, 0x82, 0x48, 0x3e, 0x5a, 0x3e, 0x59, 0x03, 0x58, 0x18, 0x10, 0x06, 0x9a, 0x1e, 0x59, 0x9e, 0x59, 0xe3, 0x1b, 0x19, 0x48, 0x3e, 0x59, 0x05, 0x94, 0x19, 0x07, 0x19, 0x04, 0x9b, 0x48, 0xe2, 0x9b, 0x03, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0xe4, 0x1b, 0x3e, 0x5c, 0x3a, 0x38, 0x9e, 0x58, 0x58, 0x1a, 0x02, 0x39, 0x01, 0x00, 0x1d, 0x9a, 0x00, 0x62, 0x5f, 0x48, 0x16, 0x8a, 0x40, 0x38, 0x72, 0x19, 0x03, 0x5b, 0x40, 0x38, 0xb8, 0xbd, 
-0x00, 0x12, 0x86, 0x19, 0x03, 0x5c, 0xa3, 0x10, 0x01, 0x8c, 0x02, 0x58, 0x02, 0x39, 0x01, 0x00, 0x0a, 0x88, 0xc4, 0x10, 0x01, 0x8c, 0x02, 0x58, 0x02, 0x39, 0x01, 0x00, 0x04, 0x88, 0x01, 0x61, 0xbe, 0x59, 0x59, 0x1a, 0x04, 0x9e, 0x19, 0x02, 0x52, 0x39, 0x58, 0x1a, 0xe4, 0x89, 0x3a, 0x38, 0x9e, 0x58, 0x58, 0x1a, 0x02, 0x39, 0x01, 0x00, 0x66, 0x9a, 0x00, 0x67, 0xe0, 0x3e, 0x86, 0x19, 0xe0, 0x3a, 0x01, 0x00, 0x40, 0x3b, 0x72, 0x19, 0x40, 0x3c, 0x86, 0x19, 0xe0, 0x3d, 0x72, 0x19, 0xa3, 0x5d, 0xa4, 0x38, 0x00, 0xff, 0x63, 0x5b, 0x64, 0x39, 0x00, 0xff, 0x19, 0x48, 0x4a, 0x88, 0xa4, 0x3d, 0xff, 0x00, 0x64, 0x3b, 0xff, 0x00, 0x1e, 0x5f, 0x1e, 0x5a, 0x9e, 0x5f, 0xfd, 0x1b, 0x60, 0x38, 0x48, 0x0e, 0xe4, 0x49, 0x03, 0x5a, 0xa0, 0x38, 0x48, 0x0e, 0xe6, 0x49, 0x00, 0x61, 0x58, 0x49, 0x7a, 0x8f, 
-0x40, 0x12, 0x02, 0x9a, 0x01, 0x61, 0x03, 0x5a, 0x1e, 0x59, 0x9e, 0x58, 0x44, 0x1a, 0x40, 0x40, 0x9f, 0x38, 0x08, 0x58, 0xbe, 0x58, 0x83, 0x1a, 0x8f, 0xd2, 0x19, 0x10, 0x28, 0x8a, 0x9e, 0x58, 0x58, 0x1a, 0x19, 0x10, 0xbe, 0x58, 0x58, 0x1a, 0x3e, 0x59, 0x3e, 0x5a, 0x3e, 0x5f, 0x40, 0x3b, 0x72, 0x19, 0xe0, 0x3d, 0x72, 0x19, 0x18, 0x11, 0x04, 0x8a, 0x63, 0x59, 0x3b, 0x5d, 0x83, 0x59, 0x3b, 0x5e, 0x72, 0x61, 0x19, 0x69, 0x30, 0x39, 0x58, 0x1a, 0x23, 0x59, 0x3b, 0x5b, 0x86, 0x61, 0x19, 0x69, 0x30, 0x39, 0x58, 0x1a, 0x23, 0x59, 0x3b, 0x5c, 0x19, 0x10, 0x14, 0x8a, 0x52, 0x38, 0x58, 0x1a, 0x0c, 0x94, 0xf2, 0x38, 0x58, 0x1a, 0x19, 0x00, 0x0d, 0x94, 0xab, 0x9f, 0x3e, 0x59, 0x3e, 0x5a, 0x3e, 0x5f, 0x19, 0x02, 0x52, 0x39, 0x58, 0x1a, 0xa4, 0x97, 0x19, 0x07, 0xf2, 0x39, 0x58, 0x1a, 0x11, 0xac, 
-0x80, 0x12, 0x19, 0x01, 0x9b, 0x97, 0x9e, 0x58, 0x58, 0x1a, 0x18, 0x10, 0x08, 0x8a, 0x72, 0x66, 0x19, 0x6e, 0xff, 0x61, 0x19, 0x10, 0x07, 0x38, 0x8d, 0x12, 0xd1, 0x25, 0xbd, 0x5e, 0x3a, 0x38, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5b, 0x1e, 0x5c, 0x83, 0x5a, 0x7d, 0x48, 0x03, 0x9a, 0x5e, 0x49, 0x23, 0x9a, 0x32, 0x9e, 0x5e, 0x49, 0x10, 0x9a, 0x61, 0x5a, 0xbe, 0x5a, 0x2e, 0x16, 0xa1, 0x5a, 0xbe, 0x5a, 0x2f, 0x16, 0xc3, 0x5a, 0xbe, 0x5a, 0x30, 0x16, 0x83, 0x5a, 0xbe, 0x5a, 0x31, 0x16, 0x02, 0x62, 0xbe, 0x5a, 0x82, 0x1a, 0x2f, 0x9e, 0x61, 0x5a, 0xbe, 0x5a, 0x2e, 0x16, 0xa1, 0x5a, 0xbe, 0x5a, 0x2f, 0x16, 0x83, 0x5a, 0xbe, 0x5a, 0x30, 0x16, 0xc3, 0x5a, 0xbe, 0x5a, 0x31, 0x16, 0x00, 0x62, 0xbe, 0x5a, 0x82, 0x1a, 0x1f, 0x9e, 0xa1, 0x5a, 0xbe, 0x5a, 0x2e, 0x16, 0x61, 0x5a, 0xbe, 0x5a, 0x5d, 0xe2, 
-0xc0, 0x12, 0x2f, 0x16, 0x83, 0x5a, 0xbe, 0x5a, 0x30, 0x16, 0xc3, 0x5a, 0xbe, 0x5a, 0x31, 0x16, 0x06, 0x62, 0xbe, 0x5a, 0x82, 0x1a, 0x0f, 0x9e, 0xa1, 0x5a, 0xbe, 0x5a, 0x2e, 0x16, 0x61, 0x5a, 0xbe, 0x5a, 0x2f, 0x16, 0xc3, 0x5a, 0xbe, 0x5a, 0x30, 0x16, 0x83, 0x5a, 0xbe, 0x5a, 0x31, 0x16, 0x04, 0x62, 0xbe, 0x5a, 0x82, 0x1a, 0xc3, 0x5e, 0xa1, 0x58, 0xc1, 0x59, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5b, 0x1e, 0x5c, 0x00, 0x67, 0x9e, 0x5a, 0x82, 0x1a, 0x40, 0x3c, 0x2a, 0x13, 0x89, 0x5c, 0x85, 0x04, 0x92, 0x39, 0x2e, 0x16, 0x23, 0x96, 0x92, 0x39, 0x2f, 0x16, 0x20, 0x98, 0x40, 0x3b, 0x32, 0x13, 0x69, 0x5b, 0x66, 0x03, 0x72, 0x39, 0x30, 0x16, 0x19, 0x96, 0x72, 0x39, 0x31, 0x16, 0x16, 0x98, 0x9e, 0x59, 0xfd, 0x1b, 0x80, 0x38, 0x48, 0x0e, 0x23, 0x48, 0x9e, 0x59, 0x83, 0x1a, 0x38, 0x49, 0x36, 0x4b, 
-0x00, 0x13, 0x0d, 0x98, 0x81, 0x5d, 0x61, 0x5e, 0x9e, 0x59, 0x82, 0x1a, 0x01, 0xac, 0x02, 0x90, 0x1e, 0x01, 0x01, 0x9e, 0x1f, 0x01, 0x1f, 0x21, 0xbe, 0x59, 0x82, 0x1a, 0x08, 0x9e, 0x19, 0x02, 0x1f, 0x22, 0xbe, 0x5a, 0x82, 0x1a, 0x19, 0x07, 0xe2, 0x39, 0x08, 0x00, 0xce, 0x97, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x59, 0x3e, 0x58, 0xd9, 0x48, 0x04, 0x88, 0xb8, 0x48, 0x02, 0x88, 0x01, 0x60, 0x05, 0x9e, 0xdc, 0x49, 0xbb, 0x89, 0xbb, 0x48, 0xb9, 0x89, 0x00, 0x60, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5e, 0x3e, 0x5d, 0x3a, 0x38, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0x3f, 0x01, 0x00, 0x0c, 0x98, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5d, 0xba, 0x1f, 
-0x40, 0x13, 0xe8, 0x00, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x47, 0x13, 0xa5, 0x59, 0x3d, 0x5e, 0x21, 0x9e, 0x12, 0x3f, 0x22, 0x00, 0x1e, 0x98, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5d, 0xe8, 0x00, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x57, 0x13, 0xa5, 0x5f, 0xd7, 0x07, 0xfd, 0x5e, 0x12, 0x3f, 0x22, 0x00, 0x0f, 0x88, 0x30, 0x66, 0x0b, 0x6e, 0x22, 0x75, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x68, 0x13, 0x00, 0x61, 0xc3, 0x58, 0x1c, 0x5d, 0x1d, 0x5e, 0x1a, 0x38, 0x1a, 0x38, 0x00, 0x60, 0x3a, 0x38, 0x27, 0x76, 0x19, 0x16, 0x39, 0x60, 0x15, 0x68, 0x9a, 0x61, 0x19, 0x69, 0x45, 0x62, 0x15, 0x6a, 0xa6, 0x63, 0x19, 0x6b, 0x00, 0x64, 0x80, 0x6c, 0x00, 0x67, 0xc7, 0x38, 0x83, 0x13, 0xf8, 0x49, 0x04, 0x98, 0x03, 0x5d, 0xbb, 0x59, 0x43, 0x5d, 0xbb, 0x5b, 0x0b, 0xa4, 
-0x80, 0x13, 0x19, 0x01, 0x19, 0x03, 0x9d, 0x58, 0x9d, 0x5a, 0x21, 0x60, 0x15, 0x68, 0x2b, 0x61, 0x1c, 0x69, 0x2d, 0x62, 0x15, 0x6a, 0x37, 0x63, 0x1c, 0x6b, 0x00, 0x65, 0xc7, 0x38, 0xa2, 0x13, 0xa0, 0x3c, 0x85, 0x29, 0x89, 0x5c, 0x94, 0x3c, 0xe3, 0x19, 0x05, 0x8a, 0x03, 0x5c, 0x9b, 0x59, 0x43, 0x5c, 0x9b, 0x5b, 0x04, 0x9e, 0xde, 0x59, 0x00, 0x80, 0xde, 0x5b, 0x00, 0x80, 0x19, 0x01, 0x19, 0x03, 0x19, 0x00, 0x19, 0x02, 0x19, 0x05, 0x00, 0x67, 0x80, 0x6f, 0x51, 0x60, 0x15, 0x68, 0x21, 0x61, 0x15, 0x69, 0x5d, 0x62, 0x15, 0x6a, 0x2d, 0x63, 0x15, 0x6b, 0xc7, 0x38, 0xb8, 0x13, 0xf8, 0x49, 0x04, 0x8a, 0x03, 0x5c, 0x9b, 0x59, 0x43, 0x5c, 0x9b, 0x5b, 0x19, 0x01, 0x19, 0x03, 0x19, 0x00, 0x19, 0x02, 0xca, 0x60, 0x19, 0x68, 0xd6, 0x61, 0x19, 0x69, 0xc7, 0x38, 0xc4, 0x13, 0xde, 0x58, 0xb0, 0xea, 
-0xc0, 0x13, 0xff, 0xff, 0xde, 0x59, 0xff, 0x7f, 0x19, 0x00, 0x19, 0x01, 0x9e, 0x58, 0xfa, 0x1b, 0x12, 0x38, 0xe2, 0x19, 0x16, 0x9a, 0x00, 0x67, 0x01, 0x65, 0xc7, 0x38, 0xdf, 0x13, 0xb4, 0x38, 0x4c, 0x1a, 0x0d, 0x88, 0xe0, 0x38, 0x9a, 0x19, 0xde, 0x58, 0x00, 0x80, 0xe0, 0x38, 0xa6, 0x19, 0xde, 0x58, 0x00, 0x80, 0xa0, 0x5c, 0x94, 0x3c, 0x00, 0x1c, 0xbe, 0x5c, 0x00, 0x1c, 0xa6, 0x5d, 0x19, 0x07, 0x3a, 0x38, 0x9e, 0x5f, 0xe2, 0x19, 0x18, 0x17, 0x24, 0x8a, 0x21, 0x72, 0x23, 0x61, 0x22, 0x40, 0x00, 0x3b, 0x00, 0x00, 0x15, 0x61, 0x22, 0x40, 0x00, 0x3c, 0x00, 0x00, 0xe1, 0x5e, 0x00, 0x67, 0xe0, 0x39, 0xb2, 0x19, 0xe0, 0x3a, 0xbe, 0x19, 0x79, 0x49, 0x02, 0x80, 0x9a, 0x49, 0x0c, 0x82, 0x19, 0x16, 0xdf, 0x48, 0x0c, 0x8a, 0xc0, 0x38, 0xb2, 0x19, 0x03, 0x58, 0x1b, 0x59, 0xc0, 0x38, 0xaa, 0xd3, 
-0x00, 0x14, 0xbe, 0x19, 0x03, 0x58, 0x1b, 0x5a, 0xec, 0x9f, 0x19, 0x07, 0xe6, 0x15, 0xe9, 0x97, 0xbe, 0x5e, 0xe2, 0x19, 0x01, 0x60, 0xbe, 0x58, 0x82, 0x1a, 0x00, 0x67, 0xe2, 0x60, 0x19, 0x68, 0xf8, 0x49, 0x31, 0x94, 0xe0, 0x38, 0xca, 0x19, 0x00, 0x61, 0x38, 0x49, 0x2a, 0x9a, 0x00, 0x66, 0x27, 0x70, 0x19, 0x10, 0x07, 0x38, 0x3f, 0x14, 0xc0, 0x38, 0x39, 0x15, 0x00, 0x61, 0x38, 0x49, 0x1f, 0x9a, 0xc0, 0x38, 0x9a, 0x19, 0x00, 0x61, 0x38, 0x49, 0x03, 0x9a, 0xfe, 0x65, 0x7f, 0x6d, 0x0f, 0x9e, 0xe0, 0x38, 0xb2, 0x19, 0xc0, 0x39, 0x9a, 0x19, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0xbe, 0x19, 0xc0, 0x39, 0xa6, 0x19, 0x23, 0x59, 0x11, 0x13, 0x5a, 0x40, 0x63, 0x48, 0x46, 0xd9, 0xe0, 0x38, 0xd6, 0x19, 0xb8, 0x49, 0x04, 0x94, 0xbb, 0x58, 0xe0, 0x38, 0xca, 0x19, 0xdb, 0x58, 0x19, 0x06, 0xde, 0xb2, 
-0x40, 0x14, 0x19, 0x07, 0xcb, 0x9f, 0x00, 0x60, 0xbe, 0x58, 0x82, 0x1a, 0x00, 0x67, 0x9e, 0x5d, 0xe2, 0x19, 0xfd, 0x48, 0x25, 0x94, 0xe0, 0x3e, 0x01, 0x00, 0xa2, 0x38, 0x01, 0x00, 0x07, 0x38, 0x6c, 0x14, 0xdd, 0x48, 0x1b, 0x94, 0xe0, 0x3c, 0xca, 0x19, 0x83, 0x58, 0xc0, 0x3b, 0xca, 0x19, 0x1b, 0x49, 0x13, 0x88, 0xe0, 0x3a, 0xd6, 0x19, 0x43, 0x58, 0xc0, 0x39, 0xd6, 0x19, 0x19, 0x49, 0x05, 0x9a, 0xde, 0x5c, 0xff, 0xff, 0xde, 0x5a, 0xff, 0x7f, 0x04, 0x9e, 0xde, 0x5b, 0xff, 0xff, 0xde, 0x59, 0xff, 0x7f, 0x01, 0x60, 0xbe, 0x58, 0x82, 0x1a, 0x19, 0x06, 0x19, 0x07, 0xd9, 0x9f, 0x00, 0x67, 0xe2, 0x60, 0x19, 0x68, 0xf8, 0x49, 0x15, 0x94, 0xe0, 0x38, 0xca, 0x19, 0x00, 0x61, 0x38, 0x49, 0x0e, 0x98, 0x39, 0x61, 0x15, 0x69, 0x11, 0x01, 0xe0, 0x3a, 0xb2, 0x19, 0x43, 0x5a, 0x5b, 0x59, 0xd2, 0xa6, 
-0x80, 0x14, 0x45, 0x61, 0x15, 0x69, 0x11, 0x01, 0xe0, 0x3a, 0xbe, 0x19, 0x43, 0x5a, 0x5b, 0x59, 0x19, 0x07, 0xe7, 0x9f, 0x82, 0x60, 0x1a, 0x68, 0x01, 0x61, 0x38, 0x49, 0x7e, 0x8b, 0x9e, 0x58, 0xe2, 0x19, 0x19, 0x10, 0x01, 0x9a, 0x25, 0xdb, 0x92, 0x60, 0x15, 0x68, 0xff, 0x61, 0xff, 0x69, 0x27, 0x76, 0x19, 0x16, 0xd7, 0x38, 0x3d, 0x58, 0x9e, 0x5f, 0xe2, 0x19, 0x18, 0x17, 0x10, 0x8a, 0x92, 0x66, 0x15, 0x6e, 0x19, 0x17, 0xe7, 0x38, 0xae, 0x14, 0xe0, 0x3b, 0xca, 0x19, 0x76, 0x03, 0xe0, 0x3c, 0xd6, 0x19, 0x83, 0x5c, 0x18, 0x14, 0x01, 0x88, 0x21, 0x74, 0x9b, 0x5b, 0x19, 0x17, 0x01, 0x67, 0x27, 0x76, 0x19, 0x16, 0xc7, 0x38, 0xb5, 0x14, 0xe6, 0x5f, 0x1a, 0x38, 0x19, 0x17, 0xbe, 0x5f, 0x84, 0x1a, 0xf6, 0xd5, 0x9e, 0x58, 0xe2, 0x19, 0xbe, 0x58, 0xfa, 0x1b, 0x00, 0x67, 0x27, 0x70, 0xe3, 0x18, 
-0xc0, 0x14, 0x19, 0x10, 0x07, 0x38, 0x56, 0x15, 0x9e, 0x58, 0xea, 0x04, 0x18, 0x10, 0x03, 0x8a, 0x02, 0x60, 0x20, 0x78, 0x02, 0x9e, 0x02, 0x60, 0x20, 0x78, 0xe0, 0x38, 0x39, 0x15, 0xe0, 0x3c, 0xd2, 0x15, 0x00, 0x61, 0x38, 0x49, 0x50, 0x98, 0xd0, 0x73, 0x7c, 0x49, 0x02, 0x9a, 0x7b, 0x5c, 0x7e, 0x9e, 0x70, 0x3b, 0x20, 0x00, 0x7c, 0x49, 0x14, 0x98, 0xe0, 0x38, 0x85, 0x29, 0x09, 0x58, 0xe3, 0x61, 0x19, 0x69, 0x30, 0x2a, 0x5b, 0x59, 0x4c, 0x61, 0x1a, 0x69, 0x30, 0x2a, 0x5b, 0x59, 0x70, 0x3b, 0xcf, 0x00, 0x7c, 0x49, 0x34, 0x98, 0x4d, 0x61, 0x1a, 0x69, 0x30, 0x2a, 0x5b, 0x59, 0x66, 0x9e, 0xe0, 0x38, 0x85, 0x29, 0x09, 0x58, 0x14, 0x3a, 0xe3, 0x19, 0x02, 0x8a, 0x7b, 0x5c, 0x27, 0x9e, 0xe0, 0x38, 0x92, 0x15, 0x0a, 0x61, 0x38, 0x49, 0x09, 0x9c, 0xe0, 0x38, 0x85, 0x29, 0x09, 0x58, 0x3a, 0x4e, 
-0x00, 0x15, 0x00, 0x61, 0x1c, 0x69, 0x00, 0x5a, 0x32, 0x22, 0x5b, 0x59, 0x19, 0x9e, 0xd0, 0x70, 0x19, 0x00, 0x1c, 0x49, 0x15, 0x88, 0xe0, 0x38, 0x85, 0x29, 0x09, 0x58, 0x00, 0x61, 0x1c, 0x69, 0x30, 0x22, 0x0e, 0x88, 0x30, 0x2a, 0x5b, 0x59, 0xe0, 0x38, 0x39, 0x15, 0x03, 0x58, 0xe0, 0x39, 0x13, 0x1c, 0x1b, 0x59, 0xe0, 0x38, 0x45, 0x15, 0x03, 0x58, 0xe0, 0x39, 0x1f, 0x1c, 0x1b, 0x59, 0x83, 0x58, 0x08, 0x3c, 0x01, 0x00, 0x33, 0x9e, 0xe0, 0x38, 0x85, 0x29, 0x09, 0x58, 0xd0, 0x73, 0x14, 0x39, 0x4c, 0x1a, 0x04, 0x8a, 0x00, 0x61, 0x91, 0x11, 0x09, 0x98, 0x0b, 0x9e, 0x7c, 0x49, 0x09, 0x94, 0x7b, 0x5c, 0x00, 0x61, 0x1c, 0x69, 0x00, 0x5a, 0x32, 0x22, 0x5b, 0x59, 0x83, 0x59, 0x2a, 0x3c, 0x01, 0x00, 0x00, 0x58, 0x70, 0x3b, 0x1f, 0x00, 0x7c, 0x49, 0x10, 0x96, 0xe3, 0x61, 0x19, 0x69, 0x0f, 0x86, 
-0x40, 0x15, 0x30, 0x22, 0x5b, 0x59, 0x4d, 0x61, 0x1a, 0x69, 0x30, 0x22, 0x5b, 0x59, 0x83, 0x5b, 0x72, 0x3b, 0xd0, 0x00, 0x0c, 0x9a, 0xd0, 0x73, 0x19, 0x13, 0x7b, 0x5c, 0x08, 0x9e, 0x59, 0xd5, 0x19, 0x03, 0x7c, 0x49, 0x04, 0x96, 0x4d, 0x61, 0x1a, 0x69, 0x30, 0x22, 0x5b, 0x59, 0x19, 0x07, 0x99, 0xd6, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x5b, 0x21, 0x72, 0x23, 0x65, 0xa2, 0x40, 0x00, 0x3d, 0x00, 0x00, 0xe0, 0x38, 0x5b, 0x1c, 0x03, 0x58, 0x18, 0x10, 0x02, 0x94, 0x00, 0x60, 0x0b, 0x9e, 0x1d, 0x48, 0x02, 0x9a, 0xa1, 0x58, 0x07, 0x9e, 0x40, 0x3b, 0x00, 0x00, 0x1b, 0x48, 0x03, 0x96, 0xa2, 0x13, 0x1b, 0x48, 0x03, 0x9a, 0xe0, 0x39, 0x9a, 0x19, 0x1b, 0x59, 0x15, 0x65, 0xa2, 0x40, 0x00, 0x3d, 0x00, 0x00, 0xe0, 0x38, 0x67, 0x1c, 0x03, 0x58, 0x18, 0x10, 0x02, 0x94, 0x00, 0x60, 0x0b, 0x9e, 0xef, 0xbb, 
-0x80, 0x15, 0x1d, 0x48, 0x02, 0x9a, 0xa1, 0x58, 0x07, 0x9e, 0x40, 0x3b, 0x00, 0x00, 0x1b, 0x48, 0x03, 0x96, 0xa2, 0x13, 0x1b, 0x48, 0x03, 0x9a, 0xe0, 0x39, 0xa6, 0x19, 0x1b, 0x59, 0x3e, 0x5b, 0x3e, 0x58, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0x04, 0x1c, 0x9e, 0x58, 0xe2, 0x19, 0x12, 0x38, 0xea, 0x04, 0x31, 0x94, 0x01, 0x60, 0xbe, 0x58, 0x04, 0x1c, 0x27, 0x76, 0x19, 0x16, 0x00, 0x65, 0x00, 0x67, 0xc7, 0x38, 0xc9, 0x15, 0xe0, 0x38, 0x9a, 0x19, 0xb8, 0x49, 0x23, 0x98, 0xe0, 0x3e, 0x85, 0x29, 0xc9, 0x5e, 0xd4, 0x3e, 0xe3, 0x19, 0x0b, 0x88, 0x03, 0x58, 0xe0, 0x39, 0x5b, 0x1c, 0x1b, 0x59, 0xe0, 0x38, 0xa6, 0x19, 0x03, 0x58, 0xe0, 0x39, 0x67, 0x1c, 0x1b, 0x59, 0x12, 0x9e, 0xe0, 0x39, 0x43, 0x1c, 0x23, 0x59, 0xe0, 0x3a, 0x4f, 0x1c, 0x43, 0x5a, 0xe0, 0x38, 0x9a, 0x19, 0x11, 0x00, 0x9c, 0xb8, 
-0xc0, 0x15, 0xe0, 0x39, 0x5b, 0x1c, 0x1b, 0x59, 0xe0, 0x38, 0xa6, 0x19, 0x12, 0x00, 0xe0, 0x39, 0x67, 0x1c, 0x1b, 0x59, 0x19, 0x07, 0x3a, 0x38, 0x27, 0x76, 0x19, 0x16, 0x00, 0x67, 0xc7, 0x38, 0xf4, 0x15, 0x00, 0x62, 0xe0, 0x38, 0x39, 0x15, 0x58, 0x49, 0x1f, 0x98, 0xe0, 0x39, 0x9a, 0x19, 0x59, 0x49, 0x1b, 0x98, 0x23, 0x5a, 0x12, 0x12, 0xe0, 0x3c, 0x43, 0x1c, 0x5b, 0x5c, 0xe0, 0x38, 0x45, 0x15, 0xe0, 0x39, 0xa6, 0x19, 0x23, 0x5b, 0x13, 0x13, 0xe0, 0x3c, 0x4f, 0x1c, 0x7b, 0x5c, 0x9e, 0x58, 0x04, 0x1c, 0x18, 0x10, 0x09, 0x8a, 0x5a, 0x40, 0x63, 0x48, 0x46, 0xd9, 0x18, 0x15, 0x01, 0x88, 0x21, 0x75, 0xe0, 0x38, 0x92, 0x15, 0xbb, 0x58, 0x19, 0x07, 0x3a, 0x38, 0x27, 0x75, 0x19, 0x15, 0xa7, 0x38, 0x73, 0x16, 0xa0, 0x3f, 0x85, 0x29, 0xe9, 0x5f, 0x9e, 0x5c, 0x86, 0x1a, 0xe0, 0x5b, 0x06, 0xd5, 
-0x00, 0x16, 0x83, 0x24, 0xa0, 0x3b, 0xa0, 0x1a, 0x63, 0x5b, 0xbd, 0x13, 0x01, 0x96, 0x87, 0x2c, 0xbe, 0x5c, 0x86, 0x1a, 0xa0, 0x3c, 0x92, 0x15, 0x83, 0x5c, 0x82, 0x38, 0xff, 0xff, 0x64, 0x8a, 0x21, 0x73, 0x66, 0x5b, 0x83, 0x11, 0x60, 0x9a, 0x81, 0x58, 0xa0, 0x3a, 0x9e, 0x15, 0x43, 0x5a, 0x21, 0x73, 0x68, 0x5b, 0x42, 0x39, 0xfe, 0x7f, 0x05, 0x88, 0xf4, 0x39, 0x87, 0x1a, 0x02, 0x8a, 0x61, 0x5a, 0x16, 0x9e, 0x5b, 0x48, 0x14, 0x98, 0xa0, 0x39, 0x88, 0x1a, 0x23, 0x59, 0x18, 0x11, 0x02, 0x8a, 0x04, 0x62, 0x0d, 0x9e, 0x02, 0xa8, 0xa0, 0x39, 0xa0, 0x1a, 0x23, 0x59, 0xbd, 0x11, 0x07, 0x96, 0xa0, 0x39, 0x94, 0x1a, 0x23, 0x59, 0x24, 0x39, 0xff, 0x00, 0x01, 0x8a, 0x61, 0x5a, 0x04, 0x61, 0x01, 0x40, 0x1c, 0x5a, 0x00, 0x39, 0x01, 0x00, 0x28, 0x59, 0x1a, 0x00, 0x08, 0x58, 0x08, 0x58, 0xd5, 0x3e, 
-0x40, 0x16, 0x1a, 0x11, 0x03, 0x88, 0xf4, 0x39, 0x4a, 0x1a, 0x23, 0x88, 0x04, 0x62, 0xf4, 0x3e, 0x86, 0x1a, 0x01, 0x8a, 0x19, 0x62, 0x9e, 0x59, 0x20, 0x1d, 0x18, 0x11, 0x13, 0x8a, 0x22, 0x39, 0x68, 0x01, 0x14, 0x8a, 0x9e, 0x5e, 0xdb, 0x1e, 0x9e, 0x59, 0xdc, 0x1e, 0xc1, 0x06, 0x1b, 0x16, 0x09, 0x88, 0x9e, 0x5e, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0xc1, 0x06, 0x1b, 0x16, 0x02, 0x88, 0x3a, 0x02, 0x05, 0x9e, 0x9e, 0x59, 0xb5, 0x00, 0x1a, 0x11, 0x01, 0x88, 0x3a, 0x02, 0x02, 0x11, 0x0b, 0x96, 0xa0, 0x38, 0x85, 0x29, 0x09, 0x58, 0x14, 0x3a, 0x00, 0x1c, 0x05, 0x88, 0x00, 0x58, 0x84, 0x61, 0x1a, 0x69, 0x30, 0x22, 0x5b, 0x59, 0x19, 0x15, 0x21, 0x74, 0x88, 0x5c, 0x92, 0x60, 0x15, 0x68, 0x9e, 0x61, 0x15, 0x69, 0x00, 0x65, 0x27, 0x76, 0x19, 0x16, 0xc7, 0x38, 0x97, 0x16, 0xa0, 0x3f, 0x70, 0x78, 
-0x80, 0x16, 0x85, 0x29, 0xe9, 0x5f, 0xff, 0x66, 0xff, 0x6e, 0xd8, 0x49, 0x03, 0x8a, 0x03, 0x5a, 0x5b, 0x59, 0x0c, 0x9e, 0xf4, 0x3b, 0xe3, 0x19, 0x09, 0x8a, 0xa0, 0x3b, 0xa0, 0x1a, 0x63, 0x5b, 0xbd, 0x13, 0x04, 0x82, 0x99, 0x49, 0x02, 0x82, 0x8a, 0x39, 0x01, 0x00, 0x19, 0x00, 0x19, 0x01, 0x19, 0x05, 0x3a, 0x38, 0x9e, 0x58, 0xe3, 0x19, 0x9e, 0x59, 0x84, 0x1a, 0x20, 0x59, 0x20, 0x21, 0xbe, 0x59, 0x4a, 0x1a, 0x14, 0x3a, 0x84, 0x1a, 0xbe, 0x5a, 0xe3, 0x19, 0x16, 0x39, 0x85, 0x1a, 0x20, 0x21, 0xbe, 0x59, 0x87, 0x1a, 0xbe, 0x58, 0x85, 0x1a, 0x01, 0x65, 0x00, 0x66, 0x27, 0x77, 0x19, 0x17, 0xe7, 0x38, 0xea, 0x16, 0x05, 0x27, 0x09, 0x8a, 0xc0, 0x39, 0x88, 0x1a, 0x23, 0x5b, 0x66, 0x5b, 0xb4, 0x3f, 0x4a, 0x1a, 0x01, 0x8a, 0x03, 0xa8, 0x7b, 0x59, 0xc0, 0x39, 0xa0, 0x1a, 0x23, 0x5b, 0x78, 0xfa, 
-0xc0, 0x16, 0xa2, 0x27, 0x0e, 0x8a, 0xd0, 0x77, 0xf0, 0x3f, 0x20, 0x00, 0xf0, 0x3f, 0xcf, 0x00, 0xc0, 0x3c, 0xd2, 0x15, 0xfc, 0x49, 0x05, 0x98, 0x62, 0x3f, 0x64, 0x00, 0x03, 0x82, 0x19, 0x03, 0x01, 0x9e, 0x00, 0x63, 0x7b, 0x59, 0x05, 0x27, 0x0f, 0x8a, 0xc0, 0x39, 0x94, 0x1a, 0x23, 0x5b, 0x66, 0x5b, 0xc0, 0x3c, 0x92, 0x15, 0x83, 0x5c, 0x92, 0x3f, 0x21, 0x00, 0x04, 0x80, 0x82, 0x3f, 0x00, 0x10, 0x01, 0x82, 0x03, 0xa8, 0x7b, 0x59, 0xa0, 0x27, 0x04, 0x88, 0xc0, 0x39, 0x9e, 0x15, 0xde, 0x59, 0xaa, 0x55, 0xa6, 0x5d, 0x19, 0x06, 0x3a, 0x38, 0x00, 0x67, 0xbe, 0x5f, 0xf1, 0x1e, 0xbe, 0x5f, 0xf3, 0x1e, 0x00, 0x67, 0x01, 0x66, 0xd0, 0x3e, 0xd0, 0x00, 0xd0, 0x3e, 0x1f, 0x00, 0xe3, 0x60, 0x19, 0x68, 0xe0, 0x39, 0x85, 0x29, 0x29, 0x5c, 0x14, 0x20, 0x87, 0x88, 0xe0, 0x38, 0x39, 0x15, 0x2f, 0x8c, 
-0x00, 0x17, 0x00, 0x61, 0x38, 0x49, 0x45, 0x98, 0x37, 0x9e, 0x95, 0x38, 0x4d, 0x1a, 0xbe, 0x58, 0x4d, 0x1a, 0xe0, 0x38, 0x85, 0x29, 0x09, 0x58, 0x00, 0x61, 0x1c, 0x69, 0x30, 0x22, 0x2c, 0x8a, 0x00, 0x58, 0x30, 0x22, 0x5b, 0x59, 0xe0, 0x3b, 0x13, 0x1c, 0xe0, 0x39, 0x43, 0x1c, 0x23, 0x59, 0x71, 0x13, 0x18, 0x13, 0x02, 0x94, 0x00, 0x63, 0x07, 0x9e, 0x21, 0x72, 0x23, 0x65, 0xa2, 0x40, 0x18, 0x00, 0x78, 0x48, 0x01, 0x9a, 0x01, 0x5b, 0xe0, 0x39, 0x51, 0x15, 0x7b, 0x59, 0xe0, 0x3b, 0x1f, 0x1c, 0xe0, 0x39, 0x4f, 0x1c, 0x23, 0x59, 0x71, 0x13, 0x18, 0x13, 0x02, 0x94, 0x00, 0x63, 0x07, 0x9e, 0x21, 0x72, 0x15, 0x65, 0xa2, 0x40, 0x18, 0x00, 0x78, 0x48, 0x01, 0x9a, 0x01, 0x5b, 0xe0, 0x39, 0x5d, 0x15, 0x7b, 0x59, 0xee, 0x9e, 0xe0, 0x38, 0x39, 0x15, 0x03, 0x58, 0xe0, 0x39, 0x51, 0x15, 0x41, 0xd8, 
-0x40, 0x17, 0x1b, 0x59, 0xe0, 0x38, 0x45, 0x15, 0x03, 0x58, 0xe0, 0x39, 0x5d, 0x15, 0x1b, 0x59, 0xe1, 0x9e, 0xe0, 0x38, 0xd2, 0x15, 0x38, 0x49, 0x22, 0x88, 0xd0, 0x71, 0x3b, 0x58, 0x80, 0x5c, 0x4c, 0x61, 0x1a, 0x69, 0x34, 0x20, 0x1b, 0x59, 0x00, 0x62, 0x80, 0x6a, 0xe0, 0x38, 0x51, 0x15, 0xe0, 0x39, 0x5d, 0x15, 0x5b, 0x58, 0x5b, 0x59, 0xe0, 0x38, 0x21, 0x15, 0xe0, 0x39, 0x2d, 0x15, 0xe0, 0x3b, 0x9a, 0x19, 0xe0, 0x3c, 0xa6, 0x19, 0x5b, 0x58, 0x5b, 0x59, 0x5b, 0x5b, 0x5b, 0x5c, 0xe0, 0x38, 0x2b, 0x1c, 0xe0, 0x39, 0x37, 0x1c, 0x5b, 0x58, 0x5b, 0x59, 0xbb, 0x9e, 0xe0, 0x38, 0x73, 0x1c, 0x03, 0x58, 0x39, 0x10, 0x05, 0x94, 0xe0, 0x38, 0x7f, 0x1c, 0x03, 0x58, 0x39, 0x10, 0x19, 0x96, 0xe0, 0x38, 0x9a, 0x19, 0x03, 0x58, 0xe0, 0x3b, 0xa6, 0x19, 0x63, 0x5b, 0xe0, 0x39, 0x51, 0x15, 0x98, 0x01, 
-0x80, 0x17, 0x1b, 0x59, 0xe0, 0x3d, 0x5d, 0x15, 0x7b, 0x5d, 0xa4, 0x9e, 0x94, 0x38, 0x4d, 0x1a, 0x16, 0x88, 0xe0, 0x38, 0x39, 0x15, 0x00, 0x61, 0x38, 0x49, 0x77, 0x9b, 0xe0, 0x38, 0xd2, 0x15, 0xd8, 0x49, 0xdd, 0x9b, 0xe0, 0x38, 0x21, 0x15, 0x03, 0x58, 0xe0, 0x39, 0x51, 0x15, 0x1b, 0x59, 0xe0, 0x38, 0x2d, 0x15, 0x03, 0x58, 0xe0, 0x39, 0x5d, 0x15, 0x1b, 0x59, 0x8b, 0x9e, 0x94, 0x3d, 0x84, 0x1a, 0x01, 0x88, 0x99, 0x9f, 0x00, 0x60, 0xe0, 0x39, 0x39, 0x15, 0x19, 0x49, 0x36, 0x9a, 0xe0, 0x38, 0x2b, 0x1c, 0x03, 0x58, 0xe0, 0x39, 0x21, 0x15, 0x30, 0x12, 0x01, 0x8c, 0x42, 0x5a, 0xe0, 0x38, 0x37, 0x1c, 0x03, 0x58, 0xe0, 0x39, 0x2d, 0x15, 0x30, 0x13, 0x01, 0x8c, 0x62, 0x5b, 0xd0, 0x75, 0xb0, 0x3d, 0x20, 0x00, 0xb0, 0x3d, 0xcf, 0x00, 0x19, 0x15, 0xe0, 0x38, 0xd2, 0x15, 0xb8, 0x49, 0x58, 0x3b, 
-0xc0, 0x17, 0x06, 0x88, 0xe0, 0x38, 0x73, 0x1c, 0x5b, 0x58, 0xe0, 0x38, 0x7f, 0x1c, 0x7b, 0x58, 0xe0, 0x38, 0x73, 0x1c, 0x03, 0x5a, 0xe0, 0x38, 0x7f, 0x1c, 0x03, 0x5b, 0x39, 0x12, 0x02, 0x94, 0x39, 0x13, 0xc0, 0x97, 0xe0, 0x39, 0x39, 0x15, 0xe0, 0x38, 0x9a, 0x19, 0x03, 0x58, 0x1b, 0x59, 0xe0, 0x3b, 0xa6, 0x19, 0x63, 0x5b, 0xe0, 0x39, 0x45, 0x15, 0x7b, 0x59, 0x32, 0xd9, 0x19, 0x00, 0x00, 0x61, 0x21, 0x75, 0x5f, 0x38, 0xa8, 0x5d, 0x1c, 0x5d, 0xe2, 0x39, 0x00, 0x00, 0x02, 0x88, 0xbe, 0x58, 0xf1, 0x1e, 0xe2, 0x39, 0x01, 0x00, 0x02, 0x88, 0xbe, 0x58, 0xf3, 0x1e, 0x16, 0x61, 0x01, 0x11, 0x0c, 0x94, 0x01, 0x61, 0x19, 0x48, 0x05, 0x9a, 0x01, 0x11, 0x20, 0x39, 0x05, 0x0b, 0x29, 0x5d, 0x07, 0x9e, 0x05, 0x65, 0x0b, 0x6d, 0xa9, 0x5d, 0x03, 0x9e, 0x1a, 0x65, 0x0b, 0x6d, 0xa9, 0x5d, 0x4e, 0x05, 
-0x00, 0x18, 0x9e, 0x5a, 0xcd, 0x04, 0x42, 0x3a, 0x50, 0x00, 0x01, 0x96, 0x1a, 0x05, 0x9e, 0x5a, 0x20, 0x1d, 0x18, 0x12, 0x01, 0x8a, 0x1b, 0x05, 0xa2, 0x3a, 0x01, 0x00, 0x0d, 0x8a, 0xe0, 0x3a, 0x21, 0x15, 0xe0, 0x38, 0x39, 0x15, 0x03, 0x58, 0x2f, 0xd8, 0xe0, 0x3a, 0x2d, 0x15, 0xe0, 0x38, 0x45, 0x15, 0x03, 0x58, 0x58, 0xd8, 0x0e, 0x9e, 0x00, 0x61, 0x1e, 0x5e, 0x81, 0xd8, 0x3e, 0x5e, 0xe0, 0x39, 0x51, 0x15, 0x1b, 0x59, 0x01, 0x61, 0x1e, 0x5e, 0x81, 0xd8, 0x3e, 0x5e, 0xe0, 0x39, 0x5d, 0x15, 0x1b, 0x59, 0x19, 0x07, 0xf2, 0x39, 0x27, 0x00, 0x98, 0x3d, 0xf7, 0x16, 0x3a, 0x38, 0x1e, 0x5e, 0x1e, 0x58, 0x21, 0x71, 0x23, 0x63, 0x23, 0x40, 0x00, 0x3e, 0x00, 0x00, 0x3e, 0x58, 0xa2, 0x3b, 0x01, 0x00, 0x00, 0x61, 0x62, 0x49, 0x01, 0x5b, 0x1c, 0x5d, 0x01, 0x5c, 0x05, 0x40, 0x60, 0x10, 0x64, 0x1b, 
-0x40, 0x18, 0x0a, 0x8a, 0xd2, 0x39, 0x21, 0x00, 0xe0, 0x38, 0x39, 0x15, 0x03, 0x58, 0x19, 0x48, 0x03, 0x9a, 0x80, 0x10, 0x01, 0x98, 0x19, 0x04, 0x81, 0x58, 0x18, 0x10, 0x02, 0x94, 0x00, 0x60, 0x03, 0x9e, 0x1e, 0x48, 0x01, 0x9a, 0xc1, 0x58, 0xe0, 0x39, 0x51, 0x15, 0x1b, 0x59, 0x3e, 0x5e, 0x3a, 0x38, 0x1e, 0x5e, 0x1e, 0x58, 0x21, 0x71, 0x15, 0x63, 0x23, 0x40, 0x00, 0x3e, 0x00, 0x00, 0x3e, 0x58, 0xa2, 0x3b, 0x01, 0x00, 0x00, 0x61, 0x62, 0x49, 0x01, 0x5b, 0x1c, 0x5d, 0x01, 0x5c, 0x05, 0x40, 0x60, 0x10, 0x0a, 0x8a, 0xd2, 0x39, 0x21, 0x00, 0xe0, 0x38, 0x45, 0x15, 0x03, 0x58, 0x19, 0x48, 0x03, 0x9a, 0x80, 0x10, 0x01, 0x98, 0x19, 0x04, 0x81, 0x58, 0x18, 0x10, 0x02, 0x94, 0x00, 0x60, 0x03, 0x9e, 0x1e, 0x48, 0x01, 0x9a, 0xc1, 0x58, 0xe0, 0x39, 0x5d, 0x15, 0x1b, 0x59, 0x3e, 0x5e, 0x9b, 0x65, 
-0x80, 0x18, 0x3a, 0x38, 0x1e, 0x59, 0x14, 0x60, 0x1e, 0x58, 0xb0, 0xd8, 0x3e, 0x5b, 0xa3, 0x14, 0x10, 0x9a, 0x3e, 0x59, 0x01, 0xac, 0x05, 0x92, 0xe0, 0x3a, 0x21, 0x15, 0xe0, 0x38, 0x39, 0x15, 0x04, 0x9e, 0xe0, 0x3a, 0x2d, 0x15, 0xe0, 0x38, 0x45, 0x15, 0x80, 0x41, 0x62, 0x49, 0x1c, 0x5d, 0x17, 0x9e, 0x1e, 0x75, 0x3e, 0x59, 0x01, 0xac, 0x05, 0x92, 0xe0, 0x3a, 0x21, 0x15, 0xe0, 0x38, 0x39, 0x15, 0x04, 0x9e, 0xe0, 0x3a, 0x2d, 0x15, 0xe0, 0x38, 0x45, 0x15, 0xa2, 0x3b, 0x01, 0x00, 0x00, 0x61, 0x03, 0x58, 0x62, 0x49, 0x06, 0x58, 0x2a, 0x59, 0x1c, 0x5d, 0x19, 0x00, 0x08, 0x58, 0x3a, 0x38, 0xe0, 0x39, 0x21, 0x15, 0x00, 0x65, 0xb9, 0x49, 0x0d, 0x98, 0xe0, 0x38, 0x39, 0x15, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0x45, 0x15, 0xe0, 0x39, 0x2d, 0x15, 0x23, 0x59, 0x11, 0x13, 0x5a, 0x40, 0x89, 0x98, 
-0xc0, 0x18, 0x63, 0x48, 0x0f, 0xd9, 0x3a, 0x38, 0xe0, 0x39, 0x21, 0x15, 0x00, 0x65, 0xb9, 0x49, 0x0d, 0x98, 0xe0, 0x38, 0x9a, 0x19, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0xa6, 0x19, 0xe0, 0x39, 0x2d, 0x15, 0x23, 0x59, 0x11, 0x13, 0x5a, 0x40, 0x63, 0x48, 0x0f, 0xd9, 0x3a, 0x38, 0xe0, 0x39, 0x2b, 0x1c, 0x00, 0x65, 0xb9, 0x49, 0x0d, 0x98, 0xe0, 0x38, 0x9a, 0x19, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0xa6, 0x19, 0xe0, 0x39, 0x37, 0x1c, 0x23, 0x59, 0x11, 0x13, 0x5a, 0x40, 0x63, 0x48, 0x0f, 0xd9, 0x3a, 0x38, 0xe0, 0x39, 0x9a, 0x19, 0x00, 0x65, 0xb9, 0x49, 0x0d, 0x98, 0xe0, 0x38, 0x39, 0x15, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0x45, 0x15, 0xe0, 0x39, 0xa6, 0x19, 0x23, 0x59, 0x11, 0x13, 0x5a, 0x40, 0x63, 0x48, 0x0f, 0xd9, 0x3a, 0x38, 0xe0, 0x39, 0x2b, 0x1c, 0x00, 0x65, 0xb9, 0x49, 0x3a, 0x77, 
-0x00, 0x19, 0x0d, 0x98, 0xe0, 0x38, 0x21, 0x15, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0x2d, 0x15, 0xe0, 0x39, 0x37, 0x1c, 0x23, 0x59, 0x11, 0x13, 0x5a, 0x40, 0x63, 0x48, 0x0f, 0xd9, 0x3a, 0x38, 0x01, 0x5a, 0x21, 0x5b, 0xff, 0x65, 0xad, 0x48, 0x0a, 0x8c, 0x00, 0x65, 0x80, 0x64, 0xa4, 0x05, 0x41, 0x58, 0x61, 0x59, 0xad, 0x48, 0x01, 0x8c, 0xa4, 0x15, 0x88, 0x5c, 0xf8, 0x89, 0x3a, 0x38, 0xe0, 0x39, 0x51, 0x15, 0x00, 0x65, 0xb9, 0x49, 0x0d, 0x98, 0xe0, 0x38, 0x39, 0x15, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0x45, 0x15, 0xe0, 0x39, 0x5d, 0x15, 0x23, 0x59, 0x11, 0x13, 0x5a, 0x40, 0x63, 0x48, 0x0f, 0xd9, 0x3a, 0x38, 0xe0, 0x39, 0x2b, 0x1c, 0x00, 0x65, 0xb9, 0x49, 0x0d, 0x98, 0xe0, 0x38, 0x9a, 0x19, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0xa6, 0x19, 0xe0, 0x39, 0x37, 0x1c, 0x23, 0x59, 0x69, 0xdd, 
-0x40, 0x19, 0x11, 0x13, 0x5a, 0x40, 0x63, 0x48, 0x46, 0xd9, 0xa1, 0x58, 0x3a, 0x38, 0x01, 0x5a, 0x21, 0x5b, 0xff, 0x65, 0x03, 0x6d, 0xad, 0x48, 0x0b, 0x8c, 0x00, 0x65, 0x00, 0x64, 0x02, 0x6c, 0xa4, 0x05, 0x41, 0x58, 0x61, 0x59, 0xad, 0x48, 0x01, 0x8c, 0xa4, 0x15, 0x88, 0x5c, 0xf8, 0x89, 0x3a, 0x38, 0x16, 0x60, 0xbe, 0x58, 0xfd, 0x1b, 0x24, 0x60, 0xbe, 0x58, 0xfe, 0x1b, 0x18, 0x60, 0x03, 0x68, 0xbe, 0x58, 0xda, 0x00, 0x53, 0x60, 0x03, 0x68, 0xbe, 0x58, 0xff, 0x1b, 0x04, 0x67, 0x22, 0x7f, 0x40, 0x67, 0x21, 0x7f, 0x04, 0x67, 0x1e, 0x7f, 0x01, 0x67, 0x1f, 0x7f, 0x02, 0x67, 0x20, 0x7f, 0x01, 0x67, 0xd0, 0x7f, 0x01, 0x67, 0xcf, 0x7f, 0x01, 0x67, 0x23, 0x7f, 0x04, 0x67, 0x24, 0x7f, 0x10, 0x67, 0x25, 0x7f, 0x10, 0x67, 0x26, 0x7f, 0x0c, 0x67, 0x27, 0x7f, 0x14, 0x67, 0xbe, 0x5f, 0x1e, 0x0c, 
-0x80, 0x19, 0xf0, 0x04, 0x0a, 0x67, 0xbe, 0x5f, 0xe4, 0x19, 0x19, 0x38, 0x2b, 0x4b, 0x08, 0x67, 0x1d, 0x7f, 0x30, 0x67, 0x1c, 0x7f, 0xbe, 0x5f, 0x06, 0x1c, 0x00, 0x67, 0xbe, 0x5f, 0x20, 0x1d, 0xbe, 0x5f, 0x1d, 0x1d, 0x1b, 0x67, 0xbe, 0x5f, 0x44, 0x1a, 0x60, 0x67, 0x11, 0x6f, 0x9e, 0x5d, 0xda, 0x00, 0x19, 0x15, 0x00, 0x66, 0xa7, 0x38, 0x9d, 0x19, 0xdd, 0x5f, 0x1a, 0x38, 0xd0, 0x71, 0xd2, 0x60, 0x15, 0x68, 0x27, 0x77, 0x19, 0x17, 0xf7, 0x38, 0x3d, 0x58, 0x00, 0x61, 0xbe, 0x59, 0xe3, 0x19, 0xbe, 0x59, 0x4c, 0x1a, 0xbe, 0x59, 0x4d, 0x1a, 0xbe, 0x59, 0xfb, 0x1b, 0xbe, 0x59, 0xfc, 0x1b, 0xbe, 0x59, 0x58, 0x1a, 0xbe, 0x59, 0xfa, 0x1b, 0xbe, 0x59, 0x01, 0x1c, 0xbe, 0x59, 0x02, 0x1c, 0x00, 0x64, 0x80, 0x6c, 0x39, 0x63, 0x15, 0x6b, 0xff, 0x3a, 0x9d, 0x5b, 0x9a, 0x63, 0x19, 0x6b, 0x66, 0x82, 
-0xc0, 0x19, 0xff, 0x3a, 0x9d, 0x5b, 0x00, 0x64, 0x80, 0x6c, 0x8b, 0x63, 0x1c, 0x6b, 0xff, 0x3a, 0x9d, 0x5b, 0x00, 0x64, 0x80, 0x6c, 0x21, 0x63, 0x15, 0x6b, 0xff, 0x3a, 0x9d, 0x5b, 0x2b, 0x63, 0x1c, 0x6b, 0xff, 0x3a, 0x9d, 0x5b, 0x9e, 0x60, 0x15, 0x68, 0xff, 0x61, 0x7f, 0x69, 0x7f, 0x39, 0x3d, 0x58, 0xbe, 0x58, 0x85, 0x1a, 0x88, 0x61, 0x1a, 0x69, 0x7f, 0x39, 0x1d, 0x59, 0x94, 0x61, 0x1a, 0x69, 0x7f, 0x39, 0x1d, 0x59, 0x13, 0x67, 0x1c, 0x6f, 0x1f, 0x66, 0x1c, 0x6e, 0x00, 0x60, 0x80, 0x68, 0x6f, 0x39, 0xeb, 0x19, 0x1d, 0x5f, 0x1d, 0x5e, 0x00, 0x61, 0xbe, 0x59, 0x00, 0x1c, 0x00, 0x61, 0x7f, 0x69, 0xe6, 0x66, 0x1b, 0x6e, 0x3f, 0x39, 0x3d, 0x5e, 0x00, 0x61, 0xf0, 0x66, 0x1b, 0x6e, 0x3f, 0x39, 0x3d, 0x5e, 0x00, 0x61, 0x30, 0x60, 0x1d, 0x68, 0x04, 0x62, 0x57, 0x38, 0x3d, 0x58, 0xb0, 0x4e, 
-0x00, 0x1a, 0xa2, 0xf8, 0xf2, 0xdb, 0x3a, 0x38, 0x9e, 0x5f, 0xe2, 0x19, 0x19, 0x17, 0x45, 0x9a, 0x00, 0x67, 0xe0, 0x3d, 0xb2, 0x19, 0xa3, 0x5d, 0xe0, 0x3c, 0xbe, 0x19, 0x83, 0x5c, 0xe0, 0x3e, 0x01, 0x00, 0xc0, 0x3b, 0xb2, 0x19, 0x63, 0x5b, 0xa3, 0x13, 0x01, 0x8c, 0x62, 0x5b, 0x62, 0x3b, 0x40, 0x00, 0x2a, 0x98, 0xc0, 0x3b, 0xbe, 0x19, 0x63, 0x5b, 0x83, 0x13, 0x01, 0x8c, 0x62, 0x5b, 0x62, 0x3b, 0x40, 0x00, 0x21, 0x98, 0xe0, 0x3c, 0xbe, 0x19, 0xc0, 0x3d, 0xbe, 0x19, 0xa3, 0x59, 0x91, 0x01, 0x28, 0x5b, 0x7b, 0x5c, 0xe0, 0x3c, 0xb2, 0x19, 0xc0, 0x3a, 0xb2, 0x19, 0x43, 0x59, 0x91, 0x01, 0x28, 0x5b, 0x7b, 0x5c, 0x9e, 0x59, 0xe2, 0x19, 0x19, 0x11, 0x20, 0x3c, 0xbe, 0x19, 0x83, 0x5c, 0x9b, 0x5d, 0x20, 0x3c, 0xb2, 0x19, 0x83, 0x5c, 0x9b, 0x5a, 0xbe, 0x59, 0xe2, 0x19, 0x22, 0x38, 0xc9, 0x2a, 
-0x40, 0x1a, 0x01, 0x00, 0x0a, 0x9a, 0xcd, 0x9f, 0x19, 0x06, 0xd2, 0x39, 0xe2, 0x19, 0xc9, 0x97, 0x19, 0x07, 0xf2, 0x38, 0xe2, 0x19, 0x19, 0x00, 0xbc, 0x97, 0x3a, 0x38, 0x9e, 0x5f, 0xe2, 0x19, 0x18, 0x17, 0x19, 0x8a, 0x23, 0x66, 0x21, 0x75, 0xa6, 0x40, 0x00, 0x3e, 0x00, 0x00, 0x15, 0x64, 0xa4, 0x40, 0x00, 0x3d, 0x00, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x69, 0x1a, 0xe0, 0x38, 0xbe, 0x19, 0x03, 0x5a, 0xe0, 0x39, 0xb2, 0x19, 0x23, 0x5b, 0xe0, 0x38, 0xb2, 0x19, 0x5b, 0x58, 0xe0, 0x39, 0xbe, 0x19, 0x7b, 0x59, 0x19, 0x17, 0x3a, 0x38, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5e, 0xe0, 0x3b, 0xde, 0x15, 0x63, 0x5d, 0x00, 0x64, 0x1e, 0x5d, 0xa0, 0x38, 0x48, 0x0e, 0x9e, 0x5b, 0xfd, 0x1b, 0x66, 0x48, 0x98, 0x49, 0x01, 0x94, 0x03, 0x5c, 0xe0, 0x3b, 0xf2, 0x15, 0x75, 0x33, 0x03, 0x8a, 0x19, 0x00, 0x9a, 0xa3, 
-0x80, 0x1a, 0x19, 0x05, 0xf6, 0x9f, 0x3e, 0x5d, 0xe0, 0x3b, 0x06, 0x16, 0x76, 0x33, 0x02, 0x8a, 0x19, 0x06, 0xe9, 0x9f, 0x3a, 0x38, 0x9e, 0x5f, 0xe4, 0x19, 0xf2, 0x38, 0x27, 0x00, 0x90, 0x94, 0x00, 0x65, 0xe0, 0x3e, 0x85, 0x29, 0xc9, 0x5e, 0xd4, 0x3b, 0xe3, 0x19, 0x85, 0x8a, 0xc0, 0x5e, 0xd4, 0x3b, 0xe3, 0x19, 0xbe, 0x5b, 0xe3, 0x19, 0xb2, 0x38, 0xe4, 0x19, 0x7d, 0x94, 0xa0, 0x3e, 0x85, 0x29, 0xc9, 0x5e, 0xd4, 0x3e, 0xe3, 0x19, 0x75, 0x88, 0xe0, 0x3e, 0x39, 0x15, 0xa0, 0x3c, 0x39, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0x45, 0x15, 0xa0, 0x3c, 0x45, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0x9a, 0x19, 0xa0, 0x3c, 0x9a, 0x19, 0x20, 0xdb, 0xe0, 0x3e, 0xa6, 0x19, 0xa0, 0x3c, 0xa6, 0x19, 0x20, 0xdb, 0xe0, 0x3e, 0x51, 0x15, 0xa0, 0x3c, 0x51, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0x5d, 0x15, 0xa0, 0x3c, 0x5c, 0x3f, 
-0xc0, 0x1a, 0x5d, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0x21, 0x15, 0xa0, 0x3c, 0x21, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0x2d, 0x15, 0xa0, 0x3c, 0x2d, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0xd2, 0x15, 0xa0, 0x3c, 0xd2, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0x2b, 0x1c, 0xa0, 0x3c, 0x2b, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x37, 0x1c, 0xa0, 0x3c, 0x37, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x43, 0x1c, 0xa0, 0x3c, 0x43, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x4f, 0x1c, 0xa0, 0x3c, 0x4f, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x5b, 0x1c, 0xa0, 0x3c, 0x5b, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x67, 0x1c, 0xa0, 0x3c, 0x67, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x07, 0x1c, 0xa0, 0x3c, 0x07, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x73, 0x1c, 0xa0, 0x3c, 0x73, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x7f, 0x1c, 0xa0, 0x3c, 0x7f, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x88, 0x1a, 0xc3, 0xf1, 
-0x00, 0x1b, 0xa0, 0x3c, 0x88, 0x1a, 0x20, 0xdb, 0xe0, 0x3e, 0x94, 0x1a, 0xa0, 0x3c, 0x94, 0x1a, 0x20, 0xdb, 0xe0, 0x3e, 0xa0, 0x1a, 0xa0, 0x3c, 0xa0, 0x1a, 0x20, 0xdb, 0xe0, 0x3e, 0x92, 0x15, 0xa0, 0x3c, 0x92, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0x9e, 0x15, 0xa0, 0x3c, 0x9e, 0x15, 0x20, 0xdb, 0x19, 0x05, 0x02, 0x9e, 0x19, 0x05, 0x80, 0x9f, 0x19, 0x07, 0xf2, 0x38, 0x27, 0x00, 0x71, 0x97, 0x3a, 0x38, 0xc3, 0x5b, 0x83, 0x5a, 0x7b, 0x5c, 0x5b, 0x5e, 0x3a, 0x38, 0x00, 0x67, 0x00, 0x61, 0xe0, 0x38, 0x9a, 0x19, 0x38, 0x49, 0xa4, 0x98, 0xe0, 0x38, 0x39, 0x15, 0x38, 0x49, 0xa0, 0x98, 0x27, 0x76, 0x19, 0x16, 0xdf, 0x48, 0x9a, 0x8a, 0x00, 0x61, 0xc0, 0x38, 0x9a, 0x19, 0x38, 0x49, 0x95, 0x98, 0xc0, 0x38, 0x39, 0x15, 0x38, 0x49, 0x91, 0x98, 0xe0, 0x3a, 0x9a, 0x19, 0xe0, 0x3b, 0x39, 0x15, 0xf3, 0x5f, 
-0x40, 0x1b, 0x63, 0x5b, 0x53, 0x12, 0xe0, 0x3b, 0xa6, 0x19, 0xe0, 0x3c, 0x45, 0x15, 0x83, 0x5c, 0x74, 0x13, 0xc0, 0x3c, 0x9a, 0x19, 0xe0, 0x3d, 0x39, 0x15, 0xa3, 0x5d, 0x95, 0x14, 0xc0, 0x3d, 0xa6, 0x19, 0xe0, 0x38, 0x45, 0x15, 0x03, 0x58, 0xb0, 0x15, 0x5d, 0x40, 0x6c, 0x48, 0x21, 0x5c, 0xc0, 0x3d, 0x39, 0x15, 0xe0, 0x39, 0x39, 0x15, 0x23, 0x59, 0xb1, 0x15, 0xc0, 0x38, 0x45, 0x15, 0xe0, 0x39, 0x45, 0x15, 0x23, 0x59, 0x11, 0x10, 0x58, 0x40, 0x6d, 0x48, 0x81, 0x31, 0x79, 0xac, 0x65, 0x90, 0xc0, 0x3a, 0x9a, 0x19, 0xc0, 0x3b, 0x39, 0x15, 0x63, 0x5b, 0x53, 0x12, 0xc0, 0x3b, 0xa6, 0x19, 0xc0, 0x3c, 0x45, 0x15, 0x83, 0x5c, 0x74, 0x13, 0xe0, 0x3c, 0x9a, 0x19, 0xc0, 0x3d, 0x39, 0x15, 0xa3, 0x5d, 0x95, 0x14, 0xe0, 0x3d, 0xa6, 0x19, 0xc0, 0x38, 0x45, 0x15, 0x03, 0x58, 0xb0, 0x15, 0x27, 0x1c, 
-0x80, 0x1b, 0x5d, 0x40, 0x6c, 0x48, 0x21, 0x5c, 0xe0, 0x3d, 0x39, 0x15, 0xc0, 0x39, 0x39, 0x15, 0x23, 0x59, 0xb1, 0x15, 0xe0, 0x38, 0x45, 0x15, 0xc0, 0x39, 0x45, 0x15, 0x23, 0x59, 0x11, 0x10, 0x58, 0x40, 0x6d, 0x48, 0x81, 0x31, 0x79, 0xac, 0x39, 0x90, 0xe0, 0x38, 0x39, 0x15, 0xc0, 0x39, 0x39, 0x15, 0x03, 0x5a, 0x23, 0x5b, 0x7b, 0x58, 0x5b, 0x59, 0xe0, 0x38, 0x45, 0x15, 0xc0, 0x39, 0x45, 0x15, 0x03, 0x5a, 0x23, 0x5b, 0x7b, 0x58, 0x5b, 0x59, 0x9e, 0x5d, 0xe2, 0x19, 0x19, 0x15, 0xca, 0x64, 0x19, 0x6c, 0xa7, 0x38, 0xae, 0x1b, 0xfc, 0x4a, 0x01, 0x88, 0x01, 0x9e, 0x1a, 0x38, 0x82, 0x3c, 0xcb, 0x19, 0xca, 0x63, 0x19, 0x6b, 0xa7, 0x38, 0xb8, 0x1b, 0xdb, 0x4a, 0x01, 0x88, 0x01, 0x9e, 0x1a, 0x38, 0x62, 0x3b, 0xcb, 0x19, 0x1e, 0x5f, 0x80, 0x38, 0xca, 0x19, 0x60, 0x39, 0xca, 0x19, 0x08, 0xee, 
-0xc0, 0x1b, 0x03, 0x5d, 0x23, 0x5f, 0xfb, 0x58, 0xbb, 0x59, 0x80, 0x38, 0xd6, 0x19, 0x60, 0x39, 0xd6, 0x19, 0x03, 0x5d, 0x23, 0x5f, 0xfb, 0x58, 0xbb, 0x59, 0x3e, 0x5f, 0x19, 0x16, 0x62, 0x95, 0x19, 0x07, 0xf2, 0x38, 0x27, 0x00, 0x53, 0x97, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x48, 0x64, 0x0e, 0x6c, 0x32, 0x65, 0x16, 0x6d, 0x17, 0x67, 0x03, 0x6f, 0xe7, 0x38, 0xe8, 0x1b, 0x83, 0x5f, 0xa3, 0x5e, 0xfb, 0x5d, 0x19, 0x04, 0x19, 0x05, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x7f, 0x61, 0xa6, 0x66, 0x1c, 0x6e, 0xba, 0x64, 0x1c, 0x6c, 0x9e, 0x5f, 0xf0, 0x04, 0x19, 0x17, 0xe7, 0x38, 0xfd, 0x1b, 0x3d, 0x5e, 0x3d, 0x5c, 0x00, 0x60, 0xbe, 0x58, 0x4a, 0xea, 
-0x00, 0x1c, 0x03, 0x1c, 0x3a, 0x38, 0x1e, 0x5f, 0xe0, 0x38, 0xde, 0x15, 0x03, 0x58, 0xe0, 0x39, 0xf2, 0x15, 0x23, 0x59, 0xe0, 0x3a, 0x06, 0x16, 0x43, 0x5a, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0x9e, 0x5e, 0x03, 0x1c, 0x18, 0x16, 0x19, 0x9a, 0x19, 0x16, 0x7f, 0x65, 0xc7, 0x38, 0x2b, 0x1c, 0xc0, 0x3c, 0xa6, 0x1c, 0x95, 0x27, 0x3f, 0x48, 0x0f, 0x96, 0x83, 0x5f, 0xfe, 0x5f, 0xe5, 0x27, 0x1f, 0x48, 0x0a, 0x98, 0xc0, 0x3c, 0xba, 0x1c, 0x83, 0x5f, 0xfe, 0x5f, 0xe5, 0x27, 0x7f, 0x48, 0x03, 0x98, 0x95, 0x27, 0x5f, 0x48, 0x13, 0x94, 0x19, 0x16, 0x3e, 0x5f, 0xe0, 0x39, 0xaa, 0x15, 0x23, 0x59, 0x00, 0x60, 0x01, 0x68, 0x32, 0x39, 0x23, 0x00, 0x07, 0x96, 0x24, 0x62, 0x41, 0x48, 0x02, 0x39, 0xc0, 0x01, 0x02, 0x9a, 0xc0, 0x60, 0x01, 0x68, 0x1c, 0x78, 0x04, 0x9e, 0x3e, 0x5f, 0x9e, 0x58, 0x7b, 0x8a, 
-0x40, 0x1c, 0x06, 0x1c, 0x1c, 0x78, 0x9e, 0x5a, 0x58, 0x1a, 0xbe, 0x5a, 0x82, 0x1a, 0x3a, 0x38, 0xe0, 0x3a, 0xf2, 0x15, 0x9e, 0x5c, 0xfd, 0x1b, 0x19, 0x14, 0x9a, 0x49, 0x17, 0x88, 0x19, 0x14, 0xe0, 0x3b, 0xde, 0x15, 0x9b, 0x49, 0x12, 0x98, 0x10, 0x88, 0x0b, 0x9e, 0xe0, 0x3a, 0xde, 0x15, 0x43, 0x5a, 0x18, 0x12, 0x0b, 0x88, 0x01, 0x62, 0xe0, 0x3b, 0xf2, 0x15, 0x5b, 0x49, 0x06, 0x96, 0x04, 0x88, 0x06, 0x60, 0x08, 0x58, 0x20, 0x01, 0x01, 0x9e, 0x1e, 0x01, 0x3a, 0x38, 0xe0, 0x39, 0xa6, 0x1c, 0x23, 0x5a, 0x7a, 0xaa, 0x9e, 0x58, 0x58, 0x1a, 0x12, 0x38, 0x82, 0x1a, 0x01, 0x9a, 0x7a, 0xa8, 0x5b, 0x59, 0x3a, 0x38, 0xa6, 0x60, 0x1c, 0x68, 0xba, 0x61, 0x1c, 0x69, 0x00, 0x62, 0x80, 0x6a, 0x7f, 0x63, 0x9e, 0x5e, 0xf0, 0x04, 0x19, 0x16, 0xc7, 0x38, 0x81, 0x1c, 0x12, 0x26, 0xcb, 0x28, 0xab, 0xb6, 
-0x80, 0x1c, 0x7d, 0x59, 0x19, 0x00, 0x9e, 0x5e, 0x4b, 0x1a, 0x18, 0x16, 0x38, 0x9a, 0x00, 0x67, 0x19, 0x16, 0xc7, 0x38, 0xbd, 0x1c, 0xe0, 0x38, 0xa6, 0x1c, 0x03, 0x5a, 0x7a, 0xac, 0x2e, 0x90, 0x7a, 0xaa, 0x5b, 0x58, 0xe0, 0x38, 0xde, 0x15, 0x03, 0x58, 0xe0, 0x39, 0xf2, 0x15, 0x23, 0x59, 0xe0, 0x3a, 0x06, 0x16, 0x43, 0x5a, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0x3a, 0x10, 0x01, 0x94, 0x00, 0x60, 0x32, 0x3e, 0xfd, 0x1b, 0x3b, 0x06, 0x02, 0x94, 0x3a, 0x01, 0x03, 0x9e, 0x9e, 0x59, 0xfd, 0x1b, 0x19, 0x11, 0x3a, 0x13, 0x01, 0x94, 0x00, 0x63, 0x52, 0x3e, 0xfe, 0x1b, 0x3b, 0x06, 0x02, 0x94, 0x3a, 0x02, 0x03, 0x9e, 0x9e, 0x5a, 0xfe, 0x1b, 0x19, 0x12, 0xe0, 0x3c, 0xa6, 0x1c, 0xfe, 0x59, 0x28, 0x2c, 0xe0, 0x3c, 0xba, 0x1c, 0xfe, 0x5a, 0x4b, 0x2c, 0x19, 0x07, 0x3a, 0x38, 0x9e, 0x5f, 0x00, 0xaf, 
-0xc0, 0x1c, 0xc6, 0x04, 0x18, 0x17, 0xa4, 0x9a, 0x00, 0x67, 0x21, 0x72, 0x23, 0x66, 0x46, 0x40, 0x00, 0x3e, 0x00, 0x00, 0x15, 0x64, 0x44, 0x40, 0x00, 0x3d, 0x00, 0x00, 0x1e, 0x5e, 0x1e, 0x5d, 0x48, 0x5e, 0xe0, 0x3d, 0xde, 0x15, 0x45, 0x41, 0x00, 0x3d, 0x00, 0x00, 0xa6, 0x15, 0xe0, 0x3c, 0xf2, 0x15, 0x44, 0x41, 0x00, 0x3c, 0x00, 0x00, 0x86, 0x04, 0xe0, 0x3b, 0x06, 0x16, 0x63, 0x5b, 0x64, 0x3b, 0xff, 0x00, 0x43, 0x40, 0x00, 0x3b, 0x00, 0x00, 0x66, 0x03, 0xe0, 0x38, 0x1a, 0x16, 0x40, 0x41, 0x00, 0x3a, 0x00, 0x00, 0x46, 0x12, 0x3e, 0x59, 0x3e, 0x58, 0x18, 0x15, 0x01, 0x94, 0x00, 0x65, 0x99, 0x48, 0x01, 0x9a, 0x21, 0x5c, 0x78, 0x48, 0x01, 0x9a, 0x01, 0x5b, 0x18, 0x12, 0x01, 0x94, 0x00, 0x62, 0xfe, 0x5f, 0x00, 0x61, 0x00, 0x66, 0x2f, 0x39, 0x1b, 0x1d, 0xc0, 0x38, 0xe6, 0x1b, 0x94, 0xa2, 
-0x00, 0x1d, 0x03, 0x58, 0x04, 0x38, 0x00, 0x7f, 0x02, 0x38, 0x00, 0x7f, 0x15, 0x88, 0xc0, 0x38, 0x45, 0x15, 0xb8, 0x49, 0x11, 0x98, 0x98, 0x49, 0x0f, 0x96, 0xc0, 0x38, 0x39, 0x15, 0x58, 0x49, 0x0b, 0x98, 0x78, 0x49, 0x09, 0x96, 0x19, 0x01, 0xc0, 0x38, 0xe6, 0x1b, 0x1e, 0x5a, 0x03, 0x5a, 0x44, 0x3a, 0xff, 0x00, 0xea, 0x28, 0x3e, 0x5a, 0x19, 0x06, 0xfe, 0x5f, 0x18, 0x11, 0x44, 0x8a, 0x21, 0x5e, 0x1e, 0x5c, 0x1e, 0x5d, 0xe0, 0x3c, 0xc8, 0x1b, 0x83, 0x58, 0x00, 0x61, 0x1c, 0x5e, 0x01, 0x5c, 0xe0, 0x38, 0xaa, 0x15, 0x03, 0x58, 0x00, 0x61, 0x1c, 0x5e, 0xfe, 0x5f, 0x1e, 0x5a, 0x1e, 0x5b, 0x00, 0x66, 0x2f, 0x39, 0x5d, 0x1d, 0xc0, 0x3b, 0xe6, 0x1b, 0xc0, 0x3d, 0xce, 0x1c, 0x63, 0x59, 0x24, 0x3a, 0x00, 0xff, 0x5f, 0x48, 0x21, 0x88, 0x1e, 0x58, 0x24, 0x3a, 0xff, 0x00, 0x18, 0x12, 0xd6, 0x28, 
-0x40, 0x1d, 0x14, 0x8a, 0x00, 0x61, 0x60, 0x69, 0x20, 0x40, 0x06, 0x58, 0x2a, 0x59, 0x06, 0x58, 0x2a, 0x58, 0x1e, 0x5c, 0x1e, 0x5d, 0x01, 0x5d, 0x01, 0x64, 0x00, 0x61, 0x9d, 0x40, 0x08, 0x61, 0x41, 0x48, 0x00, 0x61, 0x09, 0x64, 0x1c, 0x5c, 0x3e, 0x5d, 0x3e, 0x5c, 0x02, 0x39, 0x20, 0x00, 0x01, 0x96, 0x1f, 0x60, 0xe0, 0x2a, 0x5b, 0x5b, 0x9b, 0x5d, 0x3e, 0x58, 0x19, 0x06, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x5d, 0x3e, 0x5c, 0xfe, 0x5f, 0x19, 0x07, 0xf2, 0x38, 0xc6, 0x04, 0x5d, 0x97, 0x00, 0x66, 0x9e, 0x5f, 0xe3, 0x19, 0x2f, 0x39, 0x78, 0x1d, 0xc0, 0x38, 0xe6, 0x1b, 0x07, 0xac, 0x03, 0x92, 0xde, 0x58, 0x00, 0x7f, 0x04, 0x9e, 0x03, 0x59, 0x25, 0x39, 0x00, 0x7f, 0x3b, 0x58, 0xe8, 0x5f, 0x19, 0x06, 0x3a, 0x38, 0x00, 0x63, 0xf0, 0x62, 0x1b, 0x6a, 0x2f, 0x39, 0x81, 0x1d, 0x7b, 0x5a, 0x1a, 0xf7, 
-0x80, 0x1d, 0x19, 0x02, 0x1a, 0x38, 0xca, 0x63, 0x19, 0x6b, 0x16, 0x64, 0x00, 0x62, 0x2f, 0x39, 0x9f, 0x1d, 0x65, 0x5f, 0x7f, 0xac, 0x14, 0x92, 0x72, 0x65, 0x19, 0x6d, 0xa2, 0x05, 0x86, 0x66, 0x19, 0x6e, 0xc2, 0x06, 0x00, 0x61, 0xa3, 0x58, 0x86, 0x49, 0x48, 0x61, 0x0e, 0x69, 0x01, 0x01, 0x23, 0x58, 0x1e, 0x5c, 0xf0, 0x64, 0x1b, 0x6c, 0x87, 0x04, 0x1b, 0x5c, 0x3e, 0x5c, 0x19, 0x02, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x62, 0xbe, 0x5a, 0xe9, 0x1e, 0x9e, 0x58, 0x4d, 0x04, 0x02, 0x38, 0x00, 0x06, 0x1d, 0x80, 0x9e, 0x58, 0x4c, 0x04, 0x03, 0x61, 0x19, 0x48, 0x08, 0x80, 0x9e, 0x58, 0x4c, 0x04, 0x16, 0x61, 0x03, 0x62, 0x22, 0x11, 0x19, 0x48, 0x01, 0x94, 0x10, 0x9e, 0xdf, 0x61, 0x1e, 0x69, 0x00, 0x62, 0x4f, 0x38, 0xbf, 0x1d, 0x25, 0x5b, 0xfe, 0x5b, 0x64, 0x3b, 0xff, 0x00, 0x43, 0x02, 0xfb, 0xb8, 
-0xc0, 0x1d, 0x0a, 0x61, 0x59, 0x48, 0x03, 0x80, 0x66, 0x62, 0xbe, 0x5a, 0xe9, 0x1e, 0x3a, 0x38, 0x00, 0x61, 0xbe, 0x59, 0xfe, 0x04, 0x00, 0x61, 0xbe, 0x59, 0xf1, 0x04, 0xbe, 0x59, 0xf2, 0x04, 0xbe, 0x59, 0xd6, 0x1e, 0xbe, 0x59, 0x05, 0x1d, 0xbe, 0x59, 0x06, 0x1d, 0xbe, 0x59, 0x07, 0x1d, 0x9e, 0x58, 0x4d, 0x04, 0x9e, 0x59, 0x4f, 0x04, 0x01, 0x00, 0x02, 0x3a, 0x20, 0x00, 0x01, 0x98, 0x0b, 0x9e, 0x9e, 0x58, 0x4d, 0x04, 0x02, 0x3a, 0x20, 0x00, 0x06, 0x9a, 0x9e, 0x59, 0x4f, 0x04, 0x22, 0x3a, 0x20, 0x00, 0x01, 0x9a, 0x01, 0x9e, 0x3a, 0x38, 0x9e, 0x5a, 0x4d, 0x04, 0x48, 0x5a, 0x48, 0x5a, 0x48, 0x5a, 0x00, 0x66, 0x48, 0x63, 0x1d, 0x6b, 0x16, 0x60, 0x08, 0xde, 0xbe, 0x5e, 0xf1, 0x04, 0x9e, 0x5a, 0x4f, 0x04, 0x48, 0x5a, 0x48, 0x5a, 0x48, 0x5a, 0x00, 0x66, 0x48, 0x63, 0x1d, 0x6b, 0x0c, 0x61, 
-0x00, 0x1e, 0x70, 0x3b, 0xb8, 0x00, 0x24, 0x60, 0x08, 0xde, 0xbe, 0x5e, 0xf2, 0x04, 0x44, 0xde, 0x3a, 0x38, 0x63, 0x5d, 0x60, 0x3c, 0x01, 0x00, 0x83, 0x59, 0xb9, 0x48, 0x03, 0x80, 0xba, 0x48, 0x01, 0x9a, 0x19, 0x06, 0x19, 0x03, 0x1b, 0x10, 0x07, 0x38, 0x38, 0x1e, 0x63, 0x5d, 0xba, 0x48, 0x20, 0x80, 0x62, 0x3c, 0x01, 0x00, 0x83, 0x59, 0xb9, 0x48, 0x1b, 0x9a, 0x60, 0x3c, 0x01, 0x00, 0x83, 0x58, 0xb8, 0x48, 0x16, 0x80, 0x67, 0x14, 0x1a, 0x14, 0x11, 0x88, 0x62, 0x3c, 0x02, 0x00, 0x83, 0x58, 0x05, 0x00, 0x08, 0x58, 0x00, 0x61, 0x08, 0x64, 0x1c, 0x5c, 0x07, 0x64, 0x04, 0x40, 0x62, 0x3c, 0x01, 0x00, 0x83, 0x59, 0xbe, 0x59, 0xfe, 0x04, 0x38, 0x48, 0x02, 0x98, 0x19, 0x06, 0x61, 0x5f, 0x19, 0x03, 0x63, 0x5d, 0x62, 0x3c, 0x01, 0x00, 0x83, 0x59, 0xb9, 0x48, 0x03, 0x80, 0xba, 0x48, 0x58, 0xc2, 
-0x40, 0x1e, 0x01, 0x9a, 0x19, 0x06, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x60, 0x9e, 0x5a, 0xf1, 0x04, 0x19, 0x02, 0x48, 0x63, 0x1d, 0x6b, 0x9e, 0x5c, 0xb8, 0x00, 0x19, 0x14, 0x87, 0x38, 0x51, 0x1e, 0x63, 0x5d, 0x05, 0x00, 0x19, 0x03, 0x00, 0x61, 0x1c, 0x5a, 0xbe, 0x58, 0x05, 0x1d, 0x00, 0x60, 0x9e, 0x5a, 0xf2, 0x04, 0x19, 0x02, 0x9e, 0x5c, 0xb9, 0x00, 0x19, 0x14, 0x87, 0x38, 0x61, 0x1e, 0x63, 0x5d, 0x05, 0x00, 0x19, 0x03, 0x00, 0x61, 0x1c, 0x5a, 0xbe, 0x58, 0x06, 0x1d, 0x9e, 0x5a, 0xf1, 0x04, 0x9e, 0x5b, 0xf2, 0x04, 0x43, 0x03, 0x9e, 0x5c, 0x05, 0x1d, 0x9e, 0x5d, 0x06, 0x1d, 0x85, 0x04, 0x81, 0x58, 0x00, 0x61, 0x1c, 0x5b, 0xbe, 0x58, 0x07, 0x1d, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x00, 0x63, 0x9e, 0x58, 0xbf, 0x00, 0x19, 0x10, 0x48, 0x61, 0x0e, 0x69, 0xd2, 0xaf, 
-0x80, 0x1e, 0x07, 0x38, 0x84, 0x1e, 0x7d, 0x59, 0x1a, 0x38, 0x1a, 0x38, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0xff, 0x63, 0xbe, 0x5b, 0x8a, 0x04, 0xbe, 0x5b, 0x8b, 0x04, 0x9e, 0x58, 0x4d, 0x04, 0x02, 0x3a, 0x20, 0x00, 0x2b, 0x9a, 0x9e, 0x59, 0x4f, 0x04, 0x22, 0x3a, 0x20, 0x00, 0x26, 0x9a, 0x9e, 0x5e, 0x4c, 0x04, 0x9e, 0x5f, 0x4c, 0x04, 0x9e, 0x5a, 0xb8, 0x00, 0x19, 0x12, 0x9e, 0x58, 0x4d, 0x04, 0x08, 0x58, 0x08, 0x58, 0x48, 0x63, 0x1d, 0x6b, 0xc0, 0xde, 0xe6, 0x14, 0x19, 0x04, 0xbe, 0x5c, 0x8a, 0x04, 0x9e, 0x5e, 0x4e, 0x04, 0x9e, 0x5f, 0x4e, 0x04, 0x9e, 0x5a, 0xb9, 0x00, 0x19, 0x12, 0x9e, 0x58, 0x4f, 0x04, 0x08, 0x58, 0x08, 0x58, 0x48, 0x63, 0x1d, 0x6b, 0x70, 0x3b, 0xb8, 0x00, 0xc0, 0xde, 0xe6, 0x14, 0x19, 0x04, 0xbe, 0x5c, 0x8b, 0x04, 0x3a, 0x38, 0xc9, 0xab, 
-0xc0, 0x1e, 0x00, 0x64, 0x47, 0x38, 0xd0, 0x1e, 0x65, 0x5d, 0xb8, 0x48, 0x0a, 0x9a, 0xa2, 0x39, 0x20, 0x00, 0x07, 0x9a, 0x9e, 0x48, 0x02, 0x94, 0x81, 0x5e, 0x03, 0x9e, 0x9f, 0x48, 0x01, 0x9a, 0x81, 0x5f, 0x19, 0x04, 0x3a, 0x38, 0x48, 0x64, 0x0e, 0x6c, 0x17, 0x67, 0x03, 0x6f, 0x00, 0x62, 0x00, 0x65, 0x00, 0x66, 0x00, 0x63, 0xe7, 0x38, 0xf1, 0x1e, 0x85, 0x5f, 0x7f, 0xac, 0x09, 0x92, 0xfe, 0x48, 0x01, 0x80, 0xe1, 0x5e, 0xe2, 0x3f, 0x60, 0x00, 0x7f, 0xac, 0x0b, 0x92, 0x19, 0x02, 0x09, 0x9e, 0xe2, 0x5f, 0xfb, 0x48, 0x01, 0x80, 0xe1, 0x5b, 0xe2, 0x3f, 0x60, 0x00, 0x7f, 0xac, 0x01, 0x92, 0x19, 0x05, 0x1a, 0x38, 0xbe, 0x5b, 0x45, 0x04, 0xbe, 0x5e, 0x44, 0x04, 0xbe, 0x5a, 0x46, 0x04, 0xbe, 0x5d, 0x47, 0x04, 0x3a, 0x38, 0x00, 0x01, 0x40, 0x01, 0xf0, 0x00, 0x40, 0x01, 0x40, 0x01, 0x2e, 0xbb, 
-0x00, 0x1f, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0xf0, 0x00, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x07, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0xa0, 0xdf, 0xff, 0x63, 0x9e, 0x59, 0x8a, 0x04, 0x23, 0x12, 0x77, 0x8a, 0x9e, 0x59, 0x4e, 0x04, 0x30, 0x48, 0x00, 0x00, 0x72, 0x8a, 0x9e, 0x59, 0x4e, 0x04, 0x30, 0x48, 0x23, 0x00, 0x6d, 0x8a, 0x9e, 0x59, 0x4c, 0x04, 0x30, 0x48, 0x00, 0x00, 0x68, 0x8a, 0x9e, 0x59, 0x4c, 0x04, 0x30, 0x48, 0x15, 0x00, 0x63, 0x8a, 0x9e, 0x59, 0x8a, 0x04, 0x9e, 0x5a, 0x8b, 0x04, 0x9e, 0x5c, 0xf1, 0x04, 0x9e, 0x5d, 0xaa, 0xac, 
-0x40, 0x1f, 0xf2, 0x04, 0x81, 0x58, 0x9d, 0x48, 0x01, 0x98, 0xa1, 0x58, 0x10, 0x48, 0x08, 0x00, 0x01, 0x9a, 0x08, 0x60, 0x00, 0x3b, 0x16, 0x1f, 0x69, 0x5b, 0x3b, 0x48, 0x03, 0x98, 0x5b, 0x48, 0x01, 0x98, 0x4b, 0x9e, 0x00, 0x3b, 0x0d, 0x1f, 0x69, 0x5b, 0x3b, 0x48, 0x03, 0x80, 0x5b, 0x48, 0x01, 0x80, 0x43, 0x9e, 0x3a, 0x48, 0x1a, 0x98, 0x9e, 0x58, 0xf2, 0x04, 0x10, 0x48, 0x08, 0x00, 0x01, 0x96, 0x08, 0x60, 0x00, 0x39, 0xfb, 0x1e, 0x29, 0x59, 0x9e, 0x58, 0x4d, 0x04, 0x01, 0x10, 0x34, 0x9a, 0x16, 0x60, 0xbe, 0x58, 0x3f, 0x04, 0x24, 0x60, 0xbe, 0x58, 0x40, 0x04, 0x01, 0x60, 0xbe, 0x58, 0x42, 0x04, 0x00, 0x60, 0xbe, 0x58, 0x41, 0x04, 0x1c, 0x9e, 0x9e, 0x58, 0xf1, 0x04, 0x10, 0x48, 0x08, 0x00, 0x01, 0x96, 0x08, 0x60, 0x00, 0x39, 0x04, 0x1f, 0x29, 0x59, 0x9e, 0x58, 0x4f, 0x04, 0x2e, 0x61, 
-0x80, 0x1f, 0x01, 0x10, 0x1a, 0x9a, 0x24, 0x60, 0xbe, 0x58, 0x3f, 0x04, 0x16, 0x60, 0xbe, 0x58, 0x40, 0x04, 0x16, 0x60, 0xbe, 0x58, 0x42, 0x04, 0x01, 0x60, 0xbe, 0x58, 0x41, 0x04, 0x01, 0x60, 0xbe, 0x58, 0xfa, 0x1c, 0x01, 0x63, 0xbe, 0x5b, 0x43, 0x04, 0x40, 0x63, 0xbe, 0x5b, 0x44, 0x1a, 0x66, 0xe0, 0xbb, 0xdf, 0xcb, 0xe0, 0x46, 0xe1, 0x03, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0xfa, 0x1c, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0x43, 0x04, 0x24, 0x60, 0x19, 0x10, 0x00, 0x61, 0x44, 0x66, 0x1b, 0x6e, 0x69, 0x67, 0x1b, 0x6f, 0x07, 0x38, 0xad, 0x1f, 0x3d, 0x5e, 0x3d, 0x5f, 0x50, 0x60, 0x04, 0x68, 0x9e, 0x5c, 0xb8, 0x00, 0x90, 0x3c, 0xb9, 0x00, 0x19, 0x14, 0x87, 0x38, 0xb9, 0x1f, 0x00, 0x67, 0xfb, 0x58, 0x19, 0x00, 0x3a, 0x38, 0xb0, 0x62, 0x02, 0x6a, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xd2, 0xf7, 
-0xc0, 0x1f, 0xf2, 0x04, 0x01, 0x00, 0x1b, 0x10, 0x02, 0x88, 0x00, 0x62, 0x04, 0x6a, 0xbe, 0x5a, 0x15, 0x1f, 0x01, 0x62, 0x9e, 0x58, 0x41, 0x04, 0x19, 0x10, 0x01, 0x8a, 0x00, 0x62, 0xbe, 0x5a, 0xf7, 0x04, 0x9e, 0x5a, 0x4d, 0x04, 0x48, 0x5a, 0x48, 0x5a, 0x48, 0x67, 0x1d, 0x6f, 0x50, 0x66, 0x04, 0x6e, 0x16, 0x60, 0x44, 0x61, 0x1b, 0x69, 0x05, 0xe0, 0x48, 0x67, 0x1d, 0x6f, 0x50, 0x66, 0x04, 0x6e, 0x16, 0x60, 0x49, 0xe0, 0x00, 0x62, 0x9e, 0x58, 0x41, 0x04, 0x19, 0x10, 0x01, 0x8a, 0x01, 0x62, 0xbe, 0x5a, 0xf7, 0x04, 0x9e, 0x5a, 0x4f, 0x04, 0x48, 0x5a, 0x48, 0x5a, 0x48, 0x67, 0x1d, 0x6f, 0xf0, 0x3f, 0xb8, 0x00, 0x50, 0x66, 0x04, 0x6e, 0xd0, 0x3e, 0xb8, 0x00, 0x24, 0x60, 0x44, 0x61, 0x1b, 0x69, 0x05, 0xe0, 0x48, 0x67, 0x1d, 0x6f, 0xf0, 0x3f, 0xb8, 0x00, 0x50, 0x66, 0x04, 0x6e, 0x1a, 0x20, 
-0x00, 0x20, 0xd0, 0x3e, 0xb8, 0x00, 0x24, 0x60, 0x49, 0xe0, 0x3a, 0x38, 0x19, 0x06, 0x19, 0x07, 0x19, 0x01, 0x1b, 0x10, 0x07, 0x38, 0x47, 0x20, 0x00, 0x63, 0xe3, 0x5d, 0xba, 0x48, 0x35, 0x80, 0xe2, 0x3c, 0x01, 0x00, 0x83, 0x58, 0xb8, 0x48, 0x30, 0x80, 0xe0, 0x3c, 0x01, 0x00, 0x83, 0x58, 0xb8, 0x48, 0x2b, 0x80, 0xa1, 0x5b, 0x9e, 0x5c, 0xf7, 0x04, 0x18, 0x14, 0x26, 0x8a, 0x23, 0x5c, 0x82, 0x38, 0xb0, 0x00, 0x0f, 0x98, 0x22, 0x3c, 0x01, 0x00, 0x83, 0x5c, 0x82, 0x38, 0xb0, 0x00, 0x09, 0x98, 0x20, 0x3c, 0x01, 0x00, 0x83, 0x5c, 0x82, 0x38, 0xb0, 0x00, 0x03, 0x98, 0x66, 0x63, 0x06, 0x6b, 0x13, 0x9e, 0x23, 0x5c, 0x92, 0x38, 0x15, 0x1f, 0x0d, 0x98, 0x22, 0x3c, 0x01, 0x00, 0x83, 0x5c, 0x92, 0x38, 0x15, 0x1f, 0x07, 0x98, 0x20, 0x3c, 0x01, 0x00, 0x83, 0x5c, 0x92, 0x38, 0x15, 0x1f, 0xd1, 0x22, 
-0x40, 0x20, 0x01, 0x98, 0x02, 0x9e, 0x88, 0x63, 0x08, 0x6b, 0x7b, 0x5e, 0x19, 0x07, 0x19, 0x06, 0x19, 0x01, 0x3a, 0x38, 0x19, 0x06, 0x19, 0x07, 0x1a, 0x10, 0x00, 0x62, 0xc3, 0x5d, 0xba, 0x48, 0x0f, 0x8a, 0xe2, 0x3c, 0x01, 0x00, 0x83, 0x5b, 0xc2, 0x3c, 0x01, 0x00, 0xbb, 0x5c, 0xe0, 0x3c, 0x01, 0x00, 0x83, 0x5b, 0xc0, 0x3c, 0x01, 0x00, 0xbb, 0x5c, 0x19, 0x07, 0x19, 0x06, 0x19, 0x10, 0x19, 0x07, 0x19, 0x06, 0x19, 0x10, 0x18, 0x10, 0xe9, 0x99, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x66, 0xbe, 0x5e, 0x49, 0x04, 0xbe, 0x5e, 0x48, 0x04, 0xbe, 0x5e, 0x4b, 0x04, 0xbe, 0x5e, 0x4a, 0x04, 0x00, 0x67, 0x00, 0x65, 0x00, 0x62, 0x00, 0x63, 0x00, 0x61, 0x16, 0x64, 0x41, 0x58, 0x83, 0x48, 0x9e, 0x5d, 0x41, 0x04, 0x19, 0x15, 0x03, 0x8a, 0x00, 0x61, 0x61, 0x58, 0x82, 0x48, 0x32, 0x64, 0x16, 0x6c, 0x78, 0xee, 
-0x80, 0x20, 0x80, 0x04, 0x83, 0x59, 0x79, 0xac, 0x10, 0x90, 0x22, 0x59, 0x9e, 0x5f, 0x4b, 0x04, 0x3f, 0x48, 0x19, 0x80, 0xbe, 0x59, 0x4b, 0x04, 0x9e, 0x5f, 0x49, 0x04, 0x3f, 0x48, 0x13, 0x80, 0xbe, 0x5f, 0x4b, 0x04, 0xbe, 0x59, 0x49, 0x04, 0x0e, 0x9e, 0x9e, 0x5f, 0x4a, 0x04, 0x3f, 0x48, 0x0a, 0x80, 0xbe, 0x59, 0x4a, 0x04, 0x9e, 0x5f, 0x48, 0x04, 0x3f, 0x48, 0x04, 0x80, 0xbe, 0x5f, 0x4a, 0x04, 0xbe, 0x59, 0x48, 0x04, 0x19, 0x03, 0x9e, 0x5c, 0x3f, 0x04, 0x19, 0x14, 0x7c, 0x48, 0xcb, 0x9d, 0x9e, 0x5c, 0x49, 0x04, 0x9e, 0x5e, 0x4b, 0x04, 0x86, 0x04, 0x69, 0x67, 0x1b, 0x6f, 0xe2, 0x07, 0x9b, 0x5f, 0x9e, 0x5d, 0x48, 0x04, 0x9e, 0x5e, 0x4a, 0x04, 0xa6, 0x05, 0x44, 0x67, 0x1b, 0x6f, 0xe2, 0x07, 0xbb, 0x5f, 0x00, 0x65, 0x00, 0x67, 0x00, 0x66, 0xbe, 0x5e, 0x49, 0x04, 0xbe, 0x5e, 0x21, 0x04, 
-0xc0, 0x20, 0x48, 0x04, 0xbe, 0x5e, 0x4b, 0x04, 0xbe, 0x5e, 0x4a, 0x04, 0x19, 0x02, 0x9e, 0x5c, 0x40, 0x04, 0x5c, 0x48, 0xa8, 0x9d, 0x3a, 0x38, 0x01, 0x62, 0x9e, 0x5c, 0x40, 0x04, 0x1b, 0x14, 0x87, 0x38, 0x44, 0x21, 0x50, 0x60, 0x04, 0x68, 0x9e, 0x5d, 0x41, 0x04, 0x19, 0x15, 0x02, 0x8a, 0x10, 0x38, 0xb8, 0x00, 0x02, 0x00, 0x03, 0x5c, 0x18, 0x14, 0x67, 0x8a, 0x82, 0x3d, 0x88, 0x08, 0x64, 0x8a, 0x81, 0x5d, 0x82, 0x3c, 0x66, 0x06, 0x01, 0x88, 0x80, 0x65, 0x9e, 0x5b, 0x41, 0x04, 0x19, 0x13, 0x23, 0x8a, 0x9e, 0x5e, 0x4d, 0x04, 0xc8, 0x5e, 0x9e, 0x58, 0x4c, 0x04, 0x41, 0x5b, 0x33, 0xe1, 0x9e, 0x58, 0x4c, 0x04, 0x18, 0x10, 0x09, 0x8a, 0x19, 0x10, 0x48, 0x63, 0x1d, 0x6b, 0x60, 0x03, 0x63, 0x59, 0x3e, 0x48, 0x02, 0x80, 0x41, 0x5b, 0x33, 0xe1, 0x9e, 0x58, 0x4c, 0x04, 0x19, 0x00, 0x34, 0xe4, 
-0x00, 0x21, 0x12, 0x3b, 0xb8, 0x00, 0x41, 0x8a, 0x48, 0x63, 0x1d, 0x6b, 0x60, 0x03, 0x63, 0x59, 0x3e, 0x48, 0x3b, 0x80, 0x41, 0x5b, 0x33, 0xe1, 0x38, 0x9e, 0x9e, 0x5e, 0x4f, 0x04, 0xc8, 0x5e, 0x9e, 0x5b, 0x4e, 0x04, 0x41, 0x58, 0x33, 0xe1, 0x9e, 0x5b, 0x4e, 0x04, 0x18, 0x10, 0x0b, 0x8a, 0x19, 0x13, 0x48, 0x60, 0x1d, 0x68, 0x10, 0x38, 0xb8, 0x00, 0x03, 0x00, 0x03, 0x59, 0x3e, 0x48, 0x02, 0x80, 0x41, 0x58, 0x33, 0xe1, 0x9e, 0x5b, 0x4e, 0x04, 0x19, 0x03, 0x72, 0x38, 0xb9, 0x00, 0x1c, 0x8a, 0x48, 0x60, 0x1d, 0x68, 0x10, 0x38, 0xb8, 0x00, 0x03, 0x00, 0x03, 0x59, 0x3e, 0x48, 0x14, 0x80, 0x41, 0x58, 0x33, 0xe1, 0x11, 0x9e, 0x00, 0x61, 0x16, 0x64, 0x83, 0x48, 0x32, 0x61, 0x16, 0x69, 0x20, 0x01, 0x23, 0x5c, 0x00, 0x67, 0x9f, 0x48, 0x01, 0x98, 0x82, 0x5c, 0x48, 0x61, 0x0e, 0x69, 0x6e, 0x3d, 
-0x40, 0x21, 0x20, 0x01, 0x85, 0x04, 0x9b, 0x59, 0x3a, 0x38, 0x19, 0x02, 0x3a, 0x38, 0x9e, 0x58, 0xbf, 0x00, 0x19, 0x10, 0x48, 0x61, 0x0e, 0x69, 0x32, 0x62, 0x16, 0x6a, 0x07, 0x38, 0x51, 0x21, 0x25, 0x5b, 0x7d, 0x5a, 0x1a, 0x38, 0x01, 0x66, 0x50, 0x60, 0x04, 0x68, 0x9e, 0x5c, 0x41, 0x04, 0x19, 0x14, 0x02, 0x8a, 0x10, 0x38, 0xb8, 0x00, 0x06, 0x00, 0x03, 0x5c, 0x18, 0x14, 0x5d, 0x8a, 0x82, 0x3c, 0x88, 0x08, 0x5a, 0x8a, 0x01, 0x67, 0x00, 0x65, 0x00, 0x61, 0x9e, 0x5c, 0x41, 0x04, 0x19, 0x14, 0x0b, 0x8a, 0x50, 0x60, 0x04, 0x68, 0x07, 0x00, 0x03, 0x5c, 0x18, 0x14, 0x47, 0x8a, 0xe1, 0x58, 0x9e, 0x5c, 0xb8, 0x00, 0x86, 0x48, 0x0c, 0x9e, 0x50, 0x60, 0x04, 0x68, 0x10, 0x38, 0xb8, 0x00, 0x07, 0x00, 0x03, 0x5c, 0x18, 0x14, 0x3a, 0x8a, 0xc1, 0x58, 0x9e, 0x5c, 0xb8, 0x00, 0x87, 0x48, 0xce, 0xef, 
-0x80, 0x21, 0x32, 0x64, 0x16, 0x6c, 0x80, 0x04, 0x83, 0x5d, 0x82, 0x39, 0x01, 0x00, 0x23, 0x5b, 0xa3, 0x05, 0x80, 0x39, 0x01, 0x00, 0x23, 0x5b, 0xa3, 0x05, 0x9e, 0x5a, 0xb8, 0x00, 0x82, 0x11, 0x23, 0x5b, 0xa3, 0x05, 0x82, 0x01, 0x23, 0x5b, 0xa3, 0x05, 0x82, 0x11, 0x19, 0x01, 0x23, 0x5b, 0xa3, 0x05, 0x82, 0x11, 0x19, 0x11, 0x23, 0x5b, 0xa3, 0x05, 0x82, 0x01, 0x19, 0x01, 0x23, 0x5b, 0xa3, 0x05, 0x82, 0x01, 0x19, 0x11, 0x23, 0x5b, 0xa3, 0x05, 0x00, 0x61, 0x9e, 0x5c, 0x41, 0x04, 0x19, 0x14, 0x05, 0x8a, 0xe1, 0x58, 0x9e, 0x5c, 0xb8, 0x00, 0x86, 0x48, 0x04, 0x9e, 0xc1, 0x58, 0x9e, 0x5c, 0xb8, 0x00, 0x87, 0x48, 0x48, 0x63, 0x0e, 0x6b, 0x60, 0x03, 0xbb, 0x5b, 0x19, 0x07, 0x9e, 0x59, 0x3f, 0x04, 0x19, 0x11, 0xf9, 0x48, 0xa7, 0x81, 0x19, 0x06, 0x9e, 0x59, 0x40, 0x04, 0x19, 0x11, 0x51, 0x64, 
-0xc0, 0x21, 0xd9, 0x48, 0x91, 0x81, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0x70, 0x1a, 0x4a, 0x65, 0x19, 0x6d, 0x5e, 0x66, 0x19, 0x6e, 0x9e, 0x5c, 0x71, 0x1a, 0x9e, 0x5f, 0x58, 0x1a, 0x98, 0x48, 0x65, 0x8a, 0xf8, 0x48, 0x63, 0x8a, 0xfc, 0x48, 0x01, 0x82, 0x60, 0x9e, 0x19, 0x17, 0xe7, 0x38, 0xda, 0x21, 0x00, 0x63, 0x7d, 0x5d, 0x7d, 0x5e, 0x72, 0x60, 0x1a, 0x68, 0x9e, 0x5a, 0x70, 0x1a, 0x00, 0x63, 0x7c, 0x48, 0x11, 0x94, 0x01, 0x66, 0x00, 0x67, 0x05, 0x5d, 0xbf, 0x48, 0x01, 0x98, 0x06, 0x9e, 0x19, 0x15, 0xa7, 0x38, 0xed, 0x21, 0xc6, 0x5e, 0x1a, 0x38, 0x1a, 0x38, 0x46, 0x2a, 0xbe, 0x5a, 0x70, 0x1a, 0x19, 0x03, 0xed, 0x9f, 0x72, 0x60, 0x19, 0x68, 0x86, 0x61, 0x19, 0x69, 0x4a, 0x65, 0x19, 0x6d, 0x5e, 0x66, 0x19, 0x6e, 0x00, 0x63, 0x9e, 0x5c, 0x58, 0x1a, 0x9e, 0x5a, 0x70, 0x1a, 0x16, 0x60, 
-0x00, 0x22, 0x7c, 0x48, 0x0b, 0x94, 0x02, 0xac, 0x04, 0x92, 0x03, 0x5f, 0xfd, 0x5d, 0x23, 0x5f, 0xfd, 0x5e, 0x48, 0x5a, 0x19, 0x00, 0x19, 0x01, 0x19, 0x03, 0xf3, 0x9f, 0x72, 0x60, 0x19, 0x68, 0x86, 0x61, 0x19, 0x69, 0x4a, 0x65, 0x19, 0x6d, 0x5e, 0x66, 0x19, 0x6e, 0x9e, 0x5c, 0x58, 0x1a, 0x19, 0x14, 0x87, 0x38, 0x1c, 0x22, 0x00, 0x63, 0x7d, 0x58, 0x7d, 0x59, 0x72, 0x60, 0x19, 0x68, 0x86, 0x61, 0x19, 0x69, 0x4a, 0x65, 0x19, 0x6d, 0x5e, 0x66, 0x19, 0x6e, 0x9e, 0x5c, 0x58, 0x1a, 0x19, 0x14, 0x87, 0x38, 0x2d, 0x22, 0xa5, 0x5f, 0xfd, 0x58, 0xc5, 0x5f, 0xfd, 0x59, 0x9e, 0x5c, 0x58, 0x1a, 0x9e, 0x5e, 0x71, 0x1a, 0x86, 0x14, 0xbe, 0x5c, 0x58, 0x1a, 0x3a, 0x38, 0x9e, 0x58, 0x43, 0x04, 0x01, 0x61, 0x19, 0x48, 0x01, 0x8a, 0x3a, 0x38, 0xbe, 0x64, 0x19, 0x6c, 0x9e, 0x5d, 0x41, 0x04, 0xd5, 0x2b, 
-0x40, 0x22, 0x19, 0x15, 0x02, 0x8a, 0xb2, 0x64, 0x19, 0x6c, 0x81, 0x5b, 0x00, 0x67, 0x9e, 0x5d, 0x58, 0x1a, 0xa2, 0x3e, 0x01, 0x00, 0xc7, 0x38, 0x4e, 0x22, 0x65, 0x59, 0xe1, 0x07, 0x1a, 0x38, 0xe1, 0x58, 0x00, 0x61, 0x1c, 0x5d, 0x00, 0x62, 0x81, 0x5b, 0xc7, 0x38, 0x5f, 0x22, 0x65, 0x59, 0x01, 0x17, 0x7f, 0xac, 0x01, 0x90, 0xe2, 0x5f, 0xe2, 0x39, 0x0a, 0x00, 0x01, 0x98, 0x19, 0x02, 0x1a, 0x38, 0x45, 0x17, 0x06, 0x88, 0x81, 0x5b, 0xc7, 0x38, 0x67, 0x22, 0x1d, 0x5b, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0x48, 0x63, 0x0e, 0x6b, 0x32, 0x60, 0x16, 0x68, 0x17, 0x67, 0x03, 0x6f, 0xe7, 0x38, 0x7d, 0x22, 0x03, 0x59, 0x79, 0xac, 0x06, 0x90, 0x22, 0x59, 0xa0, 0x62, 0x3a, 0x48, 0x02, 0x9c, 0x10, 0x66, 0xdb, 0x5b, 0x1a, 0x38, 0x1a, 0x38, 0x19, 0x00, 0x19, 0x03, 0x3a, 0x38, 0x00, 0x60, 0xed, 0x6c, 
-0x80, 0x22, 0x60, 0x66, 0x11, 0x6e, 0x9e, 0x5f, 0xff, 0x1b, 0x19, 0x17, 0xe7, 0x38, 0x89, 0x22, 0x1d, 0x5e, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0x9e, 0x5a, 0xec, 0x19, 0x9e, 0x59, 0xeb, 0x19, 0x9e, 0x58, 0xea, 0x19, 0xbe, 0x5a, 0x5b, 0x1a, 0xbe, 0x59, 0xaf, 0x1a, 0xbe, 0x58, 0x5a, 0x1a, 0x3a, 0x38, 0x00, 0x62, 0xbe, 0x5a, 0x62, 0x1a, 0xbe, 0x5a, 0x02, 0x1d, 0xbe, 0x5a, 0x03, 0x1d, 0x18, 0x60, 0x03, 0x68, 0x19, 0x10, 0x48, 0x61, 0x0e, 0x69, 0x60, 0x62, 0x11, 0x6a, 0x07, 0x38, 0xac, 0x22, 0x25, 0x5b, 0x7b, 0xac, 0x01, 0x90, 0x00, 0x63, 0x7d, 0x5a, 0x01, 0x66, 0x9e, 0x58, 0x5a, 0x1a, 0x9e, 0x59, 0xaf, 0x1a, 0x9e, 0x5a, 0x5b, 0x1a, 0x24, 0x63, 0x1a, 0x13, 0x67, 0x38, 0xc7, 0x22, 0x19, 0x06, 0x4c, 0x5a, 0x2c, 0x59, 0x0c, 0x58, 0x0a, 0x82, 0x19, 0x16, 0x00, 0x65, 0x01, 0x6d, 0xee, 0xcf, 
-0xc0, 0x22, 0x1e, 0x5a, 0x1e, 0x59, 0x1e, 0x58, 0xe4, 0xe2, 0x3e, 0x58, 0x3e, 0x59, 0x3e, 0x5a, 0x1a, 0x38, 0x00, 0x60, 0x60, 0x66, 0x11, 0x6e, 0x9e, 0x5f, 0xff, 0x1b, 0x19, 0x17, 0xe7, 0x38, 0xd2, 0x22, 0x1d, 0x5e, 0x1a, 0x38, 0x1a, 0x38, 0x9e, 0x5a, 0x62, 0x1a, 0x00, 0x61, 0x59, 0x48, 0x0b, 0x8a, 0x18, 0x60, 0x03, 0x68, 0x19, 0x10, 0x48, 0x61, 0x0e, 0x69, 0x32, 0x62, 0x16, 0x6a, 0x07, 0x38, 0xe2, 0x22, 0x25, 0x5b, 0x7d, 0x5a, 0x3a, 0x38, 0x01, 0x67, 0x00, 0x61, 0xe1, 0x58, 0x16, 0x64, 0xc4, 0x48, 0x60, 0x64, 0x11, 0x6c, 0x80, 0x04, 0x83, 0x5b, 0x01, 0x62, 0x62, 0x13, 0x7b, 0xac, 0x15, 0x92, 0x02, 0x62, 0xbe, 0x5a, 0x61, 0x1a, 0x01, 0x63, 0x2d, 0xe3, 0x0e, 0xe3, 0xe5, 0x13, 0x19, 0x13, 0x62, 0x39, 0x01, 0x00, 0x05, 0x8a, 0x62, 0x39, 0x02, 0x00, 0x02, 0x8a, 0xe1, 0x5d, 0x2b, 0x64, 
-0x00, 0x23, 0x05, 0x9e, 0xe1, 0x5d, 0x00, 0x62, 0xbe, 0x5a, 0x61, 0x1a, 0x2d, 0xe3, 0x19, 0x00, 0x19, 0x07, 0x16, 0x62, 0x19, 0x12, 0xfa, 0x48, 0xdd, 0x89, 0x19, 0x06, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x81, 0x5d, 0x00, 0x63, 0x19, 0x03, 0x5e, 0x00, 0x5e, 0x05, 0xa3, 0x59, 0x01, 0x62, 0x22, 0x11, 0x79, 0xac, 0x04, 0x90, 0x62, 0x3a, 0x03, 0x00, 0xf5, 0x89, 0x06, 0x9e, 0x19, 0x13, 0x04, 0x8a, 0x01, 0x62, 0xbe, 0x5a, 0x61, 0x1a, 0x2d, 0xe3, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x58, 0x3a, 0x38, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x1e, 0x5b, 0x9e, 0x59, 0x61, 0x1a, 0x00, 0x65, 0x25, 0x11, 0x02, 0x88, 0x19, 0x10, 0x06, 0x9e, 0x9e, 0x59, 0x61, 0x1a, 0x01, 0x65, 0x25, 0x11, 0x01, 0x88, 0x5e, 0x10, 0x00, 0x3c, 0x85, 0x78, 
-0x40, 0x23, 0x60, 0x11, 0x83, 0x5a, 0xff, 0x63, 0xff, 0x6b, 0xbe, 0x5b, 0x60, 0x1a, 0x00, 0x63, 0x5b, 0x48, 0x14, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xff, 0x7f, 0xbe, 0x5d, 0x60, 0x1a, 0x41, 0x59, 0x22, 0x01, 0x22, 0x01, 0x22, 0x01, 0x22, 0x01, 0x22, 0x01, 0x22, 0x01, 0x22, 0x01, 0x00, 0x62, 0x10, 0x6a, 0x3a, 0x48, 0x02, 0x9c, 0x00, 0x61, 0x10, 0x69, 0x5e, 0x14, 0x19, 0x14, 0x83, 0x5a, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0x7f, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x19, 0x04, 0x83, 0x5a, 0x22, 0x01, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xbf, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x5e, 0x14, 0x83, 0x5a, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xff, 0xfe, 0xbe, 0x5d, 0x60, 0x1a, 0x5e, 0x04, 0xd3, 0xe2, 
-0x80, 0x23, 0x19, 0x04, 0x83, 0x5a, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xdf, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x5e, 0x04, 0x83, 0x5a, 0x22, 0x01, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xf7, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x19, 0x04, 0x83, 0x5a, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xff, 0xf7, 0xbe, 0x5d, 0x60, 0x1a, 0x19, 0x14, 0x1a, 0x14, 0x83, 0x5a, 0x22, 0x01, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xef, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x19, 0x14, 0x83, 0x5a, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xff, 0xfb, 0xbe, 0x5d, 0x60, 0x1a, 0x19, 0x04, 0x5e, 0x04, 0x83, 0x5a, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0x78, 0xcd, 
-0xc0, 0x23, 0xa4, 0x3d, 0xfb, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x19, 0x04, 0x83, 0x5a, 0x22, 0x01, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xfd, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x5e, 0x04, 0x83, 0x5a, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xff, 0xfd, 0xbe, 0x5d, 0x60, 0x1a, 0x5e, 0x14, 0x19, 0x04, 0x83, 0x5a, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xfe, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x1e, 0x58, 0x08, 0x65, 0x21, 0x58, 0x00, 0x61, 0x1c, 0x5d, 0x01, 0x59, 0x3e, 0x58, 0x00, 0x65, 0xbe, 0x5d, 0x61, 0x1a, 0x9e, 0x5d, 0x60, 0x1a, 0x35, 0xac, 0x02, 0x92, 0x45, 0xac, 0x0d, 0x90, 0x0d, 0xac, 0x02, 0x92, 0x4d, 0xac, 0x09, 0x90, 0x25, 0xac, 0x02, 0x92, 0x55, 0xac, 0x05, 0x90, 0x1d, 0xac, 0x06, 0x92, 0x08, 0x8d, 
-0x00, 0x24, 0x5d, 0xac, 0x01, 0x90, 0x03, 0x9e, 0x01, 0x65, 0xbe, 0x5d, 0x61, 0x1a, 0x9e, 0x5c, 0x02, 0x1d, 0x19, 0x04, 0xbe, 0x5c, 0x02, 0x1d, 0x00, 0x3c, 0x48, 0x0e, 0x83, 0x5b, 0x9e, 0x5a, 0x1d, 0x1f, 0x18, 0x12, 0x07, 0x88, 0x9e, 0x5d, 0x61, 0x1a, 0x05, 0xac, 0x0c, 0x92, 0x61, 0x12, 0x7a, 0xac, 0x09, 0x90, 0x3b, 0x5c, 0x01, 0x62, 0xbe, 0x5a, 0x62, 0x1a, 0x9e, 0x5a, 0x03, 0x1d, 0x19, 0x02, 0xbe, 0x5a, 0x03, 0x1d, 0x3e, 0x5b, 0x19, 0x13, 0x00, 0x62, 0x62, 0x14, 0x0a, 0x89, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x72, 0x62, 0x19, 0x6a, 0x86, 0x63, 0x19, 0x6b, 0x00, 0x60, 0xbe, 0x58, 0x71, 0x1a, 0x00, 0x67, 0x00, 0x60, 0x9e, 0x59, 0x58, 0x1a, 0x38, 0x48, 0xd6, 0xa1, 
-0x40, 0x24, 0x33, 0x8a, 0x19, 0x11, 0x27, 0x38, 0x73, 0x24, 0x40, 0x04, 0x83, 0x5d, 0x48, 0x64, 0x1d, 0x6c, 0x85, 0x04, 0x83, 0x5d, 0x15, 0x66, 0xbe, 0x48, 0x09, 0x82, 0x19, 0x04, 0x83, 0x5d, 0xbe, 0x48, 0x05, 0x82, 0x1a, 0x14, 0x83, 0x5d, 0xbe, 0x48, 0x01, 0x82, 0x13, 0x9e, 0x60, 0x04, 0x83, 0x5d, 0x48, 0x64, 0x1d, 0x6c, 0x85, 0x04, 0x90, 0x3c, 0xb8, 0x00, 0x83, 0x5d, 0x15, 0x66, 0xbe, 0x48, 0x10, 0x82, 0x19, 0x04, 0x83, 0x5d, 0xbe, 0x48, 0x0c, 0x82, 0x1a, 0x14, 0x83, 0x5d, 0xbe, 0x48, 0x08, 0x82, 0x19, 0x07, 0xbe, 0x5f, 0x71, 0x1a, 0x72, 0x65, 0x1a, 0x6d, 0xa7, 0x06, 0x19, 0x16, 0x1b, 0x5e, 0x1a, 0x38, 0x1a, 0x38, 0x19, 0x00, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x00, 0x67, 0xdf, 0x60, 0x1e, 0x68, 0x67, 0xd8, 
-0x80, 0x24, 0x2f, 0x39, 0x84, 0x24, 0xfd, 0x58, 0x1a, 0x38, 0x1a, 0x38, 0x00, 0x67, 0x50, 0x65, 0x04, 0x6d, 0x9e, 0x5c, 0xb8, 0x00, 0x9e, 0x5e, 0xb9, 0x00, 0x86, 0x04, 0x19, 0x14, 0x87, 0x38, 0x92, 0x24, 0xfd, 0x5d, 0x1a, 0x38, 0x1a, 0x38, 0xbe, 0x5f, 0xdb, 0x1e, 0xbe, 0x5f, 0xdc, 0x1e, 0x9e, 0x58, 0x4d, 0x04, 0x9e, 0x59, 0x4f, 0x04, 0x01, 0x00, 0x02, 0x3a, 0xb0, 0x00, 0x01, 0x98, 0x3a, 0x38, 0x00, 0x61, 0x9e, 0x58, 0x4d, 0x04, 0x9e, 0x5a, 0xdd, 0x1e, 0x1c, 0x5a, 0x02, 0x39, 0x20, 0x00, 0x01, 0x98, 0x20, 0x60, 0x00, 0x61, 0x01, 0x62, 0x00, 0x67, 0x50, 0x65, 0x04, 0x6d, 0x48, 0x63, 0x1d, 0x6b, 0x9e, 0x5c, 0xb8, 0x00, 0x19, 0x14, 0x87, 0x38, 0xcd, 0x24, 0x65, 0x5c, 0x98, 0x48, 0x06, 0x80, 0x5b, 0x5d, 0xbe, 0x5a, 0xdb, 0x1e, 0x19, 0x01, 0x01, 0x67, 0x0e, 0x9e, 0x07, 0xac, 0xaf, 0x52, 
-0xc0, 0x24, 0x0c, 0x90, 0x1e, 0x5d, 0x40, 0x3d, 0xdf, 0x1e, 0x19, 0x15, 0x50, 0x48, 0x08, 0x00, 0x01, 0x8a, 0x3b, 0x5d, 0x3e, 0x5d, 0x00, 0x61, 0x00, 0x67, 0x19, 0x02, 0x19, 0x05, 0x1e, 0x5d, 0x40, 0x3d, 0xdf, 0x1e, 0x19, 0x15, 0x50, 0x48, 0x08, 0x00, 0x01, 0x8a, 0x3b, 0x5d, 0x3e, 0x5d, 0x00, 0x61, 0x9e, 0x58, 0x4f, 0x04, 0x9e, 0x5a, 0xdd, 0x1e, 0x1c, 0x5a, 0x02, 0x39, 0x20, 0x00, 0x01, 0x98, 0x20, 0x60, 0x00, 0x61, 0x01, 0x62, 0x00, 0x67, 0x50, 0x65, 0x04, 0x6d, 0x48, 0x63, 0x1d, 0x6b, 0x9e, 0x5c, 0xb8, 0x00, 0xa4, 0x05, 0x64, 0x03, 0x9e, 0x5c, 0xb9, 0x00, 0x19, 0x14, 0x87, 0x38, 0x0d, 0x25, 0x65, 0x5c, 0x98, 0x48, 0x06, 0x80, 0x5b, 0x5d, 0xbe, 0x5a, 0xdc, 0x1e, 0x19, 0x01, 0x01, 0x67, 0x13, 0x9e, 0x07, 0xac, 0x11, 0x90, 0x1e, 0x5d, 0x1e, 0x5e, 0x40, 0x3d, 0xdf, 0x1e, 0xc9, 0x52, 
-0x00, 0x25, 0x19, 0x15, 0x50, 0x48, 0x08, 0x00, 0x04, 0x8a, 0xa3, 0x5e, 0xfe, 0x59, 0xc1, 0x06, 0xdb, 0x5d, 0x3e, 0x5e, 0x3e, 0x5d, 0x00, 0x61, 0x00, 0x67, 0x19, 0x02, 0x19, 0x05, 0x1e, 0x5d, 0x1e, 0x5e, 0x40, 0x3d, 0xdf, 0x1e, 0x19, 0x15, 0x50, 0x48, 0x08, 0x00, 0x04, 0x8a, 0xa3, 0x5e, 0xfe, 0x59, 0xc1, 0x06, 0xdb, 0x5d, 0x3e, 0x5e, 0x3e, 0x5d, 0x00, 0x60, 0xbe, 0x58, 0xe8, 0x1e, 0xbe, 0x58, 0xe7, 0x1e, 0xdf, 0x62, 0x1e, 0x6a, 0x01, 0x67, 0xef, 0x38, 0x2e, 0x25, 0x45, 0x5b, 0x64, 0x3b, 0xff, 0x00, 0x78, 0x48, 0x02, 0x96, 0x61, 0x58, 0xe1, 0x5c, 0x19, 0x07, 0x1a, 0x38, 0xbe, 0x5c, 0xe7, 0x1e, 0xdf, 0x62, 0x1e, 0x6a, 0x01, 0x67, 0x00, 0x60, 0xef, 0x38, 0x40, 0x25, 0x45, 0x5b, 0xfe, 0x5b, 0x64, 0x3b, 0xff, 0x00, 0x78, 0x48, 0x02, 0x96, 0x61, 0x58, 0xe1, 0x5d, 0x19, 0x07, 0x33, 0xd5, 
-0x40, 0x25, 0x1a, 0x38, 0xbe, 0x5d, 0xe8, 0x1e, 0x7a, 0x60, 0x02, 0x68, 0x50, 0x61, 0x04, 0x69, 0x39, 0x62, 0x47, 0x38, 0x4d, 0x25, 0x23, 0x5b, 0x7b, 0x58, 0x19, 0x01, 0x19, 0x00, 0x3a, 0x38, 0x92, 0x62, 0xf8, 0x6a, 0x00, 0x64, 0x17, 0x63, 0x67, 0x38, 0x57, 0x25, 0x45, 0x5b, 0x83, 0x04, 0x1a, 0x38, 0xfe, 0x5c, 0x84, 0x3c, 0x00, 0xff, 0x9e, 0x5f, 0x34, 0x1d, 0xe0, 0x3b, 0x30, 0x1d, 0x9e, 0x59, 0xb5, 0x00, 0x24, 0x29, 0x3b, 0x5b, 0x30, 0x63, 0x1d, 0x6b, 0x00, 0x60, 0xbe, 0x58, 0x36, 0x1d, 0x04, 0x65, 0x19, 0x15, 0xa7, 0x38, 0x70, 0x25, 0x63, 0x5e, 0xc4, 0x3e, 0xff, 0x00, 0x06, 0x00, 0x19, 0x03, 0x19, 0x05, 0x00, 0x61, 0x1c, 0x5d, 0xbe, 0x58, 0x35, 0x1d, 0x30, 0x63, 0x1d, 0x6b, 0x04, 0x65, 0x19, 0x15, 0xa7, 0x38, 0x81, 0x25, 0x63, 0x5e, 0xc4, 0x3e, 0x00, 0xff, 0xfe, 0x5e, 0x97, 0xe9, 
-0x80, 0x25, 0x06, 0x00, 0x19, 0x03, 0x19, 0x05, 0x00, 0x61, 0x1c, 0x5d, 0x01, 0x5b, 0xbe, 0x58, 0xbc, 0x1d, 0x9e, 0x58, 0x35, 0x1d, 0x19, 0x07, 0xe2, 0x3a, 0x04, 0x00, 0x01, 0x88, 0x00, 0x67, 0xbe, 0x5f, 0x34, 0x1d, 0x01, 0x61, 0x9e, 0x5a, 0xb1, 0x04, 0x42, 0x3f, 0x01, 0x00, 0x11, 0x8a, 0x01, 0x61, 0x02, 0x3f, 0x04, 0x00, 0x0d, 0x9a, 0x04, 0x61, 0x02, 0x3f, 0x06, 0x00, 0x09, 0x9a, 0x02, 0x61, 0x02, 0x3f, 0x08, 0x00, 0x05, 0x9a, 0x03, 0x61, 0x02, 0x3f, 0x0a, 0x00, 0x01, 0x9a, 0x01, 0x61, 0xbe, 0x59, 0x36, 0x1d, 0x1a, 0x38, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x00, 0x63, 0x00, 0x65, 0x9c, 0x60, 0x1e, 0x68, 0x9e, 0x59, 0xb8, 0x00, 0x19, 0x11, 0x27, 0x38, 0xc1, 0x25, 0x03, 0x5a, 0x5b, 0x48, 0x01, 0x96, 0x41, 0x5b, 0xce, 0x09, 
-0xc0, 0x25, 0x19, 0x00, 0x1a, 0x38, 0xbe, 0x5b, 0x60, 0x1e, 0x9e, 0x59, 0xb9, 0x00, 0x19, 0x11, 0x27, 0x38, 0xce, 0x25, 0x03, 0x5a, 0x5d, 0x48, 0x01, 0x96, 0x41, 0x5d, 0x19, 0x00, 0x1a, 0x38, 0xbe, 0x5d, 0x5f, 0x1e, 0x10, 0x64, 0x65, 0x02, 0x50, 0x48, 0x00, 0x01, 0x0b, 0x80, 0x61, 0x58, 0x7d, 0x48, 0x01, 0x98, 0xa1, 0x58, 0x01, 0x5c, 0x00, 0x61, 0x07, 0x62, 0x82, 0x40, 0x0a, 0x62, 0x1c, 0x5a, 0x01, 0x5c, 0xbe, 0x5c, 0x61, 0x1e, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0x01, 0x00, 0x10, 0x48, 0x05, 0x00, 0x18, 0x3e, 0x4f, 0x27, 0x9e, 0x58, 0xdb, 0x1e, 0x10, 0x48, 0x02, 0x00, 0x18, 0x3e, 0x4f, 0x27, 0x9e, 0x59, 0xdc, 0x1e, 0x30, 0x48, 0x02, 0x00, 0x18, 0x3e, 0x4f, 0x27, 0x15, 0x0e, 
-0x00, 0x26, 0x9e, 0x58, 0x45, 0x04, 0x02, 0x38, 0x50, 0x01, 0x3d, 0x98, 0xdf, 0x60, 0x1e, 0x68, 0x05, 0x59, 0x24, 0x3a, 0xff, 0x00, 0xfe, 0x59, 0x24, 0x3b, 0xff, 0x00, 0x43, 0x06, 0x03, 0x59, 0x24, 0x3c, 0xff, 0x00, 0xfe, 0x59, 0x24, 0x3d, 0xff, 0x00, 0x85, 0x07, 0xc7, 0x00, 0x38, 0x10, 0x2a, 0x98, 0xd0, 0x48, 0x06, 0x00, 0x27, 0x98, 0xf0, 0x48, 0x06, 0x00, 0x24, 0x98, 0x45, 0x00, 0x10, 0x48, 0x06, 0x00, 0x20, 0x98, 0x64, 0x00, 0x10, 0x48, 0x06, 0x00, 0x1c, 0x98, 0x9e, 0x58, 0x4d, 0x04, 0x9e, 0x59, 0x4f, 0x04, 0x19, 0x48, 0x01, 0x98, 0x21, 0x58, 0x9e, 0x59, 0x44, 0x04, 0x19, 0x48, 0x10, 0x80, 0x9e, 0x58, 0xf1, 0x04, 0x19, 0x10, 0x04, 0x88, 0x9e, 0x58, 0x8a, 0x04, 0x1a, 0x10, 0x09, 0x98, 0x9e, 0x58, 0xf2, 0x04, 0x19, 0x10, 0x04, 0x88, 0x9e, 0x58, 0x8b, 0x04, 0x1a, 0x10, 0x1d, 0x27, 
-0x40, 0x26, 0x01, 0x98, 0xfc, 0x9e, 0x9e, 0x59, 0x4e, 0x04, 0x30, 0x48, 0x00, 0x00, 0x8a, 0x8a, 0x9e, 0x59, 0x4e, 0x04, 0x30, 0x48, 0x23, 0x00, 0x85, 0x8a, 0x9e, 0x59, 0x4c, 0x04, 0x30, 0x48, 0x00, 0x00, 0x80, 0x8a, 0x9e, 0x59, 0x4c, 0x04, 0x30, 0x48, 0x15, 0x00, 0x7b, 0x8a, 0x9e, 0x58, 0x46, 0x04, 0x9e, 0x59, 0x47, 0x04, 0x01, 0x00, 0x02, 0x38, 0x40, 0x00, 0x08, 0x98, 0x9e, 0x58, 0xdb, 0x1e, 0x9e, 0x59, 0xdc, 0x1e, 0x01, 0x00, 0x02, 0x39, 0x02, 0x00, 0x12, 0x8a, 0x9e, 0x58, 0x46, 0x04, 0x38, 0x10, 0x67, 0x98, 0x9e, 0x58, 0xdb, 0x1e, 0x9e, 0x59, 0xdc, 0x1e, 0x01, 0x00, 0x1b, 0x10, 0x60, 0x88, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0x01, 0x10, 0x5a, 0x8a, 0x28, 0x9e, 0x80, 0x60, 0x01, 0x68, 0xbe, 0x58, 0x20, 0x1d, 0x9e, 0x58, 0x4d, 0x04, 0x9e, 0x59, 0x4f, 0x04, 0xd4, 0xd9, 
-0x80, 0x26, 0x19, 0x48, 0x01, 0x9a, 0x21, 0x58, 0xbe, 0x58, 0x14, 0x1f, 0x51, 0xe7, 0x01, 0x60, 0x01, 0x61, 0xb8, 0xe7, 0x9e, 0x58, 0x0d, 0x1f, 0x18, 0x10, 0xb1, 0x8a, 0x00, 0x63, 0xbe, 0x5b, 0x0e, 0x1f, 0xbe, 0x5b, 0x10, 0x1f, 0x9e, 0x5b, 0xb8, 0x00, 0x19, 0x13, 0xbe, 0x5b, 0x0f, 0x1f, 0x9e, 0x5b, 0xb9, 0x00, 0x19, 0x13, 0xbe, 0x5b, 0x11, 0x1f, 0x01, 0x60, 0x01, 0x61, 0x77, 0xe7, 0x9e, 0x9e, 0x9e, 0x58, 0x46, 0x04, 0x9e, 0x59, 0x47, 0x04, 0x19, 0x48, 0x98, 0x98, 0x68, 0x60, 0x01, 0x68, 0xbe, 0x58, 0x20, 0x1d, 0x76, 0xde, 0x9e, 0x58, 0x4d, 0x04, 0x9e, 0x59, 0x4f, 0x04, 0x19, 0x48, 0x01, 0x9a, 0x21, 0x58, 0x08, 0x58, 0xbe, 0x58, 0x14, 0x1f, 0x00, 0x63, 0xbe, 0x5b, 0x0e, 0x1f, 0xbe, 0x5b, 0x10, 0x1f, 0x9e, 0x5b, 0xb8, 0x00, 0x19, 0x13, 0xbe, 0x5b, 0x0f, 0x1f, 0x9e, 0x5b, 0xd0, 0x0a, 
-0xc0, 0x26, 0xb9, 0x00, 0x19, 0x13, 0xbe, 0x5b, 0x11, 0x1f, 0x01, 0x60, 0x01, 0x61, 0x77, 0xe7, 0x01, 0x60, 0x02, 0x61, 0x77, 0xe7, 0x02, 0x60, 0x01, 0x61, 0x77, 0xe7, 0x02, 0x60, 0x02, 0x61, 0x77, 0xe7, 0x6d, 0x9e, 0x0c, 0x60, 0xbe, 0x58, 0xdd, 0x1e, 0x7d, 0xe4, 0xdf, 0x60, 0x1e, 0x68, 0x05, 0x59, 0x24, 0x3a, 0xff, 0x00, 0xfe, 0x59, 0x24, 0x3b, 0xff, 0x00, 0x43, 0x06, 0x03, 0x59, 0x24, 0x3c, 0xff, 0x00, 0xfe, 0x59, 0x24, 0x3d, 0xff, 0x00, 0x85, 0x07, 0xd0, 0x48, 0x0f, 0x00, 0x04, 0x98, 0xf0, 0x48, 0x0f, 0x00, 0x01, 0x98, 0x04, 0x9e, 0x04, 0x60, 0xbe, 0x58, 0xdd, 0x1e, 0x7d, 0xe4, 0x9e, 0x58, 0xdb, 0x1e, 0x9e, 0x59, 0xdc, 0x1e, 0x01, 0x00, 0x1a, 0x10, 0x0b, 0x88, 0x60, 0x60, 0xbe, 0x58, 0x20, 0x1d, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0x01, 0x00, 0x1c, 0x10, 0xc5, 0x27, 
-0x00, 0x27, 0x4e, 0x88, 0x3c, 0x9e, 0x66, 0x60, 0xbe, 0x58, 0x20, 0x1d, 0x70, 0xe8, 0x01, 0x60, 0x01, 0x61, 0xb8, 0xe7, 0x9e, 0x58, 0x0d, 0x1f, 0x1e, 0x10, 0x03, 0x80, 0x01, 0x60, 0x01, 0x61, 0x77, 0xe7, 0x01, 0x60, 0x02, 0x61, 0xb8, 0xe7, 0x9e, 0x58, 0x0d, 0x1f, 0x1e, 0x10, 0x03, 0x80, 0x01, 0x60, 0x02, 0x61, 0x77, 0xe7, 0x02, 0x60, 0x01, 0x61, 0xb8, 0xe7, 0x9e, 0x58, 0x0d, 0x1f, 0x1e, 0x10, 0x03, 0x80, 0x02, 0x60, 0x01, 0x61, 0x77, 0xe7, 0x02, 0x60, 0x02, 0x61, 0xb8, 0xe7, 0x9e, 0x58, 0x0d, 0x1f, 0x1e, 0x10, 0x03, 0x80, 0x02, 0x60, 0x02, 0x61, 0x77, 0xe7, 0x98, 0xe2, 0x06, 0x71, 0x09, 0xac, 0x0c, 0x92, 0x01, 0xac, 0x0a, 0x92, 0x51, 0xac, 0x08, 0x92, 0x9e, 0x58, 0x20, 0x1d, 0x00, 0x61, 0x19, 0x48, 0x03, 0x8a, 0x01, 0x60, 0xbe, 0x58, 0x44, 0x1a, 0x9e, 0x58, 0x8a, 0x04, 0x5e, 0x57, 
-0x40, 0x27, 0x10, 0x48, 0x0a, 0x00, 0x05, 0x98, 0x9e, 0x58, 0x8b, 0x04, 0x10, 0x48, 0x0a, 0x00, 0x03, 0x9c, 0x01, 0x60, 0xbe, 0x58, 0x1d, 0x1f, 0x98, 0xe2, 0x00, 0x60, 0xbe, 0x58, 0x1d, 0x1f, 0x1a, 0x38, 0x3a, 0x38, 0x9e, 0x58, 0xb8, 0x00, 0x1b, 0x10, 0x7a, 0x61, 0x02, 0x69, 0x60, 0xe7, 0x9e, 0x58, 0xb9, 0x00, 0x1b, 0x10, 0x7a, 0x61, 0x02, 0x69, 0x30, 0x39, 0xb8, 0x00, 0x60, 0xe7, 0x3a, 0x38, 0x19, 0x01, 0x00, 0x66, 0x07, 0x38, 0x75, 0x27, 0x23, 0x5a, 0x18, 0x12, 0x08, 0x8a, 0x18, 0x16, 0x04, 0x88, 0x21, 0x5b, 0x19, 0x13, 0x01, 0x64, 0x9b, 0x5b, 0x01, 0x66, 0x06, 0x9e, 0x18, 0x16, 0x04, 0x8a, 0x21, 0x5b, 0x01, 0x64, 0x9b, 0x5b, 0x00, 0x66, 0x19, 0x01, 0x3a, 0x38, 0xbe, 0x58, 0x82, 0x1d, 0xbe, 0x59, 0x83, 0x1d, 0x9e, 0x5e, 0x10, 0x1f, 0x9e, 0x5f, 0x0e, 0x1f, 0x7a, 0x63, 0x57, 0x28, 
-0x80, 0x27, 0x02, 0x6b, 0x67, 0x03, 0x63, 0x5b, 0x9e, 0x59, 0x82, 0x1d, 0x79, 0x48, 0x26, 0x88, 0x48, 0x63, 0x1d, 0x6b, 0x67, 0x03, 0x63, 0x5b, 0x18, 0x13, 0x20, 0x8a, 0x7a, 0x62, 0x02, 0x6a, 0x50, 0x3a, 0xb8, 0x00, 0x46, 0x02, 0x43, 0x5a, 0x9e, 0x59, 0x83, 0x1d, 0x59, 0x48, 0x16, 0x88, 0x48, 0x62, 0x1d, 0x6a, 0x50, 0x3a, 0xb8, 0x00, 0x46, 0x02, 0x43, 0x5a, 0x00, 0x61, 0x61, 0x58, 0x43, 0x40, 0x9e, 0x5d, 0x14, 0x1f, 0x1c, 0x5d, 0x01, 0x5d, 0x9e, 0x5c, 0xb8, 0x00, 0x00, 0x61, 0xe1, 0x58, 0x86, 0x48, 0x48, 0x64, 0x0e, 0x6c, 0x80, 0x04, 0xbb, 0x5c, 0x19, 0x07, 0x9e, 0x5a, 0x0f, 0x1f, 0xfa, 0x48, 0xcd, 0x9d, 0x19, 0x06, 0x9e, 0x5a, 0x11, 0x1f, 0xda, 0x48, 0xc6, 0x9d, 0x3a, 0x38, 0x9e, 0x5b, 0xb8, 0x00, 0xbe, 0x5b, 0x0e, 0x1f, 0x00, 0x63, 0xbe, 0x5b, 0x0f, 0x1f, 0x9e, 0x5b, 0x82, 0xeb, 
-0xc0, 0x27, 0xb9, 0x00, 0xbe, 0x5b, 0x10, 0x1f, 0x00, 0x63, 0xbe, 0x5b, 0x11, 0x1f, 0x00, 0x63, 0xbe, 0x5b, 0x0d, 0x1f, 0x01, 0x63, 0xbe, 0x5b, 0x12, 0x1f, 0xbe, 0x5b, 0x13, 0x1f, 0x00, 0x63, 0x00, 0x65, 0xbe, 0x58, 0x00, 0x1d, 0xbe, 0x59, 0x04, 0x1d, 0x00, 0x66, 0x00, 0x67, 0x7a, 0x62, 0x02, 0x6a, 0x47, 0x02, 0x43, 0x5a, 0x9e, 0x59, 0x00, 0x1d, 0x59, 0x48, 0x61, 0x88, 0x7a, 0x62, 0x02, 0x6a, 0x50, 0x3a, 0xb8, 0x00, 0x46, 0x02, 0x43, 0x5a, 0x9e, 0x59, 0x04, 0x1d, 0x59, 0x48, 0x57, 0x88, 0x48, 0x62, 0x1d, 0x6a, 0x47, 0x02, 0x43, 0x5a, 0x9e, 0x59, 0x12, 0x1f, 0x59, 0x48, 0x02, 0x9a, 0xbe, 0x5a, 0x12, 0x1f, 0x48, 0x62, 0x1d, 0x6a, 0x50, 0x3a, 0xb8, 0x00, 0x46, 0x02, 0x43, 0x5a, 0x9e, 0x59, 0x13, 0x1f, 0x59, 0x48, 0x02, 0x9a, 0xbe, 0x5a, 0x13, 0x1f, 0x9e, 0x5c, 0xb8, 0x00, 0xb3, 0xe8, 
-0x00, 0x28, 0x00, 0x61, 0xe1, 0x58, 0x86, 0x48, 0x32, 0x64, 0x16, 0x6c, 0x9e, 0x5d, 0x20, 0x1d, 0xb0, 0x48, 0x66, 0x00, 0x02, 0x88, 0x48, 0x64, 0x0e, 0x6c, 0x80, 0x04, 0x83, 0x59, 0x79, 0xac, 0x2f, 0x92, 0x10, 0x60, 0x38, 0x48, 0x2c, 0x9a, 0x9e, 0x58, 0x0e, 0x1f, 0xf8, 0x48, 0x07, 0x98, 0xbe, 0x5f, 0x0e, 0x1f, 0x9e, 0x58, 0x0d, 0x1f, 0x19, 0x00, 0xbe, 0x58, 0x0d, 0x1f, 0x9e, 0x58, 0x0f, 0x1f, 0xf8, 0x48, 0x07, 0x80, 0xbe, 0x5f, 0x0f, 0x1f, 0x9e, 0x58, 0x0d, 0x1f, 0x19, 0x00, 0xbe, 0x58, 0x0d, 0x1f, 0x9e, 0x58, 0x10, 0x1f, 0xd8, 0x48, 0x07, 0x98, 0xbe, 0x5e, 0x10, 0x1f, 0x9e, 0x58, 0x0d, 0x1f, 0x19, 0x00, 0xbe, 0x58, 0x0d, 0x1f, 0x9e, 0x58, 0x11, 0x1f, 0xd8, 0x48, 0x07, 0x80, 0xbe, 0x5e, 0x11, 0x1f, 0x9e, 0x58, 0x0d, 0x1f, 0x19, 0x00, 0xbe, 0x58, 0x0d, 0x1f, 0x19, 0x07, 0xf7, 0xe6, 
-0x40, 0x28, 0x9e, 0x5a, 0xb8, 0x00, 0x19, 0x12, 0xfa, 0x48, 0x91, 0x9d, 0x19, 0x06, 0x9e, 0x5a, 0xb9, 0x00, 0x19, 0x12, 0xda, 0x48, 0x8a, 0x9d, 0x9e, 0x58, 0x12, 0x1f, 0x9e, 0x59, 0x13, 0x1f, 0x38, 0x48, 0x01, 0x98, 0x21, 0x58, 0x9e, 0x5e, 0x4d, 0x04, 0x9e, 0x5f, 0x4f, 0x04, 0xc7, 0x06, 0xc2, 0x3e, 0x00, 0x06, 0x04, 0x80, 0x02, 0x39, 0x40, 0x01, 0x01, 0x98, 0x10, 0x60, 0x02, 0x39, 0x80, 0x03, 0x02, 0x80, 0x08, 0x59, 0x01, 0x00, 0x9e, 0x5e, 0x12, 0x1f, 0x9e, 0x5f, 0x13, 0x1f, 0xc7, 0x06, 0xc2, 0x3e, 0x00, 0x02, 0x02, 0x98, 0x08, 0x58, 0x08, 0x58, 0xbe, 0x58, 0x14, 0x1f, 0x3a, 0x38, 0x00, 0x62, 0x7a, 0x67, 0x02, 0x6f, 0x16, 0x60, 0xe5, 0x5c, 0x18, 0x14, 0x01, 0x88, 0x8b, 0xe8, 0x19, 0x02, 0x19, 0x10, 0x18, 0x10, 0xf8, 0x89, 0x00, 0x62, 0x7a, 0x67, 0x02, 0x6f, 0x16, 0x66, 0x1e, 0xda, 
-0x80, 0x28, 0xe6, 0x07, 0x24, 0x66, 0xe5, 0x5c, 0x18, 0x14, 0x01, 0x88, 0x98, 0xe8, 0x19, 0x02, 0x19, 0x16, 0x18, 0x16, 0xf8, 0x89, 0x3a, 0x38, 0x00, 0x64, 0x48, 0x63, 0x0e, 0x6b, 0x62, 0x03, 0x16, 0x65, 0x24, 0x66, 0x19, 0x16, 0xc7, 0x38, 0x96, 0x28, 0x9b, 0x5b, 0x65, 0x03, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x64, 0x16, 0x65, 0x48, 0x63, 0x0e, 0x6b, 0x00, 0x61, 0x00, 0x60, 0x45, 0x40, 0x03, 0x03, 0x16, 0x65, 0x19, 0x15, 0xa7, 0x38, 0xa6, 0x28, 0x9d, 0x5b, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0x48, 0x60, 0x1d, 0x68, 0x9c, 0x61, 0x1e, 0x69, 0x9e, 0x5b, 0x4c, 0x04, 0x70, 0x48, 0x00, 0x00, 0x0c, 0x8a, 0x9e, 0x5b, 0x4c, 0x04, 0x70, 0x48, 0x01, 0x00, 0x0f, 0x8a, 0x70, 0x48, 0x14, 0x00, 0x15, 0x8a, 0x70, 0x48, 0x15, 0x00, 0x1b, 0x8a, 0x23, 0x9e, 0x03, 0x00, 0x23, 0x01, 0x4f, 0x38, 0x53, 0xa0, 
-0xc0, 0x28, 0xc3, 0x28, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x23, 0x9e, 0x19, 0x13, 0x03, 0x00, 0x23, 0x01, 0x6f, 0x38, 0xcc, 0x28, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x1a, 0x9e, 0x19, 0x13, 0x03, 0x00, 0x23, 0x01, 0x4f, 0x38, 0xd5, 0x28, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x11, 0x9e, 0x1a, 0x13, 0x03, 0x00, 0x23, 0x01, 0x4f, 0x38, 0xde, 0x28, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x08, 0x9e, 0x1a, 0x13, 0x03, 0x00, 0x23, 0x01, 0x8f, 0x38, 0xe7, 0x28, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x48, 0x60, 0x1d, 0x68, 0x10, 0x38, 0xb8, 0x00, 0x9c, 0x61, 0x1e, 0x69, 0x30, 0x39, 0xb8, 0x00, 0x9e, 0x5b, 0x4e, 0x04, 0x70, 0x48, 0x00, 0x00, 0x0c, 0x8a, 0x9e, 0x5b, 0x4e, 0x04, 0x70, 0x48, 0x01, 0x00, 0x0f, 0x8a, 0x70, 0x48, 0x22, 0x00, 0x15, 0x8a, 0x70, 0x48, 0x23, 0x00, 0x1b, 0x8a, 0x3d, 0x49, 
-0x00, 0x29, 0x23, 0x9e, 0x03, 0x00, 0x23, 0x01, 0x4f, 0x38, 0x07, 0x29, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x23, 0x9e, 0x19, 0x13, 0x03, 0x00, 0x23, 0x01, 0x6f, 0x38, 0x10, 0x29, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x1a, 0x9e, 0x19, 0x13, 0x03, 0x00, 0x23, 0x01, 0x4f, 0x38, 0x19, 0x29, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x11, 0x9e, 0x1a, 0x13, 0x03, 0x00, 0x23, 0x01, 0x4f, 0x38, 0x22, 0x29, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x08, 0x9e, 0x1a, 0x13, 0x03, 0x00, 0x23, 0x01, 0x8f, 0x38, 0x2b, 0x29, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x00, 0x66, 0x00, 0x67, 0x9c, 0x63, 0x1e, 0x6b, 0x67, 0x03, 0x63, 0x5b, 0x18, 0x13, 0x24, 0x8a, 0x48, 0x62, 0x1d, 0x6a, 0xda, 0xc3, 
-0x40, 0x29, 0x50, 0x3a, 0xb8, 0x00, 0x46, 0x02, 0x43, 0x5a, 0x00, 0x61, 0x59, 0x48, 0x1b, 0x8a, 0x9c, 0x62, 0x1e, 0x6a, 0x50, 0x3a, 0xb8, 0x00, 0x46, 0x02, 0x43, 0x5a, 0x00, 0x61, 0x61, 0x58, 0x43, 0x40, 0x9e, 0x5d, 0x61, 0x1e, 0x1c, 0x5d, 0x01, 0x5d, 0x9e, 0x5c, 0xb8, 0x00, 0x00, 0x61, 0xe1, 0x58, 0x86, 0x48, 0x32, 0x64, 0x16, 0x6c, 0x80, 0x04, 0x48, 0x63, 0x0e, 0x6b, 0x60, 0x03, 0xbb, 0x5c, 0xbb, 0x5b, 0x0e, 0x9e, 0x9e, 0x5c, 0xb8, 0x00, 0x00, 0x61, 0xe1, 0x58, 0x86, 0x48, 0x32, 0x64, 0x16, 0x6c, 0x80, 0x04, 0x48, 0x63, 0x0e, 0x6b, 0x60, 0x03, 0x00, 0x65, 0xbb, 0x5c, 0xbb, 0x5b, 0x19, 0x07, 0x9e, 0x5a, 0xb8, 0x00, 0x19, 0x12, 0xfa, 0x48, 0xc2, 0x9d, 0x19, 0x06, 0x9e, 0x5a, 0xb9, 0x00, 0x19, 0x12, 0xda, 0x48, 0xbb, 0x9d, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x1a, 0x35, 
-0x80, 0x29, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0xe0, 0xac, 0x98, 0x3c, 0xbb, 0x2a, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x52, 0xb1, 0x39, 0xac, 0xfd, 0x93, 0x00, 0xbc, 0xbc, 0x00, 0x78, 0xa8, 0x70, 0xa8, 0x00, 0xbd, 0xbc, 0x00, 0x00, 0xbc, 0xb1, 0x00, 0x38, 0xa8, 0x70, 0xa8, 0x00, 0xbd, 0xb1, 0x00, 0x00, 0xbc, 0x1c, 0x00, 0x78, 0xaa, 0x00, 0xbd, 0x1c, 0x00, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x00, 0xbc, 0xb1, 0x00, 0x30, 0xaa, 0x47, 0xb4, 
-0xc0, 0x29, 0x00, 0xaa, 0x00, 0xbd, 0xb1, 0x00, 0x1d, 0xb0, 0x38, 0xa8, 0x40, 0xa8, 0x48, 0xa8, 0x9d, 0xb0, 0x9a, 0xaa, 0x00, 0x60, 0xbe, 0x58, 0x5e, 0x00, 0xbe, 0x58, 0x5f, 0x00, 0xbe, 0x58, 0x60, 0x00, 0xbe, 0x58, 0x61, 0x00, 0x3e, 0xb0, 0x70, 0xaa, 0x78, 0xaa, 0xbe, 0xb0, 0x30, 0xb0, 0xbe, 0x58, 0x2a, 0x1d, 0x31, 0xb0, 0xbe, 0x58, 0x2b, 0x1d, 0x33, 0xb0, 0xbe, 0x58, 0x2c, 0x1d, 0x34, 0xb0, 0xbe, 0x58, 0x2d, 0x1d, 0x00, 0x60, 0x00, 0xbd, 0x31, 0x00, 0x00, 0x60, 0x00, 0xbd, 0x05, 0x00, 0x00, 0xbc, 0x34, 0x00, 0x00, 0x60, 0x00, 0xbd, 0x34, 0x00, 0x00, 0xbc, 0x30, 0x00, 0x00, 0xaa, 0x08, 0xaa, 0x10, 0xaa, 0x18, 0xaa, 0x20, 0xaa, 0x28, 0xaa, 0x30, 0xaa, 0x38, 0xaa, 0x40, 0xaa, 0x48, 0xaa, 0x50, 0xaa, 0x58, 0xaa, 0x60, 0xaa, 0x68, 0xaa, 0x70, 0xaa, 0x78, 0xaa, 0x00, 0xbd, 0xdb, 0xd8, 
-0x00, 0x2a, 0x30, 0x00, 0x00, 0xbc, 0x04, 0x00, 0x00, 0xaa, 0x08, 0xaa, 0x10, 0xaa, 0x18, 0xaa, 0x20, 0xaa, 0x28, 0xaa, 0x30, 0xaa, 0x38, 0xaa, 0x40, 0xaa, 0x48, 0xaa, 0x50, 0xaa, 0x58, 0xaa, 0x60, 0xaa, 0x68, 0xaa, 0x70, 0xaa, 0x78, 0xaa, 0x00, 0xbd, 0x04, 0x00, 0x00, 0xbc, 0x33, 0x00, 0x00, 0xaa, 0x08, 0xaa, 0x10, 0xaa, 0x18, 0xaa, 0x20, 0xaa, 0x28, 0xaa, 0x30, 0xaa, 0x38, 0xaa, 0x40, 0xaa, 0x48, 0xaa, 0x50, 0xaa, 0x58, 0xaa, 0x60, 0xaa, 0x68, 0xaa, 0x70, 0xaa, 0x78, 0xaa, 0x00, 0xbd, 0x33, 0x00, 0x9e, 0x58, 0xc3, 0x1d, 0x06, 0x38, 0xaa, 0x55, 0x02, 0x8a, 0x42, 0xa9, 0x8b, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xab, 0x62, 0x60, 0xb1, 0x68, 0xef, 0xb0, 0x12, 0xa9, 0x1a, 0x38, 0x1a, 0x38, 0x00, 0xbc, 0x04, 0x00, 0x38, 0xa8, 0x00, 0xbd, 0x04, 0x00, 0x9e, 0x58, 0xfd, 0x6c, 
-0x40, 0x2a, 0x2a, 0x1d, 0xb0, 0xb0, 0x9e, 0x58, 0x2b, 0x1d, 0xb1, 0xb0, 0x9e, 0x58, 0x2c, 0x1d, 0xb3, 0xb0, 0x9e, 0x58, 0x2d, 0x1d, 0xb4, 0xb0, 0x9a, 0xac, 0xfe, 0x91, 0x9e, 0x58, 0x5e, 0x00, 0x02, 0x38, 0x54, 0x00, 0x03, 0x8a, 0xb2, 0xac, 0xfe, 0x93, 0x81, 0x9f, 0xe0, 0xac, 0x7f, 0x91, 0x9a, 0xaa, 0x00, 0x60, 0xbe, 0x58, 0xae, 0x00, 0x00, 0xbc, 0xb1, 0x00, 0x30, 0xa8, 0x00, 0xbd, 0xb1, 0x00, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0xbc, 0xbc, 0x00, 0x78, 0xaa, 0x70, 0xaa, 0x00, 0xbd, 0xbc, 0x00, 0x00, 0xbc, 0xb1, 0x00, 0x38, 0xaa, 0x70, 0xaa, 0x00, 0xbd, 0xb1, 0x00, 0x00, 0xbc, 0x1c, 0x00, 0x78, 0xa8, 0x00, 0xbd, 0x1c, 0x00, 0x3e, 0xb0, 0x70, 0xa8, 0x78, 0xa8, 0xbe, 0xb0, 0x19, 0x38, 0x8c, 0x50, 0x00, 0x60, 0xbe, 0x58, 0xe7, 0x00, 0x00, 0x60, 0x49, 0xca, 
-0x80, 0x2a, 0x05, 0x68, 0xbe, 0x58, 0xe9, 0x00, 0x18, 0x60, 0x08, 0x68, 0xbe, 0x58, 0xe8, 0x00, 0xea, 0x60, 0x2f, 0x68, 0x07, 0x38, 0x8d, 0x2a, 0x1a, 0x38, 0x1a, 0x38, 0x1a, 0x38, 0x1a, 0x38, 0xe5, 0xaa, 0x00, 0x61, 0xff, 0x65, 0xff, 0x6d, 0x0c, 0x62, 0x47, 0x63, 0xf8, 0x6b, 0x53, 0x64, 0xf8, 0x6c, 0x19, 0x12, 0x47, 0x38, 0x9d, 0x2a, 0x3d, 0x5b, 0xbd, 0x5c, 0x1a, 0x38, 0xc5, 0xfc, 0x1e, 0x59, 0x96, 0x61, 0xbe, 0x59, 0xfc, 0x1c, 0x3e, 0x59, 0x02, 0xc8, 0x9e, 0x58, 0xc4, 0x1d, 0x06, 0x38, 0x55, 0xaa, 0x02, 0x8a, 0x42, 0xa9, 0x0f, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xa9, 0x9e, 0x58, 0xd6, 0x1a, 0xbe, 0x58, 0x47, 0x1e, 0xbe, 0x58, 0x04, 0xf8, 0x9e, 0x58, 0xda, 0x1a, 0xbe, 0x58, 0xb3, 0xf8, 0x8c, 0xed, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0xb1, 0x00, 0xb5, 0xef, 0xfb, 0xcd, 
-0xc0, 0x2a, 0x9e, 0x59, 0xbc, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x00, 0xbe, 0x58, 0xb1, 0x00, 0x19, 0x48, 0xf6, 0x81, 0xd5, 0xf0, 0x9e, 0x58, 0xe7, 0x00, 0x1a, 0x10, 0x08, 0x88, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x1d, 0x39, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0xb1, 0x00, 0xbe, 0x58, 0xb0, 0x00, 0x9e, 0x58, 0x36, 0x1d, 0x1d, 0x10, 0x04, 0x8a, 0x9e, 0x58, 0x36, 0x1d, 0x1b, 0x10, 0x20, 0x88, 0xe5, 0xac, 0x1e, 0x90, 0x9e, 0x58, 0xe8, 0x00, 0x02, 0x38, 0x00, 0x05, 0x09, 0x8a, 0x00, 0x60, 0x05, 0x68, 0xbe, 0x58, 0xe8, 0x00, 0x18, 0x60, 0x08, 0x68, 0xbe, 0x58, 0xe9, 0x00, 0x08, 0x9e, 0x18, 0x60, 0x08, 0x68, 0xbe, 0x58, 0xe8, 0x00, 0x00, 0x60, 0x05, 0x68, 0xbe, 0x58, 0xe9, 0x00, 0x9e, 0x58, 0xe7, 0x00, 0x02, 0x39, 0x01, 0x00, 0x25, 0xc9, 
-0x00, 0x2b, 0x03, 0x98, 0x19, 0x00, 0xbe, 0x58, 0xe7, 0x00, 0x9e, 0x5d, 0xd5, 0x00, 0x9e, 0x5b, 0xd4, 0x00, 0x9e, 0x5c, 0xd3, 0x00, 0x04, 0xac, 0x07, 0x90, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0xb5, 0xef, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x9e, 0x59, 0xbc, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x00, 0x01, 0x31, 0x06, 0x8a, 0xbe, 0x58, 0xb1, 0x00, 0xa8, 0x5d, 0x6c, 0x5b, 0x8c, 0x5c, 0xea, 0x9f, 0xd5, 0xf0, 0x9e, 0x58, 0xe7, 0x00, 0x1a, 0x10, 0x08, 0x88, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x1d, 0x39, 0x3a, 0x38, 0x3a, 0x38, 0x9e, 0x58, 0xe2, 0x19, 0x00, 0x61, 0x01, 0x30, 0x01, 0x88, 0x05, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0xae, 0x00, 0xd0, 0xaa, 0x3f, 0x9e, 0x9e, 0x58, 0xae, 0x00, 0x9e, 0x59, 0xc0, 0x00, 0x19, 0x48, 0x01, 0x82, 0xe9, 0x6a, 
-0x40, 0x2b, 0x38, 0x9e, 0x52, 0xb1, 0x39, 0xac, 0xfd, 0x93, 0xd0, 0xa8, 0x74, 0xb0, 0x78, 0xaa, 0xf4, 0xb0, 0x00, 0xbc, 0xb1, 0x00, 0x00, 0xa8, 0x00, 0xbd, 0xb1, 0x00, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x4f, 0xb0, 0x50, 0xa8, 0xcf, 0xb0, 0x9e, 0x58, 0xaf, 0x00, 0x9e, 0x59, 0xc5, 0x00, 0x19, 0x48, 0x03, 0x82, 0x74, 0x60, 0x82, 0xb0, 0xf7, 0x9f, 0x00, 0x60, 0xbe, 0x58, 0xaf, 0x00, 0x4f, 0xb0, 0x50, 0xaa, 0xcf, 0xb0, 0x00, 0xbc, 0xb1, 0x00, 0x00, 0xaa, 0x00, 0xbd, 0xb1, 0x00, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0x20, 0x60, 0x07, 0x38, 0x78, 0x2b, 0x1a, 0x38, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0x19, 0x38, 0x02, 0x48, 0xb9, 0xaa, 0x00, 0x9e, 0x3a, 0x38, 0x3a, 0x38, 0x38, 0x27, 
-0x80, 0x2b, 0x52, 0xb2, 0x3a, 0xac, 0xfd, 0x93, 0x78, 0xab, 0x5a, 0x62, 0xe1, 0x6a, 0xac, 0xb2, 0x00, 0x62, 0xff, 0x3f, 0x7a, 0x38, 0xac, 0xb2, 0x78, 0xa9, 0x3a, 0x38, 0x00, 0x62, 0xac, 0xb2, 0xff, 0x3f, 0x0f, 0x59, 0x3a, 0x38, 0x01, 0x62, 0xef, 0x3f, 0x99, 0x2b, 0x05, 0x5d, 0x25, 0x5c, 0xbc, 0x48, 0x02, 0x88, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x62, 0x3a, 0x38, 0x9e, 0x58, 0xbf, 0x00, 0x19, 0x10, 0x0f, 0x61, 0x27, 0x69, 0x9e, 0x5b, 0xe8, 0x00, 0x9e, 0x58, 0xd5, 0x00, 0x9e, 0x5a, 0xd4, 0x00, 0x9e, 0x5c, 0xd3, 0x00, 0xbe, 0x58, 0xed, 0x19, 0xbe, 0x5a, 0xee, 0x19, 0xbe, 0x5c, 0xef, 0x19, 0x00, 0x65, 0x9e, 0x5e, 0xe9, 0x19, 0xa0, 0xac, 0x26, 0x90, 0x9e, 0x5b, 0xe8, 0x00, 0x30, 0x67, 0x0b, 0x6f, 0xa6, 0x40, 0x60, 0x03, 0xe0, 0x07, 0x00, 0xa9, 0x9e, 0x58, 0xed, 0x19, 0x9e, 0x5a, 0xdb, 0x0f, 
-0xc0, 0x2b, 0xee, 0x19, 0x9e, 0x5c, 0xef, 0x19, 0x0c, 0x58, 0x4c, 0x5a, 0x8c, 0x5c, 0xbe, 0x58, 0xed, 0x19, 0xbe, 0x5a, 0xee, 0x19, 0xbe, 0x5c, 0xef, 0x19, 0x00, 0xad, 0x07, 0x92, 0xc2, 0x38, 0x01, 0x00, 0x07, 0x38, 0xd4, 0x2b, 0xe5, 0x59, 0x3d, 0x5b, 0x1a, 0x38, 0x19, 0x05, 0x9e, 0x58, 0xe8, 0x19, 0xb8, 0x48, 0xdb, 0x81, 0x29, 0x9e, 0x9e, 0x5b, 0xe8, 0x00, 0x30, 0x67, 0x0b, 0x6f, 0x65, 0x03, 0xe5, 0x07, 0x00, 0xa9, 0x9e, 0x58, 0xed, 0x19, 0x9e, 0x5a, 0xee, 0x19, 0x9e, 0x5c, 0xef, 0x19, 0x0c, 0x58, 0x4c, 0x5a, 0x8c, 0x5c, 0xbe, 0x58, 0xed, 0x19, 0xbe, 0x5a, 0xee, 0x19, 0xbe, 0x5c, 0xef, 0x19, 0x00, 0xad, 0x0b, 0x92, 0xc2, 0x38, 0x01, 0x00, 0x07, 0x38, 0xfd, 0x2b, 0xe3, 0x59, 0x3b, 0x5b, 0x70, 0x3b, 0xe8, 0x19, 0xf0, 0x3f, 0xe8, 0x19, 0x1a, 0x38, 0x19, 0x05, 0x9e, 0x58, 0xe7, 0x59, 
-0x00, 0x2c, 0xe8, 0x19, 0xb8, 0x48, 0xd8, 0x81, 0x00, 0x9e, 0x3a, 0x38, 0x52, 0xb1, 0x39, 0xac, 0xfd, 0x93, 0xfd, 0xab, 0xf5, 0xab, 0x1a, 0x38, 0x1a, 0x38, 0x02, 0xa9, 0x00, 0xbd, 0xb0, 0x00, 0x1a, 0x38, 0x1a, 0x38, 0x02, 0xab, 0x1a, 0x38, 0x7a, 0xad, 0xfe, 0x93, 0xfd, 0xa9, 0xf5, 0xa9, 0x3a, 0x38, 0x00, 0xbc, 0xaa, 0x00, 0x10, 0x48, 0x00, 0x00, 0x01, 0x8a, 0x42, 0xa9, 0x40, 0x60, 0x21, 0x71, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x0c, 0x60, 0x27, 0x71, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x0a, 0x60, 0x9e, 0x59, 0xe4, 0x19, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x14, 0x60, 0x9e, 0x59, 0xf0, 0x04, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x16, 0x60, 0x9e, 0x59, 0xba, 0x00, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x18, 0x60, 0x03, 0x68, 0x9e, 0x59, 0xbf, 0x00, 0x19, 0x48, 0x01, 0x8a, 0x91, 0xac, 
-0x40, 0x2c, 0x42, 0xa9, 0x16, 0x60, 0x9e, 0x59, 0xbb, 0x00, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x24, 0x60, 0x9e, 0x59, 0xbc, 0x00, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x9e, 0x58, 0xe7, 0x00, 0x10, 0x48, 0x02, 0x00, 0x01, 0x9a, 0x42, 0xa9, 0x9e, 0x58, 0x1b, 0x1f, 0x10, 0x48, 0xaa, 0x55, 0x01, 0x8a, 0x42, 0xa9, 0x9e, 0x58, 0x1c, 0x1f, 0x10, 0x48, 0x55, 0xaa, 0x01, 0x8a, 0x42, 0xa9, 0x9e, 0x58, 0x1b, 0x1f, 0x9e, 0x59, 0x1c, 0x1f, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x1a, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x00, 0x61, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x1b, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x00, 0x61, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x1c, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x00, 0x61, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0xff, 0xad, 0x01, 0x92, 0x42, 0xa9, 0x9e, 0x58, 0xe8, 0x00, 0x06, 0xb1, 
-0x80, 0x2c, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x9e, 0x58, 0x1f, 0x00, 0x10, 0x48, 0x01, 0x00, 0x01, 0x8a, 0x42, 0xa9, 0xed, 0xac, 0x5f, 0x92, 0x2c, 0x60, 0x1b, 0x68, 0x1f, 0x61, 0x1f, 0x69, 0x14, 0x62, 0x19, 0x12, 0x47, 0x38, 0x9a, 0x2c, 0x05, 0x5b, 0x70, 0x48, 0x1f, 0x1f, 0x01, 0x8a, 0x42, 0xa9, 0x1a, 0x38, 0x02, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xd5, 0x1a, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x0a, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xd8, 0x1a, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x05, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xd7, 0x1a, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x0e, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0x58, 0x01, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x0c, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0x57, 0x01, 0x0f, 0x53, 
-0xc0, 0x2c, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x09, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xba, 0x01, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0xaf, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xc7, 0x01, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0xb0, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xc8, 0x01, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0xb7, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xcf, 0x01, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0xb8, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xd1, 0x01, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x1a, 0x38, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0xf3, 0xec, 0x03, 0xed, 0x2d, 0xed, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0x1f, 0x1e, 0xbe, 0x58, 0x20, 0x1e, 0xbe, 0x58, 0x21, 0x1e, 0x22, 0x61, 0x1e, 0x69, 0x23, 0x62, 0x47, 0x38, 0x01, 0x2d, 0x1d, 0x59, 0xec, 0x10, 
-0x00, 0x2d, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0x30, 0x60, 0x0b, 0x68, 0x9e, 0x59, 0xe8, 0x00, 0x9e, 0x5a, 0xe9, 0x00, 0x9e, 0x5f, 0xfe, 0x1b, 0x9e, 0x5e, 0xfd, 0x1b, 0x19, 0x16, 0x00, 0x63, 0x00, 0x64, 0x00, 0x65, 0xc7, 0x38, 0x1d, 0x2d, 0x68, 0x5b, 0x8c, 0x5c, 0xac, 0x5d, 0x25, 0x5e, 0x16, 0x16, 0xdd, 0x5a, 0xd2, 0x3e, 0x19, 0x1e, 0x01, 0x96, 0x7b, 0xa8, 0x19, 0x00, 0x75, 0x3b, 0x1f, 0x1e, 0x95, 0x3c, 0x20, 0x1e, 0xb5, 0x3d, 0x21, 0x1e, 0xbe, 0x5b, 0x1f, 0x1e, 0xbe, 0x5c, 0x20, 0x1e, 0xbe, 0x5d, 0x21, 0x1e, 0x19, 0x17, 0xdf, 0x99, 0x3a, 0x38, 0x9e, 0x5b, 0x1f, 0x1e, 0x9e, 0x5c, 0x20, 0x1e, 0x9e, 0x5a, 0x21, 0x1e, 0x00, 0x65, 0x9e, 0x5f, 0xfd, 0x1b, 0x19, 0x17, 0x7b, 0xac, 0x0e, 0x92, 0xf0, 0x38, 0xe9, 0x00, 0x22, 0x61, 0x1e, 0x69, 0x23, 0x66, 0xc7, 0x38, 0x45, 0x2d, 0xcc, 0x4f, 
-0x40, 0x2d, 0x03, 0x5e, 0x36, 0x06, 0xdd, 0x59, 0x10, 0x38, 0xfd, 0x1b, 0x1a, 0x38, 0x19, 0x05, 0x46, 0x5a, 0x8a, 0x5c, 0x6a, 0x5b, 0x19, 0x17, 0xeb, 0x95, 0xbe, 0x5d, 0x46, 0x1e, 0x3a, 0x38, 0x9e, 0x5b, 0x46, 0x1e, 0x18, 0x13, 0x0d, 0x8a, 0x24, 0x62, 0x22, 0x64, 0x1e, 0x6c, 0x47, 0x38, 0x5f, 0x2d, 0x00, 0x61, 0x83, 0x58, 0x78, 0xac, 0x02, 0x90, 0xff, 0x61, 0xff, 0x69, 0x3c, 0x5b, 0x1d, 0x5c, 0x3a, 0x38, 0x9e, 0x5b, 0xe9, 0x00, 0x22, 0x64, 0x1e, 0x6c, 0x85, 0x5d, 0x24, 0x67, 0x9e, 0x5e, 0xfd, 0x1b, 0x19, 0x16, 0xc7, 0x38, 0x6e, 0x2d, 0x75, 0x16, 0xdd, 0x5b, 0x1a, 0x38, 0x85, 0x5d, 0x19, 0x17, 0xf5, 0x99, 0x3a, 0x38, 0x9e, 0x58, 0x15, 0x1e, 0x00, 0xac, 0x21, 0x90, 0xff, 0x61, 0x07, 0x69, 0x34, 0x38, 0xe3, 0x19, 0x18, 0x10, 0x1b, 0x88, 0x9e, 0x58, 0x1a, 0x1e, 0x02, 0x61, 0x23, 0x6a, 
-0x80, 0x2d, 0x19, 0x48, 0x16, 0x88, 0x9e, 0x58, 0xd6, 0x1a, 0xbe, 0x58, 0x47, 0x1e, 0xbe, 0x58, 0x04, 0xf8, 0x9e, 0x58, 0xda, 0x1a, 0xbe, 0x58, 0xb3, 0xf8, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x1a, 0x1e, 0x00, 0x60, 0xbe, 0x58, 0x1b, 0x1e, 0xbe, 0x58, 0x1c, 0x1e, 0xff, 0x60, 0xbe, 0x58, 0x1d, 0x1e, 0x3a, 0x38, 0x9e, 0x58, 0x1a, 0x1e, 0x1a, 0x10, 0x04, 0x8a, 0xa2, 0xed, 0xd8, 0xed, 0x08, 0xee, 0x2f, 0xee, 0x3a, 0x38, 0x9e, 0x5e, 0xe9, 0x00, 0x00, 0x65, 0xbe, 0x5d, 0x48, 0x1e, 0x9e, 0x5f, 0xfd, 0x1b, 0xbe, 0x5f, 0x49, 0x1e, 0x19, 0x17, 0xe6, 0x00, 0x03, 0x5b, 0x10, 0x38, 0xfd, 0x1b, 0x9e, 0x59, 0xfe, 0x1b, 0x1a, 0x11, 0x27, 0x38, 0xc7, 0x2d, 0x03, 0x5a, 0x10, 0x39, 0xfd, 0x1b, 0x23, 0x5c, 0x43, 0x13, 0x09, 0x9a, 0x44, 0x14, 0x07, 0x9a, 0x72, 0x39, 0x16, 0x1e, 0x03, 0x98, 0x68, 0xe1, 
-0xc0, 0x2d, 0x92, 0x39, 0x16, 0x1e, 0x01, 0x9a, 0x19, 0x05, 0x41, 0x5b, 0x10, 0x38, 0xfd, 0x1b, 0x1a, 0x38, 0x9e, 0x5b, 0x48, 0x1e, 0x7d, 0x48, 0x02, 0x94, 0xbe, 0x5d, 0x48, 0x1e, 0x9e, 0x5b, 0x49, 0x1e, 0x7d, 0x48, 0x02, 0x9a, 0xbe, 0x5d, 0x49, 0x1e, 0x00, 0x65, 0x19, 0x17, 0xd5, 0x95, 0x3a, 0x38, 0x9e, 0x5f, 0x1a, 0x1e, 0x19, 0x07, 0x18, 0x17, 0x01, 0x9a, 0x00, 0x67, 0xbe, 0x5f, 0x1a, 0x1e, 0x9e, 0x58, 0x48, 0x1e, 0x12, 0x39, 0x49, 0x1e, 0x06, 0x62, 0xd6, 0xac, 0x01, 0x90, 0x02, 0x62, 0xbe, 0x5a, 0x17, 0x1e, 0x12, 0x3a, 0x17, 0x1e, 0x08, 0x9a, 0x01, 0x67, 0xbe, 0x5f, 0x1a, 0x1e, 0x9e, 0x5f, 0x1b, 0x1e, 0x19, 0x07, 0xbe, 0x5f, 0x1b, 0x1e, 0x3a, 0x38, 0x00, 0x63, 0x9e, 0x58, 0x48, 0x1e, 0x12, 0x39, 0x49, 0x1e, 0x06, 0x62, 0xd6, 0xac, 0x01, 0x90, 0x02, 0x62, 0xbe, 0x5a, 0x6e, 0x02, 
-0x00, 0x2e, 0x17, 0x1e, 0x12, 0x3a, 0x17, 0x1e, 0x01, 0x9a, 0x01, 0x63, 0xbe, 0x5b, 0x1e, 0x1e, 0x3a, 0x38, 0x9e, 0x58, 0x1a, 0x1e, 0x18, 0x10, 0x1f, 0x8a, 0x9e, 0x58, 0x1b, 0x1e, 0x02, 0x39, 0x05, 0x00, 0x0a, 0x8a, 0x9e, 0x59, 0x48, 0x1e, 0x32, 0x3a, 0x1d, 0x1e, 0x18, 0x98, 0xbe, 0x59, 0x1d, 0x1e, 0xbe, 0x58, 0x1c, 0x1e, 0x13, 0x9e, 0x9e, 0x59, 0x15, 0x1e, 0x09, 0xac, 0x08, 0x92, 0x02, 0x67, 0xbe, 0x5f, 0x1a, 0x1e, 0x9e, 0x5f, 0x1c, 0x1e, 0xbe, 0x5f, 0x1b, 0x1e, 0x07, 0x9e, 0x00, 0x67, 0xbe, 0x5f, 0x1b, 0x1e, 0x03, 0x9e, 0x00, 0x63, 0xbe, 0x5b, 0x1e, 0x1e, 0x3a, 0x38, 0x9e, 0x58, 0x1a, 0x1e, 0x18, 0x10, 0x16, 0x8a, 0x9e, 0x58, 0x1b, 0x1e, 0x9e, 0x59, 0x15, 0x1e, 0x11, 0xac, 0x02, 0x90, 0x08, 0x58, 0x08, 0x58, 0xd6, 0xac, 0x03, 0x90, 0x00, 0x38, 0x8a, 0x2e, 0x02, 0x9e, 0x2a, 0x8c, 
-0x40, 0x2e, 0x00, 0x38, 0x8f, 0x2e, 0x09, 0x58, 0x9e, 0x59, 0xd6, 0x1a, 0x01, 0x00, 0x78, 0xa8, 0xbe, 0x58, 0x47, 0x1e, 0x3a, 0x38, 0x48, 0x62, 0x0e, 0x6a, 0x9e, 0x5b, 0xfd, 0x1b, 0x9e, 0x5c, 0xfd, 0x1b, 0x41, 0x5d, 0x00, 0x61, 0x00, 0x67, 0x9e, 0x5e, 0xfe, 0x1b, 0x19, 0x16, 0xc7, 0x38, 0x5d, 0x2e, 0xa3, 0x58, 0x18, 0x10, 0x02, 0x94, 0x19, 0x07, 0x20, 0x01, 0xa3, 0x05, 0x21, 0x58, 0x00, 0x61, 0x02, 0x58, 0x1c, 0x5f, 0x01, 0x59, 0x32, 0x39, 0x18, 0x1e, 0x0d, 0x9a, 0x41, 0x5d, 0x9e, 0x5e, 0xfe, 0x1b, 0x19, 0x16, 0x08, 0x58, 0xc7, 0x38, 0x72, 0x2e, 0xa3, 0x5e, 0x18, 0x06, 0x02, 0x9a, 0xc0, 0x06, 0xdb, 0x5d, 0xa3, 0x05, 0x19, 0x02, 0x19, 0x14, 0xda, 0x89, 0x3a, 0x38, 0x01, 0x60, 0xbe, 0x58, 0x15, 0x1e, 0x40, 0x60, 0xbe, 0x58, 0x16, 0x1e, 0xff, 0x60, 0x1f, 0x68, 0xbe, 0x58, 0x16, 0x16, 
-0x80, 0x2e, 0x18, 0x1e, 0x80, 0x60, 0xbe, 0x58, 0x19, 0x1e, 0x9e, 0x58, 0xd6, 0x1a, 0xbe, 0x58, 0x47, 0x1e, 0x8c, 0xed, 0x3a, 0x38, 0x1d, 0x00, 0x1d, 0x00, 0x1d, 0x00, 0x1d, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x08, 0x00, 0x18, 0x00, 0x30, 0x00, 0x38, 0x00, 0x3c, 0xab, 0x3a, 0x38, 0xfa, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x01, 0xd6, 0x1a, 0xd7, 0x1a, 0xd8, 0x1a, 0x57, 0x01, 0x5b, 0x01, 0x2d, 0x62, 0x01, 0x6a, 0x26, 0x63, 0x04, 0x6b, 0xeb, 0x64, 0x00, 0x67, 0x10, 0x6f, 0xef, 0x3a, 0xb6, 0x2e, 0x45, 0x5d, 0x65, 0x5e, 0x85, 0x58, 0xbb, 0x5e, 0x3a, 0x38, 0x9e, 0x5e, 0x20, 0x04, 0xc6, 0x5e, 0x7c, 0x62, 0x01, 0x6a, 0x94, 0x63, 0x01, 0x6b, 0x17, 0x64, 0xcd, 0x1d, 
-0xc0, 0x2e, 0x01, 0x6c, 0x01, 0x65, 0x01, 0x6d, 0xef, 0x3a, 0xca, 0x2e, 0x45, 0x58, 0xc0, 0x40, 0x1d, 0x5c, 0x65, 0x58, 0xc0, 0x40, 0x1d, 0x5d, 0x3a, 0x38, 0xef, 0xa8, 0x9e, 0x58, 0x17, 0x04, 0x9e, 0x59, 0x1f, 0x04, 0x01, 0x10, 0x19, 0x48, 0x03, 0x9a, 0xbe, 0x58, 0x18, 0x04, 0x02, 0x9e, 0xbe, 0x59, 0x18, 0x04, 0x9e, 0x58, 0xb5, 0x00, 0x18, 0x10, 0x03, 0x8a, 0x19, 0x10, 0x01, 0x8a, 0x09, 0x9e, 0x9e, 0x58, 0x1d, 0x04, 0x18, 0x10, 0x04, 0x8a, 0x19, 0x10, 0xbe, 0x58, 0x1d, 0x04, 0x01, 0x9e, 0xef, 0xaa, 0x3a, 0x38, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb6, 0xb8, 
-0x00, 0x2f, 0x25, 0x00, 0x25, 0x00, 0x04, 0x00, 0x08, 0x00, 0x30, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x05, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x0a, 0x00, 0x03, 0x00, 0x12, 0x00, 0x0e, 0x00, 0x08, 0x00, 0x08, 0x00, 0x40, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x04, 0x00, 0x01, 0x00, 0x05, 0x00, 0x05, 0x00, 0x13, 0x00, 0x50, 0x00, 0x38, 0x00, 0x18, 0x00, 0x1a, 0x00, 0x24, 0x00, 0x30, 0x00, 0x20, 0x00, 0x24, 0x00, 0x30, 0x00, 0x14, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x55, 0x2a, 
-0x40, 0x2f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x27, 
-0x80, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x10, 0xef, 0x00, 0xbc, 0xb1, 0x00, 0x30, 0xa8, 0x28, 0xa8, 0x20, 0xa8, 0x68, 0xa8, 0x60, 0xaa, 0x00, 0xbd, 0xb1, 0x00, 0x9e, 0x58, 0x01, 0xf8, 0x08, 0xaa, 0xbe, 0x58, 0x01, 0xf8, 0x3e, 0xb0, 0x60, 0xaa, 0xbe, 0xb0, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x1f, 0x60, 0x4e, 0x68, 0x07, 0x38, 0xb0, 0x2f, 0x1a, 0x38, 0x1a, 0x38, 0x1a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0x01, 0x00, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0xb0, 0x00, 0xdb, 0xef, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0xff, 0x60, 0xff, 0x68, 0x62, 0x0c, 
-0xc0, 0x2f, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0xd5, 0xf0, 0xc6, 0xf0, 0x54, 0xf0, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x9e, 0x59, 0xb0, 0x00, 0x19, 0x01, 0xbe, 0x59, 0xb0, 0x00, 0x9e, 0x58, 0xbd, 0x00, 0x38, 0x48, 0xde, 0x81, 0x3a, 0x38, 0x9e, 0x58, 0xb1, 0x00, 0x0c, 0x61, 0x01, 0x40, 0x80, 0x65, 0x57, 0x6d, 0x05, 0x00, 0x3b, 0x64, 0xf8, 0x6c, 0x6f, 0x39, 0xe7, 0x2f, 0x0b, 0x5f, 0xfd, 0x5c, 0xe5, 0xac, 0x2b, 0x90, 0x9e, 0x58, 0xb1, 0x00, 0x9e, 0x59, 0xbb, 0x00, 0x01, 0x40, 0x00, 0x3f, 0x30, 0x0b, 0x9e, 0x5e, 0xd5, 0x1a, 0x19, 0x16, 0xc6, 0x5e, 0x47, 0x64, 0xf8, 0x6c, 0x53, 0x65, 0xf8, 0x6d, 0x6f, 0x39, 0x14, 0x30, 0xe5, 0x58, 0x00, 0x61, 0x1c, 0x5e, 0x01, 0x5a, 0xe5, 0x58, 0xb9, 0x05, 
-0x00, 0x30, 0x00, 0x61, 0x1c, 0x5e, 0x01, 0x5b, 0x1e, 0x59, 0x1e, 0x5f, 0x1e, 0x5e, 0x18, 0x66, 0x46, 0x11, 0x66, 0x17, 0xfe, 0x5f, 0xe1, 0x28, 0x1d, 0x5c, 0x18, 0x66, 0x46, 0x01, 0x66, 0x07, 0xfe, 0x5f, 0xe1, 0x28, 0x1d, 0x5d, 0x3e, 0x5e, 0x3e, 0x5f, 0x3e, 0x59, 0x1a, 0x38, 0x3a, 0x38, 0x94, 0xab, 0x9e, 0x58, 0xb0, 0x00, 0x18, 0x61, 0x01, 0x40, 0x00, 0x3f, 0xb6, 0x5e, 0x9e, 0x5d, 0xba, 0x00, 0x9e, 0x5c, 0xb1, 0x00, 0x92, 0x39, 0xb9, 0x00, 0x1a, 0x8e, 0x00, 0x3f, 0xcf, 0x5e, 0x30, 0x3d, 0xbb, 0x00, 0x26, 0x66, 0x04, 0x6e, 0x48, 0x61, 0x9e, 0x5c, 0xba, 0x00, 0xef, 0x3a, 0x3d, 0x30, 0xeb, 0x58, 0x01, 0x12, 0x08, 0x8a, 0x1e, 0x59, 0x00, 0x61, 0x04, 0x40, 0x05, 0x00, 0x3e, 0x59, 0x10, 0x38, 0xe8, 0x00, 0x02, 0x9e, 0x3e, 0x60, 0x04, 0x68, 0x1d, 0x5e, 0x13, 0x9e, 0x9e, 0x5c, 0xd5, 0x91, 
-0x40, 0x30, 0xb1, 0x00, 0x85, 0x40, 0x10, 0x3d, 0xe8, 0x00, 0x26, 0x66, 0x04, 0x6e, 0x48, 0x61, 0xef, 0x3a, 0x50, 0x30, 0xeb, 0x58, 0x19, 0x48, 0x02, 0x8a, 0xa0, 0x00, 0x02, 0x9e, 0x3e, 0x60, 0x04, 0x68, 0x1d, 0x5e, 0x00, 0x9e, 0x94, 0xa9, 0x3a, 0x38, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x9e, 0x58, 0x00, 0xf8, 0x10, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x17, 0xf0, 0xed, 0xac, 0x27, 0x92, 0x62, 0x61, 0xf8, 0x69, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x21, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x1d, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x19, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x15, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x11, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x0d, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x09, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x7a, 0x23, 
-0x80, 0x30, 0x05, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x01, 0x88, 0x42, 0xa9, 0xe5, 0xac, 0x0c, 0x90, 0x9e, 0x58, 0xe7, 0x00, 0x1a, 0x10, 0x08, 0x88, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x1d, 0x39, 0x00, 0x9e, 0x1a, 0x38, 0x1a, 0x38, 0x9e, 0x5e, 0xb2, 0x00, 0x1e, 0xac, 0xfa, 0x91, 0x00, 0x66, 0xbe, 0x5e, 0xb2, 0x00, 0x3a, 0x38, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xe5, 0xac, 0xf0, 0x91, 0x9e, 0x58, 0xe7, 0x00, 0x1a, 0x10, 0x08, 0x88, 0x9e, 0x5a, 0xe8, 0x00, 0x9e, 0x5b, 0xe9, 0x00, 0x5b, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x1d, 0x39, 0x1a, 0x38, 0x1a, 0x38, 0x9e, 0x5e, 0xb2, 0x00, 0x1e, 0xac, 0xfa, 0x91, 0x00, 0x66, 0xbe, 0x5e, 0xb2, 0x00, 0x3a, 0x38, 0x02, 0x3a, 0x0c, 0x00, 0x06, 0x80, 0x02, 0x3a, 0x24, 0x00, 0x02, 0x82, 0x71, 0xbc, 
-0xc0, 0x30, 0x3c, 0x10, 0x01, 0x9e, 0x78, 0x10, 0x00, 0x3a, 0x62, 0xf8, 0x3a, 0x38, 0x9e, 0x58, 0xb1, 0x00, 0x90, 0x61, 0x5e, 0x69, 0x01, 0x02, 0x49, 0x5a, 0x48, 0x60, 0x58, 0x48, 0x05, 0x8a, 0x78, 0xab, 0x41, 0xa9, 0xe5, 0xf0, 0x78, 0xa9, 0x41, 0xab, 0x3a, 0x38, 0x00, 0x60, 0x1a, 0x61, 0xf8, 0x69, 0x8f, 0x38, 0xdb, 0x30, 0x1d, 0x59, 0x1a, 0x38, 0x3a, 0x38, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x44, 0x39, 0x07, 0x00, 0x20, 0x39, 0xdd, 0x30, 0x29, 0x59, 0x48, 0x5a, 0x48, 0x5a, 0x48, 0x5a, 0x40, 0x3b, 0x1a, 0xf8, 0x63, 0x5c, 0x81, 0x2c, 0x9b, 0x5b, 0x3a, 0x38, 0x9e, 0x5a, 0xe8, 0x00, 0x30, 0x63, 0x0b, 0x6b, 0x9e, 0x5c, 0xbf, 0x00, 0x19, 0x14, 0x87, 0x38, 0xfd, 0x30, 0x65, 0x58, 0x1d, 0x5a, 0x3a, 0x38, 0x00, 0x67, 0x38, 0x9a, 
-0x00, 0x31, 0x50, 0x66, 0x07, 0x6e, 0xc7, 0x2f, 0x0f, 0xa8, 0x07, 0xaa, 0xe0, 0xbd, 0xbc, 0x00, 0x1a, 0x38, 0xbe, 0x5f, 0xfb, 0x04, 0x41, 0xab, 0x3a, 0x38, 0x9e, 0x58, 0x36, 0x1d, 0x1d, 0x10, 0xad, 0x8a, 0x9e, 0x58, 0x36, 0x1d, 0x1b, 0x10, 0xa9, 0x8a, 0x1a, 0x38, 0x28, 0xf8, 0xe5, 0xac, 0x1e, 0x90, 0x9e, 0x58, 0xe8, 0x00, 0x02, 0x38, 0x00, 0x05, 0x09, 0x8a, 0x00, 0x60, 0x05, 0x68, 0xbe, 0x58, 0xe8, 0x00, 0x18, 0x60, 0x08, 0x68, 0xbe, 0x58, 0xe9, 0x00, 0x08, 0x9e, 0x18, 0x60, 0x08, 0x68, 0xbe, 0x58, 0xe8, 0x00, 0x00, 0x60, 0x05, 0x68, 0xbe, 0x58, 0xe9, 0x00, 0x9e, 0x58, 0xe7, 0x00, 0x02, 0x39, 0x01, 0x00, 0x03, 0x98, 0x19, 0x00, 0xbe, 0x58, 0xe7, 0x00, 0xef, 0x61, 0x02, 0x69, 0x48, 0x62, 0x1d, 0x6a, 0x9e, 0x58, 0x5d, 0x1a, 0x19, 0x10, 0x07, 0x38, 0x41, 0x31, 0x25, 0x5b, 0x36, 0xfd, 
-0x40, 0x31, 0x7d, 0x5a, 0x1a, 0x38, 0x8e, 0x61, 0x1b, 0x69, 0x62, 0x62, 0x1e, 0x6a, 0x9e, 0x58, 0x5d, 0x1a, 0x19, 0x10, 0x07, 0x38, 0x4d, 0x31, 0x25, 0x5b, 0x7d, 0x5a, 0x1a, 0x38, 0x09, 0x61, 0x1a, 0x69, 0x9c, 0x62, 0x1e, 0x6a, 0x9e, 0x58, 0x5d, 0x1a, 0x19, 0x10, 0x07, 0x38, 0x59, 0x31, 0x25, 0x5b, 0x7d, 0x5a, 0x1a, 0x38, 0x9e, 0x5a, 0xec, 0x19, 0x9e, 0x59, 0xeb, 0x19, 0x9e, 0x58, 0xea, 0x19, 0xbe, 0x5a, 0x5b, 0x1a, 0xbe, 0x59, 0xaf, 0x1a, 0xbe, 0x58, 0x5a, 0x1a, 0x9e, 0x58, 0xea, 0x1e, 0xbe, 0x58, 0x4c, 0x04, 0x9e, 0x58, 0xeb, 0x1e, 0xbe, 0x58, 0x4d, 0x04, 0x9e, 0x58, 0xec, 0x1e, 0xbe, 0x58, 0x4e, 0x04, 0x9e, 0x58, 0xed, 0x1e, 0xbe, 0x58, 0x4f, 0x04, 0x00, 0x60, 0xbe, 0x58, 0x43, 0x1a, 0x2c, 0xf2, 0x1a, 0x38, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0x61, 0xf8, 
-0x80, 0x31, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x9e, 0x58, 0x00, 0xf8, 0x10, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x9f, 0xf0, 0x1a, 0x38, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x3d, 0xf3, 0x1a, 0x38, 0xf9, 0x60, 0x01, 0x68, 0x03, 0x59, 0x05, 0x62, 0x0f, 0x63, 0x1a, 0x38, 0x3a, 0x48, 0x98, 0x3a, 0x31, 0x33, 0x1a, 0x38, 0x3b, 0x48, 0x18, 0x3a, 0x2a, 0x33, 0x1a, 0x38, 0xf9, 0x60, 0x01, 0x68, 0xfa, 0x61, 0x01, 0x69, 0x00, 0x62, 0x5b, 0x58, 0x5b, 0x59, 0x1a, 0x38, 0xe1, 0xf1, 0x65, 0xf3, 0x9e, 0x58, 0xe7, 0x00, 0x1a, 0x10, 0x08, 0x88, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x1d, 0x39, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0x11, 0x46, 
-0xc0, 0x31, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0xb5, 0x61, 0x02, 0x69, 0x29, 0x62, 0x03, 0x6a, 0x2f, 0x3f, 0xcc, 0x31, 0x23, 0x58, 0x1b, 0x5a, 0x19, 0x01, 0x19, 0x02, 0x02, 0x61, 0x02, 0x69, 0x3d, 0x62, 0x02, 0x6a, 0x0f, 0x3f, 0xd6, 0x31, 0x23, 0x58, 0x1b, 0x5a, 0x19, 0x01, 0x19, 0x02, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x34, 0xf8, 0x82, 0xf3, 0xbe, 0xf3, 0x02, 0xf4, 0x9d, 0xf4, 0x3a, 0x38, 0x02, 0x62, 0x02, 0x6a, 0xb5, 0x64, 0x02, 0x6c, 0xf1, 0x61, 0x31, 0x69, 0x2f, 0x3f, 0xee, 0x31, 0x29, 0x5b, 0x43, 0x03, 0x63, 0x5d, 0xbb, 0x5c, 0x19, 0x01, 0x19, 0x04, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x14, 0x00, 0x01, 0x00, 0x05, 0x00, 0x09, 0x00, 0x0d, 0x00, 0x11, 0x00, 0x15, 0x00, 0x02, 0x00, 0x06, 0x00, 0x0a, 0x00, 0xdb, 0x62, 
-0x00, 0x32, 0x0e, 0x00, 0x12, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x0f, 0x00, 0x18, 0x00, 0x1c, 0x00, 0x20, 0x00, 0x24, 0x00, 0x28, 0x00, 0x2c, 0x00, 0x30, 0x00, 0x34, 0x00, 0x38, 0x00, 0x3c, 0x00, 0x19, 0x00, 0x1d, 0x00, 0x21, 0x00, 0x25, 0x00, 0x29, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x35, 0x00, 0x39, 0x00, 0x3d, 0x00, 0x1a, 0x00, 0x1e, 0x00, 0x22, 0x00, 0x26, 0x00, 0x2a, 0x00, 0x2e, 0x00, 0x32, 0x00, 0x36, 0x00, 0x3a, 0x00, 0x3e, 0x00, 0x1b, 0x00, 0x1f, 0x00, 0x23, 0x00, 0x27, 0x00, 0x2b, 0x00, 0x2f, 0x00, 0x3a, 0x38, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x58, 0x00, 0xac, 0x02, 0x90, 0x77, 0x9e, 0x3a, 0x38, 0x9e, 0x58, 0x1b, 0x1e, 0xd6, 0xac, 0x03, 0x92, 0x00, 0x38, 0x99, 0x2e, 0x02, 0x9e, 0x00, 0x38, 0x94, 0x2e, 0x09, 0x58, 0x9e, 0x59, 0xda, 0x1a, 0x20, 0x01, 0x8f, 0x92, 
-0x40, 0x32, 0xb3, 0x60, 0xf8, 0x68, 0x3b, 0x58, 0x9e, 0x59, 0xdb, 0x1a, 0xb4, 0x60, 0xf8, 0x68, 0x3b, 0x58, 0x9e, 0x59, 0xdc, 0x1a, 0xb9, 0x60, 0xf8, 0x68, 0x3b, 0x58, 0x20, 0x61, 0xb1, 0x60, 0xf8, 0x68, 0x9e, 0x5a, 0xc9, 0x00, 0x18, 0x12, 0x01, 0x8a, 0x20, 0x61, 0x3b, 0x58, 0xaa, 0x60, 0xf8, 0x68, 0x03, 0x59, 0x01, 0xa8, 0x21, 0xa8, 0x29, 0xa8, 0x31, 0xa8, 0x39, 0xa8, 0x41, 0xaa, 0x49, 0xaa, 0x51, 0xaa, 0x59, 0xaa, 0x79, 0xa8, 0x3b, 0x58, 0xab, 0x60, 0xf8, 0x68, 0x03, 0x59, 0x01, 0xa8, 0x09, 0xa8, 0x11, 0xa8, 0x19, 0xa8, 0x21, 0xa8, 0x29, 0xaa, 0x31, 0xaa, 0x39, 0xaa, 0x41, 0xaa, 0x3b, 0x58, 0xe0, 0x61, 0x1a, 0x69, 0x30, 0x39, 0xf9, 0x01, 0xac, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0xe6, 0x61, 0x1a, 0x69, 0x30, 0x39, 0xf9, 0x01, 0xad, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x12, 0x8a, 
-0x80, 0x32, 0x5b, 0x58, 0x20, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0xd4, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0x26, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0xd5, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0x00, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0xd0, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0x06, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0xd1, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0xf9, 0x62, 0x01, 0x6a, 0x43, 0x5a, 0xae, 0x64, 0xf8, 0x6c, 0x5b, 0x5c, 0x1a, 0x38, 0x89, 0x9f, 0x9e, 0x58, 0x1b, 0x1e, 0xd6, 0xac, 0x03, 0x92, 0x00, 0x38, 0x99, 0x2e, 0x02, 0x9e, 0x00, 0x38, 0x94, 0x2e, 0x09, 0x58, 0x9e, 0x59, 0xdd, 0x1a, 0x20, 0x01, 0xb3, 0x60, 0xf8, 0x68, 0x3b, 0x58, 0x9e, 0x59, 0xde, 0x1a, 0xb4, 0x60, 0xf8, 0x68, 0x3b, 0x58, 0x9e, 0x59, 0xdf, 0x1a, 0x65, 0xd9, 
-0xc0, 0x32, 0xb9, 0x60, 0xf8, 0x68, 0x3b, 0x58, 0x20, 0x61, 0xb1, 0x60, 0xf8, 0x68, 0x9e, 0x5a, 0xc9, 0x00, 0x18, 0x12, 0x01, 0x8a, 0x20, 0x61, 0x3b, 0x58, 0xaa, 0x60, 0xf8, 0x68, 0x03, 0x59, 0x01, 0xa8, 0x21, 0xaa, 0x29, 0xaa, 0x31, 0xaa, 0x39, 0xaa, 0x41, 0xa8, 0x49, 0xa8, 0x51, 0xa8, 0x59, 0xa8, 0x79, 0xa8, 0x3b, 0x58, 0xab, 0x60, 0xf8, 0x68, 0x03, 0x59, 0x01, 0xa8, 0x09, 0xaa, 0x11, 0xaa, 0x19, 0xaa, 0x21, 0xaa, 0x29, 0xa8, 0x31, 0xa8, 0x39, 0xa8, 0x41, 0xa8, 0x3b, 0x58, 0xec, 0x61, 0x1a, 0x69, 0x30, 0x39, 0xf9, 0x01, 0x1e, 0x11, 0xac, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0xf6, 0x61, 0x1a, 0x69, 0x30, 0x39, 0xf9, 0x01, 0x1e, 0x11, 0xad, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0x2c, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0x1e, 0x11, 0xd6, 0x60, 0xf8, 0x68, 0xe1, 0xb8, 
-0x00, 0x33, 0x23, 0x5a, 0x5b, 0x58, 0x36, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0x1e, 0x11, 0xd7, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0x0c, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0x1e, 0x11, 0xd2, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0x16, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0x1e, 0x11, 0xd3, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0xf9, 0x62, 0x01, 0x6a, 0x43, 0x5a, 0x06, 0x63, 0x43, 0x12, 0x44, 0x3a, 0xff, 0x00, 0xfe, 0x5a, 0xae, 0x64, 0xf8, 0x6c, 0x5b, 0x5c, 0x1a, 0x38, 0x08, 0x9f, 0xf9, 0x60, 0x01, 0x68, 0x03, 0x59, 0x19, 0x01, 0x3b, 0x58, 0x98, 0x3f, 0x79, 0x31, 0xf9, 0x60, 0x01, 0x68, 0x03, 0x59, 0x19, 0x01, 0x3b, 0x58, 0xfa, 0x61, 0x01, 0x69, 0x23, 0x58, 0x00, 0xa8, 0x1b, 0x59, 0x98, 0x3f, 0x79, 0x31, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x59, 0xbf, 0xf4, 
-0x40, 0x33, 0x01, 0xac, 0x01, 0x90, 0x11, 0x9e, 0xda, 0x65, 0xf8, 0x6d, 0xf9, 0x63, 0x01, 0x6b, 0x63, 0x5b, 0x04, 0x60, 0x03, 0x40, 0x02, 0x63, 0x02, 0x6b, 0x03, 0x04, 0x6f, 0x38, 0x51, 0x33, 0xa5, 0x5e, 0xdd, 0x5c, 0x1a, 0x38, 0xdb, 0x5c, 0x10, 0x9e, 0xde, 0x65, 0xf8, 0x6d, 0xf9, 0x63, 0x01, 0x6b, 0x63, 0x5b, 0x04, 0x60, 0x03, 0x40, 0x02, 0x63, 0x02, 0x6b, 0x03, 0x04, 0x6f, 0x38, 0x62, 0x33, 0xa5, 0x5e, 0xdd, 0x5c, 0x1a, 0x38, 0x00, 0x9e, 0x3a, 0x38, 0xaa, 0x60, 0xf8, 0x68, 0x03, 0x59, 0x21, 0xaa, 0x29, 0xaa, 0x31, 0xaa, 0x39, 0xaa, 0x41, 0xaa, 0x49, 0xaa, 0x51, 0xaa, 0x59, 0xaa, 0x3b, 0x58, 0xab, 0x60, 0xf8, 0x68, 0x03, 0x59, 0x01, 0xaa, 0x09, 0xaa, 0x11, 0xaa, 0x19, 0xaa, 0x21, 0xaa, 0x29, 0xaa, 0x31, 0xaa, 0x39, 0xaa, 0x41, 0xaa, 0xae, 0x60, 0xf8, 0x68, 0x00, 0x61, 0xfc, 0x92, 
-0x80, 0x33, 0x3b, 0x58, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x9e, 0x58, 0x5d, 0x1a, 0x9e, 0x59, 0xc0, 0x1a, 0x09, 0xac, 0x02, 0x90, 0x9e, 0x58, 0x5c, 0x1a, 0x19, 0x10, 0xef, 0x61, 0x02, 0x69, 0x29, 0x62, 0x03, 0x6a, 0xb5, 0x63, 0x02, 0x6b, 0x8e, 0x66, 0x1b, 0x6e, 0x07, 0x38, 0xb4, 0x33, 0x65, 0x5c, 0x45, 0x5d, 0x85, 0x15, 0xbd, 0x5e, 0x1e, 0x59, 0x9e, 0x59, 0xc1, 0x1a, 0xa1, 0x15, 0x3e, 0x59, 0x00, 0x9e, 0x7d, 0xac, 0x01, 0x90, 0x00, 0x65, 0x1e, 0x59, 0x1e, 0x58, 0x1e, 0x5a, 0x00, 0x61, 0x01, 0x62, 0xa2, 0x40, 0x01, 0x5d, 0x3e, 0x5a, 0x3e, 0x58, 0x3e, 0x59, 0xbd, 0x59, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x35, 0x30, 
-0xc0, 0x33, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x9e, 0x58, 0xe8, 0x19, 0x19, 0x10, 0xef, 0x61, 0x02, 0x69, 0xa0, 0xac, 0x02, 0x90, 0x30, 0x39, 0xe9, 0x19, 0x0f, 0x67, 0x27, 0x6f, 0x00, 0x65, 0x0f, 0x64, 0x27, 0x6c, 0xbe, 0x5c, 0x80, 0x1a, 0x00, 0x64, 0x07, 0x38, 0xe6, 0x33, 0x23, 0x5e, 0xfe, 0x48, 0x01, 0x9c, 0xc1, 0x5f, 0xbe, 0x48, 0x06, 0x98, 0xc1, 0x5d, 0x00, 0x60, 0xd8, 0x48, 0x02, 0x8a, 0xbe, 0x5c, 0x80, 0x1a, 0x19, 0x01, 0x19, 0x04, 0xef, 0x61, 0x02, 0x69, 0xa0, 0xac, 0x02, 0x90, 0x30, 0x39, 0xe9, 0x19, 0x9e, 0x5c, 0x80, 0x1a, 0x81, 0x04, 0x83, 0x59, 0x9e, 0x5a, 0xc2, 0x1a, 0x3a, 0x48, 0x04, 0x82, 0x0f, 0x64, 0x27, 0x6c, 0xbe, 0x5c, 0x80, 0x1a, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x9a, 0x5c, 
-0x00, 0x34, 0x3e, 0x58, 0x3a, 0x38, 0xff, 0x60, 0xff, 0x68, 0x01, 0x5d, 0x01, 0x5c, 0x01, 0x5e, 0x9e, 0x59, 0xe8, 0x19, 0x19, 0x11, 0xee, 0x62, 0x02, 0x6a, 0x50, 0x3a, 0xb8, 0x00, 0xa0, 0xac, 0x04, 0x90, 0xee, 0x62, 0x02, 0x6a, 0x50, 0x3a, 0x5c, 0x1a, 0x00, 0x63, 0x27, 0x38, 0x4e, 0x34, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x00, 0xab, 0x43, 0x5f, 0x9e, 0x58, 0xe7, 0x19, 0x00, 0xac, 0x03, 0x92, 0x9e, 0x5e, 0xc3, 0x1a, 0x03, 0x9e, 0x9e, 0x5e, 0xc3, 0x1a, 0xc8, 0x5e, 0xdf, 0x48, 0x1f, 0x9c, 0x43, 0x5f, 0x00, 0x60, 0x78, 0x48, 0x0a, 0x8a, 0x40, 0x3e, 0x01, 0x00, 0xc3, 0x58, 0x1e, 0x59, 0x9e, 0x59, 0xc4, 0x1a, 0x01, 0x00, 0x3e, 0x59, 0x1f, 0x48, 0x11, 0x9c, 0x43, 0x5f, 0x9e, 0x58, 0xe8, 0x19, 0x19, 0x10, 0x78, 0x48, 0x0a, 0x8a, 0x42, 0x3e, 0x01, 0x00, 0xc3, 0x58, 0x1e, 0x59, 0xb5, 0xde, 
-0x40, 0x34, 0x9e, 0x59, 0xc4, 0x1a, 0x01, 0x00, 0x3e, 0x59, 0x1f, 0x48, 0x01, 0x9c, 0x00, 0xa9, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x8a, 0x5c, 0xaa, 0x5d, 0xca, 0x5e, 0x19, 0x12, 0x19, 0x03, 0xbe, 0x5c, 0xea, 0x19, 0xbe, 0x5d, 0xeb, 0x19, 0xbe, 0x5e, 0xec, 0x19, 0x81, 0x58, 0xa1, 0x59, 0xc1, 0x5a, 0x0a, 0x58, 0x2a, 0x59, 0x4a, 0x5a, 0x00, 0xa8, 0xbe, 0x58, 0xed, 0x19, 0xbe, 0x59, 0xee, 0x19, 0xbe, 0x5a, 0xef, 0x19, 0x81, 0x58, 0xa1, 0x59, 0xc1, 0x5a, 0x4c, 0x5a, 0x2c, 0x59, 0x0c, 0x58, 0x7a, 0xa8, 0x12, 0xa8, 0x9e, 0x5b, 0xed, 0x19, 0x03, 0x28, 0x80, 0x24, 0x9e, 0x5b, 0xee, 0x19, 0x23, 0x29, 0xa1, 0x25, 0x9e, 0x5b, 0xef, 0x19, 0x43, 0x2a, 0xc2, 0x26, 0x1e, 0x5e, 0xff, 0x61, 0xff, 0x69, 0xff, 0x62, 0xff, 0x6a, 0xff, 0x63, 0xff, 0x6b, 0x01, 0x66, 0xc4, 0x26, 0x00, 0x67, 0x0b, 0xc9, 
-0x80, 0x34, 0xfe, 0x48, 0x02, 0x88, 0xfc, 0x61, 0xff, 0x69, 0x02, 0x66, 0xc4, 0x26, 0x00, 0x67, 0xfe, 0x48, 0x02, 0x88, 0xf8, 0x62, 0xff, 0x6a, 0x04, 0x66, 0xc4, 0x26, 0x00, 0x67, 0xfe, 0x48, 0x02, 0x88, 0xf1, 0x63, 0xff, 0x6b, 0x22, 0x21, 0x23, 0x21, 0x24, 0x24, 0x3e, 0x5e, 0xbe, 0x5c, 0xea, 0x19, 0xbe, 0x5d, 0xeb, 0x19, 0xbe, 0x5e, 0xec, 0x19, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x00, 0x66, 0x00, 0x67, 0x9e, 0x58, 0x80, 0x1a, 0x0f, 0x61, 0x27, 0x69, 0x19, 0x48, 0x42, 0x8a, 0x9e, 0x5e, 0xea, 0x19, 0x9e, 0x5f, 0xeb, 0x19, 0x9e, 0x5d, 0xec, 0x19, 0x9e, 0x5a, 0xe8, 0x19, 0x00, 0x61, 0x38, 0x48, 0x04, 0x8a, 0x3a, 0x48, 0x2f, 0x8a, 0x19, 0x01, 0xfa, 0x9f, 0xc1, 0x63, 0x34, 0x6b, 0x61, 0x03, 0x69, 0x5b, 0x03, 0xc9, 
-0xc0, 0x34, 0x5e, 0x5b, 0xfe, 0x34, 0x01, 0x35, 0x05, 0x35, 0x09, 0x35, 0x0d, 0x35, 0x11, 0x35, 0x15, 0x35, 0x19, 0x35, 0x1d, 0x35, 0x21, 0x35, 0x25, 0x35, 0x29, 0x35, 0x2d, 0x35, 0x31, 0x35, 0x35, 0x35, 0x39, 0x35, 0x3d, 0x35, 0x41, 0x35, 0x45, 0x35, 0x49, 0x35, 0x4d, 0x35, 0x51, 0x35, 0x55, 0x35, 0x59, 0x35, 0x5d, 0x35, 0x61, 0x35, 0x65, 0x35, 0x69, 0x35, 0x6d, 0x35, 0x71, 0x35, 0x75, 0x35, 0x79, 0x35, 0x7d, 0x35, 0x81, 0x35, 0x85, 0x35, 0x89, 0x35, 0x8d, 0x35, 0x91, 0x35, 0x95, 0x35, 0x99, 0x35, 0xbe, 0x5e, 0xea, 0x19, 0xbe, 0x5f, 0xeb, 0x19, 0xbe, 0x5d, 0xec, 0x19, 0xbe, 0x5e, 0xee, 0x19, 0xbe, 0x5f, 0xed, 0x19, 0xbe, 0x5d, 0xef, 0x19, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x06, 0xaa, 0x0e, 0xaa, 0x14, 0x22, 
-0x00, 0x35, 0xe8, 0x9f, 0x06, 0xaa, 0x0e, 0xaa, 0x16, 0xaa, 0xe4, 0x9f, 0x0e, 0xaa, 0x16, 0xaa, 0x1e, 0xaa, 0xe0, 0x9f, 0x16, 0xaa, 0x1e, 0xaa, 0x26, 0xaa, 0xdc, 0x9f, 0x1e, 0xaa, 0x26, 0xaa, 0x2e, 0xaa, 0xd8, 0x9f, 0x26, 0xaa, 0x2e, 0xaa, 0x36, 0xaa, 0xd4, 0x9f, 0x2e, 0xaa, 0x36, 0xaa, 0x3e, 0xaa, 0xd0, 0x9f, 0x36, 0xaa, 0x3e, 0xaa, 0x46, 0xaa, 0xcc, 0x9f, 0x3e, 0xaa, 0x46, 0xaa, 0x4e, 0xaa, 0xc8, 0x9f, 0x46, 0xaa, 0x4e, 0xaa, 0x56, 0xaa, 0xc4, 0x9f, 0x4e, 0xaa, 0x56, 0xaa, 0x5e, 0xaa, 0xc0, 0x9f, 0x56, 0xaa, 0x5e, 0xaa, 0x66, 0xaa, 0xbc, 0x9f, 0x5e, 0xaa, 0x66, 0xaa, 0x6e, 0xaa, 0xb8, 0x9f, 0x66, 0xaa, 0x6e, 0xaa, 0x76, 0xaa, 0xb4, 0x9f, 0x6e, 0xaa, 0x76, 0xaa, 0x7e, 0xaa, 0xb0, 0x9f, 0x76, 0xaa, 0x7e, 0xaa, 0x07, 0xaa, 0xac, 0x9f, 0x7e, 0xaa, 0x07, 0xaa, 0x0f, 0xaa, 0x03, 0x1e, 
-0x40, 0x35, 0xa8, 0x9f, 0x07, 0xaa, 0x0f, 0xaa, 0x17, 0xaa, 0xa4, 0x9f, 0x0f, 0xaa, 0x17, 0xaa, 0x1f, 0xaa, 0xa0, 0x9f, 0x17, 0xaa, 0x1f, 0xaa, 0x27, 0xaa, 0x9c, 0x9f, 0x1f, 0xaa, 0x27, 0xaa, 0x2f, 0xaa, 0x98, 0x9f, 0x27, 0xaa, 0x2f, 0xaa, 0x37, 0xaa, 0x94, 0x9f, 0x2f, 0xaa, 0x37, 0xaa, 0x3f, 0xaa, 0x90, 0x9f, 0x37, 0xaa, 0x3f, 0xaa, 0x47, 0xaa, 0x8c, 0x9f, 0x3f, 0xaa, 0x47, 0xaa, 0x4f, 0xaa, 0x88, 0x9f, 0x47, 0xaa, 0x4f, 0xaa, 0x57, 0xaa, 0x84, 0x9f, 0x4f, 0xaa, 0x57, 0xaa, 0x5f, 0xaa, 0x80, 0x9f, 0x57, 0xaa, 0x5f, 0xaa, 0x67, 0xaa, 0x7c, 0x9f, 0x5f, 0xaa, 0x67, 0xaa, 0x6f, 0xaa, 0x78, 0x9f, 0x67, 0xaa, 0x6f, 0xaa, 0x77, 0xaa, 0x74, 0x9f, 0x6f, 0xaa, 0x77, 0xaa, 0x7f, 0xaa, 0x70, 0x9f, 0x77, 0xaa, 0x7f, 0xaa, 0x05, 0xaa, 0x6c, 0x9f, 0x7f, 0xaa, 0x05, 0xaa, 0x0d, 0xaa, 0x6a, 0x1a, 
-0x80, 0x35, 0x68, 0x9f, 0x05, 0xaa, 0x0d, 0xaa, 0x15, 0xaa, 0x64, 0x9f, 0x0d, 0xaa, 0x15, 0xaa, 0x1d, 0xaa, 0x60, 0x9f, 0x15, 0xaa, 0x1d, 0xaa, 0x25, 0xaa, 0x5c, 0x9f, 0x25, 0xaa, 0x2d, 0xaa, 0x35, 0xaa, 0x58, 0x9f, 0x2d, 0xaa, 0x35, 0xaa, 0x3d, 0xaa, 0x54, 0x9f, 0x35, 0xaa, 0x3d, 0xaa, 0x45, 0xaa, 0x50, 0x9f, 0x3d, 0xaa, 0x45, 0xaa, 0x4d, 0xaa, 0x4c, 0x9f, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x00, 0x61, 0xff, 0x63, 0xff, 0x6b, 0xbe, 0x5b, 0xed, 0x19, 0xbe, 0x5b, 0xee, 0x19, 0xbe, 0x5b, 0xef, 0x19, 0x9e, 0x5c, 0xe8, 0x19, 0x10, 0x67, 0x9f, 0x48, 0x02, 0x80, 0xe1, 0x5b, 0x01, 0x9e, 0x81, 0x5b, 0x9e, 0x5d, 0xea, 0x19, 0x01, 0x67, 0x00, 0x64, 0x3c, 0x48, 0x04, 0x8a, 0x0f, 0x64, 0x3c, 0x48, 0x08, 0x80, 0x17, 0x9e, 0x78, 0x6f, 
-0xc0, 0x35, 0xff, 0x62, 0xff, 0x6a, 0x05, 0xac, 0x1e, 0x92, 0x02, 0xaa, 0x0a, 0xaa, 0x1b, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0xe5, 0x26, 0x00, 0x64, 0x9e, 0x48, 0x15, 0x88, 0xe8, 0x5f, 0x47, 0x34, 0xe6, 0x5f, 0x47, 0x36, 0xc4, 0x26, 0xe6, 0x5f, 0x47, 0x34, 0xc4, 0x22, 0xe8, 0x5f, 0x0b, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0x7d, 0xac, 0x07, 0x92, 0x7a, 0xaa, 0x72, 0xaa, 0x9e, 0x5c, 0xee, 0x19, 0x04, 0xaa, 0xbe, 0x5c, 0xee, 0x19, 0x19, 0x01, 0xe6, 0x5f, 0x9e, 0x5c, 0xed, 0x19, 0x82, 0x24, 0xbe, 0x5c, 0xed, 0x19, 0x79, 0x48, 0x01, 0x8a, 0xcd, 0x9f, 0x9e, 0x5c, 0xe8, 0x19, 0x10, 0x67, 0x9f, 0x48, 0x80, 0x8a, 0x7f, 0x80, 0x00, 0x61, 0xe1, 0x5b, 0x87, 0x16, 0xdf, 0x48, 0x01, 0x94, 0xc1, 0x5b, 0x9e, 0x5d, 0xeb, 0x19, 0x01, 0x67, 0x00, 0x64, 0x3c, 0x48, 0x04, 0x8a, 0x0f, 0x64, 0x3c, 0x48, 0x9c, 0x3f, 
-0x00, 0x36, 0x0d, 0x80, 0x1c, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0x05, 0xac, 0x23, 0x92, 0x9e, 0x5c, 0xed, 0x19, 0x7c, 0xaa, 0xbe, 0x5c, 0xed, 0x19, 0x02, 0xaa, 0x0a, 0xaa, 0x1b, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0xe5, 0x26, 0x00, 0x64, 0x9e, 0x48, 0x15, 0x88, 0xe8, 0x5f, 0x47, 0x34, 0xe6, 0x5f, 0x47, 0x36, 0xc4, 0x26, 0xe6, 0x5f, 0x47, 0x34, 0xc4, 0x22, 0xe8, 0x5f, 0x0b, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0x7d, 0xac, 0x07, 0x92, 0x7a, 0xaa, 0x72, 0xaa, 0x9e, 0x5c, 0xef, 0x19, 0x04, 0xaa, 0xbe, 0x5c, 0xef, 0x19, 0x19, 0x01, 0xe6, 0x5f, 0x9e, 0x5c, 0xee, 0x19, 0x82, 0x24, 0xbe, 0x5c, 0xee, 0x19, 0x79, 0x48, 0x01, 0x8a, 0xc8, 0x9f, 0x00, 0x61, 0x9e, 0x5c, 0xe8, 0x19, 0x20, 0x67, 0x9f, 0x48, 0x38, 0x8a, 0x37, 0x80, 0x87, 0x13, 0x9e, 0x5d, 0xec, 0x19, 0x01, 0x67, 0x00, 0x64, 0x3c, 0x48, 0x6b, 0x27, 
-0x40, 0x36, 0x04, 0x8a, 0x0f, 0x64, 0x3c, 0x48, 0x0d, 0x80, 0x1c, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0x05, 0xac, 0x1e, 0x92, 0x02, 0xaa, 0x0a, 0xaa, 0x9e, 0x5c, 0xee, 0x19, 0x7c, 0xaa, 0xbe, 0x5c, 0xee, 0x19, 0x16, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0xe5, 0x26, 0x00, 0x64, 0x9e, 0x48, 0x10, 0x88, 0xe8, 0x5f, 0x47, 0x34, 0xe6, 0x5f, 0x47, 0x36, 0xc4, 0x26, 0xe6, 0x5f, 0x47, 0x34, 0xc4, 0x22, 0xe8, 0x5f, 0x06, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0x7d, 0xac, 0x02, 0x92, 0x7a, 0xaa, 0x72, 0xaa, 0x19, 0x01, 0xe6, 0x5f, 0x9e, 0x5c, 0xef, 0x19, 0x82, 0x24, 0xbe, 0x5c, 0xef, 0x19, 0x79, 0x48, 0x01, 0x8a, 0xcd, 0x9f, 0x9e, 0x59, 0xed, 0x19, 0xbe, 0x59, 0xea, 0x19, 0x9e, 0x5a, 0xee, 0x19, 0xbe, 0x5a, 0xeb, 0x19, 0x9e, 0x5b, 0xef, 0x19, 0xbe, 0x5b, 0xec, 0x19, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x03, 0x6d, 
-0x80, 0x36, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0xef, 0x63, 0x02, 0x6b, 0x65, 0x58, 0x63, 0x59, 0x19, 0x48, 0x03, 0x82, 0x21, 0x5a, 0x01, 0x67, 0x02, 0x9e, 0x01, 0x5a, 0x00, 0x67, 0xef, 0x63, 0x02, 0x6b, 0x1a, 0x03, 0x02, 0x64, 0x9e, 0x5d, 0xb8, 0x00, 0x1b, 0x15, 0xa7, 0x38, 0xaa, 0x36, 0x63, 0x59, 0x41, 0x5a, 0x3a, 0x48, 0x01, 0x82, 0x02, 0x9e, 0x81, 0x5f, 0x21, 0x5a, 0x19, 0x03, 0x19, 0x04, 0xbe, 0x5f, 0xea, 0x1e, 0xbe, 0x5a, 0xeb, 0x1e, 0x1e, 0x59, 0x9e, 0x59, 0xc5, 0x1a, 0x41, 0x16, 0x3e, 0x59, 0x17, 0x80, 0xef, 0x64, 0x02, 0x6c, 0x09, 0x63, 0x1a, 0x6b, 0x9e, 0x5d, 0xb8, 0x00, 0x19, 0x15, 0xa7, 0x38, 0xca, 0x36, 0x41, 0x58, 0x9e, 0x5f, 0x99, 0x5e, 
-0xc0, 0x36, 0xc8, 0x1a, 0x00, 0x61, 0x9e, 0x5d, 0xc7, 0x1a, 0x07, 0x40, 0x1c, 0x5d, 0x85, 0x5e, 0xc0, 0x15, 0x01, 0x82, 0x00, 0x65, 0xbd, 0x5b, 0x0a, 0x9e, 0x09, 0x63, 0x1a, 0x6b, 0x9e, 0x5d, 0x5d, 0x1a, 0x19, 0x15, 0xa7, 0x38, 0xd4, 0x36, 0x00, 0x65, 0xbd, 0x5b, 0x00, 0x9e, 0xef, 0x63, 0x02, 0x6b, 0x70, 0x3b, 0xb8, 0x00, 0x65, 0x58, 0x63, 0x59, 0x19, 0x48, 0x03, 0x82, 0x21, 0x5a, 0x01, 0x67, 0x02, 0x9e, 0x01, 0x5a, 0x00, 0x67, 0xef, 0x63, 0x02, 0x6b, 0x1a, 0x03, 0x70, 0x3b, 0xb8, 0x00, 0x02, 0x64, 0x9e, 0x5d, 0xb9, 0x00, 0x1b, 0x15, 0xa7, 0x38, 0xf6, 0x36, 0x63, 0x59, 0x41, 0x5a, 0x3a, 0x48, 0x01, 0x82, 0x02, 0x9e, 0x81, 0x5f, 0x21, 0x5a, 0x19, 0x03, 0x19, 0x04, 0xbe, 0x5f, 0xec, 0x1e, 0xbe, 0x5a, 0xed, 0x1e, 0x1e, 0x59, 0x9e, 0x59, 0xc6, 0x1a, 0x41, 0x16, 0x3e, 0x59, 0xfd, 0x54, 
-0x00, 0x37, 0x1b, 0x80, 0x09, 0x63, 0x1a, 0x6b, 0x70, 0x3b, 0xb8, 0x00, 0xef, 0x64, 0x02, 0x6c, 0x90, 0x3c, 0xb8, 0x00, 0x9e, 0x5d, 0xb9, 0x00, 0x19, 0x15, 0xa7, 0x38, 0x1a, 0x37, 0x41, 0x58, 0x9e, 0x5f, 0xc9, 0x1a, 0x00, 0x61, 0x9e, 0x5d, 0xc7, 0x1a, 0x07, 0x40, 0x1c, 0x5d, 0x85, 0x5e, 0xc0, 0x15, 0x01, 0x82, 0x00, 0x65, 0xbd, 0x5b, 0x09, 0x9e, 0x09, 0x63, 0x1a, 0x6b, 0x9e, 0x5d, 0x5d, 0x1a, 0x19, 0x15, 0xa7, 0x38, 0x24, 0x37, 0x00, 0x65, 0xbd, 0x5b, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0xbf, 0x60, 0xf8, 0x68, 0xde, 0x58, 0x00, 0x00, 0xc0, 0x60, 0xf8, 0x68, 0xde, 0x58, 0x00, 0x00, 0xc1, 0x60, 0xf8, 0x68, 0xde, 0x58, 0x00, 0x00, 0xc2, 0x60, 0xf8, 0x68, 0xde, 0x58, 0x00, 0x00, 0xc7, 0x60, 0xf8, 0x68, 0x0e, 0x47, 
-0x40, 0x37, 0xde, 0x58, 0xff, 0xff, 0xc8, 0x60, 0xf8, 0x68, 0xde, 0x58, 0xff, 0xff, 0xc9, 0x60, 0xf8, 0x68, 0xde, 0x58, 0xff, 0xff, 0xca, 0x60, 0xf8, 0x68, 0xde, 0x58, 0xff, 0xff, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x9e, 0x58, 0xfc, 0x01, 0x78, 0xac, 0x0a, 0x90, 0x09, 0x60, 0xbe, 0x58, 0xa5, 0x1c, 0xbe, 0x58, 0xfd, 0x1c, 0xde, 0xfc, 0x90, 0xff, 0xb9, 0xff, 0xb9, 0xfe, 0x26, 0x9e, 0x9e, 0x58, 0xfc, 0x01, 0x19, 0x00, 0xff, 0x61, 0x0f, 0x69, 0x19, 0x48, 0x02, 0x82, 0xbe, 0x58, 0xfc, 0x01, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x00, 0x64, 0x9e, 0x5d, 0xfc, 0x1c, 0x9d, 0x48, 0x02, 0x88, 0x0f, 0x61, 0x01, 0x9e, 0x01, 0x61, 0x9e, 0x5e, 0xfc, 0x1c, 0x9e, 0x48, 0x01, 0x8a, 0x19, 0x16, 0xbe, 0x5e, 0xfc, 0x1c, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x19, 0x48, 0x09, 0x9c, 0xf6, 0x03, 
-0x80, 0x37, 0x9e, 0x58, 0xfc, 0x01, 0x78, 0xa8, 0xbe, 0x58, 0xfc, 0x01, 0x03, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0xfc, 0x01, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x00, 0x60, 0xb0, 0x78, 0xb1, 0x78, 0x0f, 0x78, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0x44, 0xa9, 0xdb, 0xef, 0xb1, 0x70, 0x9e, 0x59, 0xbc, 0x00, 0x19, 0x48, 0x6e, 0x8a, 0x9e, 0x58, 0xb1, 0x00, 0xd5, 0xf0, 0xc6, 0xf0, 0x00, 0x60, 0xb0, 0x78, 0x0f, 0x78, 0xb0, 0x72, 0x9e, 0x59, 0xbb, 0x00, 0x0f, 0x77, 0x27, 0x01, 0x59, 0x48, 0x5c, 0x8a, 0x44, 0x3b, 0x0f, 0x00, 0x60, 0x3b, 0x8d, 0x37, 0x69, 0x5b, 0xbf, 0x2a, 
-0xc0, 0x37, 0x42, 0x38, 0x0f, 0x00, 0x01, 0x9a, 0x06, 0x9e, 0xbe, 0x5b, 0x0f, 0xf8, 0x00, 0x63, 0xbe, 0x5b, 0x10, 0xf8, 0x05, 0x9e, 0xbe, 0x5b, 0x10, 0xf8, 0x00, 0x63, 0xbe, 0x5b, 0x0f, 0xf8, 0x9e, 0x58, 0xb1, 0x00, 0x9e, 0x59, 0xb0, 0x00, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x0c, 0xb7, 0x17, 0xaa, 0x8c, 0xb7, 0x9e, 0x59, 0x00, 0xf8, 0x11, 0xa8, 0xbe, 0x59, 0x00, 0xf8, 0x00, 0x9e, 0x1a, 0x38, 0x9e, 0x59, 0x00, 0xf8, 0x19, 0xac, 0xfb, 0x91, 0x0c, 0xb7, 0x17, 0xa8, 0x8c, 0xb7, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0xbe, 0x58, 0xb1, 0x00, 0xbe, 0x59, 0xb0, 0x00, 0x9e, 0x5c, 0xe8, 0x00, 0x40, 0x3d, 0x62, 0xf8, 0xa3, 0x5d, 0xe9, 0xc8, 
-0x00, 0x38, 0x00, 0x61, 0x9e, 0x5b, 0xbb, 0x00, 0xb1, 0x70, 0x03, 0x40, 0x04, 0x04, 0x40, 0x3e, 0xb6, 0x5e, 0xc9, 0x5e, 0xd0, 0x48, 0x48, 0x00, 0x03, 0x8a, 0x86, 0x04, 0xbb, 0x5c, 0x03, 0x9e, 0x0f, 0x77, 0x19, 0x07, 0x0f, 0x7f, 0xb0, 0x72, 0x19, 0x02, 0xb0, 0x7a, 0x19, 0x07, 0x9d, 0x9f, 0xb1, 0x70, 0x19, 0x00, 0xb1, 0x78, 0x8b, 0x9f, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x10, 0xf8, 0x44, 0xab, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x3a, 0x38, 0x40, 0x60, 0x57, 0x68, 0xe0, 0x63, 0x1a, 0x6b, 0x40, 0x61, 0x19, 0x11, 0x27, 0x38, 0x32, 0x38, 0x0b, 0x5a, 0x5d, 0x5b, 0x1a, 0x38, 0x3a, 0x38, 0x06, 0x71, 0x51, 0xac, 0x1c, 0x92, 0x09, 0xac, 0x36, 0x92, 0x01, 0xac, 0x34, 0x92, 0x0a, 0x60, 0xbe, 0x58, 0xc1, 0x1a, 0x03, 0x60, 0xbe, 0x58, 0x40, 0x7b, 
-0x40, 0x38, 0xc2, 0x1a, 0x12, 0x60, 0xbe, 0x58, 0xc3, 0x1a, 0x0e, 0x60, 0xbe, 0x58, 0xc4, 0x1a, 0x9e, 0x58, 0xd6, 0x1a, 0xbe, 0x58, 0x47, 0x1e, 0xbe, 0x58, 0x04, 0xf8, 0x01, 0x60, 0x23, 0x78, 0x00, 0x60, 0xbe, 0x58, 0x1b, 0x1e, 0x36, 0x9e, 0x48, 0x60, 0xbe, 0x58, 0xc1, 0x1a, 0x48, 0x60, 0xbe, 0x58, 0xc2, 0x1a, 0x60, 0x60, 0xbe, 0x58, 0xc3, 0x1a, 0x60, 0x60, 0xbe, 0x58, 0xc4, 0x1a, 0x50, 0x60, 0x02, 0x68, 0x1c, 0x78, 0x02, 0x60, 0x23, 0x78, 0x9e, 0x59, 0x47, 0x1e, 0x9e, 0x58, 0xd6, 0x1a, 0x19, 0x48, 0x1f, 0x88, 0x9e, 0x59, 0xd6, 0x1a, 0xbe, 0x59, 0x04, 0xf8, 0x1a, 0x9e, 0x20, 0x60, 0xbe, 0x58, 0xc1, 0x1a, 0x20, 0x60, 0xbe, 0x58, 0xc2, 0x1a, 0x30, 0x60, 0xbe, 0x58, 0xc3, 0x1a, 0x30, 0x60, 0xbe, 0x58, 0xc4, 0x1a, 0x80, 0x60, 0x1c, 0x78, 0x01, 0x60, 0x23, 0x78, 0x9e, 0x59, 0x59, 0x63, 
-0x80, 0x38, 0x47, 0x1e, 0x9e, 0x58, 0xd6, 0x1a, 0x19, 0x48, 0x04, 0x88, 0x9e, 0x59, 0xd6, 0x1a, 0xbe, 0x59, 0x04, 0xf8, 0x3a, 0x38, 0xaa, 0x66, 0x15, 0x6e, 0xc3, 0x5d, 0xa4, 0x3d, 0xff, 0x0f, 0xbb, 0x5e, 0x9e, 0x5f, 0x4b, 0x1a, 0xe2, 0x38, 0x01, 0x00, 0x0b, 0x9a, 0xe2, 0x3e, 0x01, 0x00, 0xc7, 0x38, 0x9f, 0x38, 0xe0, 0x3e, 0xaa, 0x15, 0xc3, 0x5d, 0xa4, 0x3d, 0xff, 0x00, 0xbb, 0x5e, 0x19, 0x17, 0x1a, 0x38, 0x3a, 0x38, 0x3c, 0x60, 0xbe, 0x58, 0xce, 0x04, 0x0f, 0x60, 0xbe, 0x58, 0xd0, 0x04, 0x06, 0x60, 0xbe, 0x58, 0xd1, 0x04, 0x04, 0x60, 0xbe, 0x58, 0xd2, 0x04, 0x07, 0x60, 0xbe, 0x58, 0xd3, 0x04, 0x01, 0x60, 0xbe, 0x58, 0xd4, 0x04, 0x14, 0x60, 0xbe, 0x58, 0xd5, 0x04, 0x05, 0x60, 0xbe, 0x58, 0xd6, 0x04, 0x3c, 0x60, 0xbe, 0x58, 0xcd, 0x04, 0x00, 0x60, 0xbe, 0x58, 0xc7, 0x04, 0x25, 0xb4, 
-0xc0, 0x38, 0x3a, 0x38, 0x8a, 0xf8, 0xce, 0x60, 0x04, 0x68, 0xd0, 0x61, 0x04, 0x69, 0xd1, 0x62, 0x04, 0x6a, 0xd2, 0x63, 0x04, 0x6b, 0xd3, 0x64, 0x04, 0x6c, 0xd4, 0x65, 0x04, 0x6d, 0xd5, 0x66, 0x04, 0x6e, 0xd6, 0x67, 0x04, 0x6f, 0x9e, 0x58, 0xe2, 0x19, 0x1a, 0x10, 0x04, 0x8a, 0x9e, 0x58, 0xea, 0x04, 0x1a, 0x10, 0x61, 0x88, 0x9e, 0x58, 0x58, 0x1a, 0x18, 0x10, 0x5d, 0x9a, 0x1a, 0x10, 0x5b, 0x98, 0x9e, 0x58, 0x58, 0x1a, 0x1a, 0x10, 0x19, 0x8a, 0x9e, 0x58, 0xcd, 0x04, 0x9e, 0x59, 0xce, 0x04, 0x30, 0x39, 0xd5, 0x04, 0x01, 0x10, 0x05, 0x98, 0x9e, 0x58, 0xc7, 0x04, 0x12, 0x38, 0xd4, 0x04, 0x3e, 0x96, 0xc7, 0x60, 0x04, 0x68, 0x9e, 0x59, 0xd4, 0x04, 0x3b, 0x58, 0xae, 0xfc, 0x46, 0xf9, 0x00, 0xfc, 0x8a, 0xf8, 0x3e, 0x58, 0x98, 0x3f, 0x41, 0x0c, 0x9e, 0x58, 0x72, 0x19, 0x73, 0x61, 0xdc, 0x71, 
-0x00, 0x39, 0x19, 0x69, 0x23, 0x59, 0x20, 0x10, 0x04, 0x58, 0x9e, 0x59, 0x86, 0x19, 0x87, 0x62, 0x19, 0x6a, 0x43, 0x5a, 0x41, 0x11, 0x04, 0x59, 0x01, 0x00, 0xbe, 0x58, 0xee, 0x04, 0x9e, 0x59, 0xd3, 0x04, 0x01, 0x11, 0x22, 0x98, 0xc7, 0x60, 0x04, 0x68, 0x03, 0x59, 0x19, 0x01, 0x32, 0x3a, 0xd4, 0x04, 0x02, 0x94, 0x3b, 0x58, 0x2a, 0x9e, 0x9e, 0x59, 0xd4, 0x04, 0x3b, 0x58, 0xcd, 0x60, 0x04, 0x68, 0x5a, 0x61, 0x03, 0x5a, 0x19, 0x02, 0x41, 0x13, 0x02, 0x94, 0x3b, 0x58, 0x1e, 0x9e, 0x9e, 0x59, 0xce, 0x04, 0x26, 0x59, 0x41, 0x13, 0x01, 0x9a, 0x21, 0x5a, 0x5b, 0x58, 0x16, 0x9e, 0x0b, 0x9e, 0x3c, 0x60, 0xbe, 0x58, 0xcd, 0x04, 0x11, 0x9e, 0xc7, 0x60, 0x04, 0x68, 0x03, 0x59, 0x19, 0x11, 0x22, 0x3a, 0x00, 0x00, 0x09, 0x98, 0xc7, 0x60, 0x04, 0x68, 0xde, 0x58, 0x00, 0x00, 0x9e, 0x58, 0x73, 0xc2, 
-0x40, 0x39, 0xce, 0x04, 0xbe, 0x58, 0xcd, 0x04, 0x01, 0x9e, 0x3b, 0x58, 0x3a, 0x38, 0xc8, 0x67, 0x04, 0x6f, 0x00, 0x65, 0xbd, 0x5f, 0xbb, 0x5f, 0xbe, 0x5d, 0xcb, 0x04, 0xbe, 0x5d, 0xcc, 0x04, 0x9e, 0x5f, 0x4b, 0x1a, 0x18, 0x17, 0xa5, 0x8a, 0xe2, 0x38, 0x14, 0x00, 0x1a, 0x00, 0xa5, 0x94, 0x00, 0x67, 0xe0, 0x38, 0xaa, 0x15, 0x03, 0x58, 0x12, 0x38, 0x23, 0x00, 0x93, 0x96, 0xe0, 0x3e, 0xde, 0x15, 0xc3, 0x5e, 0xe0, 0x3d, 0xf2, 0x15, 0xa3, 0x5d, 0xa6, 0x16, 0x19, 0x06, 0xe0, 0x3d, 0x1a, 0x16, 0xa3, 0x5d, 0xe0, 0x3c, 0x06, 0x16, 0x83, 0x5c, 0x85, 0x15, 0x19, 0x05, 0xe0, 0x3c, 0xaa, 0x15, 0x83, 0x5c, 0xc5, 0x00, 0xbe, 0x58, 0xec, 0x04, 0x12, 0x38, 0xd1, 0x04, 0x7a, 0x96, 0xc5, 0x00, 0x12, 0x38, 0xd0, 0x04, 0x76, 0x98, 0xe0, 0x38, 0xaa, 0x15, 0x7c, 0xa8, 0x9b, 0x58, 0x06, 0xac, 0x0c, 0x00, 
-0x80, 0x39, 0x3b, 0x92, 0x05, 0xac, 0x20, 0x92, 0xe0, 0x3c, 0xde, 0x15, 0x83, 0x5c, 0xc8, 0x5a, 0x19, 0x12, 0x82, 0x04, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0xa8, 0x59, 0x19, 0x11, 0x61, 0x03, 0x80, 0x38, 0x48, 0x0e, 0x9e, 0x5a, 0xb8, 0x00, 0x43, 0x48, 0x03, 0x59, 0x01, 0xa8, 0x3d, 0x58, 0x03, 0x59, 0x01, 0xa8, 0x3f, 0x58, 0x10, 0x38, 0xb8, 0x00, 0x03, 0x59, 0x01, 0xa8, 0x3d, 0x58, 0x03, 0x59, 0x01, 0xa8, 0x3b, 0x58, 0x4c, 0x9e, 0xe0, 0x3c, 0xde, 0x15, 0x83, 0x5c, 0xc8, 0x5a, 0x19, 0x12, 0x82, 0x04, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0xa2, 0x39, 0x01, 0x00, 0x28, 0x59, 0x61, 0x03, 0x80, 0x38, 0x48, 0x0e, 0x9e, 0x5a, 0xb8, 0x00, 0x43, 0x48, 0x03, 0x59, 0x01, 0xa8, 0x3d, 0x58, 0x03, 0x59, 0x01, 0xa8, 0x3b, 0x58, 0x33, 0x9e, 0x05, 0xac, 0x1b, 0x92, 0xe0, 0x3c, 0xde, 0x15, 0x9b, 0x9c, 
-0xc0, 0x39, 0x83, 0x5c, 0xc2, 0x3a, 0x01, 0x00, 0x48, 0x5a, 0x82, 0x04, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0xa8, 0x59, 0x19, 0x11, 0x61, 0x03, 0x80, 0x38, 0x48, 0x0e, 0x9e, 0x5a, 0xb8, 0x00, 0x43, 0x48, 0x03, 0x59, 0x01, 0xa8, 0x3b, 0x58, 0x10, 0x38, 0xb8, 0x00, 0x03, 0x59, 0x01, 0xa8, 0x3b, 0x58, 0x16, 0x9e, 0xe0, 0x3c, 0xde, 0x15, 0x83, 0x5c, 0xc2, 0x3a, 0x01, 0x00, 0x48, 0x5a, 0x82, 0x04, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0xa2, 0x39, 0x01, 0x00, 0x28, 0x59, 0x61, 0x03, 0x80, 0x38, 0x48, 0x0e, 0x9e, 0x5a, 0xb8, 0x00, 0x43, 0x48, 0x03, 0x59, 0x01, 0xa8, 0x3b, 0x58, 0x3e, 0xfa, 0xfd, 0xf9, 0x19, 0x07, 0xf2, 0x38, 0x4b, 0x1a, 0x63, 0x97, 0xa0, 0xfa, 0xcb, 0xfa, 0x04, 0x9e, 0x9e, 0x58, 0xce, 0x04, 0xbe, 0x58, 0xcd, 0x04, 0x3a, 0x38, 0x9e, 0x5e, 0xca, 0x04, 0xc2, 0x38, 0xc1, 0x97, 
-0x00, 0x3a, 0x01, 0x00, 0x23, 0x9a, 0x00, 0x66, 0xc0, 0x3d, 0x01, 0x00, 0xc0, 0x3c, 0xe0, 0x04, 0x83, 0x5c, 0xa0, 0x3b, 0xe0, 0x04, 0x74, 0x10, 0x04, 0x58, 0xc0, 0x3c, 0xe5, 0x04, 0x83, 0x5c, 0xa0, 0x3b, 0xe5, 0x04, 0x74, 0x11, 0x04, 0x59, 0x01, 0x00, 0x19, 0x10, 0x0f, 0x9a, 0x01, 0x61, 0xbe, 0x59, 0xcb, 0x04, 0xc8, 0x60, 0x04, 0x68, 0xe2, 0x39, 0x10, 0x00, 0x01, 0x96, 0x19, 0x00, 0xe0, 0x39, 0x85, 0x29, 0x29, 0x59, 0x11, 0x29, 0x3b, 0x58, 0x0b, 0x9e, 0x9e, 0x58, 0xcd, 0x04, 0x9e, 0x59, 0xce, 0x04, 0x30, 0x39, 0xd5, 0x04, 0x01, 0x10, 0xec, 0x99, 0x02, 0x60, 0xbe, 0x58, 0xcc, 0x04, 0x19, 0x05, 0xb2, 0x38, 0xca, 0x04, 0xd1, 0x97, 0x19, 0x06, 0xd2, 0x38, 0xca, 0x04, 0x19, 0x00, 0xca, 0x97, 0x03, 0x9e, 0x02, 0x60, 0xbe, 0x58, 0xcc, 0x04, 0x3a, 0x38, 0xe0, 0x3b, 0x1a, 0x16, 0xab, 0xe3, 
-0x40, 0x3a, 0x63, 0x5e, 0xe0, 0x3b, 0xde, 0x15, 0x63, 0x5d, 0x00, 0x60, 0xbe, 0x58, 0xca, 0x04, 0x1e, 0x5d, 0x6d, 0xfa, 0x9c, 0xfc, 0x59, 0x48, 0x15, 0x96, 0x5b, 0x48, 0x13, 0x96, 0x88, 0xfc, 0x59, 0x48, 0x10, 0x96, 0x5b, 0x48, 0x0e, 0x96, 0x9e, 0x58, 0xca, 0x04, 0x02, 0x3c, 0x05, 0x00, 0x09, 0x94, 0x00, 0x3c, 0xe0, 0x04, 0xbb, 0x5c, 0x00, 0x3c, 0xe5, 0x04, 0xdb, 0x5c, 0x19, 0x00, 0xbe, 0x58, 0xca, 0x04, 0x19, 0x05, 0xe0, 0x3b, 0xf2, 0x15, 0xbb, 0x49, 0xe2, 0x9b, 0x3e, 0x5d, 0x19, 0x06, 0xe0, 0x3b, 0x06, 0x16, 0xdb, 0x49, 0xdb, 0x9b, 0x3a, 0x38, 0x1e, 0x5e, 0xc0, 0x3c, 0x01, 0x00, 0xa0, 0x3b, 0x01, 0x00, 0x19, 0x16, 0x19, 0x15, 0xd7, 0x62, 0x04, 0x6a, 0x1e, 0x5d, 0xc2, 0x39, 0x00, 0x00, 0x1b, 0x96, 0xd2, 0x39, 0xb9, 0x00, 0x18, 0x94, 0xa0, 0x38, 0x48, 0x0e, 0x9e, 0x59, 0x83, 0x10, 
-0x80, 0x3a, 0xb8, 0x00, 0x26, 0x48, 0xa2, 0x39, 0x00, 0x00, 0x09, 0x96, 0xb2, 0x39, 0xb8, 0x00, 0x06, 0x94, 0x03, 0x59, 0x01, 0xac, 0x01, 0x90, 0x28, 0x59, 0x3d, 0x5a, 0x02, 0x9e, 0x00, 0x61, 0x3d, 0x5a, 0x19, 0x00, 0x19, 0x05, 0xbb, 0x48, 0xee, 0x9b, 0x04, 0x9e, 0x00, 0x61, 0x3d, 0x5a, 0x3d, 0x5a, 0x3d, 0x5a, 0x3e, 0x5d, 0x19, 0x06, 0xdc, 0x48, 0xd9, 0x9b, 0x19, 0x05, 0x3e, 0x5e, 0x3a, 0x38, 0x9e, 0x5f, 0xcb, 0x04, 0xf0, 0x3f, 0xcc, 0x04, 0xe2, 0x38, 0x01, 0x00, 0x17, 0x8a, 0xe2, 0x38, 0x02, 0x00, 0x08, 0x8a, 0xe2, 0x38, 0x03, 0x00, 0x1b, 0x8a, 0x9e, 0x58, 0xce, 0x04, 0xbe, 0x58, 0xcd, 0x04, 0x16, 0x9e, 0x9e, 0x58, 0xcd, 0x04, 0x12, 0x38, 0xd6, 0x04, 0x9e, 0x59, 0xce, 0x04, 0xb8, 0x11, 0x01, 0x11, 0x0d, 0x96, 0xbe, 0x58, 0xcd, 0x04, 0x0a, 0x9e, 0x9e, 0x58, 0xcd, 0x04, 0xf2, 0xf3, 
-0xc0, 0x3a, 0x19, 0x00, 0x9e, 0x59, 0xce, 0x04, 0xb8, 0x01, 0x01, 0x11, 0x02, 0x98, 0xbe, 0x58, 0xcd, 0x04, 0x9e, 0x58, 0xcd, 0x04, 0x3a, 0x38, 0x9e, 0x5f, 0x4b, 0x1a, 0xbe, 0x5f, 0x82, 0x1a, 0x00, 0x67, 0x9e, 0x5e, 0xcd, 0x04, 0x9e, 0x5a, 0xce, 0x04, 0x9e, 0x59, 0xd5, 0x04, 0x41, 0x10, 0xc0, 0x10, 0x19, 0x96, 0x41, 0x00, 0xc0, 0x10, 0x23, 0x9a, 0xe0, 0x38, 0xaa, 0x15, 0x03, 0x58, 0x04, 0x38, 0xff, 0x00, 0xbe, 0x58, 0xed, 0x04, 0x12, 0x39, 0xd2, 0x04, 0x19, 0x9a, 0xc8, 0x60, 0x04, 0x68, 0xe2, 0x39, 0x10, 0x00, 0x01, 0x96, 0x19, 0x00, 0xe0, 0x39, 0x85, 0x29, 0x29, 0x59, 0x11, 0x29, 0x3b, 0x58, 0x18, 0x9e, 0xc8, 0x60, 0x04, 0x68, 0xe2, 0x39, 0x10, 0x00, 0x01, 0x96, 0x19, 0x00, 0xe0, 0x39, 0x85, 0x29, 0x29, 0x59, 0x20, 0x59, 0x11, 0x21, 0x3b, 0x58, 0xe2, 0x9e, 0xc8, 0x60, 0x5f, 0xc7, 
-0x00, 0x3b, 0x04, 0x68, 0xe2, 0x39, 0x10, 0x00, 0x01, 0x96, 0x19, 0x00, 0xe0, 0x39, 0x85, 0x29, 0x29, 0x59, 0x11, 0x21, 0xd7, 0x8a, 0xe0, 0x3e, 0xde, 0x15, 0xc3, 0x5e, 0xe0, 0x3d, 0xf2, 0x15, 0xb6, 0x16, 0x19, 0x06, 0xe0, 0x3d, 0x1a, 0x16, 0xa3, 0x5d, 0xe0, 0x3c, 0x06, 0x16, 0x95, 0x15, 0x19, 0x05, 0xdd, 0x48, 0x04, 0x98, 0x62, 0x96, 0x06, 0xac, 0x32, 0x92, 0x02, 0x9e, 0x06, 0xac, 0x2f, 0x92, 0xe0, 0x3c, 0xde, 0x15, 0x83, 0x5c, 0xc8, 0x5e, 0x19, 0x16, 0xc4, 0x06, 0xe0, 0x38, 0xf2, 0x15, 0x03, 0x59, 0x1e, 0x59, 0xdb, 0x58, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0xa3, 0x05, 0x19, 0x15, 0xe7, 0xfb, 0xe0, 0x38, 0xaa, 0x15, 0x5b, 0x58, 0xc0, 0x3c, 0x01, 0x00, 0x3e, 0x5e, 0x9e, 0x58, 0x4b, 0x1a, 0x00, 0x39, 0xde, 0x15, 0x9b, 0x59, 0x00, 0x39, 0xf2, 0x15, 0xdb, 0x59, 0x00, 0x39, 0x52, 0x38, 
-0x40, 0x3b, 0x06, 0x16, 0xbb, 0x59, 0x00, 0x39, 0x1a, 0x16, 0x7b, 0x59, 0xe7, 0xfb, 0x9e, 0x5c, 0x4b, 0x1a, 0x80, 0x39, 0xaa, 0x15, 0xe1, 0x58, 0xfe, 0x58, 0x68, 0xa8, 0x48, 0x29, 0x8c, 0x9e, 0xe0, 0x3c, 0xde, 0x15, 0x83, 0x5c, 0x19, 0x16, 0xc8, 0x5e, 0xc4, 0x06, 0xe0, 0x38, 0xf2, 0x15, 0x03, 0x59, 0x1e, 0x59, 0xdb, 0x58, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0xa3, 0x05, 0x19, 0x15, 0xe7, 0xfb, 0xe0, 0x38, 0xaa, 0x15, 0x5b, 0x58, 0xc1, 0x5c, 0x3e, 0x5e, 0x9e, 0x58, 0x4b, 0x1a, 0x00, 0x39, 0xde, 0x15, 0x9b, 0x59, 0x00, 0x39, 0xf2, 0x15, 0xdb, 0x59, 0x00, 0x39, 0x06, 0x16, 0xbb, 0x59, 0x00, 0x39, 0x1a, 0x16, 0x7b, 0x59, 0xe7, 0xfb, 0x9e, 0x5c, 0x4b, 0x1a, 0x80, 0x39, 0xaa, 0x15, 0xe1, 0x58, 0xfe, 0x58, 0x68, 0xa8, 0x48, 0x29, 0x5e, 0x9e, 0x05, 0xac, 0x2f, 0x92, 0xe0, 0x3c, 0xc3, 0x56, 
-0x80, 0x3b, 0xde, 0x15, 0x83, 0x5c, 0x86, 0x06, 0x19, 0x16, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0xa8, 0x5d, 0x19, 0x15, 0xa3, 0x05, 0xe0, 0x38, 0x06, 0x16, 0x03, 0x59, 0x1e, 0x59, 0xbb, 0x58, 0xe7, 0xfb, 0xe0, 0x38, 0xaa, 0x15, 0x5b, 0x58, 0xa0, 0x3b, 0x01, 0x00, 0x3e, 0x5d, 0x9e, 0x58, 0x4b, 0x1a, 0x00, 0x39, 0xde, 0x15, 0x9b, 0x59, 0x00, 0x39, 0xf2, 0x15, 0xdb, 0x59, 0x00, 0x39, 0x06, 0x16, 0xbb, 0x59, 0x00, 0x39, 0x1a, 0x16, 0x7b, 0x59, 0xe7, 0xfb, 0x9e, 0x5c, 0x4b, 0x1a, 0x80, 0x39, 0xaa, 0x15, 0xe1, 0x58, 0xfe, 0x58, 0x70, 0xa8, 0x48, 0x29, 0x2d, 0x9e, 0xe0, 0x3c, 0xde, 0x15, 0x83, 0x5c, 0x86, 0x06, 0x19, 0x16, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0x19, 0x15, 0xa8, 0x5d, 0xa3, 0x05, 0xe0, 0x38, 0x06, 0x16, 0x03, 0x59, 0x1e, 0x59, 0xbb, 0x58, 0xe7, 0xfb, 0xe0, 0x38, 0x1b, 0xff, 
-0xc0, 0x3b, 0xaa, 0x15, 0x5b, 0x58, 0xa1, 0x5b, 0x3e, 0x5d, 0x9e, 0x58, 0x4b, 0x1a, 0x00, 0x39, 0xde, 0x15, 0x9b, 0x59, 0x00, 0x39, 0xf2, 0x15, 0xdb, 0x59, 0x00, 0x39, 0x06, 0x16, 0xbb, 0x59, 0x00, 0x39, 0x1a, 0x16, 0x7b, 0x59, 0xe7, 0xfb, 0x9e, 0x5c, 0x4b, 0x1a, 0x80, 0x39, 0xaa, 0x15, 0xe1, 0x58, 0xfe, 0x58, 0x70, 0xa8, 0x48, 0x29, 0x19, 0x04, 0xbe, 0x5c, 0x4b, 0x1a, 0x82, 0x38, 0x14, 0x00, 0x05, 0x94, 0x19, 0x07, 0xf2, 0x38, 0x82, 0x1a, 0x98, 0x3d, 0xd0, 0x3a, 0x3a, 0x38, 0x1e, 0x5e, 0x1e, 0x5b, 0x00, 0x62, 0xc4, 0x16, 0x80, 0x38, 0x48, 0x0e, 0x9e, 0x59, 0xb8, 0x00, 0x23, 0x48, 0xc7, 0x38, 0xf9, 0x3b, 0x05, 0x59, 0x01, 0xac, 0x01, 0x90, 0x28, 0x59, 0x32, 0x39, 0x1d, 0x00, 0x00, 0x9a, 0x19, 0x02, 0x19, 0x03, 0x7d, 0x48, 0xee, 0x9b, 0x3e, 0x5b, 0x3e, 0x5e, 0x3a, 0x38, 0x78, 0x3d, 
-0x00, 0x3c, 0x00, 0x60, 0xbe, 0x58, 0xe2, 0x19, 0x9e, 0x5f, 0x4b, 0x1a, 0x18, 0x17, 0x5f, 0x9a, 0x00, 0x67, 0xe0, 0x3e, 0xaa, 0x15, 0xc3, 0x5e, 0xc4, 0x3e, 0xff, 0x00, 0xd2, 0x38, 0x23, 0x00, 0x52, 0x96, 0xff, 0x62, 0xe0, 0x3e, 0x1a, 0x16, 0xd2, 0x26, 0xe0, 0x3d, 0xde, 0x15, 0xb2, 0x25, 0xe0, 0x3c, 0x06, 0x16, 0x92, 0x24, 0xe0, 0x3b, 0xf2, 0x15, 0x72, 0x23, 0x1e, 0x5f, 0xd4, 0xd0, 0x1e, 0x5d, 0x9e, 0x5a, 0xb8, 0x00, 0xa0, 0x38, 0x48, 0x0e, 0x46, 0x48, 0x03, 0x5a, 0x42, 0x38, 0x01, 0x00, 0x2b, 0x9a, 0x50, 0x67, 0x1a, 0x6f, 0xe5, 0x58, 0xe3, 0x59, 0x45, 0x48, 0x3f, 0x5f, 0x1b, 0x5f, 0x52, 0x67, 0x1a, 0x6f, 0xe5, 0x58, 0xe3, 0x59, 0x46, 0x48, 0x3f, 0x5f, 0x1b, 0x5f, 0x50, 0x3f, 0x54, 0x1a, 0xbe, 0x5f, 0x54, 0x1a, 0x7f, 0xac, 0x17, 0x90, 0xe8, 0x5f, 0xbe, 0x5f, 0x54, 0x1a, 0x3e, 0x56, 
-0x40, 0x3c, 0x9e, 0x58, 0x50, 0x1a, 0x9e, 0x59, 0x51, 0x1a, 0x28, 0x59, 0x0c, 0x58, 0xbe, 0x59, 0x51, 0x1a, 0xbe, 0x58, 0x50, 0x1a, 0x9e, 0x58, 0x52, 0x1a, 0x9e, 0x59, 0x53, 0x1a, 0x28, 0x59, 0x0c, 0x58, 0xbe, 0x59, 0x53, 0x1a, 0xbe, 0x58, 0x52, 0x1a, 0x19, 0x05, 0xbb, 0x48, 0xc9, 0x9b, 0x3e, 0x5d, 0x19, 0x06, 0xdc, 0x48, 0xc4, 0x9b, 0x3e, 0x5f, 0x67, 0xfc, 0x9e, 0x58, 0xe2, 0x19, 0x12, 0x38, 0x27, 0x00, 0x04, 0x94, 0x19, 0x07, 0xf2, 0x38, 0x4b, 0x1a, 0xa2, 0x97, 0x3a, 0x38, 0x9e, 0x58, 0x54, 0x1a, 0xbe, 0x58, 0x55, 0x1a, 0x00, 0x60, 0xbe, 0x58, 0x56, 0x1a, 0x9e, 0x5d, 0xe2, 0x19, 0x51, 0x63, 0x1a, 0x6b, 0x4c, 0xd0, 0xa0, 0x3b, 0xb2, 0x19, 0x1b, 0x5b, 0x53, 0x63, 0x1a, 0x6b, 0x4c, 0xd0, 0xa0, 0x3b, 0xbe, 0x19, 0x1b, 0x5b, 0xa0, 0x3b, 0xca, 0x19, 0xde, 0x5b, 0xff, 0xff, 0x02, 0xb1, 
-0x80, 0x3c, 0xa0, 0x3b, 0xd6, 0x19, 0xde, 0x5b, 0xff, 0x7f, 0x19, 0x05, 0xbe, 0x5d, 0xe2, 0x19, 0x3a, 0x38, 0xd7, 0x64, 0x04, 0x6c, 0x00, 0x63, 0x4f, 0x38, 0x8e, 0x3c, 0x93, 0x03, 0x1b, 0x04, 0x38, 0x14, 0x00, 0x62, 0x4f, 0x38, 0x94, 0x3c, 0x92, 0x02, 0x1b, 0x04, 0x38, 0x14, 0x00, 0x61, 0x4f, 0x38, 0x9a, 0x3c, 0x91, 0x01, 0x1b, 0x04, 0x3a, 0x38, 0xd7, 0x64, 0x04, 0x6c, 0x00, 0x63, 0x4f, 0x38, 0xa2, 0x3c, 0x93, 0x03, 0x19, 0x04, 0x00, 0x62, 0x4f, 0x38, 0xa7, 0x3c, 0x92, 0x02, 0x19, 0x04, 0x00, 0x61, 0x4f, 0x38, 0xac, 0x3c, 0x91, 0x01, 0x19, 0x04, 0x3a, 0x38, 0x48, 0x60, 0x0e, 0x68, 0x9e, 0x5f, 0xbf, 0x00, 0x19, 0x17, 0xe7, 0x38, 0xb7, 0x3c, 0x03, 0x59, 0x01, 0xaa, 0x3d, 0x58, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0xdd, 0x00, 0xbe, 0x58, 0xe3, 0x00, 0xbe, 0x58, 0xe2, 0x00, 0xb4, 0x44, 
-0xc0, 0x3c, 0xbe, 0x58, 0xe5, 0x00, 0xbe, 0x58, 0x16, 0x1f, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0xe3, 0x00, 0xbe, 0x58, 0xe2, 0x00, 0xbe, 0x58, 0xe5, 0x00, 0xbe, 0x58, 0x1e, 0x1d, 0xbe, 0x58, 0x16, 0x1f, 0x4d, 0xfe, 0xbe, 0x58, 0xdc, 0x00, 0xbe, 0x58, 0xe6, 0x00, 0x00, 0x60, 0x79, 0xfe, 0xbe, 0x58, 0x45, 0x01, 0x00, 0x60, 0x98, 0xfe, 0xbe, 0x58, 0x46, 0x01, 0x3a, 0x38, 0x9e, 0x5f, 0xe2, 0x00, 0x27, 0xaa, 0xbe, 0x5f, 0xe2, 0x00, 0x1f, 0xac, 0x0e, 0x92, 0x9e, 0x5f, 0xe5, 0x00, 0x19, 0x07, 0xbe, 0x5f, 0xe5, 0x00, 0xb8, 0x66, 0x0b, 0x6e, 0xfe, 0x48, 0x05, 0x9c, 0x9e, 0x5f, 0xe2, 0x00, 0x1f, 0xa8, 0xbe, 0x5f, 0xe2, 0x00, 0x9e, 0x5f, 0xdf, 0x00, 0x19, 0x07, 0xbe, 0x5f, 0xdf, 0x00, 0x9e, 0x5e, 0xe1, 0x00, 0xdf, 0x48, 0x98, 0x38, 0x4b, 0x3e, 0x00, 0x67, 0xbe, 0x5f, 0xdf, 0x00, 0xab, 0x3f, 
-0x00, 0x3d, 0x4d, 0xfe, 0xbe, 0x58, 0xdb, 0x00, 0x9e, 0x59, 0xdc, 0x00, 0x19, 0x48, 0x2c, 0x82, 0x20, 0x10, 0x1e, 0x61, 0x38, 0x48, 0x20, 0x82, 0x9e, 0x5f, 0xe2, 0x00, 0x47, 0xa8, 0xbe, 0x5f, 0xe2, 0x00, 0x9e, 0x5a, 0x1e, 0x1d, 0x19, 0x02, 0xbe, 0x5a, 0x1e, 0x1d, 0x03, 0x63, 0x5b, 0x48, 0x1b, 0x96, 0x00, 0x62, 0xbe, 0x5a, 0x1e, 0x1d, 0x9e, 0x5f, 0xe2, 0x00, 0x47, 0xaa, 0xbe, 0x5f, 0xe2, 0x00, 0x9e, 0x58, 0xdb, 0x00, 0x9e, 0x59, 0xdc, 0x00, 0x20, 0x11, 0xbe, 0x58, 0xdc, 0x00, 0x10, 0x60, 0x19, 0x48, 0xd4, 0x82, 0xec, 0x9e, 0x00, 0x62, 0xbe, 0x5a, 0x1e, 0x1d, 0x9e, 0x5f, 0xe2, 0x00, 0x47, 0xaa, 0xbe, 0x5f, 0xe2, 0x00, 0x9e, 0x5f, 0xea, 0x04, 0x18, 0x17, 0x06, 0x8a, 0x00, 0x67, 0xbe, 0x5f, 0xdf, 0x00, 0xbe, 0x5f, 0xe3, 0x00, 0x09, 0x9e, 0x9e, 0x5f, 0xe2, 0x19, 0x18, 0x17, 0x6d, 0x61, 
-0x40, 0x3d, 0x0b, 0x8a, 0x00, 0x67, 0xbe, 0x5f, 0xdf, 0x00, 0xbe, 0x5f, 0xe3, 0x00, 0x9e, 0x58, 0xe6, 0x00, 0xbe, 0x58, 0xdc, 0x00, 0x98, 0x3f, 0x4b, 0x3e, 0x9e, 0x58, 0xe3, 0x00, 0x05, 0x61, 0x19, 0x48, 0x50, 0x96, 0x9e, 0x5f, 0xe2, 0x00, 0x2f, 0xaa, 0xbe, 0x5f, 0xe2, 0x00, 0x9e, 0x5a, 0xe8, 0x00, 0x30, 0x63, 0x0b, 0x6b, 0x00, 0x64, 0x00, 0x65, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x77, 0x3d, 0x65, 0x58, 0x45, 0x59, 0x01, 0x10, 0x05, 0x80, 0x0f, 0x67, 0x1f, 0x48, 0x0f, 0x80, 0x19, 0x04, 0x0d, 0x9e, 0x02, 0x58, 0x40, 0x67, 0x1f, 0x48, 0x05, 0x9c, 0x9e, 0x5f, 0xe2, 0x00, 0x2f, 0xa8, 0xbe, 0x5f, 0xe2, 0x00, 0x1e, 0x67, 0x1f, 0x48, 0x01, 0x80, 0x19, 0x05, 0x1a, 0x38, 0xa4, 0x02, 0x18, 0x12, 0x01, 0x88, 0x01, 0x62, 0x00, 0x61, 0x64, 0x60, 0xa0, 0x40, 0x1c, 0x5a, 0x8f, 0xec, 
-0x80, 0x3d, 0xbe, 0x58, 0xe4, 0x00, 0x63, 0x62, 0x9e, 0x5d, 0xe2, 0x00, 0x2d, 0xac, 0x1a, 0x92, 0x9e, 0x5d, 0xe2, 0x00, 0x1d, 0xac, 0x04, 0x92, 0x46, 0x62, 0x58, 0x48, 0x89, 0x9c, 0x02, 0x9e, 0x58, 0x48, 0x6d, 0x9c, 0x9e, 0x58, 0x08, 0x1d, 0x19, 0x10, 0x0c, 0x8a, 0x9e, 0x58, 0x45, 0x04, 0x02, 0x38, 0x90, 0x01, 0x07, 0x98, 0x62, 0xfe, 0x7f, 0x00, 0xbe, 0x58, 0xdc, 0x00, 0x00, 0x67, 0xbe, 0x5f, 0xe3, 0x00, 0x9e, 0x58, 0xe8, 0x00, 0x5e, 0x00, 0x30, 0x61, 0x0b, 0x69, 0x5e, 0x01, 0x00, 0x66, 0x00, 0x64, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0x5e, 0x17, 0x5e, 0x17, 0xe7, 0x38, 0xfa, 0x3d, 0x00, 0x63, 0x7c, 0x48, 0x3e, 0x8a, 0x9e, 0x5b, 0xb8, 0x00, 0x19, 0x13, 0x7c, 0x48, 0x39, 0x8a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x02, 0x3f, 0x16, 0x00, 0x19, 0x17, 0x8e, 0x07, 
-0xc0, 0x3d, 0xe3, 0x5a, 0x22, 0x3f, 0x16, 0x00, 0x19, 0x17, 0xe3, 0x5f, 0x47, 0x13, 0x00, 0x3f, 0x16, 0x00, 0x19, 0x07, 0xe3, 0x5a, 0x20, 0x3f, 0x16, 0x00, 0x19, 0x07, 0xe3, 0x5f, 0x47, 0x14, 0x00, 0x3f, 0x16, 0x00, 0x19, 0x17, 0xe3, 0x5a, 0x20, 0x3f, 0x16, 0x00, 0x19, 0x17, 0xe3, 0x5f, 0x47, 0x15, 0x02, 0x3f, 0x16, 0x00, 0x19, 0x07, 0xe3, 0x5a, 0x22, 0x3f, 0x16, 0x00, 0x19, 0x07, 0xe3, 0x5f, 0x47, 0x16, 0x64, 0x02, 0x45, 0x12, 0x46, 0x12, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x7a, 0xac, 0x01, 0x90, 0x42, 0x5a, 0x9e, 0x5b, 0xe0, 0x00, 0x5b, 0x48, 0x01, 0x9c, 0x19, 0x06, 0x1a, 0x38, 0x19, 0x00, 0x19, 0x01, 0x19, 0x04, 0x9e, 0x5b, 0xb8, 0x00, 0x7c, 0x48, 0x01, 0x88, 0x00, 0x64, 0x1a, 0x38, 0x18, 0x16, 0x01, 0x8a, 0x47, 0x9e, 0x9e, 0x5d, 0xe8, 0x00, 0xd0, 0x11, 
-0x00, 0x3e, 0x08, 0x62, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x0f, 0x3e, 0xa5, 0x58, 0x00, 0x61, 0x19, 0x12, 0x46, 0x49, 0x19, 0x02, 0x1c, 0x5a, 0x1d, 0x5e, 0x1a, 0x38, 0x9e, 0x5a, 0xe2, 0x00, 0x22, 0xa8, 0x2a, 0xaa, 0xbe, 0x5a, 0xe2, 0x00, 0x2a, 0x9e, 0x9e, 0x59, 0x16, 0x1f, 0x19, 0x48, 0x02, 0x96, 0xbe, 0x58, 0x16, 0x1f, 0xb5, 0x61, 0x02, 0x69, 0x29, 0x62, 0x03, 0x6a, 0x2f, 0x3f, 0x26, 0x3e, 0x23, 0x58, 0x1b, 0x5a, 0x19, 0x01, 0x19, 0x02, 0x79, 0xfe, 0xbe, 0x58, 0x45, 0x01, 0x98, 0xfe, 0xbe, 0x58, 0x46, 0x01, 0x9e, 0x5d, 0xe8, 0x00, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x38, 0x3e, 0xa5, 0x58, 0x1d, 0x5e, 0x1a, 0x38, 0x9e, 0x5a, 0xe2, 0x00, 0x02, 0xaa, 0x22, 0xa8, 0x2a, 0xaa, 0xbe, 0x5a, 0xe2, 0x00, 0xee, 0x1e, 
-0x40, 0x3e, 0x00, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0xe3, 0x00, 0x05, 0x9e, 0x9e, 0x58, 0xe3, 0x00, 0x19, 0x00, 0xbe, 0x58, 0xe3, 0x00, 0x62, 0xfe, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x62, 0xff, 0x63, 0xff, 0x6b, 0x9e, 0x5e, 0xe8, 0x00, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x5f, 0x3e, 0xc5, 0x58, 0x1a, 0x48, 0x04, 0x82, 0x1b, 0x48, 0x03, 0x82, 0x01, 0x5b, 0x01, 0x9e, 0x01, 0x5a, 0x1a, 0x38, 0x43, 0x10, 0x3a, 0x38, 0x00, 0x62, 0xff, 0x63, 0xff, 0x6b, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x74, 0x3e, 0xc5, 0x58, 0x1a, 0x48, 0x04, 0x82, 0x1b, 0x48, 0x03, 0x82, 0x01, 0x5b, 0x01, 0x9e, 0x01, 0x5a, 0x1a, 0x38, 0x43, 0x10, 0xbe, 0x58, 0xe6, 0x00, 0x3a, 0x38, 0x1e, 0x59, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x00, 0x62, 0xff, 0x63, 0xc6, 0x3b, 
-0x80, 0x3e, 0xff, 0x6b, 0xb5, 0x66, 0x02, 0x6e, 0x9e, 0x5f, 0xb8, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x90, 0x3e, 0xc5, 0x58, 0x1a, 0x48, 0x04, 0x82, 0x1b, 0x48, 0x03, 0x82, 0x01, 0x5b, 0x01, 0x9e, 0x01, 0x5a, 0x1a, 0x38, 0x43, 0x10, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x59, 0x3a, 0x38, 0x1e, 0x59, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x00, 0x62, 0xff, 0x63, 0xff, 0x6b, 0xb5, 0x66, 0x02, 0x6e, 0xd0, 0x3e, 0xb8, 0x00, 0x9e, 0x5f, 0xb9, 0x00, 0x19, 0x17, 0xe7, 0x38, 0xb1, 0x3e, 0xc5, 0x58, 0x1a, 0x48, 0x04, 0x82, 0x1b, 0x48, 0x03, 0x82, 0x01, 0x5b, 0x01, 0x9e, 0x01, 0x5a, 0x1a, 0x38, 0x43, 0x10, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x59, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x6b, 0x12, 
-0xc0, 0x3e, 0x1e, 0x5f, 0x9e, 0x58, 0xe2, 0x00, 0x08, 0xaa, 0x10, 0xaa, 0x38, 0xaa, 0xbe, 0x58, 0xe2, 0x00, 0x00, 0x61, 0xbe, 0x59, 0x18, 0x1f, 0x79, 0xfe, 0xbe, 0x58, 0x47, 0x01, 0x9e, 0x58, 0x47, 0x01, 0x9e, 0x5a, 0x45, 0x01, 0x02, 0x13, 0x03, 0x8c, 0x62, 0x5b, 0xbe, 0x5b, 0x18, 0x1f, 0x9e, 0x5c, 0x18, 0x1f, 0x80, 0x61, 0x99, 0x48, 0x6d, 0x94, 0x20, 0x61, 0x79, 0x48, 0x27, 0x82, 0x9e, 0x58, 0xea, 0x04, 0x18, 0x10, 0x7b, 0x88, 0x9e, 0x58, 0x08, 0x1d, 0x19, 0x10, 0x77, 0x8a, 0x9e, 0x5f, 0x58, 0x1a, 0x18, 0x17, 0x73, 0x88, 0xb5, 0x65, 0x02, 0x6d, 0x08, 0x62, 0x29, 0x66, 0x03, 0x6e, 0x9e, 0x5f, 0xb8, 0x00, 0x19, 0x17, 0xe7, 0x38, 0xfc, 0x3e, 0xa5, 0x58, 0x00, 0x61, 0x19, 0x12, 0x46, 0x49, 0x19, 0x02, 0x1c, 0x5a, 0x1d, 0x5e, 0x1a, 0x38, 0x9e, 0x58, 0x47, 0x01, 0xbe, 0x58, 0xc5, 0x64, 
-0x00, 0x3f, 0x45, 0x01, 0x9e, 0x58, 0xe2, 0x00, 0x08, 0xa8, 0xbe, 0x58, 0xe2, 0x00, 0x00, 0x61, 0xbe, 0x59, 0x19, 0x1f, 0x98, 0xfe, 0xbe, 0x58, 0x48, 0x01, 0x9e, 0x58, 0x48, 0x01, 0x9e, 0x5a, 0x46, 0x01, 0x02, 0x13, 0x03, 0x8c, 0x62, 0x5b, 0xbe, 0x5b, 0x19, 0x1f, 0x9e, 0x5c, 0x19, 0x1f, 0x80, 0x61, 0x99, 0x48, 0x2f, 0x94, 0x20, 0x61, 0x79, 0x48, 0x41, 0x82, 0x9e, 0x58, 0xea, 0x04, 0x18, 0x10, 0x3d, 0x88, 0x9e, 0x58, 0x08, 0x1d, 0x19, 0x10, 0x39, 0x8a, 0x9e, 0x5f, 0x58, 0x1a, 0x18, 0x17, 0x35, 0x88, 0xb5, 0x65, 0x02, 0x6d, 0xb0, 0x3d, 0xb8, 0x00, 0x08, 0x62, 0x29, 0x66, 0x03, 0x6e, 0xd0, 0x3e, 0xb8, 0x00, 0x9e, 0x5f, 0xb9, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x3e, 0x3f, 0xa5, 0x58, 0x00, 0x61, 0x19, 0x12, 0x46, 0x49, 0x19, 0x02, 0x1c, 0x5a, 0x1d, 0x5e, 0x1a, 0x38, 0x9e, 0x58, 0x59, 0xd4, 
-0x40, 0x3f, 0x48, 0x01, 0xbe, 0x58, 0x46, 0x01, 0x9e, 0x58, 0xe2, 0x00, 0x10, 0xa8, 0xbe, 0x58, 0xe2, 0x00, 0x15, 0x9e, 0xb5, 0x61, 0x02, 0x69, 0x29, 0x62, 0x03, 0x6a, 0x2f, 0x3f, 0x52, 0x3f, 0x23, 0x58, 0x1b, 0x5a, 0x19, 0x01, 0x19, 0x02, 0x79, 0xfe, 0xbe, 0x58, 0x45, 0x01, 0x98, 0xfe, 0xbe, 0x58, 0x46, 0x01, 0x9e, 0x58, 0xe2, 0x00, 0x38, 0xa8, 0xbe, 0x58, 0xe2, 0x00, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0xb5, 0x60, 0x02, 0x68, 0x29, 0x61, 0x03, 0x69, 0x00, 0x66, 0x9e, 0x5d, 0x5c, 0x1a, 0x19, 0x15, 0xbe, 0x5e, 0xd8, 0x1e, 0xa7, 0x38, 0x84, 0x3f, 0x03, 0x5a, 0x23, 0x5b, 0x5b, 0x48, 0x04, 0x98, 0x62, 0x14, 0xcd, 0x83, 
-0x80, 0x3f, 0x9e, 0x48, 0x01, 0x80, 0x81, 0x5e, 0x19, 0x00, 0x19, 0x01, 0xbe, 0x5e, 0xd8, 0x1e, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0xb5, 0x60, 0x02, 0x68, 0x29, 0x61, 0x03, 0x69, 0x00, 0x66, 0x9e, 0x5d, 0xb8, 0x00, 0x19, 0x15, 0xbe, 0x5e, 0xd9, 0x1e, 0xa7, 0x38, 0xad, 0x3f, 0x03, 0x5a, 0x23, 0x5b, 0x5b, 0x48, 0x04, 0x98, 0x62, 0x14, 0x9e, 0x48, 0x01, 0x80, 0x81, 0x5e, 0x19, 0x00, 0x19, 0x01, 0xbe, 0x5e, 0xd9, 0x1e, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x8b, 0x1e, 
-0xc0, 0x3f, 0x1e, 0x5f, 0xb5, 0x60, 0x02, 0x68, 0x10, 0x38, 0xb8, 0x00, 0x29, 0x61, 0x03, 0x69, 0x30, 0x39, 0xb8, 0x00, 0x00, 0x66, 0x9e, 0x5d, 0xb9, 0x00, 0x19, 0x15, 0xbe, 0x5e, 0xda, 0x1e, 0xa7, 0x38, 0xda, 0x3f, 0x03, 0x5a, 0x23, 0x5b, 0x5b, 0x48, 0x04, 0x98, 0x62, 0x14, 0x9e, 0x48, 0x01, 0x80, 0x81, 0x5e, 0x19, 0x00, 0x19, 0x01, 0xbe, 0x5e, 0xda, 0x1e, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x00, 0x60, 0x28, 0x61, 0xdf, 0x3b, 0x1d, 0x59, 0xec, 0xff, 0x3a, 0x38, 0x9e, 0x58, 0xb4, 0x00, 0xbe, 0x58, 0x28, 0x00, 0xce, 0xac, 0x02, 0x90, 0x19, 0x38, 0xaf, 0x40, 0x0a, 0x62, 0x09, 0x60, 0x1d, 0x68, 0x13, 0x61, 0x1d, 0x69, 0x9e, 0x5c, 0xe3, 0x19, 0x00, 0x65, 0x1e, 0x5d, 0x1e, 0x5c, 0x1e, 0x5b, 0x1e, 0x5a, 0x68, 0x0e, 
-0x00, 0x40, 0x1e, 0x59, 0x1e, 0x58, 0x01, 0x5b, 0x21, 0x5c, 0x63, 0x5a, 0x44, 0x3d, 0x00, 0xf0, 0x44, 0x3a, 0xff, 0x0f, 0x18, 0x02, 0x18, 0x12, 0x02, 0x94, 0x00, 0x62, 0x08, 0x9e, 0x21, 0x70, 0x23, 0x61, 0x20, 0x40, 0x00, 0x39, 0x00, 0x00, 0x59, 0x48, 0x01, 0x9a, 0x21, 0x5a, 0x45, 0x2a, 0x5b, 0x5b, 0x83, 0x5a, 0x44, 0x3d, 0x00, 0xf0, 0x44, 0x3a, 0xff, 0x0f, 0x18, 0x02, 0x18, 0x12, 0x02, 0x94, 0x00, 0x62, 0x08, 0x9e, 0x21, 0x70, 0x15, 0x61, 0x20, 0x40, 0x00, 0x39, 0x00, 0x00, 0x59, 0x48, 0x01, 0x9a, 0x21, 0x5a, 0x45, 0x2a, 0x5b, 0x5c, 0x3e, 0x58, 0x3e, 0x59, 0x3e, 0x5a, 0x3e, 0x5b, 0x3e, 0x5c, 0x3e, 0x5d, 0x1e, 0x5a, 0x05, 0x5a, 0x25, 0x5b, 0x04, 0xac, 0x06, 0x90, 0x1e, 0x58, 0x1e, 0x59, 0x19, 0x38, 0xff, 0x41, 0x3e, 0x59, 0x3e, 0x58, 0x88, 0x5c, 0x19, 0x05, 0x3e, 0x5a, 0x2b, 0xbb, 
-0x40, 0x40, 0x19, 0x12, 0xf0, 0x89, 0x1e, 0x5f, 0x1e, 0x5e, 0x1e, 0x5d, 0x1e, 0x5c, 0x1e, 0x5b, 0x1e, 0x5a, 0x1e, 0x59, 0x1e, 0x58, 0xce, 0x64, 0x1c, 0x6c, 0x97, 0x66, 0xd9, 0x63, 0x1c, 0x6b, 0x09, 0x65, 0xa7, 0x38, 0x60, 0x40, 0x83, 0x5d, 0x00, 0x61, 0xa1, 0x58, 0x28, 0x67, 0x1c, 0x5f, 0x19, 0x38, 0xa3, 0x40, 0x18, 0x10, 0x01, 0x88, 0x30, 0x60, 0x1b, 0x5c, 0x1b, 0x5e, 0x19, 0x04, 0x19, 0x06, 0x19, 0x03, 0x8d, 0x66, 0xe6, 0x60, 0x1b, 0x68, 0x2f, 0x39, 0x6a, 0x40, 0x03, 0x59, 0x3b, 0x5e, 0x19, 0x00, 0x19, 0x06, 0x19, 0x07, 0x19, 0x38, 0x76, 0x40, 0x3e, 0x58, 0x3e, 0x59, 0x3e, 0x5a, 0x3e, 0x5b, 0x3e, 0x5c, 0x3e, 0x5d, 0x3e, 0x5e, 0x3e, 0x5f, 0x3a, 0x38, 0x9e, 0x5f, 0xb5, 0x00, 0x02, 0x62, 0xfa, 0x48, 0x27, 0x88, 0x09, 0x64, 0x1d, 0x6c, 0x13, 0x65, 0x1d, 0x6d, 0x83, 0x58, 0x65, 0x3e, 
-0x80, 0x40, 0x19, 0x04, 0x83, 0x59, 0x01, 0x17, 0x7f, 0xac, 0x01, 0x90, 0xe2, 0x5f, 0xa3, 0x58, 0x19, 0x05, 0xa3, 0x59, 0x01, 0x16, 0x7e, 0xac, 0x01, 0x90, 0xc2, 0x5e, 0xdf, 0x48, 0x03, 0x9c, 0xe8, 0x5f, 0xe6, 0x07, 0x02, 0x9e, 0xc8, 0x5e, 0xe6, 0x07, 0xb4, 0x60, 0xf8, 0x48, 0x0b, 0x98, 0x58, 0x60, 0x08, 0x61, 0x97, 0x66, 0x8d, 0x67, 0x2f, 0x39, 0xa1, 0x40, 0x1b, 0x5e, 0x3b, 0x5f, 0x19, 0x06, 0x19, 0x07, 0x1a, 0x38, 0x3a, 0x38, 0xf0, 0x67, 0x1f, 0x48, 0x01, 0x9c, 0xff, 0x60, 0x63, 0x59, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x08, 0x58, 0x08, 0x58, 0x1b, 0x5b, 0x3a, 0x38, 0x9e, 0x58, 0xea, 0x04, 0x18, 0x10, 0x12, 0x88, 0x0a, 0x67, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0x01, 0x00, 0x1a, 0x10, 0x08, 0x88, 0x9e, 0x58, 0x8a, 0x04, 0x9e, 0x59, 0x8b, 0x04, 0x01, 0x00, 0xee, 0x47, 
-0xc0, 0x40, 0x1e, 0x10, 0x01, 0x80, 0x0f, 0x67, 0xbe, 0x5f, 0x00, 0x1f, 0x00, 0x67, 0xff, 0x66, 0x0f, 0x6e, 0x01, 0x65, 0x09, 0x7f, 0x2f, 0x39, 0x4a, 0x41, 0x1e, 0x5d, 0xb4, 0x3c, 0xe3, 0x19, 0x70, 0x8a, 0xe0, 0x38, 0x51, 0x15, 0xe0, 0x39, 0x5d, 0x15, 0xe0, 0x3a, 0x7d, 0x15, 0xe0, 0x3b, 0x87, 0x15, 0x16, 0x24, 0x56, 0x25, 0xa4, 0x15, 0x01, 0x8c, 0xa2, 0x5d, 0xb2, 0x3d, 0x11, 0x00, 0x34, 0x94, 0x36, 0x24, 0x76, 0x25, 0xa4, 0x15, 0x01, 0x8c, 0xa2, 0x5d, 0xb2, 0x3d, 0x11, 0x00, 0x2c, 0x94, 0xe2, 0x3d, 0x00, 0x00, 0x03, 0x88, 0x00, 0x65, 0xbe, 0x5d, 0xf0, 0x1e, 0xe2, 0x3d, 0x01, 0x00, 0x03, 0x88, 0x00, 0x65, 0xbe, 0x5d, 0xf4, 0x1e, 0x43, 0x5d, 0xb8, 0x49, 0x03, 0x80, 0xa4, 0x3d, 0x00, 0xf0, 0x03, 0x9e, 0x03, 0x5d, 0xa4, 0x3d, 0x00, 0xf0, 0x56, 0x24, 0xac, 0x2a, 0xe0, 0x38, 0x79, 0x58, 
-0x00, 0x41, 0x09, 0x1d, 0xac, 0x28, 0x63, 0x5d, 0xb9, 0x49, 0x03, 0x80, 0xa4, 0x3d, 0x00, 0xf0, 0x03, 0x9e, 0x23, 0x5d, 0xa4, 0x3d, 0x00, 0xf0, 0x76, 0x24, 0xac, 0x2b, 0xe0, 0x39, 0x13, 0x1d, 0xac, 0x29, 0x09, 0x70, 0x19, 0x00, 0x09, 0x78, 0x34, 0x9e, 0x1e, 0x5a, 0x1e, 0x5b, 0xe0, 0x3a, 0x7d, 0x15, 0x43, 0x5b, 0xff, 0x62, 0x0f, 0x6a, 0x62, 0x13, 0x0a, 0x8a, 0xe0, 0x3a, 0x7d, 0x15, 0x43, 0x5b, 0xff, 0x62, 0x0f, 0x6a, 0x62, 0x13, 0x03, 0x8a, 0x01, 0x62, 0xbe, 0x5a, 0x00, 0x1f, 0x3e, 0x5b, 0x3e, 0x5a, 0xe2, 0x3d, 0x00, 0x00, 0x03, 0x88, 0x66, 0x65, 0xbe, 0x5d, 0xf0, 0x1e, 0xe2, 0x3d, 0x01, 0x00, 0x03, 0x88, 0x66, 0x65, 0xbe, 0x5d, 0xf4, 0x1e, 0x03, 0x5d, 0xbb, 0x5a, 0xe0, 0x3a, 0x09, 0x1d, 0xbb, 0x5a, 0x23, 0x5d, 0xbb, 0x5b, 0xe0, 0x3b, 0x13, 0x1d, 0xbb, 0x5b, 0x08, 0x9e, 0xf3, 0x93, 
-0x40, 0x41, 0xe0, 0x3a, 0x7d, 0x15, 0xe0, 0x3b, 0x87, 0x15, 0xde, 0x5a, 0xff, 0x0f, 0xde, 0x5b, 0xff, 0x0f, 0x3e, 0x5d, 0xa6, 0x5d, 0x19, 0x07, 0x9e, 0x58, 0xe3, 0x19, 0x55, 0x71, 0x19, 0x48, 0x05, 0x88, 0xb4, 0x70, 0x09, 0x71, 0x19, 0x48, 0x01, 0x88, 0xd1, 0xaa, 0x3a, 0x38, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x00, 0x62, 0x00, 0x63, 0x00, 0x64, 0x00, 0x65, 0x00, 0x66, 0x01, 0x64, 0x01, 0x65, 0x01, 0x62, 0x9e, 0x5b, 0x43, 0x04, 0x5b, 0x48, 0x0f, 0x88, 0x01, 0x63, 0x9e, 0x5a, 0x41, 0x04, 0x5b, 0x48, 0x05, 0x8a, 0xbe, 0x5c, 0x11, 0x00, 0xbe, 0x5d, 0xfb, 0x1c, 0x09, 0x9e, 0xbe, 0x5d, 0x11, 0x00, 0xbe, 0x5c, 0xfb, 0x1c, 0x04, 0x9e, 0xbe, 0x5c, 0x11, 0x00, 0xbe, 0x5c, 0xfb, 0x1c, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x00, 0x67, 0x90, 0x6a, 
-0x80, 0x41, 0xff, 0x66, 0x0f, 0x6e, 0x01, 0x65, 0x2f, 0x39, 0xd5, 0x41, 0x1e, 0x5d, 0xb4, 0x3c, 0xe3, 0x19, 0x42, 0x8a, 0xe0, 0x38, 0x51, 0x15, 0xe0, 0x39, 0x5d, 0x15, 0xe0, 0x3a, 0x7d, 0x15, 0xe0, 0x3b, 0x87, 0x15, 0x16, 0x24, 0x56, 0x25, 0xa4, 0x15, 0x01, 0x8c, 0xa2, 0x5d, 0xb2, 0x3d, 0xfb, 0x1c, 0x0f, 0x94, 0x43, 0x5d, 0xb8, 0x49, 0x03, 0x80, 0xa4, 0x3d, 0x00, 0xf0, 0x03, 0x9e, 0x03, 0x5d, 0xa4, 0x3d, 0x00, 0xf0, 0x56, 0x24, 0xac, 0x2a, 0xe0, 0x38, 0x51, 0x15, 0xac, 0x28, 0x06, 0x9e, 0x03, 0x5d, 0xbb, 0x5a, 0xe0, 0x3a, 0x51, 0x15, 0xbb, 0x5a, 0x00, 0x9e, 0x36, 0x24, 0x76, 0x25, 0xa4, 0x15, 0x01, 0x8c, 0xa2, 0x5d, 0xb2, 0x3d, 0x11, 0x00, 0x0f, 0x94, 0x63, 0x5d, 0xb9, 0x49, 0x03, 0x80, 0xa4, 0x3d, 0x00, 0xf0, 0x03, 0x9e, 0x23, 0x5d, 0xa4, 0x3d, 0x00, 0xf0, 0x76, 0x24, 0xce, 0x49, 
-0xc0, 0x41, 0xac, 0x2b, 0xe0, 0x39, 0x5d, 0x15, 0xac, 0x29, 0x0e, 0x9e, 0x23, 0x5d, 0xbb, 0x5b, 0xe0, 0x3b, 0x5d, 0x15, 0xbb, 0x5b, 0x08, 0x9e, 0xe0, 0x3a, 0x7d, 0x15, 0xe0, 0x3b, 0x87, 0x15, 0xde, 0x5a, 0xff, 0x0f, 0xde, 0x5b, 0xff, 0x0f, 0x3e, 0x5d, 0xa6, 0x5d, 0x19, 0x07, 0x3a, 0x38, 0x9e, 0x58, 0xe4, 0x19, 0x00, 0x61, 0x9e, 0x5a, 0xe3, 0x19, 0x02, 0xac, 0x01, 0x90, 0x19, 0x01, 0x48, 0x5a, 0x19, 0x10, 0xfa, 0x89, 0xbe, 0x59, 0xb4, 0x00, 0x9e, 0x58, 0xb4, 0x00, 0x18, 0x10, 0x02, 0x8a, 0xd1, 0xa8, 0x07, 0x9e, 0xd1, 0xaa, 0x9e, 0x59, 0xb5, 0x00, 0x22, 0x38, 0x00, 0x00, 0x01, 0x8a, 0xd1, 0xa8, 0x3a, 0x38, 0x9e, 0x58, 0xe3, 0x19, 0xbe, 0x58, 0x55, 0x00, 0x9e, 0x58, 0xb4, 0x00, 0xbe, 0x58, 0xb5, 0x00, 0x9e, 0x58, 0x20, 0x1d, 0xbe, 0x58, 0x1d, 0x1d, 0x3a, 0x38, 0x13, 0x67, 0xb7, 0xba, 
-0x00, 0x42, 0x42, 0x6f, 0x44, 0x39, 0x00, 0x0f, 0xfe, 0x59, 0x10, 0x60, 0x20, 0x40, 0x64, 0x39, 0x00, 0x0f, 0xfe, 0x59, 0x01, 0x29, 0x1e, 0x5a, 0x1e, 0x5b, 0x44, 0x3a, 0xff, 0x00, 0x64, 0x3b, 0xff, 0x00, 0xa7, 0x06, 0xc9, 0x5e, 0x5e, 0x5e, 0x1d, 0x42, 0x29, 0x42, 0x35, 0x42, 0x41, 0x42, 0x4d, 0x42, 0x59, 0x42, 0x65, 0x42, 0x71, 0x42, 0x7d, 0x42, 0x89, 0x42, 0xbe, 0x59, 0x29, 0x00, 0xbe, 0x5a, 0x2a, 0x00, 0xbe, 0x5b, 0x2b, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x8d, 0x61, 0x19, 0x38, 0x95, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x2c, 0x00, 0xbe, 0x5a, 0x2d, 0x00, 0xbe, 0x5b, 0x2e, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x8d, 0x61, 0x19, 0x38, 0xa1, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x2f, 0x00, 0xbe, 0x5a, 0x30, 0x00, 0xbe, 0x5b, 0x31, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x8e, 0x61, 0x19, 0x38, 0x95, 0x42, 0xee, 0x9e, 
-0x40, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x32, 0x00, 0xbe, 0x5a, 0x33, 0x00, 0xbe, 0x5b, 0x34, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x8e, 0x61, 0x19, 0x38, 0xa1, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x35, 0x00, 0xbe, 0x5a, 0x36, 0x00, 0xbe, 0x5b, 0x37, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x8f, 0x61, 0x19, 0x38, 0x95, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x38, 0x00, 0xbe, 0x5a, 0x39, 0x00, 0xbe, 0x5b, 0x3a, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x8f, 0x61, 0x19, 0x38, 0xa1, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x3b, 0x00, 0xbe, 0x5a, 0x3c, 0x00, 0xbe, 0x5b, 0x3d, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x90, 0x61, 0x19, 0x38, 0x95, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x3e, 0x00, 0xbe, 0x5a, 0x3f, 0x00, 0xbe, 0x5b, 0x40, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x90, 0x61, 0x19, 0x38, 0xa1, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x41, 0x00, 0xbe, 0x5a, 0x94, 0x75, 
-0x80, 0x42, 0x42, 0x00, 0xbe, 0x5b, 0x43, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x91, 0x61, 0x19, 0x38, 0x95, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x44, 0x00, 0xbe, 0x5a, 0x45, 0x00, 0xbe, 0x5b, 0x46, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x91, 0x61, 0x19, 0x38, 0xa1, 0x42, 0x3a, 0x38, 0x44, 0x3a, 0x00, 0xf0, 0xfe, 0x5a, 0x64, 0x3b, 0x00, 0xf0, 0xfe, 0x5b, 0x43, 0x06, 0xc8, 0x5e, 0xc4, 0x3e, 0xf0, 0x00, 0xdb, 0x59, 0x3a, 0x38, 0x44, 0x3a, 0x00, 0xf0, 0xfe, 0x5a, 0x7f, 0x38, 0x48, 0x5a, 0x64, 0x3b, 0x00, 0xf0, 0xfe, 0x5b, 0x7f, 0x38, 0x68, 0x5b, 0x43, 0x06, 0xc8, 0x5e, 0x36, 0x2e, 0xdb, 0x59, 0x3a, 0x38, 0x9e, 0x5e, 0xe3, 0x19, 0x00, 0x65, 0x05, 0x64, 0x06, 0xac, 0x21, 0x90, 0xa8, 0x59, 0x20, 0x38, 0x90, 0x19, 0x20, 0x3b, 0xc0, 0x01, 0x03, 0x58, 0x63, 0x5b, 0x05, 0xac, 0x0c, 0x92, 0x04, 0x38, 0x42, 0x6f, 
-0xc0, 0x42, 0xff, 0x00, 0x7f, 0x38, 0x06, 0x58, 0x64, 0x3b, 0xff, 0x00, 0x7f, 0x38, 0x66, 0x5b, 0x60, 0x33, 0x0b, 0x8a, 0xd1, 0xa8, 0x09, 0x9e, 0x04, 0x38, 0x00, 0xff, 0xfe, 0x58, 0x64, 0x3b, 0x00, 0xff, 0xfe, 0x5b, 0x60, 0x33, 0x01, 0x8a, 0xd1, 0xa8, 0xe1, 0x01, 0x30, 0x28, 0x1b, 0x59, 0xc8, 0x5e, 0x19, 0x05, 0x19, 0x14, 0xd9, 0x89, 0x9e, 0x5a, 0x90, 0x19, 0xbe, 0x5a, 0xc0, 0x01, 0x9e, 0x5a, 0x91, 0x19, 0xbe, 0x5a, 0xc1, 0x01, 0x9e, 0x5a, 0x92, 0x19, 0xbe, 0x5a, 0xc2, 0x01, 0x3a, 0x38, 0x53, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x82, 0x8a, 0x54, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x98, 0x3a, 0x11, 0x45, 0x57, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x98, 0x3a, 0x00, 0x48, 0x58, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x98, 0x3a, 0x5f, 0x48, 0x19, 0x38, 0x66, 0x43, 0x26, 0x38, 0x66, 0x00, 0x98, 0x3a, 0x2d, 0xca, 
-0x00, 0x43, 0x5b, 0x48, 0x9f, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x0d, 0x88, 0x00, 0x60, 0x16, 0x39, 0x5f, 0x00, 0x36, 0x38, 0x60, 0x00, 0x06, 0x88, 0x01, 0x60, 0x16, 0x39, 0x61, 0x00, 0x02, 0x88, 0xb9, 0xaa, 0xf7, 0xaa, 0x3a, 0x38, 0x96, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x02, 0x88, 0x98, 0x3f, 0x8a, 0x47, 0x97, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x02, 0x88, 0x98, 0x3f, 0xf6, 0x47, 0x98, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x02, 0x88, 0x98, 0x3f, 0xaf, 0x47, 0x5b, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x02, 0x88, 0x98, 0x3f, 0xcf, 0x47, 0x19, 0x38, 0x66, 0x43, 0x26, 0x38, 0x56, 0x00, 0x02, 0x88, 0x84, 0xaa, 0x3a, 0x38, 0x19, 0x38, 0x66, 0x43, 0x26, 0x38, 0xa6, 0x00, 0x02, 0x88, 0x84, 0xa8, 0x3a, 0x38, 0x19, 0x38, 0x66, 0x43, 0x26, 0x38, 0x57, 0x00, 0x02, 0x88, 0xa8, 0xa8, 0x3a, 0x38, 0x19, 0x38, 0x05, 0xed, 
-0x40, 0x43, 0x66, 0x43, 0x26, 0x38, 0xa7, 0x00, 0x02, 0x88, 0xa8, 0xaa, 0x3a, 0x38, 0x19, 0x38, 0x66, 0x43, 0x26, 0x38, 0x55, 0x00, 0x05, 0x88, 0xba, 0xaa, 0x5e, 0x71, 0xbe, 0x59, 0xc1, 0x1d, 0x3a, 0x38, 0x19, 0x38, 0x66, 0x43, 0x26, 0x38, 0xa5, 0x00, 0x09, 0x88, 0xba, 0xa8, 0x81, 0xaa, 0x5e, 0x71, 0xbe, 0x59, 0xc1, 0x1d, 0x00, 0x60, 0xbe, 0x58, 0x27, 0x1d, 0x3a, 0x38, 0x19, 0x38, 0x66, 0x43, 0x26, 0x38, 0x77, 0x00, 0x02, 0x88, 0x42, 0xa9, 0x3a, 0x38, 0x3a, 0x38, 0x5e, 0x70, 0x14, 0x39, 0x5f, 0x00, 0x34, 0x38, 0x60, 0x00, 0x14, 0x39, 0x61, 0x00, 0x3a, 0x38, 0xa2, 0xa8, 0x04, 0x60, 0x69, 0x78, 0x52, 0x60, 0x6a, 0x78, 0x5f, 0x70, 0x6b, 0x78, 0x00, 0x60, 0x6c, 0x78, 0x01, 0x60, 0x6d, 0x78, 0x5f, 0x70, 0x7f, 0x38, 0x08, 0x58, 0x3f, 0x20, 0x00, 0x39, 0x81, 0x43, 0x29, 0x58, 0xd7, 0x4b, 
-0x80, 0x43, 0x5e, 0x58, 0x91, 0x43, 0x95, 0x43, 0x9a, 0x43, 0xbb, 0x43, 0xc5, 0x43, 0xe7, 0x43, 0x02, 0x44, 0x56, 0x44, 0x57, 0x44, 0x9c, 0x44, 0xa4, 0x44, 0xb0, 0x44, 0xdf, 0x44, 0xf3, 0x44, 0xf5, 0x44, 0xf7, 0x44, 0x44, 0x60, 0xa0, 0x68, 0x98, 0x3f, 0xfc, 0x44, 0x1c, 0x61, 0x02, 0x69, 0x29, 0x58, 0x98, 0x3f, 0xfc, 0x44, 0x5f, 0x70, 0x06, 0x39, 0x20, 0x00, 0x0a, 0x8a, 0x06, 0x39, 0x27, 0x00, 0x0e, 0x8a, 0x06, 0x39, 0x28, 0x00, 0x0e, 0x8a, 0x06, 0x39, 0x29, 0x00, 0x0c, 0x8a, 0x3a, 0x38, 0xf5, 0xac, 0x01, 0x90, 0x01, 0x61, 0x6c, 0x79, 0x01, 0x61, 0x6d, 0x79, 0x3a, 0x38, 0xfd, 0xac, 0x09, 0x90, 0x06, 0x9e, 0x02, 0x9e, 0xfa, 0x60, 0x5f, 0x68, 0x09, 0x58, 0x18, 0x10, 0x02, 0x88, 0x01, 0x60, 0x6c, 0x78, 0x3a, 0x38, 0x6b, 0x71, 0x24, 0x39, 0xf0, 0x00, 0x00, 0x60, 0xd8, 0xac, 0xc3, 0xaf, 
-0xc0, 0x43, 0x01, 0x90, 0x18, 0xa8, 0x20, 0x29, 0x6b, 0x79, 0x3a, 0x38, 0x6b, 0x71, 0x24, 0x39, 0xf3, 0x00, 0x03, 0x60, 0x01, 0x20, 0x00, 0x62, 0x1a, 0x48, 0x04, 0x8a, 0x00, 0x60, 0x24, 0x39, 0xf0, 0x00, 0x13, 0x9e, 0x03, 0x60, 0xd6, 0xac, 0x10, 0x92, 0x00, 0x60, 0x86, 0xac, 0x02, 0x90, 0x00, 0xa8, 0x04, 0x9e, 0x00, 0xaa, 0x8e, 0xac, 0x04, 0x90, 0x05, 0x9e, 0x8e, 0xac, 0x01, 0x90, 0x02, 0x9e, 0x08, 0xaa, 0x02, 0x9e, 0x08, 0xa8, 0x00, 0x9e, 0x20, 0x29, 0x6b, 0x79, 0x3a, 0x38, 0x6b, 0x71, 0x26, 0x38, 0x5a, 0x00, 0x0d, 0x8a, 0x24, 0x39, 0xf0, 0x00, 0x00, 0x60, 0xe0, 0xac, 0x05, 0x90, 0xd0, 0xac, 0x02, 0x90, 0x00, 0xa8, 0x01, 0x9e, 0x18, 0xa8, 0x20, 0x29, 0x6b, 0x79, 0x3a, 0x38, 0x9e, 0x59, 0xbd, 0x1d, 0x6b, 0x79, 0x9e, 0x59, 0xbe, 0x1d, 0x6c, 0x79, 0x9e, 0x59, 0xbf, 0x1d, 0x69, 0xa1, 
-0x00, 0x44, 0x6d, 0x79, 0x3a, 0x38, 0xb0, 0xac, 0x06, 0x90, 0xb8, 0xac, 0x02, 0x92, 0x06, 0x60, 0x03, 0x9e, 0x07, 0x60, 0x01, 0x9e, 0x08, 0x60, 0xb3, 0x78, 0x5f, 0x70, 0x3f, 0x20, 0x00, 0x38, 0x12, 0x44, 0x09, 0x59, 0x5e, 0x59, 0x22, 0x44, 0x35, 0x44, 0x36, 0x44, 0x37, 0x44, 0x4a, 0x44, 0x4b, 0x44, 0x4c, 0x44, 0x4d, 0x44, 0x4e, 0x44, 0x4f, 0x44, 0x50, 0x44, 0x51, 0x44, 0x52, 0x44, 0x53, 0x44, 0x54, 0x44, 0x55, 0x44, 0x00, 0x60, 0x00, 0x61, 0x9e, 0x5a, 0xb8, 0x00, 0xb3, 0x73, 0x19, 0x12, 0x43, 0x48, 0x04, 0x3a, 0xff, 0x00, 0x6c, 0x7a, 0x04, 0x3a, 0x00, 0x0f, 0xfe, 0x5a, 0x7f, 0x38, 0x46, 0x5a, 0x55, 0x3a, 0x6d, 0x00, 0x6d, 0x7a, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x00, 0x60, 0x00, 0x61, 0x9e, 0x5a, 0xb9, 0x00, 0xb3, 0x73, 0x19, 0x12, 0x43, 0x48, 0x04, 0x3a, 0xff, 0x00, 0x59, 0xa3, 
-0x40, 0x44, 0x6c, 0x7a, 0x04, 0x3a, 0x00, 0x0f, 0xfe, 0x5a, 0x7f, 0x38, 0x46, 0x5a, 0x55, 0x3a, 0x6d, 0x00, 0x6d, 0x7a, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x5f, 0x70, 0x3f, 0x20, 0x00, 0x38, 0x5e, 0x44, 0x09, 0x59, 0x01, 0x60, 0x5e, 0x59, 0x6e, 0x44, 0x72, 0x44, 0x74, 0x44, 0x75, 0x44, 0x79, 0x44, 0x7d, 0x44, 0x7e, 0x44, 0x7f, 0x44, 0x83, 0x44, 0x87, 0x44, 0x88, 0x44, 0x89, 0x44, 0x8a, 0x44, 0x8c, 0x44, 0x8d, 0x44, 0x8e, 0x44, 0xa1, 0xac, 0x01, 0x92, 0x00, 0xaa, 0x28, 0x9e, 0x12, 0x70, 0x26, 0x9e, 0x25, 0x9e, 0xf8, 0xac, 0x01, 0x92, 0x00, 0xaa, 0x21, 0x9e, 0xca, 0xac, 0x01, 0x92, 0x00, 0xaa, 0x1d, 0x9e, 0x1c, 0x9e, 0x1b, 0x9e, 0xf2, 0xac, 0x8c, 0x4f, 
-0x80, 0x44, 0x01, 0x92, 0x00, 0xaa, 0x17, 0x9e, 0xf0, 0xac, 0x01, 0x92, 0x00, 0xaa, 0x13, 0x9e, 0x12, 0x9e, 0x11, 0x9e, 0x10, 0x9e, 0x11, 0x70, 0x0e, 0x9e, 0x3a, 0x38, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x38, 0x8f, 0x00, 0x02, 0x8a, 0x1a, 0x38, 0x3a, 0x38, 0x01, 0x60, 0xe6, 0xac, 0x01, 0x92, 0x00, 0x60, 0x6c, 0x78, 0x3a, 0x38, 0x6c, 0x78, 0x3a, 0x38, 0x9e, 0x58, 0xfb, 0x04, 0x04, 0x38, 0x00, 0x0f, 0xfe, 0x58, 0x19, 0x00, 0x6c, 0x78, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x38, 0xa0, 0x00, 0x02, 0x8a, 0xa2, 0xaa, 0x3a, 0x38, 0x01, 0x60, 0xe8, 0xac, 0x01, 0x92, 0x00, 0xaa, 0x6c, 0x78, 0x3a, 0x38, 0x5f, 0x70, 0x3f, 0x20, 0x00, 0x38, 0xb6, 0x44, 0x09, 0x59, 0x5e, 0x59, 0xc6, 0x44, 0xcc, 0x44, 0xd1, 0x44, 0xd2, 0x44, 0xd3, 0x44, 0xd4, 0x44, 0xd5, 0x44, 0xd6, 0x44, 0xd7, 0x44, 0xd8, 0x44, 0x9e, 0x2f, 
-0xc0, 0x44, 0xd9, 0x44, 0xda, 0x44, 0xdb, 0x44, 0xdc, 0x44, 0xdd, 0x44, 0xde, 0x44, 0x01, 0x60, 0x90, 0xac, 0x01, 0x8a, 0x00, 0xaa, 0x6c, 0x78, 0x3a, 0x38, 0x03, 0x60, 0x14, 0x38, 0x00, 0x00, 0x6c, 0x78, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x5f, 0x71, 0x24, 0x38, 0x0f, 0x00, 0x00, 0x38, 0xa0, 0x2e, 0x09, 0x58, 0x02, 0x39, 0x00, 0x00, 0x02, 0x88, 0x6c, 0x78, 0x3a, 0x38, 0x03, 0x58, 0x04, 0x39, 0xff, 0x00, 0x6d, 0x79, 0xfe, 0x58, 0x04, 0x39, 0xff, 0x00, 0x6c, 0x79, 0x3a, 0x38, 0x00, 0x60, 0x07, 0x9e, 0x88, 0x60, 0x05, 0x9e, 0xfc, 0x61, 0x3f, 0x69, 0x29, 0x58, 0x29, 0x60, 0x30, 0x68, 0x04, 0x39, 0x00, 0xf0, 0xfe, 0x59, 0x7f, 0x38, 0xd7, 0xfc, 
-0x00, 0x45, 0x28, 0x59, 0x35, 0x39, 0x6b, 0x00, 0x6b, 0x79, 0x04, 0x39, 0xf0, 0x0f, 0x7f, 0x38, 0x28, 0x59, 0x6c, 0x79, 0x04, 0x39, 0x0f, 0x00, 0x7f, 0x38, 0x26, 0x59, 0x35, 0x39, 0x6d, 0x00, 0x6d, 0x79, 0x3a, 0x38, 0x5f, 0x70, 0x7f, 0x38, 0x08, 0x58, 0x3f, 0x20, 0x00, 0x39, 0x19, 0x45, 0x29, 0x58, 0x5e, 0x58, 0x29, 0x45, 0x35, 0x45, 0x36, 0x45, 0x0c, 0x46, 0x18, 0x46, 0x34, 0x46, 0x54, 0x46, 0x68, 0x46, 0x69, 0x46, 0xfc, 0x46, 0x45, 0x47, 0x56, 0x47, 0x78, 0x47, 0x87, 0x47, 0x88, 0x47, 0x89, 0x47, 0x60, 0x70, 0x12, 0x61, 0x19, 0x48, 0x07, 0x88, 0x61, 0x70, 0x34, 0x61, 0x19, 0x48, 0x03, 0x88, 0xff, 0x60, 0xff, 0x68, 0x60, 0xc0, 0x3a, 0x38, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0x25, 0x00, 0x38, 0x8a, 0x06, 0x39, 0x26, 0x00, 0x37, 0x8a, 0x06, 0x39, 0x27, 0x00, 0x1c, 0x8a, 0x3b, 0x0c, 
-0x40, 0x45, 0x06, 0x39, 0x28, 0x00, 0x10, 0x8a, 0x06, 0x39, 0x29, 0x00, 0x0f, 0x8a, 0x06, 0x39, 0x2a, 0x00, 0x1e, 0x8a, 0x06, 0x39, 0x2d, 0x00, 0x37, 0x8a, 0x06, 0x39, 0x2e, 0x00, 0x36, 0x8a, 0x06, 0x39, 0x2f, 0x00, 0x3d, 0x8a, 0x3a, 0x38, 0x97, 0xa8, 0x3a, 0x38, 0x5a, 0x60, 0x5a, 0x68, 0xbe, 0x58, 0xc2, 0x1d, 0xad, 0xa8, 0xf5, 0xa8, 0x3a, 0x38, 0x60, 0x70, 0x00, 0x61, 0x20, 0x31, 0x03, 0x8a, 0x01, 0x61, 0x20, 0x31, 0x02, 0x8a, 0xfd, 0xaa, 0x3a, 0x38, 0xfd, 0xa8, 0x3a, 0x38, 0x60, 0x70, 0x00, 0x61, 0x20, 0x31, 0x03, 0x8a, 0x01, 0x61, 0x20, 0x31, 0x02, 0x8a, 0xb6, 0xaa, 0x3a, 0x38, 0xb6, 0xa8, 0x3a, 0x38, 0x42, 0xa9, 0x3a, 0x38, 0x60, 0x70, 0x00, 0x61, 0x20, 0x31, 0x03, 0x8a, 0x01, 0x61, 0x20, 0x31, 0x04, 0x8a, 0x00, 0x60, 0xbe, 0x58, 0xc6, 0x00, 0x3a, 0x38, 0x01, 0x60, 0xe8, 0x70, 
-0x80, 0x45, 0xbe, 0x58, 0xc6, 0x00, 0x3a, 0x38, 0xdd, 0xa8, 0x3a, 0x38, 0x60, 0x70, 0x1f, 0x61, 0x20, 0x21, 0x21, 0x5a, 0xfe, 0x5a, 0x41, 0x2a, 0xbe, 0x5a, 0xf9, 0x04, 0xa5, 0xa8, 0x3a, 0x38, 0x60, 0x70, 0x06, 0x39, 0x00, 0x00, 0x10, 0x8a, 0x06, 0x39, 0x01, 0x00, 0x1c, 0x8a, 0x06, 0x39, 0x02, 0x00, 0x2b, 0x8a, 0x06, 0x39, 0x03, 0x00, 0x3a, 0x8a, 0x06, 0x39, 0x04, 0x00, 0x49, 0x8a, 0x06, 0x39, 0x05, 0x00, 0x58, 0x8a, 0x3a, 0x38, 0x85, 0xaa, 0x80, 0x62, 0x57, 0x6a, 0x48, 0x63, 0x0e, 0x6b, 0x0c, 0x61, 0x24, 0x60, 0x01, 0x40, 0x19, 0x10, 0x07, 0x38, 0xaf, 0x45, 0x4b, 0x5c, 0x9d, 0x5b, 0x1a, 0x38, 0x3a, 0x38, 0x7a, 0x62, 0x02, 0x6a, 0xb5, 0x63, 0x02, 0x6b, 0x9e, 0x5c, 0xbb, 0x00, 0x9e, 0x5d, 0xbc, 0x00, 0xa4, 0x05, 0x19, 0x15, 0xa7, 0x38, 0xc0, 0x45, 0x7d, 0x5a, 0x19, 0x03, 0x77, 0x51, 
-0xc0, 0x45, 0x1a, 0x38, 0x85, 0xa8, 0x1a, 0x38, 0x3a, 0x38, 0x7a, 0x62, 0x02, 0x6a, 0x62, 0x63, 0x1e, 0x6b, 0x9e, 0x5c, 0xbb, 0x00, 0x9e, 0x5d, 0xbc, 0x00, 0xa4, 0x05, 0x19, 0x15, 0xa7, 0x38, 0xd2, 0x45, 0x7d, 0x5a, 0x19, 0x03, 0x1a, 0x38, 0x85, 0xa8, 0x1a, 0x38, 0x3a, 0x38, 0x7a, 0x62, 0x02, 0x6a, 0x29, 0x63, 0x03, 0x6b, 0x9e, 0x5c, 0xbb, 0x00, 0x9e, 0x5d, 0xbc, 0x00, 0xa4, 0x05, 0x19, 0x15, 0xa7, 0x38, 0xe4, 0x45, 0x7d, 0x5a, 0x19, 0x03, 0x1a, 0x38, 0x85, 0xa8, 0x1a, 0x38, 0x3a, 0x38, 0x7a, 0x62, 0x02, 0x6a, 0xe0, 0x63, 0x1a, 0x6b, 0x9e, 0x5c, 0xbb, 0x00, 0x9e, 0x5d, 0xbc, 0x00, 0xa4, 0x05, 0x19, 0x15, 0xa7, 0x38, 0xf6, 0x45, 0x7d, 0x5a, 0x19, 0x03, 0x1a, 0x38, 0x85, 0xa8, 0x1a, 0x38, 0x3a, 0x38, 0x7a, 0x62, 0x02, 0x6a, 0x00, 0x63, 0x1b, 0x6b, 0x9e, 0x5c, 0xbb, 0x00, 0x49, 0x6a, 
-0x00, 0x46, 0x9e, 0x5d, 0xbc, 0x00, 0xa4, 0x05, 0x19, 0x15, 0xa7, 0x38, 0x08, 0x46, 0x7d, 0x5a, 0x19, 0x03, 0x1a, 0x38, 0x85, 0xa8, 0x1a, 0x38, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0x38, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x30, 0x00, 0x03, 0x8a, 0x3a, 0x38, 0xd8, 0xa8, 0x3a, 0x38, 0xd8, 0xaa, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0x40, 0x00, 0x0a, 0x8a, 0x06, 0x39, 0x41, 0x00, 0x0b, 0x8a, 0x06, 0x39, 0x42, 0x00, 0x0b, 0x8a, 0x06, 0x39, 0x43, 0x00, 0x0b, 0x8a, 0x3a, 0x38, 0x86, 0xaa, 0x8e, 0xaa, 0xd6, 0xaa, 0x3a, 0x38, 0x86, 0xa8, 0x8e, 0xaa, 0x3a, 0x38, 0x86, 0xaa, 0x8e, 0xa8, 0x3a, 0x38, 0x86, 0xa8, 0x8e, 0xaa, 0xd6, 0xa8, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0x5a, 0x00, 0x19, 0x8a, 0x06, 0x39, 0x58, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x50, 0x00, 0x0a, 0x8a, 0x3a, 0x38, 0x00, 0x60, 0x21, 0x6b, 
-0x40, 0x46, 0xbe, 0x58, 0xc3, 0x1d, 0x55, 0x60, 0xaa, 0x68, 0xbe, 0x58, 0xc4, 0x1d, 0xe0, 0xa8, 0x3a, 0x38, 0xaa, 0x60, 0x55, 0x68, 0xbe, 0x58, 0xc3, 0x1d, 0x00, 0x60, 0xbe, 0x58, 0xc4, 0x1d, 0xe0, 0xaa, 0x3a, 0x38, 0x01, 0x9e, 0x00, 0x9e, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0x60, 0x00, 0x07, 0x8a, 0x06, 0x39, 0x68, 0x00, 0x07, 0x8a, 0x06, 0x39, 0x6c, 0x00, 0x07, 0x8a, 0x3a, 0x38, 0xb0, 0xa8, 0xb8, 0xaa, 0x3a, 0x38, 0xb0, 0xa8, 0xb8, 0xa8, 0x3a, 0x38, 0xb0, 0xaa, 0xb8, 0xaa, 0x3a, 0x38, 0x3a, 0x38, 0x5f, 0x70, 0x3f, 0x20, 0x00, 0x38, 0x70, 0x46, 0x09, 0x59, 0x60, 0x70, 0x5e, 0x59, 0x80, 0x46, 0x88, 0x46, 0x8b, 0x46, 0x94, 0x46, 0x9f, 0x46, 0xaa, 0x46, 0xab, 0x46, 0xac, 0x46, 0xb9, 0x46, 0xc4, 0x46, 0xc5, 0x46, 0xc6, 0x46, 0xc7, 0x46, 0xca, 0x46, 0xdb, 0x46, 0xec, 0x46, 0xc3, 0xb5, 
-0x80, 0x46, 0xa1, 0xa8, 0x00, 0xac, 0x01, 0x92, 0xa1, 0xaa, 0xa1, 0xac, 0x01, 0x92, 0xf9, 0xaa, 0x3a, 0x38, 0x1b, 0x20, 0x12, 0x78, 0x3a, 0x38, 0x06, 0x39, 0x01, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x00, 0x00, 0x02, 0x8a, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x06, 0x39, 0x01, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x00, 0x00, 0x03, 0x8a, 0x3a, 0x38, 0xf8, 0xa8, 0x3a, 0x38, 0xf8, 0xaa, 0x3a, 0x38, 0x06, 0x39, 0x01, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x00, 0x00, 0x03, 0x8a, 0x3a, 0x38, 0xca, 0xa8, 0x3a, 0x38, 0xca, 0xaa, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x06, 0x39, 0x01, 0x00, 0x07, 0x8a, 0x06, 0x39, 0x00, 0x00, 0x01, 0x8a, 0x3a, 0x38, 0xf2, 0xaa, 0x64, 0x61, 0x3a, 0x38, 0xf2, 0xa8, 0x69, 0x61, 0x3a, 0x38, 0x06, 0x39, 0x01, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x00, 0x00, 0x03, 0x8a, 0x3a, 0x38, 0xfe, 0x71, 
-0xc0, 0x46, 0xf0, 0xa8, 0x3a, 0x38, 0xf0, 0xaa, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x11, 0x78, 0xee, 0xa8, 0x3a, 0x38, 0x61, 0x71, 0x01, 0x60, 0x19, 0x48, 0x0b, 0x88, 0x60, 0x71, 0x00, 0x60, 0x19, 0x48, 0x05, 0x8a, 0x01, 0x60, 0x19, 0x48, 0x04, 0x88, 0xed, 0xa8, 0x02, 0x9e, 0xed, 0xaa, 0x00, 0x9e, 0xdd, 0xa8, 0x3a, 0x38, 0x61, 0x71, 0x01, 0x60, 0x19, 0x48, 0x0b, 0x88, 0x60, 0x71, 0x00, 0x60, 0x19, 0x48, 0x05, 0x8a, 0x01, 0x60, 0x19, 0x48, 0x04, 0x88, 0x8d, 0xa8, 0x02, 0x9e, 0x8d, 0xaa, 0x00, 0x9e, 0xdd, 0xa8, 0x3a, 0x38, 0x61, 0x71, 0x01, 0x60, 0x19, 0x48, 0x0b, 0x88, 0x60, 0x71, 0x00, 0x60, 0x19, 0x48, 0x05, 0x8a, 0x01, 0x60, 0x19, 0x48, 0x04, 0x88, 0xe6, 0xa8, 0x02, 0x9e, 0xe6, 0xaa, 0xef, 0x9f, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0x90, 0x00, 0x01, 0x8a, 0x74, 0x4b, 
-0x00, 0x47, 0x3a, 0x38, 0x60, 0x70, 0x95, 0xa8, 0x06, 0x39, 0x01, 0x00, 0x17, 0x8a, 0x06, 0x39, 0x02, 0x00, 0x18, 0x8a, 0x06, 0x39, 0x03, 0x00, 0x1a, 0x8a, 0x06, 0x39, 0x04, 0x00, 0x1c, 0x8a, 0x06, 0x39, 0x05, 0x00, 0x1e, 0x8a, 0x06, 0x39, 0x06, 0x00, 0x20, 0x8a, 0x06, 0x39, 0x07, 0x00, 0x22, 0x8a, 0x06, 0x39, 0x08, 0x00, 0x24, 0x8a, 0x95, 0xaa, 0x3a, 0x38, 0x52, 0x60, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x52, 0x60, 0x01, 0x68, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x52, 0x60, 0x02, 0x68, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x52, 0x60, 0x03, 0x68, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x52, 0x60, 0x04, 0x68, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x52, 0x60, 0x06, 0x68, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x52, 0x60, 0x07, 0x68, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x52, 0x60, 0x87, 0x20, 
-0x40, 0x47, 0x08, 0x68, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0xa0, 0x00, 0x01, 0x8a, 0x3a, 0x38, 0x60, 0x70, 0x06, 0x39, 0x01, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x00, 0x00, 0x03, 0x8a, 0x3a, 0x38, 0xe8, 0xa8, 0x3a, 0x38, 0xe8, 0xa8, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0xb0, 0x00, 0x04, 0x8a, 0x06, 0x39, 0xb1, 0x00, 0x0d, 0x8a, 0x3a, 0x38, 0x60, 0x70, 0x06, 0x39, 0x01, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x00, 0x00, 0x03, 0x8a, 0x3a, 0x38, 0x93, 0xa8, 0x3a, 0x38, 0x93, 0xa8, 0x3a, 0x38, 0x83, 0xaa, 0x8b, 0xaa, 0x60, 0x70, 0x1b, 0x20, 0x15, 0x38, 0x03, 0x00, 0x83, 0xac, 0x03, 0x90, 0x83, 0xaa, 0xc8, 0xa8, 0x3a, 0x38, 0x83, 0xa8, 0xc8, 0xa8, 0x3a, 0x38, 0x5f, 0x71, 0x24, 0x38, 0x0f, 0x00, 0x00, 0x38, 0xa0, 0x2e, 0x09, 0x58, 0x02, 0x39, 0x00, 0x00, 0x74, 0x0b, 
-0x80, 0x47, 0x05, 0x8a, 0x60, 0x71, 0xfe, 0x59, 0x35, 0x39, 0x61, 0x00, 0x3b, 0x58, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0xa2, 0xa8, 0x06, 0x60, 0x69, 0x78, 0x95, 0x60, 0x6a, 0x78, 0x60, 0x70, 0x6c, 0x78, 0x5f, 0x70, 0x6b, 0x78, 0xfe, 0x58, 0x15, 0x38, 0x60, 0x00, 0x03, 0x59, 0x24, 0x38, 0x00, 0xff, 0xfe, 0x58, 0x6d, 0x78, 0x24, 0x38, 0xff, 0x00, 0x6e, 0x78, 0xf1, 0x60, 0x6f, 0x78, 0xbe, 0xac, 0x0c, 0x90, 0x6b, 0x71, 0x24, 0x39, 0xff, 0x00, 0x18, 0x31, 0x07, 0x88, 0x6c, 0x71, 0x24, 0x39, 0xff, 0x00, 0x26, 0x39, 0x4e, 0x00, 0x01, 0x88, 0x82, 0xa8, 0x3a, 0x38, 0xa2, 0xa8, 0x12, 0x60, 0x69, 0x78, 0x94, 0x60, 0x6a, 0x78, 0x60, 0x70, 0x5f, 0x71, 0xfe, 0x59, 0x01, 0x28, 0x80, 0x61, 0x59, 0x69, 0x01, 0x00, 0x60, 0x71, 0x6c, 0x79, 0x5f, 0x71, 0x6b, 0x79, 0x01, 0x5b, 0xb9, 0x61, 
-0xc0, 0x47, 0x6d, 0x64, 0xef, 0x38, 0xcb, 0x47, 0x69, 0x59, 0x24, 0x38, 0x00, 0xff, 0xfe, 0x58, 0x1d, 0x5c, 0x24, 0x38, 0xff, 0x00, 0x1d, 0x5c, 0x19, 0x03, 0xf1, 0x60, 0x7b, 0x78, 0x3a, 0x38, 0xa2, 0xa8, 0x11, 0x60, 0x69, 0x78, 0x9b, 0x60, 0x6a, 0x78, 0x10, 0x60, 0x06, 0x58, 0x6b, 0x78, 0x9e, 0x58, 0xba, 0x00, 0xe2, 0xac, 0x01, 0x90, 0x19, 0x00, 0x6c, 0x78, 0x24, 0x60, 0xe2, 0xac, 0x01, 0x90, 0x19, 0x00, 0x6d, 0x78, 0x00, 0x60, 0x6e, 0x78, 0x00, 0x60, 0x6f, 0x78, 0x00, 0x60, 0x70, 0x78, 0x00, 0x60, 0x71, 0x78, 0x00, 0x60, 0x72, 0x78, 0x73, 0x78, 0x74, 0x78, 0x75, 0x78, 0x76, 0x78, 0x77, 0x78, 0x78, 0x78, 0x79, 0x78, 0x7a, 0x78, 0xe2, 0xaa, 0x3a, 0x38, 0x5f, 0x70, 0xfe, 0x58, 0x15, 0x38, 0x60, 0x00, 0x61, 0x71, 0xfe, 0x59, 0x35, 0x39, 0x62, 0x00, 0x3b, 0x58, 0x3a, 0x38, 0xba, 0x43, 
-0x00, 0x48, 0x98, 0x3f, 0x65, 0x43, 0x00, 0x62, 0xa9, 0x7a, 0xad, 0x72, 0x57, 0x7a, 0xa9, 0x70, 0xa8, 0x71, 0x19, 0x48, 0x28, 0x82, 0x19, 0x11, 0x19, 0x48, 0x03, 0x88, 0xaa, 0x72, 0x46, 0x5a, 0x01, 0x9e, 0x3c, 0x62, 0x1b, 0x02, 0x69, 0x7a, 0x1b, 0x12, 0x4e, 0x5a, 0x6c, 0x7a, 0x98, 0x62, 0x6a, 0x7a, 0xa9, 0x72, 0xbe, 0xac, 0x02, 0x92, 0x45, 0x3a, 0x40, 0x00, 0x6b, 0x7a, 0x81, 0xa8, 0xa2, 0xa8, 0x9e, 0xee, 0xb9, 0xac, 0x17, 0x90, 0xa2, 0xac, 0xfc, 0x93, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xbe, 0xac, 0x01, 0x92, 0x24, 0xa9, 0xa9, 0x70, 0x19, 0x00, 0xa9, 0x78, 0x57, 0x70, 0x7e, 0x00, 0x57, 0x78, 0xd4, 0x9f, 0x81, 0xaa, 0xa2, 0xaa, 0xbe, 0xac, 0x02, 0x90, 0x3c, 0xa9, 0x01, 0x9e, 0x24, 0xa9, 0x3a, 0x38, 0x81, 0xaa, 0xa2, 0xaa, 0xbe, 0xac, 0x02, 0x90, 0x3c, 0xa9, 0x01, 0x9e, 0x47, 0xbb, 
-0x40, 0x48, 0x24, 0xa9, 0x3a, 0x38, 0xb2, 0xa8, 0xa2, 0xa8, 0xaa, 0xaa, 0x00, 0x60, 0x5d, 0x78, 0x50, 0xb2, 0x3a, 0xaa, 0xd0, 0xb2, 0xf9, 0xab, 0x5e, 0x70, 0x06, 0x39, 0x83, 0x00, 0x01, 0x8a, 0x9e, 0xee, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x81, 0xb8, 0x5a, 0x38, 0xe2, 0xa8, 0x66, 0x61, 0xbe, 0x59, 0x27, 0x1d, 0xba, 0xac, 0x98, 0x3c, 0x65, 0x43, 0x81, 0xaa, 0xb9, 0xaa, 0x5f, 0x70, 0xa2, 0x78, 0x60, 0x70, 0xa4, 0x78, 0x61, 0x70, 0xa5, 0x78, 0x62, 0x70, 0x01, 0x59, 0xa6, 0x78, 0x63, 0x70, 0xa7, 0x78, 0x24, 0x39, 0xff, 0x00, 0xfe, 0x59, 0x04, 0x38, 0xff, 0x00, 0x20, 0x28, 0x08, 0x58, 0x01, 0x5b, 0x00, 0x61, 0x1e, 0x62, 0x1c, 0x5a, 0x01, 0x5c, 0x02, 0x40, 0x78, 0x48, 0x06, 0x8a, 0x19, 0x04, 0xa8, 0x7c, 0x22, 0x01, 
-0x80, 0x48, 0xa3, 0x7c, 0x60, 0x13, 0xaa, 0x7b, 0x04, 0x9e, 0xa8, 0x7c, 0xa3, 0x7c, 0x1e, 0x63, 0xaa, 0x7b, 0x60, 0x71, 0x24, 0x39, 0xff, 0x00, 0xfe, 0x59, 0x61, 0x70, 0x04, 0x38, 0xff, 0x00, 0x20, 0x28, 0xab, 0x78, 0xa2, 0x70, 0x04, 0x38, 0xc0, 0x00, 0xbf, 0x38, 0x08, 0x58, 0x00, 0x61, 0x20, 0x31, 0x01, 0x8a, 0x2a, 0x9e, 0xa2, 0x70, 0x04, 0x39, 0x07, 0x00, 0x20, 0x3a, 0xa1, 0x48, 0x49, 0x5b, 0x5e, 0x5b, 0xa9, 0x48, 0xa6, 0x48, 0xa9, 0x48, 0xb0, 0x48, 0xb0, 0x48, 0x60, 0x63, 0x11, 0x6b, 0x0d, 0x9e, 0x00, 0x63, 0x05, 0x6b, 0x08, 0xac, 0x09, 0x90, 0x30, 0x63, 0x0b, 0x6b, 0x06, 0x9e, 0x9e, 0x5b, 0xe8, 0x00, 0x10, 0xac, 0x02, 0x90, 0x48, 0x63, 0x0e, 0x6b, 0x1e, 0x59, 0x1e, 0x58, 0x9e, 0x59, 0x27, 0x1d, 0x26, 0x38, 0x66, 0x00, 0x02, 0x88, 0x60, 0x63, 0x11, 0x6b, 0x3e, 0x58, 0xda, 0xb5, 
-0xc0, 0x48, 0x3e, 0x59, 0xad, 0x7b, 0xf7, 0xa8, 0xb9, 0xa8, 0x3a, 0x38, 0x9e, 0x58, 0xc6, 0x04, 0x18, 0x10, 0x2f, 0x8a, 0xff, 0x60, 0xff, 0x68, 0x8c, 0x61, 0x04, 0x69, 0x14, 0x62, 0x19, 0x12, 0x57, 0x38, 0x1d, 0x59, 0x00, 0x60, 0xbe, 0x58, 0xa0, 0x04, 0xbe, 0x58, 0xa1, 0x04, 0x19, 0x38, 0xf9, 0x48, 0x18, 0x60, 0x58, 0x48, 0x1d, 0x9c, 0x60, 0x38, 0x06, 0x16, 0x03, 0x59, 0x24, 0x3a, 0xff, 0x00, 0x4d, 0x38, 0x00, 0x71, 0x01, 0x60, 0xbe, 0x58, 0xa0, 0x04, 0xbe, 0x58, 0xa1, 0x04, 0x00, 0x39, 0x8c, 0x04, 0x7b, 0x59, 0x19, 0x38, 0x18, 0x49, 0x9e, 0x58, 0xa0, 0x04, 0x19, 0x00, 0xbe, 0x58, 0xa0, 0x04, 0x00, 0x39, 0x8c, 0x04, 0x23, 0x5b, 0xff, 0x62, 0xff, 0x6a, 0x59, 0x49, 0xf2, 0x89, 0x3a, 0x38, 0x00, 0x67, 0x9e, 0x58, 0xc6, 0x04, 0x00, 0x62, 0x00, 0x63, 0x23, 0x74, 0xe0, 0x39, 0xe8, 0x3c, 
-0x00, 0x49, 0xaa, 0x15, 0x23, 0x5e, 0xc4, 0x3e, 0xff, 0x00, 0x9e, 0x48, 0x04, 0x98, 0x5e, 0x48, 0x02, 0x94, 0xc1, 0x5a, 0xe1, 0x5b, 0x19, 0x07, 0xf8, 0x48, 0xf2, 0x97, 0xbe, 0x5a, 0xbc, 0x04, 0x00, 0x60, 0x9e, 0x59, 0xad, 0x04, 0x59, 0x48, 0x01, 0x9a, 0x01, 0x60, 0xbe, 0x58, 0xb2, 0x04, 0x3a, 0x38, 0x61, 0x5e, 0x00, 0x67, 0x19, 0x38, 0x44, 0x49, 0xe0, 0x39, 0xaa, 0x15, 0x23, 0x74, 0x99, 0x49, 0x1d, 0x98, 0xfe, 0x48, 0x1b, 0x8a, 0xe0, 0x38, 0x06, 0x16, 0x03, 0x59, 0x24, 0x39, 0x00, 0xff, 0x22, 0x39, 0x00, 0x71, 0x13, 0x8a, 0x19, 0x38, 0x5a, 0x49, 0x18, 0x10, 0x0f, 0x8a, 0xe0, 0x38, 0x06, 0x16, 0x03, 0x59, 0x24, 0x3a, 0xff, 0x00, 0x4d, 0x38, 0x00, 0x71, 0x9e, 0x58, 0xa1, 0x04, 0x19, 0x00, 0xbe, 0x58, 0xa1, 0x04, 0x00, 0x39, 0x8c, 0x04, 0xfb, 0x59, 0x19, 0x07, 0x9e, 0x58, 0x65, 0x7b, 
-0x40, 0x49, 0xc6, 0x04, 0xf8, 0x48, 0xd9, 0x97, 0x3a, 0x38, 0xff, 0x61, 0xc0, 0x38, 0x06, 0x16, 0x11, 0x22, 0xbe, 0x5a, 0xa2, 0x04, 0xc0, 0x38, 0x1a, 0x16, 0x11, 0x22, 0xbe, 0x5a, 0xa3, 0x04, 0xc0, 0x38, 0xde, 0x15, 0x11, 0x22, 0xbe, 0x5a, 0xa4, 0x04, 0xc0, 0x38, 0xf2, 0x15, 0x11, 0x22, 0xbe, 0x5a, 0xa5, 0x04, 0x3a, 0x38, 0x9e, 0x5d, 0xa8, 0x04, 0xff, 0x64, 0xe0, 0x38, 0xf2, 0x15, 0x14, 0x21, 0x9e, 0x58, 0xa4, 0x04, 0x01, 0x13, 0x03, 0x96, 0x7d, 0x48, 0x2c, 0x98, 0x0b, 0x9e, 0xe0, 0x38, 0xde, 0x15, 0x14, 0x21, 0x9e, 0x58, 0xa5, 0x04, 0x20, 0x13, 0x02, 0x94, 0x00, 0x63, 0x02, 0x9e, 0x7d, 0x48, 0x20, 0x98, 0xe0, 0x38, 0x06, 0x16, 0x14, 0x21, 0x9e, 0x58, 0xa3, 0x04, 0x01, 0x12, 0x03, 0x96, 0x5d, 0x48, 0x17, 0x98, 0x0b, 0x9e, 0xe0, 0x38, 0x1a, 0x16, 0x14, 0x21, 0x9e, 0x58, 0x69, 0x10, 
-0x80, 0x49, 0xa2, 0x04, 0x20, 0x12, 0x02, 0x94, 0x00, 0x62, 0x07, 0x9e, 0x5d, 0x48, 0x0b, 0x98, 0x7a, 0x48, 0x03, 0x94, 0x68, 0x5b, 0x43, 0x01, 0x02, 0x9e, 0x48, 0x5a, 0x62, 0x01, 0x3d, 0x48, 0x02, 0x98, 0x01, 0x60, 0x01, 0x9e, 0x00, 0x60, 0x3a, 0x38, 0x9e, 0x58, 0xb1, 0x04, 0x18, 0x10, 0x07, 0x88, 0x9e, 0x58, 0xb8, 0x04, 0x18, 0x10, 0x03, 0x9a, 0x19, 0x10, 0xbe, 0x58, 0xb8, 0x04, 0x9e, 0x58, 0xc6, 0x04, 0x18, 0x10, 0x03, 0x88, 0xbe, 0x58, 0xb1, 0x04, 0x1f, 0x9e, 0x19, 0x38, 0xc6, 0x49, 0x9e, 0x58, 0xb2, 0x04, 0x9e, 0x58, 0xb3, 0x04, 0xbe, 0x5f, 0xb1, 0x04, 0x18, 0x17, 0x15, 0x8a, 0x9e, 0x58, 0xa2, 0x04, 0xbe, 0x58, 0xb4, 0x04, 0x9e, 0x58, 0xa3, 0x04, 0xbe, 0x58, 0xb5, 0x04, 0x9e, 0x58, 0xa4, 0x04, 0xbe, 0x58, 0xb6, 0x04, 0x9e, 0x58, 0xa5, 0x04, 0xbe, 0x58, 0xb7, 0x04, 0x6d, 0x06, 
-0xc0, 0x49, 0x14, 0x60, 0xbe, 0x58, 0xb8, 0x04, 0x19, 0x38, 0x7b, 0x4a, 0x3a, 0x38, 0x00, 0x64, 0xff, 0x65, 0x00, 0x66, 0xff, 0x6e, 0x00, 0x67, 0xbe, 0x5f, 0xa2, 0x04, 0xbe, 0x5d, 0xa3, 0x04, 0xbe, 0x5d, 0xa4, 0x04, 0xbe, 0x5f, 0xa5, 0x04, 0x9e, 0x58, 0xc6, 0x04, 0x19, 0x10, 0x07, 0x38, 0x0b, 0x4a, 0xe0, 0x38, 0x06, 0x16, 0x16, 0x22, 0x42, 0x3b, 0x00, 0x71, 0x2d, 0x88, 0x15, 0x22, 0x9e, 0x5b, 0xa2, 0x04, 0x5b, 0x48, 0x04, 0x9a, 0xbe, 0x5a, 0xa2, 0x04, 0xbe, 0x5a, 0xc2, 0x04, 0xe0, 0x38, 0x1a, 0x16, 0x15, 0x22, 0x9e, 0x5b, 0xa3, 0x04, 0x5b, 0x48, 0x04, 0x94, 0xbe, 0x5a, 0xa3, 0x04, 0xbe, 0x5a, 0xc3, 0x04, 0xe0, 0x38, 0xde, 0x15, 0x15, 0x22, 0x9e, 0x5b, 0xa4, 0x04, 0x5b, 0x48, 0x04, 0x94, 0xbe, 0x5a, 0xa4, 0x04, 0xbe, 0x5a, 0xc5, 0x04, 0xe0, 0x38, 0xf2, 0x15, 0x15, 0x22, 0xfb, 0x57, 
-0x00, 0x4a, 0x9e, 0x5b, 0xa5, 0x04, 0x5b, 0x48, 0x04, 0x9a, 0xbe, 0x5a, 0xa5, 0x04, 0xbe, 0x5a, 0xc4, 0x04, 0xe0, 0x38, 0xaa, 0x15, 0x14, 0x04, 0x19, 0x07, 0x1a, 0x38, 0x19, 0x38, 0x55, 0x4b, 0x9e, 0x58, 0xa2, 0x04, 0x12, 0x3a, 0xa3, 0x04, 0x19, 0x02, 0x9e, 0x5b, 0xa5, 0x04, 0x72, 0x3d, 0xa4, 0x04, 0x19, 0x05, 0x45, 0x40, 0xbe, 0x58, 0xae, 0x04, 0xbe, 0x5c, 0xaf, 0x04, 0x81, 0x59, 0x01, 0x5a, 0x00, 0x60, 0x1c, 0x5a, 0xbe, 0x58, 0xb0, 0x04, 0x16, 0x62, 0x24, 0x63, 0x43, 0x40, 0x9e, 0x59, 0xa9, 0x04, 0x9e, 0x5a, 0xaa, 0x04, 0x9e, 0x5d, 0xb1, 0x04, 0x18, 0x15, 0x04, 0x8a, 0x22, 0x3e, 0x0a, 0x00, 0x01, 0x9c, 0x3a, 0x11, 0x01, 0x40, 0x1c, 0x5a, 0x9e, 0x5a, 0xae, 0x04, 0xbe, 0x58, 0xbd, 0x04, 0x1a, 0x48, 0x11, 0x9c, 0x9e, 0x5c, 0xa6, 0x04, 0x9e, 0x5b, 0xa7, 0x04, 0x9e, 0x5d, 0x84, 0x7a, 
-0x40, 0x4a, 0xb1, 0x04, 0x18, 0x15, 0x02, 0x8a, 0x1a, 0x14, 0x1a, 0x13, 0x83, 0x40, 0xbe, 0x58, 0xbe, 0x04, 0x58, 0x48, 0x02, 0x98, 0x00, 0x67, 0x17, 0x9e, 0x00, 0x60, 0x9e, 0x59, 0xab, 0x04, 0x9e, 0x5a, 0xac, 0x04, 0x9e, 0x5d, 0xb1, 0x04, 0x18, 0x15, 0x04, 0x8a, 0x22, 0x3e, 0x0f, 0x00, 0x01, 0x9c, 0x3f, 0x11, 0x1c, 0x5a, 0x9e, 0x59, 0xb0, 0x04, 0xbe, 0x58, 0xbf, 0x04, 0x19, 0x48, 0x02, 0x9c, 0x00, 0x67, 0x01, 0x9e, 0x01, 0x67, 0xbe, 0x5f, 0xc1, 0x04, 0x40, 0x66, 0x9e, 0x58, 0xa2, 0x04, 0x06, 0x40, 0xbe, 0x58, 0xa2, 0x04, 0x9e, 0x58, 0xa3, 0x04, 0x06, 0x40, 0xbe, 0x58, 0xa3, 0x04, 0x9e, 0x58, 0xa4, 0x04, 0x06, 0x40, 0xbe, 0x58, 0xa4, 0x04, 0x9e, 0x58, 0xa5, 0x04, 0x06, 0x40, 0xbe, 0x58, 0xa5, 0x04, 0x3a, 0x38, 0x00, 0x64, 0xff, 0x6c, 0xff, 0x65, 0x9e, 0x5e, 0xc6, 0x04, 0x21, 0x91, 
-0x80, 0x4a, 0x00, 0x67, 0xc2, 0x38, 0x01, 0x00, 0x07, 0x38, 0x90, 0x4a, 0xe0, 0x38, 0x06, 0x16, 0x14, 0x22, 0x42, 0x3b, 0x00, 0x71, 0x05, 0x88, 0x15, 0x21, 0x21, 0x5a, 0xfe, 0x59, 0x22, 0x29, 0x3b, 0x58, 0x19, 0x07, 0x3a, 0x38, 0x9e, 0x5f, 0x4b, 0x1a, 0x18, 0x17, 0x2d, 0x8a, 0x00, 0x60, 0x00, 0x65, 0x00, 0x66, 0x19, 0x17, 0xe7, 0x38, 0xbf, 0x4a, 0xc0, 0x39, 0xaa, 0x15, 0x19, 0x49, 0x1f, 0x8a, 0xbe, 0x48, 0x1c, 0x8a, 0x23, 0x5a, 0xa0, 0x39, 0xaa, 0x15, 0x5b, 0x59, 0xc0, 0x39, 0x06, 0x16, 0x23, 0x5a, 0xa0, 0x39, 0x06, 0x16, 0x5b, 0x59, 0xc0, 0x39, 0x1a, 0x16, 0x23, 0x5a, 0xa0, 0x39, 0x1a, 0x16, 0x5b, 0x59, 0xc0, 0x39, 0xde, 0x15, 0x23, 0x5a, 0xa0, 0x39, 0xde, 0x15, 0x5b, 0x59, 0xc0, 0x39, 0xf2, 0x15, 0x23, 0x5a, 0xa0, 0x39, 0xf2, 0x15, 0x5b, 0x59, 0x19, 0x05, 0x19, 0x06, 0xba, 0xd7, 
-0xc0, 0x4a, 0xbe, 0x5d, 0xc6, 0x04, 0x02, 0x9e, 0xbe, 0x5f, 0xc6, 0x04, 0x3a, 0x38, 0x00, 0x65, 0x7f, 0x6d, 0x00, 0x67, 0x9e, 0x5e, 0xc6, 0x04, 0x18, 0x16, 0x08, 0x8a, 0x19, 0x16, 0xc7, 0x38, 0xd4, 0x4a, 0xe0, 0x38, 0x06, 0x16, 0x15, 0x29, 0x3b, 0x58, 0x19, 0x07, 0x3a, 0x38, 0x9e, 0x58, 0xb8, 0x04, 0x18, 0x10, 0x35, 0x8a, 0x9e, 0x58, 0xc6, 0x04, 0x18, 0x10, 0x31, 0x8a, 0x9e, 0x5f, 0xb4, 0x04, 0x9e, 0x5e, 0xb5, 0x04, 0x9e, 0x5d, 0xb7, 0x04, 0x9e, 0x5c, 0xb6, 0x04, 0x00, 0x63, 0x00, 0x62, 0x9e, 0x58, 0xe2, 0x19, 0x18, 0x10, 0x23, 0x8a, 0x19, 0x10, 0x07, 0x38, 0x05, 0x4b, 0x60, 0x38, 0xb2, 0x19, 0x03, 0x59, 0x24, 0x39, 0xff, 0x0f, 0x3d, 0x48, 0x0f, 0x98, 0x3c, 0x48, 0x0d, 0x96, 0x60, 0x38, 0xbe, 0x19, 0x03, 0x59, 0x24, 0x39, 0xff, 0x0f, 0x3f, 0x48, 0x06, 0x98, 0x3e, 0x48, 0x56, 0x7d, 
-0x00, 0x4b, 0x04, 0x96, 0xff, 0x61, 0x7f, 0x69, 0x3b, 0x58, 0x19, 0x02, 0x19, 0x03, 0x9e, 0x5f, 0xe2, 0x19, 0xe2, 0x10, 0xbe, 0x58, 0xe2, 0x19, 0x18, 0x10, 0x02, 0x8a, 0x19, 0x38, 0x10, 0x4b, 0x3a, 0x38, 0xff, 0x60, 0x7f, 0x68, 0x00, 0x65, 0x00, 0x66, 0x19, 0x17, 0xe7, 0x38, 0x29, 0x4b, 0xc0, 0x39, 0xbe, 0x19, 0x19, 0x49, 0x0d, 0x8a, 0xbe, 0x48, 0x0a, 0x8a, 0x23, 0x5a, 0xa0, 0x39, 0xbe, 0x19, 0x5b, 0x59, 0xc0, 0x39, 0xb2, 0x19, 0x23, 0x5a, 0xa0, 0x39, 0xb2, 0x19, 0x5b, 0x59, 0x19, 0x05, 0x19, 0x06, 0x1a, 0x38, 0x3a, 0x38, 0xbe, 0xac, 0x27, 0x90, 0x0c, 0x67, 0xbe, 0x5f, 0xa6, 0x04, 0x0c, 0x67, 0xbe, 0x5f, 0xa7, 0x04, 0x03, 0x67, 0xbe, 0x5f, 0xa8, 0x04, 0x28, 0x67, 0xbe, 0x5f, 0xa9, 0x04, 0x64, 0x67, 0xbe, 0x5f, 0xaa, 0x04, 0x1e, 0x67, 0xbe, 0x5f, 0xab, 0x04, 0x64, 0x67, 0x9a, 0xcb, 
-0x40, 0x4b, 0xbe, 0x5f, 0xac, 0x04, 0x30, 0x67, 0xbe, 0x5f, 0xad, 0x04, 0x50, 0x67, 0xbe, 0x5f, 0xba, 0x04, 0x04, 0x67, 0xbe, 0x5f, 0xbb, 0x04, 0x00, 0x60, 0xbe, 0x58, 0xb1, 0x04, 0xbe, 0x58, 0xb2, 0x04, 0xbe, 0x58, 0xb3, 0x04, 0xbe, 0x58, 0xb8, 0x04, 0x3a, 0x38, 0x00, 0x62, 0x70, 0x63, 0x00, 0x61, 0x9e, 0x5f, 0xa3, 0x04, 0x27, 0x01, 0x9e, 0x5f, 0xa2, 0x04, 0x27, 0x01, 0x9e, 0x5f, 0xa5, 0x04, 0x27, 0x01, 0x9e, 0x5f, 0xa4, 0x04, 0x27, 0x01, 0x3a, 0x48, 0x01, 0x88, 0x3a, 0x38, 0x3b, 0x48, 0x01, 0x80, 0x3a, 0x38, 0x9e, 0x5b, 0xba, 0x04, 0x00, 0x65, 0x9e, 0x5f, 0xa3, 0x04, 0x9e, 0x59, 0xa5, 0x04, 0x9e, 0x5e, 0xa4, 0x04, 0x26, 0x10, 0x07, 0x38, 0x80, 0x4b, 0x16, 0x62, 0xc1, 0x58, 0x00, 0x61, 0x47, 0x48, 0x00, 0x38, 0x48, 0x0e, 0x03, 0x59, 0x3b, 0x48, 0x01, 0x9a, 0x19, 0x05, 0x10, 0x4f, 
-0x80, 0x4b, 0x19, 0x06, 0x19, 0x07, 0x9e, 0x59, 0xa2, 0x04, 0xf9, 0x48, 0xe9, 0x9b, 0x01, 0x61, 0x9e, 0x58, 0xbb, 0x04, 0xbe, 0x5d, 0xc0, 0x04, 0xb8, 0x48, 0x01, 0x98, 0x00, 0x61, 0xbe, 0x59, 0xb3, 0x04, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0xd5, 0xf0, 0x19, 0x38, 0xcf, 0x4d, 0xed, 0xac, 0x09, 0x92, 0x9e, 0x58, 0x56, 0x01, 0x00, 0xaa, 0xbe, 0x58, 0x07, 0xf8, 0x9e, 0x58, 0xd5, 0x1a, 0xbe, 0x58, 0x02, 0xf8, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x9e, 0x5a, 0xd6, 0x1a, 0x9e, 0x5b, 0xd7, 0x1a, 0x43, 0x00, 0x06, 0x5c, 0x55, 0x61, 0x24, 0x40, 0x64, 0x65, 0x1c, 0x5d, 0x9e, 0x5a, 0x02, 0xf8, 0x9e, 0x5b, 0x07, 0xf8, 0x04, 0x4a, 
-0xc0, 0x4b, 0xfe, 0x5b, 0x7f, 0x38, 0x68, 0x5b, 0x3f, 0x23, 0x43, 0x12, 0x02, 0x40, 0xbe, 0x58, 0x37, 0x1d, 0x19, 0x38, 0x8f, 0x4c, 0xd5, 0xf0, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0xed, 0xac, 0x08, 0x92, 0x9e, 0x5b, 0x56, 0x01, 0xbe, 0x5b, 0x07, 0xf8, 0x9e, 0x5b, 0xd5, 0x1a, 0xbe, 0x5b, 0x02, 0xf8, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x1a, 0x38, 0x3a, 0x38, 0x9e, 0x58, 0xd5, 0x1a, 0xbe, 0x58, 0x02, 0xf8, 0xed, 0xac, 0x9e, 0x92, 0x00, 0x60, 0xbe, 0x58, 0xb1, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x00, 0x38, 0x90, 0x5e, 0x09, 0x58, 0x48, 0x61, 0x19, 0x48, 0x87, 0x8a, 0x19, 0x38, 0x0e, 0x4e, 0x88, 0x60, 0x88, 0x68, 0xbe, 0x58, 0x38, 0x1d, 0xe1, 0xed, 
-0x00, 0x4c, 0xbe, 0x58, 0x39, 0x1d, 0xbe, 0x58, 0x3a, 0x1d, 0xbe, 0x58, 0x3b, 0x1d, 0xbe, 0x58, 0x3c, 0x1d, 0xbe, 0x58, 0x3d, 0x1d, 0x00, 0x60, 0x40, 0x68, 0xbe, 0x58, 0x47, 0x1d, 0x00, 0x60, 0x04, 0x68, 0xbe, 0x58, 0x46, 0x1d, 0x40, 0x60, 0xbe, 0x58, 0x45, 0x1d, 0x04, 0x60, 0xbe, 0x58, 0x44, 0x1d, 0x38, 0x60, 0x1d, 0x68, 0x28, 0x61, 0xf8, 0x69, 0xaf, 0x38, 0x21, 0x4c, 0x03, 0x5a, 0x5b, 0x59, 0x19, 0x00, 0x19, 0x01, 0x19, 0x38, 0xfc, 0x4d, 0x62, 0x63, 0xf8, 0x6b, 0x38, 0x62, 0x1d, 0x6a, 0xaf, 0x38, 0x59, 0x4c, 0x65, 0x5c, 0x65, 0x5d, 0x65, 0x5e, 0x65, 0x5f, 0x43, 0x59, 0x1e, 0x5a, 0x9e, 0x5a, 0x47, 0x1d, 0x9e, 0x58, 0x37, 0x1d, 0xf8, 0x48, 0x02, 0x82, 0x22, 0x11, 0x01, 0x9e, 0x22, 0x01, 0x9e, 0x5a, 0x46, 0x1d, 0x9e, 0x58, 0x37, 0x1d, 0xd8, 0x48, 0x02, 0x82, 0x22, 0x11, 0xb7, 0x93, 
-0x40, 0x4c, 0x01, 0x9e, 0x22, 0x01, 0x9e, 0x5a, 0x45, 0x1d, 0x9e, 0x58, 0x37, 0x1d, 0xb8, 0x48, 0x02, 0x82, 0x22, 0x11, 0x01, 0x9e, 0x22, 0x01, 0x9e, 0x5a, 0x44, 0x1d, 0x9e, 0x58, 0x37, 0x1d, 0x98, 0x48, 0x02, 0x82, 0x22, 0x11, 0x01, 0x9e, 0x22, 0x01, 0x1a, 0x38, 0x1a, 0x38, 0x3e, 0x5a, 0x1a, 0x38, 0x3b, 0x5a, 0x19, 0x02, 0x9e, 0x5a, 0x47, 0x1d, 0x48, 0x5a, 0xbe, 0x5a, 0x47, 0x1d, 0x9e, 0x5a, 0x46, 0x1d, 0x48, 0x5a, 0xbe, 0x5a, 0x46, 0x1d, 0x9e, 0x5a, 0x45, 0x1d, 0x48, 0x5a, 0xbe, 0x5a, 0x45, 0x1d, 0x9e, 0x5a, 0x44, 0x1d, 0x48, 0x5a, 0xbe, 0x5a, 0x44, 0x1d, 0x00, 0x60, 0x1a, 0x48, 0xa7, 0x89, 0x06, 0x60, 0x9e, 0x59, 0xb1, 0x00, 0x01, 0x40, 0x00, 0x38, 0xb0, 0x01, 0x00, 0x38, 0x00, 0x05, 0x38, 0x64, 0x1d, 0x6c, 0xaf, 0x38, 0x80, 0x4c, 0x83, 0x59, 0x3b, 0x58, 0x19, 0x00, 0x6e, 0xee, 
-0x80, 0x4c, 0x19, 0x04, 0x9e, 0x59, 0xbc, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x48, 0x06, 0x8a, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x00, 0xbe, 0x58, 0xb1, 0x00, 0x65, 0x9f, 0x1a, 0x38, 0x3a, 0x38, 0x19, 0x38, 0xea, 0x4d, 0xed, 0xac, 0x87, 0x92, 0x9e, 0x58, 0xd5, 0x1a, 0xbe, 0x58, 0x02, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0xb1, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x00, 0x38, 0x90, 0x5e, 0x09, 0x58, 0x48, 0x61, 0x19, 0x48, 0x6a, 0x8a, 0x19, 0x38, 0x0e, 0x4e, 0x40, 0x60, 0x40, 0x68, 0xbe, 0x58, 0x38, 0x1d, 0xbe, 0x58, 0x39, 0x1d, 0xbe, 0x58, 0x3a, 0x1d, 0xbe, 0x58, 0x3b, 0x1d, 0xbe, 0x58, 0x3c, 0x1d, 0xbe, 0x58, 0x3d, 0x1d, 0xbe, 0x58, 0x3e, 0x1d, 0xbe, 0x58, 0x3f, 0x1d, 0xbe, 0x58, 0x40, 0x1d, 0xbe, 0x58, 0x41, 0x1d, 0xbe, 0x58, 0x42, 0x1d, 0xbe, 0x58, 0x43, 0x1d, 0x00, 0x60, 0x20, 0x68, 0x4e, 0xf6, 
-0xc0, 0x4c, 0xbe, 0x58, 0x45, 0x1d, 0x20, 0x60, 0xbe, 0x58, 0x44, 0x1d, 0x38, 0x60, 0x1d, 0x68, 0x3b, 0x61, 0xf8, 0x69, 0x6f, 0x39, 0xcf, 0x4c, 0x03, 0x5a, 0x48, 0x5a, 0x5b, 0x59, 0x19, 0x00, 0x19, 0x01, 0x19, 0x38, 0xfc, 0x4d, 0x62, 0x65, 0xf8, 0x6d, 0x38, 0x64, 0x1d, 0x6c, 0x9e, 0x5b, 0x45, 0x1d, 0x9e, 0x5a, 0x44, 0x1d, 0x1a, 0x38, 0x6f, 0x39, 0xf1, 0x4c, 0xa5, 0x5f, 0xa5, 0x5e, 0x83, 0x59, 0x9e, 0x58, 0x37, 0x1d, 0xd8, 0x48, 0x02, 0x82, 0x23, 0x11, 0x01, 0x9e, 0x23, 0x01, 0x9e, 0x58, 0x37, 0x1d, 0xf8, 0x48, 0x02, 0x82, 0x22, 0x11, 0x01, 0x9e, 0x22, 0x01, 0x1a, 0x38, 0x1a, 0x38, 0x3b, 0x5c, 0x19, 0x04, 0x68, 0x5b, 0xbe, 0x5b, 0x45, 0x1d, 0x48, 0x5a, 0xbe, 0x5a, 0x44, 0x1d, 0x00, 0x60, 0x1a, 0x48, 0xca, 0x89, 0x0c, 0x60, 0x9e, 0x59, 0xb1, 0x00, 0x01, 0x40, 0x00, 0x38, 0xda, 0x6f, 
-0x00, 0x4d, 0x00, 0x05, 0x38, 0x64, 0x1d, 0x6c, 0x6f, 0x39, 0x0b, 0x4d, 0x83, 0x59, 0x28, 0x59, 0x24, 0x39, 0x3f, 0x3f, 0x3b, 0x58, 0x19, 0x00, 0x19, 0x04, 0x9e, 0x59, 0xbc, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x48, 0x06, 0x8a, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x00, 0xbe, 0x58, 0xb1, 0x00, 0x82, 0x9f, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0xb1, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x00, 0x38, 0x90, 0x5e, 0x09, 0x58, 0x48, 0x61, 0x19, 0x48, 0x97, 0x8a, 0x19, 0x38, 0x0e, 0x4e, 0x00, 0x60, 0xbe, 0x58, 0xb0, 0x00, 0x9e, 0x5a, 0xb0, 0x00, 0x40, 0x38, 0xb6, 0x5e, 0x09, 0x58, 0x48, 0x62, 0x1a, 0x48, 0x82, 0x8a, 0x9e, 0x5a, 0xb0, 0x00, 0x44, 0x3b, 0x0f, 0x00, 0x60, 0x3b, 0x8d, 0x37, 0x69, 0x5b, 0x0f, 0x60, 0x58, 0x48, 0x06, 0x9a, 0xbe, 0x5b, 0x10, 0xf8, 0x00, 0x63, 0xbe, 0x5b, 0xc4, 0x26, 
-0x40, 0x4d, 0x0f, 0xf8, 0x05, 0x9e, 0xbe, 0x5b, 0x0f, 0xf8, 0x00, 0x63, 0xbe, 0x5b, 0x10, 0xf8, 0x40, 0x60, 0x40, 0x68, 0xbe, 0x58, 0x38, 0x1d, 0xbe, 0x58, 0x39, 0x1d, 0xbe, 0x58, 0x3a, 0x1d, 0xbe, 0x58, 0x3b, 0x1d, 0xbe, 0x58, 0x3c, 0x1d, 0xbe, 0x58, 0x3d, 0x1d, 0xbe, 0x58, 0x3e, 0x1d, 0xbe, 0x58, 0x3f, 0x1d, 0xbe, 0x58, 0x40, 0x1d, 0x00, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x45, 0x1d, 0x20, 0x60, 0xbe, 0x58, 0x44, 0x1d, 0x38, 0x60, 0x1d, 0x68, 0x3b, 0x61, 0xf8, 0x69, 0x6f, 0x39, 0x6c, 0x4d, 0x03, 0x5a, 0x48, 0x5a, 0x5b, 0x59, 0x19, 0x00, 0x19, 0x01, 0x19, 0x38, 0xfc, 0x4d, 0x62, 0x65, 0xf8, 0x6d, 0x38, 0x64, 0x1d, 0x6c, 0x9e, 0x5b, 0x45, 0x1d, 0x9e, 0x5a, 0x44, 0x1d, 0x1a, 0x38, 0x6f, 0x39, 0x8e, 0x4d, 0xa5, 0x5f, 0xa5, 0x5e, 0x83, 0x59, 0x9e, 0x58, 0x37, 0x1d, 0xd8, 0x48, 0xd3, 0xc9, 
-0x80, 0x4d, 0x02, 0x82, 0x23, 0x11, 0x01, 0x9e, 0x23, 0x01, 0x9e, 0x58, 0x37, 0x1d, 0xf8, 0x48, 0x02, 0x82, 0x22, 0x11, 0x01, 0x9e, 0x22, 0x01, 0x1a, 0x38, 0x1a, 0x38, 0x3b, 0x5c, 0x19, 0x04, 0x68, 0x5b, 0xbe, 0x5b, 0x45, 0x1d, 0x48, 0x5a, 0xbe, 0x5a, 0x44, 0x1d, 0x00, 0x60, 0x1a, 0x48, 0xca, 0x89, 0x0c, 0x60, 0x9e, 0x59, 0xb1, 0x00, 0x01, 0x40, 0x00, 0x38, 0x00, 0x05, 0x38, 0x64, 0x1d, 0x6c, 0x9e, 0x59, 0xb0, 0x00, 0x28, 0x5a, 0x02, 0x00, 0x82, 0x04, 0x00, 0x63, 0x3f, 0x6b, 0x3f, 0x62, 0x01, 0xac, 0x03, 0x92, 0x3f, 0x63, 0x00, 0x62, 0x3f, 0x6a, 0x83, 0x5c, 0x88, 0x5c, 0x83, 0x24, 0x03, 0x5f, 0xe2, 0x27, 0xe4, 0x2f, 0xfb, 0x58, 0x9e, 0x5a, 0xb0, 0x00, 0x19, 0x02, 0xbe, 0x5a, 0xb0, 0x00, 0x18, 0x60, 0x1a, 0x48, 0x6e, 0x89, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x00, 0xbe, 0x58, 0x96, 0x02, 
-0xc0, 0x4d, 0xb1, 0x00, 0x24, 0x61, 0x19, 0x48, 0x59, 0x89, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x3a, 0x38, 0x00, 0x60, 0x2f, 0x61, 0xf8, 0x69, 0x0b, 0x62, 0x47, 0x38, 0xd6, 0x4d, 0x1b, 0x59, 0x19, 0x01, 0x20, 0x60, 0x20, 0x68, 0x3b, 0x61, 0xf8, 0x69, 0x0b, 0x62, 0x47, 0x38, 0xdf, 0x4d, 0x1b, 0x59, 0x19, 0x01, 0x00, 0x60, 0x00, 0x61, 0x05, 0x69, 0x17, 0x62, 0x03, 0x6a, 0x47, 0x38, 0xe8, 0x4d, 0x1b, 0x59, 0x19, 0x01, 0x3a, 0x38, 0x00, 0x60, 0x2f, 0x61, 0xf8, 0x69, 0x0b, 0x62, 0x47, 0x38, 0xf1, 0x4d, 0x1b, 0x59, 0x19, 0x01, 0x20, 0x60, 0x20, 0x68, 0x3b, 0x61, 0xf8, 0x69, 0x0b, 0x62, 0x47, 0x38, 0xfa, 0x4d, 0x1b, 0x59, 0x19, 0x01, 0x3a, 0x38, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x94, 0xab, 0x88, 0xf7, 
-0x00, 0x4e, 0x9e, 0x58, 0x00, 0xf8, 0x10, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x9e, 0x58, 0x00, 0xf8, 0x18, 0xac, 0xfc, 0x91, 0x90, 0xab, 0x18, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0x3a, 0x38, 0x41, 0xa9, 0x19, 0x38, 0x1e, 0x4e, 0x41, 0xab, 0x04, 0x39, 0x07, 0x00, 0x20, 0x39, 0x2a, 0x4e, 0x29, 0x59, 0x08, 0x58, 0x08, 0x58, 0x08, 0x58, 0x00, 0x38, 0x1a, 0xf8, 0x3b, 0x58, 0x3a, 0x38, 0x00, 0x67, 0xbe, 0x5f, 0x1a, 0xf8, 0xbe, 0x5f, 0x1b, 0xf8, 0xbe, 0x5f, 0x1c, 0xf8, 0xbe, 0x5f, 0x1d, 0xf8, 0xbe, 0x5f, 0x1e, 0xf8, 0x3a, 0x38, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x01, 0x60, 0xbe, 0x58, 0xc9, 0x00, 0x09, 0x60, 0xb1, 0x61, 0xf8, 0x69, 0xec, 0x84, 
-0x40, 0x4e, 0x1b, 0x59, 0x00, 0x60, 0x10, 0x68, 0xb6, 0x61, 0xf8, 0x69, 0x1b, 0x59, 0xf9, 0x60, 0x01, 0x68, 0x00, 0x61, 0x3b, 0x58, 0xfa, 0x60, 0x01, 0x68, 0x00, 0x61, 0x3b, 0x58, 0x9e, 0x5a, 0xda, 0x1a, 0x9e, 0x5b, 0xdb, 0x1a, 0x43, 0x00, 0x06, 0x5c, 0x50, 0x61, 0x24, 0x40, 0x64, 0x65, 0x1c, 0x5d, 0x1f, 0x61, 0x01, 0x40, 0xbe, 0x58, 0xca, 0x00, 0x28, 0x61, 0x24, 0x40, 0x1c, 0x5d, 0xbe, 0x58, 0xcb, 0x00, 0x20, 0x61, 0x20, 0x69, 0x00, 0x62, 0x1b, 0x6a, 0x0b, 0x60, 0x1b, 0x68, 0x02, 0x38, 0x00, 0x1b, 0x07, 0x38, 0x6d, 0x4e, 0x3d, 0x5a, 0x1a, 0x38, 0x1a, 0x38, 0x1f, 0x61, 0x1f, 0x69, 0x20, 0x62, 0x1b, 0x6a, 0x2b, 0x60, 0x1b, 0x68, 0x02, 0x38, 0x20, 0x1b, 0x07, 0x38, 0x7a, 0x4e, 0x3d, 0x5a, 0x1a, 0x38, 0x1a, 0x38, 0x40, 0x61, 0x40, 0x69, 0xe0, 0x62, 0x1a, 0x6a, 0xeb, 0x60, 0x06, 0x95, 
-0x80, 0x4e, 0x1a, 0x68, 0x02, 0x38, 0xe0, 0x1a, 0x07, 0x38, 0x87, 0x4e, 0x3d, 0x5a, 0x1a, 0x38, 0x1a, 0x38, 0x19, 0x38, 0x2a, 0x4f, 0xf9, 0x60, 0x01, 0x68, 0x06, 0x61, 0x3b, 0x58, 0xfa, 0x60, 0x01, 0x68, 0x01, 0x61, 0x3b, 0x58, 0x9e, 0x5a, 0xdd, 0x1a, 0x9e, 0x5b, 0xde, 0x1a, 0x43, 0x00, 0x06, 0x5c, 0x50, 0x61, 0x24, 0x40, 0x64, 0x65, 0x1c, 0x5d, 0x1f, 0x61, 0x01, 0x40, 0xbe, 0x58, 0xca, 0x00, 0x28, 0x61, 0x24, 0x40, 0x1c, 0x5d, 0xbe, 0x58, 0xcb, 0x00, 0x20, 0x61, 0x20, 0x69, 0x0c, 0x62, 0x1b, 0x6a, 0x1f, 0x60, 0x1b, 0x68, 0x02, 0x38, 0x0c, 0x1b, 0x07, 0x38, 0xb1, 0x4e, 0x3d, 0x5a, 0x1a, 0x38, 0x1a, 0x38, 0x1f, 0x61, 0x1f, 0x69, 0x2c, 0x62, 0x1b, 0x6a, 0x3f, 0x60, 0x1b, 0x68, 0x02, 0x38, 0x2c, 0x1b, 0x07, 0x38, 0xbe, 0x4e, 0x3d, 0x5a, 0x1a, 0x38, 0x1a, 0x38, 0x40, 0x61, 0x58, 0x4c, 
-0xc0, 0x4e, 0x40, 0x69, 0xec, 0x62, 0x1a, 0x6a, 0xff, 0x60, 0x1a, 0x68, 0x02, 0x38, 0xec, 0x1a, 0x07, 0x38, 0xcb, 0x4e, 0x3d, 0x5a, 0x1a, 0x38, 0x1a, 0x38, 0x19, 0x38, 0x2a, 0x4f, 0xf9, 0x60, 0x01, 0x68, 0x00, 0x61, 0x3b, 0x58, 0xfa, 0x60, 0x01, 0x68, 0x00, 0x61, 0x3b, 0x58, 0x9e, 0x5a, 0xda, 0x1a, 0x9e, 0x5b, 0xdb, 0x1a, 0x43, 0x00, 0x06, 0x5c, 0x4b, 0x61, 0x24, 0x40, 0x64, 0x65, 0x1c, 0x5d, 0x1f, 0x61, 0x01, 0x40, 0xbe, 0x58, 0xca, 0x00, 0x4a, 0x61, 0x24, 0x40, 0x1c, 0x5d, 0x1f, 0x61, 0x01, 0x40, 0xbe, 0x58, 0xcb, 0x00, 0x19, 0x38, 0xdf, 0x4f, 0xf9, 0x60, 0x01, 0x68, 0x06, 0x61, 0x3b, 0x58, 0xfa, 0x60, 0x01, 0x68, 0x01, 0x61, 0x3b, 0x58, 0x9e, 0x5a, 0xdd, 0x1a, 0x9e, 0x5b, 0xde, 0x1a, 0x43, 0x00, 0x06, 0x5c, 0x46, 0x61, 0x24, 0x40, 0x64, 0x65, 0x1c, 0x5d, 0x1f, 0x61, 0xb5, 0xb7, 
-0x00, 0x4f, 0x01, 0x40, 0xbe, 0x58, 0xca, 0x00, 0x45, 0x61, 0x24, 0x40, 0x1c, 0x5d, 0x1f, 0x61, 0x01, 0x40, 0xbe, 0x58, 0xcb, 0x00, 0x19, 0x38, 0xdf, 0x4f, 0x19, 0x60, 0xb1, 0x61, 0xf8, 0x69, 0x1b, 0x59, 0x00, 0x60, 0x10, 0x68, 0xb6, 0x61, 0xf8, 0x69, 0x1b, 0x59, 0xf9, 0x60, 0x01, 0x68, 0x00, 0x61, 0x3b, 0x58, 0xfa, 0x60, 0x01, 0x68, 0x00, 0x61, 0x3b, 0x58, 0x00, 0x60, 0xbe, 0x58, 0xc9, 0x00, 0x65, 0xf3, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0xe0, 0x67, 0x1a, 0x6f, 0xe6, 0x63, 0x1a, 0x6b, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x58, 0x00, 0xac, 0x04, 0x90, 0xec, 0x67, 0x1a, 0x6f, 0xf6, 0x63, 0x1a, 0x6b, 0x20, 0x64, 0x20, 0x6c, 0xf9, 0x60, 0x01, 0x68, 0x03, 0x59, 0x06, 0x62, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x58, 0x39, 0xc1, 
-0x40, 0x4f, 0x00, 0xac, 0x01, 0x90, 0x10, 0x62, 0x3a, 0x48, 0x99, 0x8a, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5f, 0x1e, 0x5c, 0x1e, 0x5b, 0x2c, 0xf2, 0x3e, 0x5b, 0x3e, 0x5c, 0x3e, 0x5f, 0x3e, 0x5a, 0x3e, 0x59, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x9e, 0x58, 0x00, 0xf8, 0x10, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5f, 0x1e, 0x5c, 0x1e, 0x5b, 0x9f, 0xf0, 0x3e, 0x5b, 0x3e, 0x5c, 0x3e, 0x5f, 0x3e, 0x5a, 0x3e, 0x59, 0xda, 0x65, 0xf8, 0x6d, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x58, 0x00, 0xac, 0x02, 0x90, 0xde, 0x65, 0xf8, 0x6d, 0xa5, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x82, 0x09, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x02, 0x04, 0x38, 0x00, 0xff, 0xeb, 0xbd, 
-0x80, 0x4f, 0x40, 0x28, 0x1b, 0x5f, 0x08, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x12, 0x04, 0x38, 0x00, 0xff, 0x40, 0x28, 0x1b, 0x5f, 0xa5, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x82, 0x09, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0x00, 0xff, 0x02, 0x02, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5f, 0x08, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0x00, 0xff, 0x02, 0x12, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5f, 0xa5, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x82, 0x09, 0x9e, 0x63, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x02, 0x04, 0x38, 0x00, 0xff, 0x40, 0x28, 0x1b, 0x5b, 0x08, 0x9e, 0x63, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x12, 0x04, 0x38, 0x00, 0xff, 0x40, 0x28, 0x1b, 0x5b, 0xa3, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x82, 0x09, 0x9e, 0x63, 0x58, 0x04, 0x3b, 
-0xc0, 0x4f, 0x84, 0x3a, 0x00, 0xff, 0x02, 0x02, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5b, 0x08, 0x9e, 0x63, 0x58, 0x84, 0x3a, 0x00, 0xff, 0x02, 0x12, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5b, 0x88, 0x5c, 0x82, 0x38, 0x80, 0x00, 0x65, 0x89, 0x20, 0x64, 0x20, 0x6c, 0x19, 0x03, 0x19, 0x07, 0xf9, 0x60, 0x01, 0x68, 0x03, 0x59, 0x19, 0x01, 0x3b, 0x58, 0x5b, 0x9f, 0x3a, 0x38, 0x00, 0x67, 0x1b, 0x6f, 0x06, 0x63, 0x1b, 0x6b, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x58, 0x00, 0xac, 0x04, 0x90, 0x0c, 0x67, 0x1b, 0x6f, 0x16, 0x63, 0x1b, 0x6b, 0x10, 0x64, 0x10, 0x6c, 0xf9, 0x60, 0x01, 0x68, 0x03, 0x59, 0x06, 0x62, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x58, 0x00, 0xac, 0x01, 0x90, 0x10, 0x62, 0x3a, 0x48, 0x91, 0x8a, 0x1e, 0x5f, 0x1e, 0x5c, 0x1e, 0x5b, 0x2c, 0xf2, 0x3e, 0x5b, 0x3e, 0x5c, 0xcf, 0xdd, 
-0x00, 0x50, 0x3e, 0x5f, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x9e, 0x58, 0x00, 0xf8, 0x10, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x1e, 0x5f, 0x1e, 0x5c, 0x1e, 0x5b, 0x9f, 0xf0, 0x3e, 0x5b, 0x3e, 0x5c, 0x3e, 0x5f, 0xda, 0x65, 0xf8, 0x6d, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x58, 0x00, 0xac, 0x02, 0x90, 0xde, 0x65, 0xf8, 0x6d, 0xa5, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x98, 0x09, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x02, 0x04, 0x38, 0x00, 0xff, 0x40, 0x28, 0x1b, 0x5f, 0x08, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x12, 0x04, 0x38, 0x00, 0xff, 0x40, 0x28, 0x1b, 0x5f, 0xa5, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x98, 0x09, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0xd5, 0x2a, 
-0x40, 0x50, 0x00, 0xff, 0x02, 0x02, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5f, 0x08, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0x00, 0xff, 0x02, 0x12, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5f, 0xa5, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x98, 0x09, 0x9e, 0x63, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x02, 0x04, 0x38, 0x00, 0xff, 0x40, 0x28, 0x1b, 0x5b, 0x08, 0x9e, 0x63, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x12, 0x04, 0x38, 0x00, 0xff, 0x40, 0x28, 0x1b, 0x5b, 0xa3, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x98, 0x09, 0x9e, 0x63, 0x58, 0x84, 0x3a, 0x00, 0xff, 0x02, 0x02, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5b, 0x08, 0x9e, 0x63, 0x58, 0x84, 0x3a, 0x00, 0xff, 0x02, 0x12, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5b, 0x88, 0x5c, 0x82, 0x38, 0x80, 0x00, 0x01, 0xb5, 
-0x80, 0x50, 0x6d, 0x89, 0x10, 0x64, 0x10, 0x6c, 0x19, 0x07, 0x19, 0x03, 0xf9, 0x60, 0x01, 0x68, 0x03, 0x59, 0x19, 0x01, 0x3b, 0x58, 0x63, 0x9f, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0x65, 0x03, 0xbe, 0x58, 0x6e, 0x03, 0xbe, 0x58, 0x6c, 0x03, 0xbe, 0x58, 0x66, 0x03, 0xbe, 0x58, 0x68, 0x03, 0xbe, 0x58, 0x69, 0x03, 0xbe, 0x58, 0x67, 0x03, 0x3a, 0x38, 0x01, 0xb8, 0x00, 0xb8, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x41, 0xab, 0x50, 0xb2, 0x12, 0xac, 0xb4, 0x90, 0x81, 0xac, 0x50, 0x92, 0x92, 0xac, 0x46, 0x90, 0xb2, 0xac, 0x44, 0x92, 0x9e, 0x5a, 0x65, 0x03, 0x02, 0xac, 0x7f, 0x92, 0x9e, 0x5a, 0x67, 0x03, 0x18, 0x32, 0x88, 0x88, 0x9e, 0x5f, 0x68, 0x03, 0x9e, 0x59, 0x69, 0x03, 0xe1, 0x31, 0x4e, 0xe7, 
-0xc0, 0x50, 0x85, 0x8a, 0x9e, 0x5a, 0x65, 0x03, 0x12, 0xa8, 0xbe, 0x5a, 0x65, 0x03, 0xa2, 0xa8, 0x9e, 0x5e, 0x66, 0x03, 0x9e, 0x5d, 0x65, 0x03, 0x1d, 0xac, 0x1a, 0x90, 0x9e, 0x5a, 0x6b, 0x03, 0xc2, 0x02, 0x43, 0x5b, 0x19, 0x06, 0xc2, 0x3c, 0x37, 0x00, 0x1f, 0x88, 0x00, 0x66, 0x9e, 0x5d, 0x6a, 0x03, 0x19, 0x05, 0xa2, 0x3c, 0x03, 0x00, 0x01, 0x88, 0x00, 0x65, 0xbe, 0x5d, 0x6a, 0x03, 0x71, 0x62, 0x03, 0x6a, 0x37, 0x64, 0xa4, 0x40, 0x40, 0x02, 0xbe, 0x5a, 0x6b, 0x03, 0x0d, 0x9e, 0xc0, 0x3a, 0x6d, 0x03, 0x43, 0x5b, 0x19, 0x06, 0xc2, 0x3c, 0x04, 0x00, 0x06, 0x88, 0x9e, 0x5c, 0x65, 0x03, 0x1c, 0xa8, 0xbe, 0x5c, 0x65, 0x03, 0x00, 0x66, 0xbe, 0x5e, 0x66, 0x03, 0x51, 0x9e, 0x5d, 0x77, 0xf6, 0x39, 0x69, 0x00, 0x52, 0x8a, 0xe0, 0x3a, 0x6a, 0x00, 0x43, 0x59, 0x50, 0x9e, 0x5d, 0x77, 0xa4, 0x4e, 
-0x00, 0x51, 0xf6, 0x39, 0x69, 0x00, 0x4a, 0x8a, 0xe6, 0x3a, 0x00, 0x00, 0x17, 0x8a, 0xe6, 0x3a, 0x01, 0x00, 0x16, 0x8a, 0xa3, 0x72, 0x18, 0x32, 0x15, 0x88, 0xe2, 0x3b, 0x02, 0x00, 0xf7, 0xac, 0x01, 0x90, 0x68, 0x5b, 0x70, 0x3a, 0x57, 0x00, 0x43, 0x5b, 0x64, 0x39, 0xff, 0x00, 0x07, 0xac, 0x01, 0x90, 0x36, 0x9e, 0xfe, 0x5b, 0x64, 0x39, 0xff, 0x00, 0x32, 0x9e, 0x6a, 0x71, 0x30, 0x9e, 0x6b, 0x71, 0x2e, 0x9e, 0xe2, 0x3b, 0x02, 0x00, 0x10, 0x8a, 0x19, 0x13, 0xf7, 0xac, 0x01, 0x90, 0x68, 0x5b, 0x70, 0x3a, 0x57, 0x00, 0x43, 0x5b, 0x64, 0x39, 0xff, 0x00, 0x07, 0xac, 0x01, 0x92, 0x1f, 0x9e, 0xfe, 0x5b, 0x64, 0x39, 0xff, 0x00, 0x1b, 0x9e, 0x6c, 0x71, 0x19, 0x9e, 0x01, 0x63, 0xbe, 0x5b, 0x67, 0x03, 0x9e, 0x5b, 0x65, 0x03, 0x13, 0xaa, 0xbe, 0x5b, 0x65, 0x03, 0x00, 0x63, 0xbe, 0x5b, 0x47, 0xea, 
-0x40, 0x51, 0x68, 0x03, 0xbe, 0x5b, 0x66, 0x03, 0x64, 0x63, 0xd3, 0xb3, 0x0c, 0x9e, 0xff, 0x63, 0x19, 0x17, 0xd3, 0xb3, 0x19, 0x07, 0xbe, 0x5f, 0x68, 0x03, 0x05, 0x9e, 0xff, 0x61, 0x19, 0x17, 0xd3, 0xb1, 0x19, 0x07, 0x5d, 0x7f, 0x50, 0xb2, 0x3a, 0xaa, 0xd0, 0xb2, 0xf1, 0xab, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x81, 0xb8, 0x5a, 0x38, 0x50, 0xb2, 0x3a, 0xaa, 0xd0, 0xb2, 0xf1, 0xab, 0x9e, 0x58, 0x65, 0x03, 0x10, 0xac, 0x02, 0x90, 0xb2, 0xac, 0x14, 0x90, 0xbe, 0xac, 0x02, 0x90, 0x3c, 0xa9, 0x01, 0x9e, 0x24, 0xa9, 0xb2, 0xaa, 0x92, 0xa8, 0x00, 0x60, 0x5d, 0x78, 0xbe, 0x58, 0x67, 0x03, 0xa2, 0xaa, 0x9e, 0x58, 0x65, 0x03, 0x08, 0xac, 0x1b, 0x90, 0xff, 0x3b, 0x1a, 0x38, 0x3c, 0xab, 0x17, 0x9e, 0x9e, 0x5f, 0x14, 0x39, 
-0x80, 0x51, 0x68, 0x03, 0x9e, 0x59, 0x69, 0x03, 0xe1, 0x31, 0x11, 0x88, 0x3c, 0xa9, 0x00, 0x60, 0xbe, 0x58, 0x65, 0x03, 0xbe, 0x58, 0x6e, 0x03, 0xbe, 0x58, 0x6c, 0x03, 0xbe, 0x58, 0x66, 0x03, 0xbe, 0x58, 0x68, 0x03, 0xbe, 0x58, 0x69, 0x03, 0xbe, 0x58, 0x67, 0x03, 0xa2, 0xaa, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x81, 0xb8, 0x5a, 0x38, 0xba, 0xac, 0x28, 0x90, 0xd1, 0xac, 0x26, 0x90, 0x00, 0x60, 0xb6, 0x78, 0xb6, 0x70, 0x19, 0x61, 0x19, 0x48, 0x02, 0x80, 0x19, 0x38, 0x44, 0x52, 0x9e, 0x58, 0x65, 0x03, 0x10, 0xac, 0xf6, 0x93, 0x9e, 0x58, 0x65, 0x03, 0x00, 0xa8, 0xbe, 0x58, 0x65, 0x03, 0x19, 0x38, 0xcc, 0x51, 0x9e, 0x58, 0x65, 0x03, 0x00, 0xaa, 0x08, 0xa8, 0xbe, 0x58, 0x65, 0x03, 0xb2, 0xac, 0x0b, 0x92, 0xee, 0x71, 
-0xc0, 0x51, 0x00, 0x60, 0xb6, 0x78, 0xb6, 0x70, 0x19, 0x61, 0x19, 0x48, 0x02, 0x80, 0x19, 0x38, 0x44, 0x52, 0xaa, 0xac, 0xf8, 0x93, 0x3c, 0xab, 0x3a, 0x38, 0xd1, 0xaa, 0x9e, 0x58, 0x6c, 0x03, 0x37, 0x61, 0x01, 0x40, 0x71, 0x61, 0x03, 0x69, 0x20, 0x01, 0x21, 0x5a, 0x62, 0x60, 0x1d, 0x59, 0xb4, 0x70, 0x18, 0x30, 0x24, 0x8a, 0x9e, 0x58, 0xe3, 0x19, 0x01, 0x5b, 0x04, 0x38, 0xff, 0x00, 0x1d, 0x59, 0x64, 0x3b, 0x00, 0xff, 0xfe, 0x5b, 0x7f, 0x38, 0x66, 0x5b, 0x28, 0x60, 0x75, 0x3b, 0x28, 0x00, 0x7b, 0x58, 0x28, 0x60, 0xcf, 0x3b, 0xed, 0x51, 0x05, 0x5b, 0x7d, 0x59, 0x01, 0x60, 0x1d, 0x59, 0x00, 0x61, 0x2f, 0x3c, 0xf4, 0x51, 0x45, 0x5b, 0x23, 0x01, 0x3d, 0x5a, 0x8d, 0x60, 0x6f, 0x3a, 0xfb, 0x51, 0x05, 0x59, 0x3d, 0x5a, 0x1a, 0x38, 0x1a, 0x38, 0x16, 0x9e, 0x00, 0x60, 0xff, 0x3b, 0x03, 0xef, 
-0x00, 0x52, 0x1d, 0x59, 0x01, 0x60, 0x1d, 0x59, 0x00, 0x61, 0x2f, 0x3c, 0x07, 0x52, 0x45, 0x5b, 0x23, 0x01, 0x3d, 0x5a, 0x00, 0x63, 0x6f, 0x3a, 0x0e, 0x52, 0x1a, 0x38, 0x7d, 0x5a, 0x1a, 0x38, 0x00, 0x60, 0xb5, 0x78, 0xb4, 0x78, 0x55, 0x78, 0x1b, 0x78, 0x66, 0x60, 0xbe, 0x58, 0x6d, 0x03, 0x9e, 0x58, 0x6e, 0x03, 0x02, 0x39, 0x03, 0x00, 0x0b, 0x8a, 0x19, 0x00, 0xbe, 0x58, 0x6e, 0x03, 0x37, 0x61, 0x01, 0x40, 0xbe, 0x58, 0x6f, 0x03, 0x00, 0x39, 0x04, 0x00, 0xbe, 0x59, 0x69, 0x03, 0x00, 0x60, 0xbe, 0x58, 0x70, 0x03, 0x9e, 0x58, 0x6c, 0x03, 0x19, 0x00, 0x02, 0x39, 0x03, 0x00, 0x01, 0x88, 0x00, 0x60, 0xbe, 0x58, 0x6c, 0x03, 0x00, 0x60, 0x9e, 0x59, 0x6e, 0x03, 0x1b, 0x11, 0x02, 0x88, 0x9e, 0x58, 0x6c, 0x03, 0xbe, 0x58, 0x6a, 0x03, 0x71, 0x62, 0x03, 0x6a, 0x37, 0x61, 0x01, 0x40, 0x27, 0xe3, 
-0x40, 0x52, 0x40, 0x02, 0xbe, 0x5a, 0x6b, 0x03, 0x3a, 0x38, 0x3c, 0xa9, 0xf9, 0xab, 0xf1, 0xab, 0x50, 0xb2, 0x3a, 0xaa, 0xd0, 0xb2, 0xb2, 0xaa, 0xa2, 0xaa, 0xaa, 0xaa, 0x00, 0x60, 0x5d, 0x78, 0xbe, 0x58, 0x65, 0x03, 0xbe, 0x58, 0x6e, 0x03, 0xbe, 0x58, 0x6c, 0x03, 0xbe, 0x58, 0x66, 0x03, 0xbe, 0x58, 0x68, 0x03, 0xbe, 0x58, 0x69, 0x03, 0xbe, 0x58, 0x67, 0x03, 0x3a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x00, 0xb8, 0x01, 0xb8, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x13, 0xb8, 0x14, 0xb8, 0x15, 0xb8, 0x90, 0xab, 0x00, 0x60, 0xf8, 0x68, 0x03, 0x58, 0xbe, 0x58, 0xb2, 0x00, 0x62, 0x65, 0xf8, 0x6d, 0x26, 0x66, 0x04, 0x6e, 0xef, 0xac, 0x2d, 0x90, 0xe5, 0xac, 0x02, 0x90, 0xd5, 0xac, 0x06, 0x90, 0xef, 0x3a, 0x81, 0x52, 0xa5, 0x59, 0x5a, 0xe2, 
-0x80, 0x52, 0xc5, 0x58, 0x3b, 0x58, 0x22, 0x9e, 0xeb, 0x62, 0x17, 0x63, 0x01, 0x6b, 0x01, 0x64, 0x01, 0x6c, 0x2d, 0x66, 0x01, 0x6e, 0x26, 0x67, 0x04, 0x6f, 0xef, 0x3a, 0xa4, 0x52, 0xe5, 0x58, 0x02, 0x38, 0x3e, 0x04, 0x04, 0x88, 0x19, 0x03, 0x19, 0x04, 0x19, 0x06, 0x0e, 0x9e, 0xa5, 0x58, 0x1b, 0x4a, 0x04, 0x98, 0x62, 0x38, 0x01, 0x00, 0x03, 0x58, 0x05, 0x9e, 0x1c, 0x4a, 0x03, 0x96, 0x82, 0x38, 0x01, 0x00, 0x03, 0x58, 0xd0, 0x00, 0x1d, 0x5e, 0x19, 0x02, 0x05, 0x9e, 0xef, 0x3a, 0xaa, 0x52, 0xa5, 0x59, 0xc5, 0x58, 0x3b, 0x58, 0x00, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x18, 0xa8, 0x00, 0x61, 0xf8, 0x69, 0x1b, 0x59, 0x95, 0xb8, 0x94, 0xb8, 0x93, 0xb8, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x81, 0xb8, 0x80, 0xb8, 0x5a, 0xab, 0x5e, 0x25, 
-0xc0, 0x52, 0x1a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x78, 0xab, 0x5a, 0xab, 0x1a, 0x38, 0x78, 0xa9, 0x5a, 0x38, 0x78, 0xab, 0x5a, 0xa9, 0x1a, 0x38, 0x78, 0xa9, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x00, 0xb8, 0x1e, 0x58, 0x1e, 0x59, 0x02, 0x70, 0x14, 0x38, 0x30, 0x00, 0x08, 0x8a, 0x9e, 0x58, 0xb6, 0x00, 0x19, 0x00, 0x1a, 0x61, 0x20, 0x11, 0x02, 0x8e, 0xbe, 0x58, 0xb6, 0x00, 0xc9, 0xab, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x5a, 0x38, 0x5a, 0x38, 0x00, 0xb8, 0x1e, 0x58, 0x1e, 0x59, 0x3c, 0xa9, 0x18, 0x60, 0x80, 0x68, 0x8f, 0xb0, 0xaf, 0xa9, 0xd9, 0xab, 0x1a, 0x38, 0xfe, 0x9f, 0x17, 0x98, 
-0x00, 0x53, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x01, 0xb8, 0x00, 0xb8, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x41, 0xab, 0x50, 0xb2, 0x0a, 0xac, 0x04, 0x92, 0xaa, 0xa8, 0x1a, 0x38, 0x1a, 0x38, 0x5a, 0x9e, 0x5d, 0x70, 0x00, 0x3a, 0x5e, 0x00, 0x9e, 0x59, 0x21, 0x04, 0x19, 0xac, 0x48, 0x90, 0x03, 0x61, 0x38, 0x48, 0x01, 0x9c, 0x44, 0x9e, 0x83, 0x61, 0x38, 0x48, 0x18, 0x8a, 0x60, 0x71, 0x19, 0x11, 0x60, 0x79, 0x3f, 0x8e, 0x53, 0xb1, 0x21, 0x5b, 0x30, 0x39, 0x22, 0x04, 0xbe, 0x59, 0x22, 0x04, 0x00, 0xac, 0x03, 0x90, 0xbe, 0x5b, 0x25, 0x04, 0x34, 0x9e, 0xfe, 0x5b, 0x75, 0x3b, 0x25, 0x04, 0x9e, 0x59, 0x24, 0x04, 0x7d, 0x59, 0xbe, 0x59, 0x24, 0x04, 0x2b, 0x9e, 0x9e, 0x59, 0x21, 0x04, 0x7b, 0x7a, 
-0x40, 0x53, 0x19, 0xaa, 0xbe, 0x59, 0x21, 0x04, 0x53, 0xb1, 0x9e, 0x5b, 0x22, 0x04, 0x64, 0x3b, 0xff, 0x00, 0x3b, 0x48, 0x11, 0x88, 0x9e, 0x59, 0x21, 0x04, 0x21, 0xa8, 0xbe, 0x59, 0x21, 0x04, 0x9e, 0x59, 0x23, 0x04, 0x19, 0x11, 0xbe, 0x59, 0x23, 0x04, 0x14, 0x88, 0x9e, 0x59, 0x21, 0x04, 0x11, 0xa8, 0xbe, 0x59, 0x21, 0x04, 0x0e, 0x9e, 0x9e, 0x59, 0x21, 0x04, 0x21, 0xaa, 0xbe, 0x59, 0x21, 0x04, 0x9e, 0x59, 0x24, 0x04, 0x22, 0x39, 0x40, 0x00, 0xbe, 0x59, 0x24, 0x04, 0x02, 0x9e, 0x53, 0xb1, 0x3b, 0x5a, 0x19, 0x00, 0x5d, 0x78, 0x06, 0x39, 0x01, 0x00, 0x2c, 0x8a, 0x16, 0x39, 0xa1, 0x00, 0x10, 0x8a, 0xaa, 0xa8, 0x50, 0xb2, 0x3a, 0xaa, 0xd0, 0xb2, 0xf9, 0xab, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x81, 0xb8, 0xf8, 0xe9, 
-0x80, 0x53, 0x5a, 0x38, 0x19, 0x38, 0xe8, 0x42, 0x9a, 0xa8, 0xa2, 0xac, 0x98, 0x3c, 0x42, 0x48, 0xa2, 0xaa, 0xaa, 0xaa, 0x00, 0x60, 0x5d, 0x78, 0x50, 0xb2, 0x3a, 0xaa, 0xd0, 0xb2, 0xf9, 0xab, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x81, 0xb8, 0x5a, 0x38, 0x04, 0x60, 0x5e, 0x71, 0x26, 0x3a, 0x99, 0x00, 0x0a, 0x88, 0x9e, 0x58, 0x21, 0x04, 0x18, 0xa8, 0xbe, 0x58, 0x21, 0x04, 0x00, 0x60, 0xbe, 0x58, 0x22, 0x04, 0x84, 0x60, 0x22, 0x9e, 0x26, 0x3a, 0x84, 0x00, 0x02, 0x88, 0x04, 0x60, 0x1d, 0x9e, 0x26, 0x3a, 0x83, 0x00, 0x02, 0x88, 0x04, 0x60, 0x18, 0x9e, 0x26, 0x3a, 0x96, 0x00, 0x02, 0x88, 0x06, 0x60, 0x13, 0x9e, 0x26, 0x3a, 0x97, 0x00, 0x02, 0x88, 0x06, 0x60, 0x0e, 0x9e, 0x26, 0x3a, 0x5b, 0x00, 0x02, 0x88, 0x60, 0xc8, 
-0xc0, 0x53, 0x06, 0x60, 0x09, 0x9e, 0x26, 0x3a, 0x58, 0x00, 0x02, 0x88, 0x06, 0x60, 0x04, 0x9e, 0x26, 0x3a, 0x59, 0x00, 0x01, 0x88, 0x0b, 0x60, 0xa1, 0x78, 0xaa, 0xa8, 0x50, 0xb2, 0x3a, 0xaa, 0xd0, 0xb2, 0xf9, 0xab, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x81, 0xb8, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x1e, 0x5b, 0x11, 0xb3, 0x1a, 0x03, 0x5c, 0x38, 0x9e, 0x58, 0x07, 0xf8, 0x1e, 0x58, 0x9e, 0x58, 0x02, 0xf8, 0x1e, 0x58, 0x00, 0x60, 0xbe, 0x58, 0xb1, 0x00, 0x19, 0x38, 0x84, 0x54, 0x00, 0x60, 0x80, 0x68, 0xbe, 0x58, 0x07, 0xf8, 0x09, 0x60, 0xbe, 0x58, 0x02, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0xb0, 0x00, 0x10, 0x60, 0x03, 0xa4, 0x30, 0x64, 0x82, 0xa4, 0x19, 0x38, 0x45, 0x54, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xf0, 0x01, 
-0x00, 0x54, 0xbe, 0x58, 0x00, 0xf8, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0xd5, 0xf0, 0x1e, 0x5b, 0xc6, 0xf0, 0x3e, 0x5b, 0x19, 0x38, 0x50, 0x54, 0x82, 0xa0, 0x43, 0xa0, 0x19, 0x38, 0x6d, 0x54, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x82, 0xa0, 0x19, 0x14, 0x10, 0x65, 0x9d, 0x48, 0xd9, 0x95, 0x03, 0xa0, 0x19, 0x10, 0xd4, 0x89, 0x19, 0x38, 0x95, 0x54, 0x9e, 0x59, 0xb0, 0x00, 0x19, 0x01, 0xbe, 0x59, 0xb0, 0x00, 0x9e, 0x58, 0xbd, 0x00, 0x38, 0x48, 0xc8, 0x89, 0x00, 0x60, 0xbe, 0x58, 0xb0, 0x00, 0x9e, 0x59, 0xbc, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x00, 0x19, 0x48, 0x03, 0x82, 0xbe, 0x58, 0xb1, 0x00, 0xbb, 0x9f, 0x3e, 0x58, 0xbe, 0x58, 0x02, 0xf8, 0x3e, 0x58, 0x9a, 0x1e, 
-0x40, 0x54, 0xbe, 0x58, 0x07, 0xf8, 0x5b, 0x38, 0x3e, 0x5b, 0x3a, 0x38, 0x3b, 0x61, 0xf8, 0x69, 0x81, 0x5a, 0xff, 0x38, 0x86, 0x5c, 0x44, 0x2a, 0x6f, 0x39, 0x4e, 0x54, 0x5b, 0x59, 0x19, 0x01, 0x3a, 0x38, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x9e, 0x58, 0x00, 0xf8, 0x10, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x19, 0x38, 0x64, 0x54, 0x1a, 0x38, 0x1a, 0x38, 0x9e, 0x5e, 0xb2, 0x00, 0x1e, 0xac, 0xfa, 0x91, 0x00, 0x66, 0xbe, 0x5e, 0xb2, 0x00, 0x3a, 0x38, 0x94, 0xab, 0x26, 0x66, 0x04, 0x6e, 0xef, 0x3a, 0x6a, 0x54, 0xdd, 0x5e, 0x1a, 0x38, 0x94, 0xa9, 0x3a, 0x38, 0x30, 0x65, 0xa4, 0x15, 0x18, 0x61, 0x25, 0x40, 0x00, 0x3d, 0x18, 0x08, 0x26, 0x66, 0x04, 0x6e, 0x42, 0x38, 0x10, 0x00, 0x05, 0x88, 0xef, 0x3a, 0x7b, 0x54, 0xc5, 0x58, 0x1d, 0x5d, 0x3a, 0x38, 0xef, 0x3a, 0x82, 0x54, 0xc5, 0x58, 0x0b, 0xb5, 
-0x80, 0x54, 0xa3, 0x59, 0x20, 0x00, 0x1d, 0x5d, 0x3a, 0x38, 0x9e, 0x58, 0x04, 0xf8, 0x9e, 0x5a, 0x05, 0xf8, 0x9e, 0x5c, 0x00, 0xf8, 0x02, 0x00, 0x24, 0xac, 0x01, 0x90, 0x06, 0x58, 0x55, 0x61, 0x01, 0x40, 0x64, 0x62, 0x1c, 0x5a, 0xbe, 0x58, 0x08, 0x00, 0x3a, 0x38, 0x1e, 0x5b, 0x18, 0x61, 0x21, 0x5c, 0x00, 0x66, 0x0b, 0x7e, 0xc0, 0x3d, 0x18, 0x08, 0x30, 0x67, 0x00, 0x73, 0xff, 0x61, 0x7f, 0x69, 0xa3, 0x5a, 0x6f, 0x38, 0xa4, 0x54, 0x48, 0x5a, 0x1a, 0x38, 0x52, 0x3a, 0x08, 0x00, 0x04, 0x5a, 0x59, 0x48, 0x02, 0x98, 0x41, 0x59, 0xe1, 0x5b, 0xa4, 0x05, 0x19, 0x17, 0x10, 0x60, 0xf8, 0x48, 0xef, 0x95, 0x9e, 0x58, 0xb1, 0x00, 0x0c, 0x61, 0x01, 0x40, 0x00, 0x3a, 0x00, 0x05, 0x0a, 0x7a, 0x02, 0x62, 0x00, 0x61, 0xc1, 0x58, 0x1c, 0x5a, 0x0a, 0x72, 0x02, 0x02, 0x0b, 0x70, 0x00, 0xab, 0x6b, 0x5e, 
-0xc0, 0x54, 0x06, 0x39, 0x00, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x01, 0x00, 0x06, 0x8a, 0x0d, 0x9e, 0x7b, 0x5a, 0x0b, 0x71, 0x19, 0x01, 0x0b, 0x79, 0x08, 0x9e, 0x43, 0x58, 0x10, 0x58, 0x60, 0x83, 0x03, 0x28, 0x1b, 0x5a, 0x00, 0x61, 0x0b, 0x79, 0x00, 0x9e, 0x19, 0x06, 0xdc, 0x48, 0xc3, 0x89, 0x3e, 0x5b, 0x3a, 0x38, 0xa5, 0xac, 0x0a, 0x90, 0x00, 0x61, 0x05, 0x69, 0xff, 0x60, 0x01, 0x68, 0x07, 0x38, 0xe4, 0x54, 0x9e, 0x58, 0xf9, 0x04, 0x1b, 0x59, 0x19, 0x01, 0x00, 0x60, 0xac, 0xb0, 0xfa, 0x61, 0x5f, 0x69, 0x29, 0x58, 0x02, 0x38, 0xff, 0xff, 0x02, 0x8a, 0xf5, 0xac, 0x47, 0x90, 0x40, 0x66, 0x9e, 0x5f, 0xbc, 0x00, 0x0c, 0x61, 0x9e, 0x58, 0xbd, 0x00, 0x01, 0x40, 0x07, 0x40, 0x00, 0x61, 0x05, 0x69, 0x20, 0x01, 0xff, 0x62, 0x01, 0x6a, 0x40, 0x12, 0xff, 0x60, 0xff, 0x68, 0x57, 0x38, 0x3c, 0xec, 
-0x00, 0x55, 0x1d, 0x59, 0x00, 0x67, 0xe6, 0x40, 0x00, 0x3d, 0x80, 0x57, 0x00, 0x3c, 0x00, 0x05, 0x00, 0x3b, 0x18, 0x08, 0xe2, 0x38, 0x08, 0x00, 0x01, 0x96, 0x3d, 0x94, 0xa1, 0x58, 0x81, 0x59, 0x80, 0xeb, 0xa1, 0x58, 0x61, 0x59, 0x8d, 0xeb, 0x61, 0x58, 0x81, 0x59, 0x92, 0xeb, 0x18, 0x12, 0xf5, 0x8b, 0x19, 0x07, 0xe8, 0x9f, 0x00, 0x60, 0xac, 0xb0, 0xfa, 0x61, 0x5f, 0x69, 0x29, 0x58, 0x02, 0x38, 0xff, 0xff, 0x03, 0x8a, 0xf5, 0xac, 0x12, 0x90, 0x00, 0x60, 0x00, 0x3d, 0x40, 0x57, 0x00, 0x3c, 0xe0, 0x1a, 0x00, 0x3b, 0x18, 0x08, 0xa1, 0x58, 0x81, 0x59, 0x80, 0xeb, 0xa1, 0x58, 0x61, 0x59, 0x8d, 0xeb, 0x61, 0x58, 0x81, 0x59, 0x92, 0xeb, 0x18, 0x12, 0xf5, 0x8b, 0x00, 0x63, 0xbe, 0x5b, 0x0b, 0x00, 0x0b, 0x61, 0x78, 0xab, 0x5a, 0x62, 0xe1, 0x6a, 0xac, 0xb2, 0xfa, 0x60, 0x5f, 0x68, 0x25, 0x3c, 
-0x40, 0x55, 0x00, 0x62, 0x57, 0x38, 0x7a, 0x38, 0x19, 0x10, 0x19, 0x11, 0xac, 0xb2, 0x09, 0x5a, 0x5b, 0x48, 0xf2, 0x89, 0x78, 0xa9, 0x1a, 0x38, 0x3a, 0x38, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0x41, 
-0x80, 0x55, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x55, 
-0xc0, 0x55, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x55, 
-0x00, 0x56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x55, 
-0x40, 0x56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x56, 
-0x80, 0x56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x56, 
-0xc0, 0x56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x56, 
-0x00, 0x57, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x56, 
-0xc0, 0x59, 0x00, 0x02, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x82, 0x5b, 
-0x00, 0x5a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x98, 0x3f, 0x40, 0x5a, 0x98, 0x3f, 0xa3, 0x5a, 0x98, 0x3f, 0x51, 0x5a, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3a, 
-0x40, 0x5a, 0xc0, 0x60, 0x59, 0x68, 0x09, 0x58, 0x9e, 0x59, 0x06, 0x00, 0x20, 0x29, 0xbe, 0x59, 0x06, 0x00, 0xc1, 0x60, 0x59, 0x68, 0x09, 0x58, 0x9e, 0x59, 0x07, 0x00, 0x20, 0x29, 0xbe, 0x59, 0x07, 0x00, 0x3a, 0x38, 0x20, 0x60, 0xbe, 0x58, 0xd1, 0x00, 0x30, 0x60, 0xbe, 0x58, 0xd2, 0x00, 0x00, 0x60, 0xbe, 0x58, 0xd6, 0x00, 0xbe, 0x58, 0xd7, 0x00, 0xbe, 0x58, 0xd8, 0x00, 0xbe, 0x58, 0xd9, 0x00, 0x00, 0x60, 0x03, 0x68, 0xbe, 0x58, 0xc0, 0x00, 0x08, 0x60, 0xbe, 0x58, 0xc5, 0x00, 0x16, 0x60, 0xbe, 0x58, 0xba, 0x00, 0x18, 0x60, 0x03, 0x68, 0xbe, 0x58, 0xbf, 0x00, 0x16, 0x60, 0xbe, 0x58, 0xb8, 0x00, 0x24, 0x60, 0xbe, 0x58, 0xb9, 0x00, 0x00, 0x60, 0xbe, 0x58, 0xbe, 0x00, 0x16, 0x60, 0xbe, 0x58, 0xbb, 0x00, 0x24, 0x60, 0xbe, 0x58, 0xbc, 0x00, 0x18, 0x60, 0x03, 0x68, 0xbe, 0x58, 0x71, 0x3e, 
-0x80, 0x5a, 0xda, 0x00, 0x9e, 0x58, 0xb8, 0x00, 0x10, 0x38, 0xb9, 0x00, 0xbe, 0x58, 0x5c, 0x1a, 0x10, 0x38, 0xbe, 0x00, 0xbe, 0x58, 0x5d, 0x1a, 0xa0, 0xa8, 0xa0, 0xac, 0x09, 0x90, 0x9e, 0x58, 0xb8, 0x00, 0xbe, 0x58, 0xe9, 0x19, 0x9e, 0x58, 0xb9, 0x00, 0xbe, 0x58, 0xe8, 0x19, 0x08, 0x9e, 0x9e, 0x58, 0xb9, 0x00, 0xbe, 0x58, 0xe9, 0x19, 0x9e, 0x58, 0xb8, 0x00, 0xbe, 0x58, 0xe8, 0x19, 0x01, 0x60, 0xbe, 0x58, 0xbd, 0x00, 0x3a, 0x38, 0x52, 0x60, 0xbe, 0x58, 0x50, 0x01, 0x08, 0x60, 0xff, 0x68, 0xbe, 0x58, 0xbc, 0x01, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0xbd, 0x01, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0xbe, 0x01, 0x39, 0x60, 0xbe, 0x58, 0x51, 0x01, 0xf0, 0x60, 0xbe, 0x58, 0x52, 0x01, 0x15, 0x60, 0xbe, 0x58, 0x53, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x19, 0x04, 0xbe, 0x58, 0x1d, 0x04, 0x6b, 0x21, 
-0xc0, 0x5a, 0xe8, 0x60, 0x03, 0x68, 0xbe, 0x58, 0x1c, 0x04, 0x3c, 0x60, 0xbe, 0x58, 0x1e, 0x04, 0x03, 0x60, 0xbe, 0x58, 0x1a, 0x04, 0x3f, 0x60, 0xbe, 0x58, 0x1b, 0x04, 0x01, 0x60, 0xbe, 0x58, 0x1f, 0x04, 0xbe, 0x58, 0x18, 0x04, 0x38, 0x60, 0xbe, 0x58, 0x20, 0x04, 0x20, 0x60, 0xbe, 0x58, 0x54, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x55, 0x01, 0x01, 0x60, 0x10, 0x68, 0xbe, 0x58, 0x56, 0x01, 0x30, 0x60, 0xbe, 0x58, 0x57, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x58, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x59, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xba, 0x01, 0x10, 0x60, 0xbe, 0x58, 0x5a, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x5b, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xb4, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xb5, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xb6, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xb7, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xb8, 0x01, 0x33, 0x26, 
-0x00, 0x5b, 0x00, 0x60, 0xbe, 0x58, 0xb9, 0x01, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x5c, 0x01, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x5d, 0x01, 0x88, 0x60, 0x88, 0x68, 0xbe, 0x58, 0x5e, 0x01, 0x88, 0x60, 0x88, 0x68, 0xbe, 0x58, 0x5f, 0x01, 0x88, 0x60, 0x88, 0x68, 0xbe, 0x58, 0x60, 0x01, 0x88, 0x60, 0x88, 0x68, 0xbe, 0x58, 0x61, 0x01, 0x88, 0x60, 0x88, 0x68, 0xbe, 0x58, 0x62, 0x01, 0x88, 0x60, 0x88, 0x68, 0xbe, 0x58, 0x63, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x64, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x65, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x66, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x67, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x68, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x69, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x6a, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x6b, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x6c, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xd3, 0x74, 
-0x40, 0x5b, 0x6d, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x6e, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x6f, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x70, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x71, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x72, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x73, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x74, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x75, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x76, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x77, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x78, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x79, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x7a, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x7b, 0x01, 0x08, 0x60, 0xbe, 0x58, 0xc2, 0x00, 0x20, 0x60, 0xbe, 0x58, 0xc3, 0x00, 0x00, 0x60, 0xbe, 0x58, 0x7c, 0x01, 0xd3, 0x9b, 
-0x80, 0x5b, 0x00, 0x60, 0xbe, 0x58, 0x7d, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x7e, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x7f, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x80, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x81, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x82, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x83, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x84, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x85, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x86, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x87, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x88, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x89, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x8a, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x8b, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x8c, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x8d, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x8e, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x8f, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x90, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x91, 0x01, 0x00, 0x60, 0x29, 0x03, 
-0xc0, 0x5b, 0xbe, 0x58, 0x92, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x93, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x94, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x95, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x96, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x97, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x98, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x99, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x9a, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x9b, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x9c, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x9d, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x9e, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x9f, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa0, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa1, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa2, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa3, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa4, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa5, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa6, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xcc, 0x11, 
-0x00, 0x5c, 0xa7, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa8, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa9, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xaa, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xab, 0x01, 0x31, 0x60, 0x12, 0x68, 0xbe, 0x58, 0xb3, 0x01, 0x02, 0x60, 0x30, 0x68, 0xbe, 0x58, 0xc3, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xc4, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xc5, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xc6, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xc7, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xc8, 0x01, 0x10, 0x60, 0xbe, 0x58, 0xc9, 0x01, 0xd0, 0x60, 0xbe, 0x58, 0xca, 0x01, 0x30, 0x60, 0xbe, 0x58, 0xcb, 0x01, 0x30, 0x60, 0xbe, 0x58, 0xcc, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xcd, 0x01, 0x00, 0x60, 0x10, 0x68, 0xbe, 0x58, 0xce, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xcf, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xd0, 0x01, 0x0a, 0x60, 0xbe, 0x58, 0xd1, 0x01, 0x79, 0x2d, 
-0x40, 0x5c, 0x18, 0x60, 0xbe, 0x58, 0xd2, 0x01, 0x1f, 0x60, 0xbe, 0x58, 0xd3, 0x01, 0x18, 0x60, 0xbe, 0x58, 0xd4, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xd5, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xd6, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xd7, 0x01, 0x20, 0x60, 0xbe, 0x58, 0x78, 0x02, 0x08, 0x60, 0xbe, 0x58, 0x77, 0x02, 0x28, 0x60, 0xbe, 0x58, 0xd8, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xd9, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xda, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xdb, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xdc, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xdd, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xde, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xdf, 0x01, 0x78, 0x60, 0xbe, 0x58, 0xe0, 0x01, 0x78, 0x60, 0xbe, 0x58, 0xe1, 0x01, 0x78, 0x60, 0xbe, 0x58, 0xe2, 0x01, 0x78, 0x60, 0xbe, 0x58, 0xe3, 0x01, 0x78, 0x60, 0xbe, 0x58, 0xe4, 0x01, 0x78, 0x60, 0x8d, 0x10, 
-0x80, 0x5c, 0xbe, 0x58, 0xe5, 0x01, 0x78, 0x60, 0xbe, 0x58, 0xe6, 0x01, 0x78, 0x60, 0xbe, 0x58, 0xe7, 0x01, 0x03, 0x60, 0xbe, 0x58, 0xe8, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xe9, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xea, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xeb, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xec, 0x01, 0x02, 0x60, 0x02, 0x68, 0xbe, 0x58, 0xed, 0x01, 0x05, 0x60, 0x05, 0x68, 0xbe, 0x58, 0xee, 0x01, 0x02, 0x60, 0x02, 0x68, 0xbe, 0x58, 0xef, 0x01, 0x05, 0x60, 0x05, 0x68, 0xbe, 0x58, 0xf0, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf1, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf2, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf3, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf4, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf5, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf6, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf7, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf8, 0x01, 0xa0, 0x60, 0xa9, 0x93, 
-0xc0, 0x5c, 0xbe, 0x58, 0xfd, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xfe, 0x01, 0x03, 0x60, 0xbe, 0x58, 0xff, 0x01, 0x04, 0x67, 0xbe, 0x5f, 0x22, 0x00, 0x40, 0x67, 0xbe, 0x5f, 0x21, 0x00, 0x9e, 0x5f, 0xba, 0x1a, 0xbe, 0x5f, 0x1f, 0x00, 0x9e, 0x5f, 0xb9, 0x1a, 0xbe, 0x5f, 0x20, 0x00, 0x9e, 0x5f, 0xbb, 0x1a, 0xbe, 0x5f, 0xd0, 0x00, 0x9e, 0x5f, 0xbc, 0x1a, 0xbe, 0x5f, 0xcf, 0x00, 0x9e, 0x5f, 0xb5, 0x1a, 0xbe, 0x5f, 0x23, 0x00, 0x9e, 0x5f, 0xb2, 0x1a, 0xbe, 0x5f, 0x45, 0x1a, 0x9e, 0x5f, 0xb0, 0x1a, 0xbe, 0x5f, 0x47, 0x1a, 0x9e, 0x5f, 0xb1, 0x1a, 0xbe, 0x5f, 0x46, 0x1a, 0x9e, 0x5f, 0xb3, 0x1a, 0xbe, 0x5f, 0x1d, 0x00, 0x9e, 0x5f, 0xb4, 0x1a, 0xbe, 0x5f, 0x1c, 0x00, 0x0c, 0x67, 0xbe, 0x5f, 0x27, 0x00, 0x0a, 0x67, 0xbe, 0x5f, 0xe4, 0x19, 0x14, 0x67, 0xbe, 0x5f, 0xf0, 0x04, 0x3a, 0x38, 0x78, 0x3c, 
-0x00, 0x5d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x5c, 
-0x40, 0x5d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x5d, 
-0x80, 0x5d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x5d, 
-0xc0, 0x5d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x5d, 
-0x00, 0x5e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x5d, 
-0x40, 0x5e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x5e, 
-0x80, 0x5e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x10, 0x00, 0x11, 0x00, 0x12, 0x00, 0x13, 0x00, 0x14, 0x00, 0x15, 0x00, 0x16, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x00, 0x1a, 0x00, 0x1b, 0x00, 0x1c, 0x00, 0x1d, 0x00, 0x1e, 0x00, 0x1f, 0x00, 0x20, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00, 0x09, 0x00, 0xa3, 0x61, 
-0xc0, 0x5e, 0x0a, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x10, 0x00, 0x11, 0x00, 0x12, 0x00, 0x13, 0x00, 0x14, 0x00, 0x15, 0x00, 0x48, 0x00, 0x48, 0x00, 0x48, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x21, 0x60, 
-0x00, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x5e, 
-0x40, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x5f, 
-0x80, 0x5f, 0xff, 0xff, 0x00, 0x80, 0x55, 0x55, 0x00, 0x40, 0x33, 0x33, 0xaa, 0x2a, 0x92, 0x24, 0x00, 0x20, 0x71, 0x1c, 0x99, 0x19, 0x45, 0x17, 0x55, 0x15, 0xb1, 0x13, 0x49, 0x12, 0x11, 0x11, 0x00, 0x10, 0x0f, 0x0f, 0x38, 0x0e, 0x79, 0x0d, 0xcc, 0x0c, 0x30, 0x0c, 0xa2, 0x0b, 0x21, 0x0b, 0xaa, 0x0a, 0x3d, 0x0a, 0xd8, 0x09, 0x7b, 0x09, 0x24, 0x09, 0xd3, 0x08, 0x88, 0x08, 0x42, 0x08, 0x00, 0x08, 0xc1, 0x07, 0x87, 0x07, 0x50, 0x07, 0x1c, 0x07, 0xeb, 0x06, 0xbc, 0x06, 0x90, 0x06, 0x66, 0x06, 0x3e, 0x06, 0x18, 0x06, 0xf4, 0x05, 0xd1, 0x05, 0xb0, 0x05, 0x90, 0x05, 0x72, 0x05, 0x55, 0x05, 0x39, 0x05, 0x1e, 0x05, 0x05, 0x05, 0xec, 0x04, 0xd4, 0x04, 0xbd, 0x04, 0xa7, 0x04, 0x92, 0x04, 0x7d, 0x04, 0x69, 0x04, 0x56, 0x04, 0x44, 0x04, 0x32, 0x04, 0x21, 0x04, 0x10, 0x04, 0x00, 0x04, 0xd4, 0x1d, 
-0xc0, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x88, 0x00, 0xff, 0xff, 0x00, 0x00, 0x44, 0xa0, 0x29, 0x30, 0xaa, 0x55, 0xcc, 0x33, 0xff, 0xff, 0xf1, 0xb9, 
-0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
-
+0xc0, 0x5f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc0, 0x5f, 
+0x40, 0x02, 0x98, 0x3f, 0x5e, 0x52, 0x98, 0x3f, 0x5f, 0x52, 0x98, 0x3f, 0x60, 0x52, 0x98, 0x3f, 0xc2, 0x52, 0x98, 0x3f, 0xc3, 0x52, 0x98, 0x3f, 0xc4, 0x52, 0x98, 0x3f, 0xc9, 0x52, 0x98, 0x3f, 0xce, 0x52, 0x98, 0x3f, 0xcf, 0x52, 0x98, 0x3f, 0xd0, 0x52, 0x98, 0x3f, 0xd1, 0x52, 0x98, 0x3f, 0xd2, 0x52, 0x98, 0x3f, 0xd3, 0x52, 0x98, 0x3f, 0xd4, 0x52, 0x98, 0x3f, 0xd5, 0x52, 0x98, 0x3f, 0xd6, 0x52, 0x98, 0x3f, 0xd7, 0x52, 0x98, 0x3f, 0xd8, 0x52, 0x98, 0x3f, 0xd9, 0x52, 0x98, 0x3f, 0xda, 0x52, 0x98, 0x3f, 0xdb, 0x52, 0x98, 0x3f, 0xdc, 0x52, 0x98, 0x3f, 0xdd, 0x52, 0x98, 0x3f, 0xde, 0x52, 0x98, 0x3f, 0xdf, 0x52, 0x98, 0x3f, 0xe0, 0x52, 0x98, 0x3f, 0xf4, 0x52, 0x98, 0x3f, 0xf5, 0x52, 0x98, 0x3f, 0x04, 0x53, 0x98, 0x3f, 0x05, 0x53, 0x98, 0x3f, 0x9c, 0x50, 0x98, 0x3f, 0x06, 0x53, 0xf8, 0x4c, 
+0x80, 0x02, 0x98, 0x3f, 0xdc, 0x53, 0x98, 0x3f, 0xdd, 0x53, 0x1a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0xbd, 0x1d, 0x00, 0x60, 0xbe, 0x58, 0xbe, 0x1d, 0x00, 0x60, 0xbe, 0x58, 0xbf, 0x1d, 0x00, 0x60, 0xbe, 0x58, 0xc1, 0x1d, 0x00, 0x60, 0xbe, 0x58, 0x1b, 0x1f, 0x00, 0x60, 0xbe, 0x58, 0x1c, 0x1f, 0x7a, 0xad, 0xfe, 0x93, 0x1a, 0x38, 0x02, 0xa9, 0x00, 0xbc, 0xb1, 0x00, 0x48, 0xaa, 0x40, 0xaa, 0x00, 0xbd, 0xb1, 0x00, 0xf2, 0x62, 0x72, 0x6a, 0x40, 0xbd, 0xb0, 0x00, 0x02, 0xab, 0x1a, 0x38, 0x02, 0x60, 0x80, 0x68, 0xb2, 0x61, 0x2f, 0x38, 0xae, 0x02, 0x0b, 0x5a, 0x8a, 0xb9, 0x19, 0x01, 0x7a, 0xad, 0xfe, 0x93, 0x04, 0x60, 0x80, 0x68, 0xb4, 0x61, 0x6f, 0x38, 0xb8, 0x02, 0x0b, 0x5a, 0x8a, 0xb9, 0x19, 0x01, 0x1a, 0x38, 0x7f, 0x60, 0x1f, 0x68, 0x91, 0xb0, 0x1f, 0x60, 0x1f, 0x68, 0x00, 0xbd, 0xe2, 0x36, 
+0xc0, 0x02, 0x16, 0x00, 0x41, 0xa9, 0xff, 0x60, 0x1f, 0x68, 0x00, 0xbd, 0x91, 0x00, 0x80, 0x60, 0x1f, 0x68, 0x00, 0xbd, 0x96, 0x00, 0x41, 0xab, 0x5a, 0xa9, 0x4f, 0x60, 0x0b, 0x68, 0x1e, 0x58, 0x5a, 0xab, 0x00, 0x60, 0x82, 0xb0, 0xeb, 0xc6, 0xe3, 0xc6, 0x19, 0x38, 0x20, 0x5a, 0xbe, 0xa8, 0xe0, 0xa8, 0xcd, 0xc6, 0xf2, 0xc6, 0x94, 0xef, 0x19, 0x38, 0x24, 0x5a, 0xb9, 0xfc, 0xf8, 0xc7, 0xaf, 0x61, 0x1a, 0x69, 0x78, 0xa9, 0x94, 0xa9, 0x92, 0xaa, 0x82, 0xaa, 0x51, 0xc7, 0x18, 0xc7, 0x19, 0x38, 0x22, 0x5a, 0xff, 0xf0, 0xa7, 0xaa, 0xd5, 0xc8, 0x77, 0xee, 0x92, 0xac, 0xfe, 0x91, 0x16, 0xc5, 0xdc, 0xc5, 0x88, 0xc7, 0xe5, 0xaa, 0x00, 0x60, 0xbe, 0x58, 0xe7, 0x00, 0x00, 0x60, 0x05, 0x68, 0xbe, 0x58, 0xe9, 0x00, 0x18, 0x60, 0x08, 0x68, 0xbe, 0x58, 0xe8, 0x00, 0xf5, 0xac, 0x00, 0x92, 0x4a, 0x8e, 
+0x00, 0x03, 0x8f, 0xa8, 0x97, 0xaa, 0x58, 0xd9, 0xed, 0xac, 0x03, 0x92, 0x19, 0x38, 0x91, 0x4b, 0x02, 0x9e, 0x19, 0x38, 0xde, 0x53, 0x02, 0x60, 0x72, 0x68, 0x05, 0xec, 0xff, 0xc8, 0x19, 0x38, 0xd9, 0x54, 0x02, 0xc9, 0xf2, 0x60, 0x72, 0x68, 0x05, 0xec, 0x08, 0x60, 0x1e, 0x58, 0xbc, 0xea, 0x3e, 0x58, 0x19, 0x10, 0xfb, 0x89, 0x00, 0x60, 0xbe, 0x58, 0xdd, 0x00, 0x00, 0x60, 0x1e, 0x58, 0x78, 0xa9, 0xbc, 0xea, 0x3e, 0x58, 0x19, 0x00, 0x9a, 0xc7, 0x18, 0x10, 0xf8, 0x89, 0x19, 0x38, 0x32, 0x4e, 0x02, 0x60, 0x72, 0x68, 0x05, 0xec, 0xff, 0xc8, 0x19, 0x38, 0x1a, 0x55, 0x02, 0xc9, 0xf2, 0x60, 0x72, 0x68, 0x05, 0xec, 0xf5, 0xaa, 0x08, 0x60, 0x1e, 0x58, 0x0c, 0xf1, 0x3e, 0x58, 0x19, 0x10, 0xfb, 0x89, 0x00, 0x60, 0x1e, 0x58, 0x78, 0xa9, 0x0c, 0xf1, 0x3e, 0x58, 0x19, 0x00, 0xcc, 0xc7, 0xa7, 0xc2, 
+0x40, 0x03, 0x18, 0x10, 0xf8, 0x89, 0xe3, 0xc8, 0xc5, 0xfc, 0xe5, 0xa8, 0x26, 0x60, 0x04, 0x68, 0x3e, 0x61, 0x04, 0x69, 0x9e, 0x5a, 0xbb, 0x00, 0x57, 0x38, 0x3d, 0x58, 0x1a, 0x38, 0x34, 0x60, 0x12, 0x68, 0xbe, 0x58, 0xbd, 0x1d, 0x78, 0x60, 0x56, 0x68, 0xbe, 0x58, 0xbe, 0x1d, 0xbc, 0x60, 0x9a, 0x68, 0xbe, 0x58, 0xbf, 0x1d, 0xaa, 0x60, 0x55, 0x68, 0xbe, 0x58, 0x1b, 0x1f, 0x55, 0x60, 0xaa, 0x68, 0xbe, 0x58, 0x1c, 0x1f, 0x1a, 0x38, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x18, 0xec, 0xf5, 0xac, 0x07, 0x90, 0x7f, 0xeb, 0x00, 0x60, 0xbe, 0x58, 0x40, 0x1b, 0xbe, 0x58, 0x3c, 0x02, 0x7e, 0x9f, 0xdd, 0xac, 0x5a, 0x90, 0xed, 0xac, 0x3c, 0x92, 0x8d, 0xac, 0x23, 0x92, 0x00, 0x9e, 0x9e, 0x58, 0x50, 0x01, 0xbe, 0x58, 0x00, 0xf8, 0x9e, 0x58, 0xc5, 0xa6, 
+0x80, 0x03, 0xd5, 0x1a, 0xbe, 0x58, 0x02, 0xf8, 0x9e, 0x58, 0xd6, 0x1a, 0xbe, 0x58, 0x04, 0xf8, 0x9e, 0x58, 0xd7, 0x1a, 0xbe, 0x58, 0x05, 0xf8, 0x9e, 0x58, 0xd8, 0x1a, 0xbe, 0x58, 0x0a, 0xf8, 0x9e, 0x58, 0x57, 0x01, 0xbe, 0x58, 0x0c, 0xf8, 0x9e, 0x58, 0x5b, 0x01, 0xbe, 0x58, 0x0b, 0xf8, 0x9e, 0x58, 0x07, 0xf8, 0x19, 0x28, 0xbe, 0x58, 0x07, 0xf8, 0x32, 0x9e, 0x9e, 0x58, 0x50, 0x01, 0xbe, 0x58, 0x00, 0xf8, 0x21, 0x60, 0xbe, 0x58, 0x02, 0xf8, 0x48, 0x60, 0xbe, 0x58, 0x04, 0xf8, 0x04, 0x60, 0xbe, 0x58, 0x05, 0xf8, 0x04, 0x60, 0xbe, 0x58, 0x0a, 0xf8, 0x64, 0x60, 0xbe, 0x58, 0x0c, 0xf8, 0x0b, 0x60, 0xbe, 0x58, 0x0b, 0xf8, 0x1b, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0x00, 0xf8, 0x21, 0x60, 0xbe, 0x58, 0x02, 0xf8, 0x94, 0x60, 0xbe, 0x58, 0x04, 0xf8, 0x2d, 0x60, 0xbe, 0x58, 0x05, 0xf8, 0x23, 0xab, 
+0xc0, 0x03, 0x2d, 0x60, 0xbe, 0x58, 0x0a, 0xf8, 0x94, 0x60, 0xbe, 0x58, 0x0c, 0xf8, 0x0f, 0x60, 0xbe, 0x58, 0x0b, 0xf8, 0x9e, 0x58, 0x07, 0xf8, 0x04, 0x38, 0xfe, 0xff, 0xbe, 0x58, 0x07, 0xf8, 0xdd, 0xaa, 0xa5, 0xac, 0x01, 0x90, 0xf3, 0xc8, 0x99, 0xe9, 0x19, 0x38, 0xf2, 0x41, 0xed, 0xac, 0x7a, 0x92, 0xd5, 0xaa, 0xe5, 0xa8, 0x4f, 0xe5, 0x0c, 0xf1, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x18, 0xec, 0x9e, 0x58, 0x36, 0x1d, 0x1d, 0x10, 0x21, 0x8a, 0x9e, 0x58, 0x36, 0x1d, 0x1b, 0x10, 0x1d, 0x8a, 0xdb, 0xf1, 0x86, 0xf6, 0x00, 0x60, 0xbe, 0x58, 0x43, 0x1a, 0x9e, 0x58, 0xb8, 0x04, 0x18, 0x10, 0x14, 0x88, 0x9e, 0x58, 0xc6, 0x00, 0x19, 0x10, 0x10, 0x8a, 0x9e, 0x58, 0xea, 0x19, 0x00, 0x58, 0xbe, 0x58, 0xd3, 0x00, 0x9e, 0x58, 0xeb, 0x19, 0x9f, 0xe2, 
+0x00, 0x04, 0x00, 0x58, 0xbe, 0x58, 0xd4, 0x00, 0x9e, 0x58, 0xec, 0x19, 0x00, 0x58, 0xbe, 0x58, 0xd5, 0x00, 0x0c, 0x9e, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0xd3, 0x00, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0xd4, 0x00, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0xd5, 0x00, 0x9e, 0x58, 0xfc, 0x01, 0x78, 0xac, 0x08, 0x90, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0xd5, 0x00, 0xbe, 0x58, 0xd4, 0x00, 0xbe, 0x58, 0xd3, 0x00, 0x9d, 0xeb, 0xd7, 0xea, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x18, 0xec, 0x26, 0x60, 0x04, 0x68, 0x3e, 0x61, 0x04, 0x69, 0x9e, 0x5a, 0xbb, 0x00, 0x57, 0x38, 0x3d, 0x58, 0x06, 0x70, 0x00, 0xac, 0x12, 0x90, 0x9e, 0x58, 0xfc, 0x1c, 0x18, 0x10, 0x0e, 0x88, 0x9e, 0x58, 0x47, 0x1e, 0x78, 0xac, 0x01, 0x90, 0x0d, 0x9e, 0x73, 0xed, 0x3d, 0xb7, 
+0x40, 0x04, 0x9e, 0x58, 0x1e, 0x1e, 0x18, 0x10, 0x0d, 0x8a, 0xef, 0xec, 0x4f, 0xed, 0x61, 0xed, 0x99, 0xed, 0x9e, 0x58, 0x47, 0x1e, 0x78, 0xac, 0x05, 0x90, 0x78, 0xaa, 0xbe, 0x58, 0x47, 0x1e, 0xbe, 0x58, 0x04, 0xf8, 0x02, 0x9e, 0x9d, 0xf7, 0x00, 0x9e, 0x4f, 0xf7, 0x19, 0x38, 0xd7, 0x41, 0xe6, 0xff, 0x5c, 0xca, 0x8f, 0xca, 0xc2, 0xca, 0x19, 0x38, 0xa1, 0x51, 0xba, 0xac, 0x0f, 0x92, 0x9e, 0x58, 0xc1, 0x1d, 0x06, 0x39, 0x55, 0x00, 0x05, 0x8a, 0x06, 0x39, 0xa5, 0x00, 0x02, 0x8a, 0x42, 0xa9, 0x78, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xa9, 0x32, 0xc8, 0xba, 0xac, 0x71, 0x92, 0x9e, 0x58, 0xc1, 0x1d, 0x06, 0x39, 0x55, 0x00, 0x05, 0x8a, 0x06, 0x39, 0xa5, 0x00, 0x02, 0x8a, 0x42, 0xa9, 0x67, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xa9, 0x95, 0xac, 0x05, 0x90, 0xd2, 0xd2, 
+0x80, 0x04, 0x9e, 0x5f, 0xfb, 0x04, 0xbe, 0x5f, 0xfb, 0x04, 0x95, 0xaa, 0x9e, 0x58, 0xc1, 0x1d, 0x06, 0x39, 0x55, 0x00, 0x05, 0x8a, 0x06, 0x39, 0xa5, 0x00, 0x02, 0x8a, 0x42, 0xa9, 0x52, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xa9, 0xb9, 0xac, 0xd9, 0x91, 0xfd, 0xac, 0x1a, 0x90, 0x9e, 0x58, 0xc1, 0x1d, 0x06, 0x39, 0x55, 0x00, 0x05, 0x8a, 0x06, 0x39, 0xa5, 0x00, 0x02, 0x8a, 0x42, 0xa9, 0x40, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xa9, 0x80, 0x62, 0x57, 0x6a, 0x48, 0x63, 0x0e, 0x6b, 0x0c, 0x61, 0x24, 0x60, 0x01, 0x40, 0x19, 0x10, 0x07, 0x38, 0xb0, 0x04, 0x4b, 0x5c, 0x9d, 0x5b, 0x85, 0xac, 0x1f, 0x90, 0x9e, 0x58, 0xc1, 0x1d, 0x06, 0x39, 0x55, 0x00, 0x05, 0x8a, 0x06, 0x39, 0xa5, 0x00, 0x02, 0x8a, 0x42, 0xa9, 0x24, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x16, 0x62, 
+0xc0, 0x04, 0xff, 0xa9, 0x48, 0x62, 0x0e, 0x6a, 0x7a, 0x63, 0x02, 0x6b, 0x9e, 0x5c, 0xbb, 0x00, 0x9e, 0x5d, 0xbc, 0x00, 0xa4, 0x05, 0x19, 0x15, 0xa7, 0x38, 0xd1, 0x04, 0x63, 0x5c, 0x83, 0x5d, 0xbb, 0x5a, 0x19, 0x02, 0x19, 0x03, 0x9e, 0x58, 0xc1, 0x1d, 0x06, 0x39, 0x55, 0x00, 0x05, 0x8a, 0x06, 0x39, 0xa5, 0x00, 0x02, 0x8a, 0x42, 0xa9, 0x05, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xa9, 0x7a, 0xeb, 0x34, 0x61, 0x12, 0x69, 0x9e, 0x58, 0xbd, 0x1d, 0x38, 0x48, 0x02, 0x8a, 0x42, 0xa9, 0x0f, 0x9e, 0x78, 0x61, 0x56, 0x69, 0x9e, 0x58, 0xbe, 0x1d, 0x38, 0x48, 0x02, 0x8a, 0x42, 0xa9, 0x07, 0x9e, 0xbc, 0x61, 0x9a, 0x69, 0x9e, 0x58, 0xbf, 0x1d, 0x38, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xa9, 0x1a, 0x38, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0x70, 0x4c, 
+0x00, 0x05, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x18, 0xec, 0x9e, 0x58, 0xf8, 0x04, 0x19, 0x00, 0xbe, 0x58, 0xf8, 0x04, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x04, 0x88, 0x1a, 0x38, 0x1a, 0x38, 0x1a, 0x38, 0x42, 0xa9, 0x98, 0x3f, 0x62, 0x03, 0x9e, 0x5e, 0x50, 0x01, 0x00, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xbc, 0x01, 0x01, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xbd, 0x01, 0x1f, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xbe, 0x01, 0x20, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xbf, 0x01, 0x21, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd5, 0x1a, 0x02, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x51, 0x01, 0xc8, 0x58, 0xc0, 0x06, 0x08, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x52, 0x01, 0x03, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0xb2, 0xc8, 
+0x40, 0x05, 0x9e, 0x5e, 0xd6, 0x1a, 0x04, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd7, 0x1a, 0x05, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x55, 0x01, 0x06, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x56, 0x01, 0x07, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x57, 0x01, 0x0c, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x58, 0x01, 0x0e, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x59, 0x01, 0x12, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xba, 0x01, 0x09, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd8, 0x1a, 0x0a, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x5b, 0x01, 0x0b, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0xb4, 0x60, 0x01, 0x68, 0x22, 0x61, 0xf8, 0x69, 0xb9, 0x66, 0x01, 0x6e, 0xc2, 0x3e, 0xb4, 0x01, 0xc7, 0x38, 0x7d, 0x05, 0x05, 0x5a, 0x5d, 0x59, 0x9e, 0x5e, 0x5c, 0x01, 0xf6, 0x5e, 
+0x80, 0x05, 0x0f, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x5d, 0x01, 0x10, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x5e, 0x60, 0x01, 0x68, 0x28, 0x61, 0xf8, 0x69, 0x63, 0x66, 0x01, 0x6e, 0xc2, 0x3e, 0x5e, 0x01, 0xc7, 0x38, 0x93, 0x05, 0x05, 0x5a, 0x5d, 0x59, 0x9e, 0x5e, 0xbb, 0x01, 0x2e, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x64, 0x60, 0x01, 0x68, 0x2f, 0x61, 0xf8, 0x69, 0x6f, 0x66, 0x01, 0x6e, 0xc2, 0x3e, 0x64, 0x01, 0xc7, 0x38, 0xa4, 0x05, 0x05, 0x5a, 0x5d, 0x59, 0x70, 0x60, 0x01, 0x68, 0x3b, 0x61, 0xf8, 0x69, 0x7b, 0x66, 0x01, 0x6e, 0xc2, 0x3e, 0x70, 0x01, 0xc7, 0x38, 0xb0, 0x05, 0x05, 0x5a, 0x5d, 0x59, 0x7c, 0x60, 0x01, 0x68, 0x47, 0x61, 0xf8, 0x69, 0x52, 0x66, 0xf8, 0x6e, 0xc2, 0x3e, 0x47, 0xf8, 0xc7, 0x38, 0xbf, 0x05, 0x03, 0x5a, 0x05, 0x5b, 0xfe, 0x5b, 0x43, 0x2a, 0x5d, 0x59, 0xae, 0x6c, 
+0xc0, 0x05, 0x94, 0x60, 0x01, 0x68, 0x53, 0x61, 0xf8, 0x69, 0x5e, 0x66, 0xf8, 0x6e, 0xc2, 0x3e, 0x53, 0xf8, 0xc7, 0x38, 0xce, 0x05, 0x03, 0x5a, 0x05, 0x5b, 0xfe, 0x5b, 0x43, 0x2a, 0x5d, 0x59, 0xac, 0x60, 0x01, 0x68, 0x13, 0x61, 0xf8, 0x69, 0xb2, 0x66, 0x01, 0x6e, 0xc2, 0x3e, 0xac, 0x01, 0xc7, 0x38, 0xda, 0x05, 0x05, 0x5a, 0x5d, 0x59, 0x3a, 0x38, 0x9e, 0x5e, 0xc3, 0x01, 0xaa, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xc7, 0x01, 0xaf, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xc8, 0x01, 0xb0, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd9, 0x1a, 0xb1, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xca, 0x01, 0xb2, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xcd, 0x01, 0xb5, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xce, 0x01, 0xb6, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0x78, 0x58, 
+0x00, 0x06, 0xcf, 0x01, 0xb7, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd0, 0x01, 0xd8, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd1, 0x01, 0xb8, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd3, 0x01, 0xba, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd4, 0x01, 0xbb, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd5, 0x01, 0xbc, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd6, 0x01, 0xbd, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd7, 0x01, 0xbe, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd8, 0x01, 0xbf, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xd9, 0x01, 0xc0, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xda, 0x01, 0xc1, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xdb, 0x01, 0xc2, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xdc, 0x01, 0xc3, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0xb2, 0x4e, 
+0x40, 0x06, 0x9e, 0x5e, 0xdd, 0x01, 0xc4, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xde, 0x01, 0xc5, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xdf, 0x01, 0xc6, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe0, 0x01, 0xc7, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe1, 0x01, 0xc8, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe2, 0x01, 0xc9, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe3, 0x01, 0xca, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe4, 0x01, 0xcb, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe5, 0x01, 0xcc, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe6, 0x01, 0xcd, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe7, 0x01, 0xce, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe8, 0x01, 0xcf, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xe9, 0x01, 0xd0, 0x60, 0xf8, 0x68, 0xeb, 0x55, 
+0x80, 0x06, 0xdb, 0x58, 0x9e, 0x5e, 0xea, 0x01, 0xd1, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xeb, 0x01, 0xd2, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xec, 0x01, 0xd3, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xed, 0x01, 0xd4, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xee, 0x01, 0xd5, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xef, 0x01, 0xd6, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf0, 0x01, 0xd7, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf1, 0x01, 0xea, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf2, 0x01, 0xeb, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf3, 0x01, 0xec, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf4, 0x01, 0xed, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf5, 0x01, 0xee, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf6, 0x01, 0xef, 0x60, 0xcc, 0x47, 
+0xc0, 0x06, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf7, 0x01, 0xf0, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x9e, 0x5e, 0xf8, 0x01, 0xf1, 0x60, 0xf8, 0x68, 0xdb, 0x58, 0x3a, 0x38, 0x00, 0xbc, 0xb1, 0x00, 0x18, 0xaa, 0x10, 0xaa, 0x00, 0xbd, 0xb1, 0x00, 0x00, 0x60, 0x80, 0xb0, 0x00, 0x60, 0x81, 0xb0, 0x00, 0x60, 0x82, 0xb0, 0x00, 0x60, 0x83, 0xb0, 0x00, 0x60, 0x9c, 0xb0, 0xc0, 0x60, 0x13, 0x68, 0x9d, 0xb0, 0x00, 0x60, 0xcf, 0xb0, 0x3a, 0x38, 0x41, 0xab, 0x51, 0xb0, 0x78, 0xa8, 0x70, 0xa8, 0x68, 0xaa, 0x60, 0xaa, 0xd1, 0xb0, 0x3a, 0x38, 0x00, 0x60, 0x1f, 0x68, 0x00, 0x61, 0x00, 0x62, 0x17, 0x38, 0x5d, 0x59, 0x3a, 0x38, 0x3e, 0xb0, 0x08, 0xaa, 0x00, 0xaa, 0x18, 0xaa, 0x10, 0xaa, 0xbe, 0xb0, 0x10, 0x60, 0x9e, 0xb0, 0x30, 0xb0, 0x38, 0xa8, 0xb0, 0xb0, 0x3e, 0xb0, 0x38, 0xaa, 0xbe, 0xb0, 0x64, 0x58, 
+0x00, 0x07, 0x84, 0xb0, 0x3c, 0xa9, 0x3e, 0xb0, 0x78, 0xaa, 0xbe, 0xb0, 0x00, 0x60, 0x00, 0xbd, 0xaa, 0x00, 0x30, 0xb0, 0x08, 0xaa, 0x18, 0xaa, 0x00, 0xbd, 0x30, 0x00, 0x36, 0xb0, 0x08, 0xaa, 0x18, 0xaa, 0x00, 0xbd, 0x36, 0x00, 0x33, 0xb0, 0x08, 0xa8, 0x18, 0xa8, 0x00, 0xbd, 0x33, 0x00, 0x3a, 0x38, 0x04, 0x60, 0x69, 0x78, 0x55, 0x60, 0x6a, 0x78, 0x6b, 0x78, 0x6c, 0x78, 0x6d, 0x78, 0x82, 0xac, 0x28, 0x92, 0x00, 0x60, 0x88, 0x68, 0xae, 0xb0, 0x20, 0x60, 0xc4, 0x68, 0xd0, 0xb0, 0x1e, 0x59, 0x1e, 0x5a, 0x93, 0x60, 0x2f, 0x68, 0x09, 0x58, 0x04, 0x39, 0xff, 0x00, 0x04, 0x3a, 0x00, 0xff, 0xfe, 0x5a, 0x22, 0x32, 0xff, 0x61, 0x04, 0x38, 0xff, 0x00, 0x3a, 0x48, 0x01, 0x8a, 0x10, 0x60, 0xd2, 0xb0, 0x3e, 0x5a, 0x3e, 0x59, 0x00, 0x60, 0x5d, 0x78, 0x19, 0x38, 0x8c, 0x50, 0x92, 0xaa, 0x0b, 0x60, 
+0x40, 0x07, 0xaa, 0xac, 0x01, 0x90, 0x92, 0xa8, 0xaa, 0xaa, 0xf9, 0xab, 0xf1, 0xab, 0xfd, 0xa9, 0xf5, 0xa9, 0x01, 0x9e, 0x1a, 0x38, 0xaa, 0xac, 0x04, 0x92, 0xa2, 0xa8, 0x90, 0xc7, 0x82, 0xac, 0x00, 0x90, 0x3a, 0x38, 0x90, 0xaa, 0xa2, 0xaa, 0x81, 0xaa, 0xb9, 0xaa, 0xba, 0xa8, 0xb0, 0xa8, 0xb8, 0xaa, 0x02, 0x60, 0xbe, 0x58, 0x12, 0x00, 0x01, 0x60, 0xbe, 0x58, 0x11, 0x00, 0x01, 0x60, 0xbe, 0x58, 0xfb, 0x1c, 0xff, 0xaa, 0x00, 0x60, 0xbe, 0x58, 0x1b, 0x00, 0xbe, 0x58, 0xc6, 0x00, 0x00, 0x60, 0xbe, 0x58, 0xa3, 0x1c, 0xbe, 0x58, 0xa4, 0x1c, 0xbe, 0x58, 0xa5, 0x1c, 0xbe, 0x58, 0xfc, 0x1c, 0xbe, 0x58, 0xfd, 0x1c, 0xe6, 0xa8, 0x88, 0xb0, 0x89, 0xb0, 0x78, 0xa9, 0x3a, 0x38, 0x30, 0x60, 0x80, 0x68, 0xcf, 0xb0, 0xcd, 0xa9, 0x00, 0x60, 0xbe, 0x58, 0xae, 0x00, 0x00, 0x60, 0xbe, 0x58, 0xba, 0x14, 
+0x80, 0x07, 0xaf, 0x00, 0xbe, 0x58, 0xc2, 0x1d, 0xbe, 0x58, 0xc3, 0x1d, 0xbe, 0x58, 0xc4, 0x1d, 0x3a, 0x38, 0x36, 0x60, 0x80, 0x68, 0x8f, 0xb0, 0xdd, 0xa9, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x3a, 0x38, 0x39, 0xb0, 0x38, 0xaa, 0xb9, 0xb0, 0x30, 0xb0, 0x38, 0xa8, 0xb0, 0xb0, 0x3c, 0xab, 0x3a, 0x38, 0x3c, 0xa9, 0x3a, 0x38, 0x02, 0x3f, 0x01, 0x00, 0x0c, 0x98, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5d, 0xe8, 0x00, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0xa7, 0x07, 0xa5, 0x59, 0x3d, 0x5e, 0x22, 0x9e, 0x12, 0x3f, 0x22, 0x00, 0x1f, 0x98, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5d, 0xe8, 0x00, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0xb7, 0x07, 0xa5, 0x5f, 0xd7, 0x07, 0xfd, 0x5e, 0x12, 0x3f, 0x22, 0x00, 0x10, 0x88, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5d, 0x22, 0x00, 0x9e, 0x5f, 0xdc, 0x4b, 
+0xc0, 0x07, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0xc9, 0x07, 0x00, 0x61, 0xc3, 0x58, 0x1c, 0x5d, 0x1d, 0x5e, 0x1a, 0x38, 0x1a, 0x38, 0x00, 0x60, 0x3a, 0x38, 0x02, 0x3f, 0x01, 0x00, 0x0a, 0x98, 0x29, 0x66, 0x03, 0x6e, 0xb5, 0x65, 0x02, 0x6d, 0x39, 0x67, 0xe7, 0x38, 0xd7, 0x07, 0xa5, 0x59, 0x3d, 0x5e, 0x1e, 0x9e, 0x12, 0x3f, 0x22, 0x00, 0x1b, 0x98, 0x29, 0x66, 0x03, 0x6e, 0xb5, 0x65, 0x02, 0x6d, 0x39, 0x67, 0xe7, 0x38, 0xe5, 0x07, 0xa5, 0x5f, 0xd7, 0x07, 0xfd, 0x5e, 0x12, 0x3f, 0x22, 0x00, 0x0e, 0x88, 0x29, 0x66, 0x03, 0x6e, 0x9e, 0x5d, 0x22, 0x00, 0x39, 0x67, 0xe7, 0x38, 0xf5, 0x07, 0x00, 0x61, 0xc3, 0x58, 0x1c, 0x5d, 0x1d, 0x5e, 0x1a, 0x38, 0x1a, 0x38, 0x00, 0x60, 0x3a, 0x38, 0xaf, 0x61, 0x1a, 0x69, 0x19, 0x01, 0x00, 0x60, 0x2f, 0x68, 0x93, 0x62, 0x57, 0x38, 0x0f, 0x59, 0x1b, 0xed, 
+0x00, 0x08, 0x1a, 0x38, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x08, 0x60, 0x1e, 0x58, 0xbc, 0xea, 0x3e, 0x58, 0x19, 0x10, 0xfb, 0x89, 0x00, 0x60, 0x1e, 0x58, 0x78, 0xa9, 0xbc, 0xea, 0x3e, 0x58, 0x19, 0x00, 0x9a, 0xc7, 0x18, 0x10, 0xf8, 0x89, 0x08, 0x60, 0x1e, 0x58, 0x0c, 0xf1, 0x3e, 0x58, 0x19, 0x10, 0xfb, 0x89, 0x00, 0x60, 0x1e, 0x58, 0x78, 0xa9, 0x0c, 0xf1, 0x3e, 0x58, 0x19, 0x00, 0xcc, 0xc7, 0x18, 0x10, 0xf8, 0x89, 0xe5, 0xa8, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0xa2, 0x72, 0x07, 0x61, 0x22, 0x23, 0x03, 0x61, 0x23, 0x32, 0x0a, 0x8a, 0x1e, 0x49, 
+0x40, 0x08, 0x04, 0x61, 0x23, 0x32, 0x0e, 0x8a, 0x00, 0x61, 0x23, 0x32, 0x24, 0x8a, 0x02, 0x61, 0x23, 0x32, 0x2a, 0x8a, 0x2f, 0x9e, 0x9e, 0x5b, 0xe8, 0x00, 0xb5, 0x66, 0x02, 0x6e, 0xbe, 0x5e, 0x28, 0x1d, 0x28, 0x9e, 0x48, 0x63, 0x0e, 0x6b, 0x48, 0x66, 0x1d, 0x6e, 0x9e, 0x59, 0xbe, 0x00, 0x00, 0x64, 0x3c, 0x48, 0x0d, 0x8a, 0xfa, 0x06, 0x48, 0x67, 0x1d, 0x6f, 0xfa, 0x07, 0x19, 0x11, 0x27, 0x38, 0x64, 0x08, 0xe3, 0x59, 0x3b, 0x5e, 0x19, 0x07, 0x19, 0x06, 0x48, 0x66, 0x1d, 0x6e, 0xbe, 0x5e, 0x28, 0x1d, 0x0f, 0x9e, 0x16, 0xca, 0x48, 0x63, 0x0e, 0x6b, 0x2a, 0xc9, 0x7a, 0x66, 0x02, 0x6e, 0xbe, 0x5e, 0x28, 0x1d, 0x06, 0x9e, 0x30, 0x63, 0x0b, 0x6b, 0x29, 0x66, 0x03, 0x6e, 0xbe, 0x5e, 0x28, 0x1d, 0x60, 0x62, 0x11, 0x6a, 0xc0, 0x61, 0x03, 0x69, 0x24, 0x64, 0x16, 0x65, 0x9e, 0x58, 0xe3, 0x8e, 
+0x80, 0x08, 0x28, 0x1d, 0x05, 0x00, 0x19, 0x05, 0x00, 0x66, 0x00, 0x67, 0xbe, 0x5f, 0x29, 0x1d, 0x27, 0x38, 0xcb, 0x08, 0x19, 0x06, 0xbe, 0x48, 0x09, 0x8a, 0x1e, 0x58, 0x9e, 0x58, 0x29, 0x1d, 0x00, 0xac, 0x02, 0x92, 0x65, 0x58, 0x1d, 0x5a, 0x3e, 0x58, 0x36, 0x9e, 0x05, 0x5e, 0xdd, 0x5a, 0x00, 0x66, 0x19, 0x07, 0xfc, 0x48, 0x01, 0x8a, 0x2f, 0x9e, 0x13, 0xb8, 0x14, 0xb8, 0x15, 0xb8, 0x1e, 0x5e, 0x9e, 0x58, 0x28, 0x1d, 0x9e, 0x5c, 0xb8, 0x00, 0x87, 0x38, 0xa7, 0x08, 0x05, 0x5e, 0xdd, 0x5a, 0x3e, 0x5e, 0x95, 0xb8, 0x94, 0xb8, 0x93, 0xb8, 0x19, 0x12, 0x01, 0x76, 0xdd, 0x5a, 0x9e, 0x58, 0x28, 0x1d, 0xfa, 0x00, 0x05, 0x5e, 0xdd, 0x5a, 0x05, 0x5e, 0xdd, 0x5a, 0x05, 0x5e, 0xdd, 0x5a, 0x05, 0x5e, 0xdd, 0x5a, 0x05, 0x5e, 0xdd, 0x5a, 0x05, 0x5e, 0xdd, 0x5a, 0x05, 0x5e, 0xdd, 0x5a, 0xe8, 0x1d, 
+0xc0, 0x08, 0x9e, 0x5e, 0xe3, 0x19, 0xdd, 0x5a, 0xbb, 0x66, 0xdd, 0x5a, 0xbb, 0x66, 0xdd, 0x5a, 0xff, 0x66, 0xbe, 0x5e, 0x29, 0x1d, 0x1a, 0x38, 0x1a, 0x38, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x00, 0x67, 0x03, 0x6f, 0xbe, 0x5f, 0xdb, 0x00, 0x7f, 0x67, 0xbe, 0x5f, 0xde, 0x00, 0x00, 0x67, 0xbe, 0x5f, 0xe1, 0x00, 0x40, 0x67, 0xbe, 0x5f, 0xe0, 0x00, 0x3a, 0x38, 0xad, 0xac, 0x0d, 0x90, 0x04, 0x60, 0x69, 0x78, 0x66, 0x60, 0x6a, 0x78, 0x6b, 0x78, 0x6c, 0x78, 0x6d, 0x78, 0xb2, 0xa8, 0x3c, 0xab, 0xad, 0xaa, 0x00, 0x60, 0xbe, 0x58, 0xc2, 0x1d, 0x3a, 0x38, 0x02, 0x60, 0x72, 0x68, 0x05, 0xec, 0xff, 0xc8, 0x19, 0x38, 0xd9, 0x54, 0x02, 0xc9, 0xf2, 0x60, 0x72, 0x68, 0x05, 0xec, 0xa5, 0xaa, 0x3a, 0x38, 0x1e, 0x5c, 0x62, 0xbb, 
+0x00, 0x09, 0x04, 0xaa, 0x02, 0x9e, 0x1e, 0x5c, 0x04, 0xa8, 0x46, 0x62, 0x31, 0x6a, 0x40, 0xbd, 0xbd, 0x00, 0x02, 0x62, 0x40, 0xbd, 0xbe, 0x00, 0x00, 0x61, 0x10, 0x69, 0x07, 0x60, 0xc0, 0x68, 0x3f, 0x38, 0x0f, 0x59, 0x00, 0x61, 0x10, 0x69, 0x23, 0x5a, 0x32, 0xa8, 0x04, 0xac, 0x01, 0x92, 0x32, 0xaa, 0x5b, 0x59, 0x01, 0x62, 0x40, 0xbd, 0xbe, 0x00, 0x07, 0x60, 0xc0, 0x68, 0x3f, 0x38, 0x7a, 0x38, 0x02, 0x62, 0x40, 0xbd, 0xbe, 0x00, 0x00, 0x62, 0x40, 0xbd, 0xbd, 0x00, 0x40, 0xbd, 0xbe, 0x00, 0x3e, 0x5c, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0xe6, 0xac, 0x05, 0x92, 0xe0, 0x61, 0x1a, 0x69, 0x00, 0x62, 0x1b, 0x6a, 0x04, 0x9e, 0x40, 0x61, 0x57, 0x69, 0x60, 0x62, 0x57, 0x6a, 0x90, 0x63, 0x5e, 0x6b, 0xb6, 0x64, 0x90, 0x39, 
+0x40, 0x09, 0x5e, 0x6c, 0x39, 0x65, 0x00, 0x66, 0x00, 0x67, 0xa7, 0x38, 0x0c, 0x0a, 0x15, 0x65, 0xfd, 0x48, 0x21, 0x9c, 0xe6, 0xac, 0x05, 0x92, 0xec, 0x61, 0x1a, 0x69, 0x0c, 0x62, 0x1b, 0x6a, 0x04, 0x9e, 0x4c, 0x61, 0x57, 0x69, 0x6c, 0x62, 0x57, 0x6a, 0x16, 0x65, 0xa0, 0x38, 0x7a, 0x02, 0x5e, 0x17, 0x07, 0x00, 0x5e, 0x07, 0x6b, 0x5d, 0xbe, 0x5d, 0x2e, 0x1d, 0x48, 0x66, 0xbe, 0x48, 0xac, 0x8a, 0x09, 0x66, 0xbe, 0x48, 0x1b, 0x9c, 0x13, 0x66, 0xbe, 0x48, 0x35, 0x9c, 0x1d, 0x66, 0xbe, 0x48, 0x15, 0x9c, 0x31, 0x9e, 0x7a, 0x60, 0x02, 0x68, 0x8b, 0x5d, 0xbe, 0x5d, 0x2e, 0x1d, 0x48, 0x66, 0xdd, 0x48, 0x77, 0x8a, 0x05, 0x66, 0xfe, 0x48, 0x4b, 0x9c, 0x0b, 0x66, 0xfe, 0x48, 0x5d, 0x9c, 0x11, 0x66, 0xfe, 0x48, 0x45, 0x9c, 0x15, 0x66, 0xfe, 0x48, 0x57, 0x9c, 0x9e, 0x5d, 0x2e, 0x1d, 0x11, 0x13, 
+0x80, 0x09, 0x0a, 0x66, 0xbe, 0x48, 0x01, 0x96, 0xa6, 0x15, 0x25, 0x01, 0x45, 0x02, 0xff, 0x65, 0xe6, 0xac, 0x02, 0x92, 0x35, 0x26, 0x04, 0x9e, 0x1e, 0x58, 0x29, 0x58, 0x05, 0x26, 0x3e, 0x58, 0xfe, 0x5e, 0xe6, 0xac, 0x02, 0x92, 0x55, 0x25, 0x04, 0x9e, 0x1e, 0x58, 0x49, 0x58, 0x05, 0x25, 0x3e, 0x58, 0xc5, 0x2e, 0xdb, 0x58, 0x71, 0x9e, 0xe6, 0xac, 0x05, 0x92, 0xec, 0x61, 0x1a, 0x69, 0x0c, 0x62, 0x1b, 0x6a, 0x04, 0x9e, 0x4c, 0x61, 0x57, 0x69, 0x6c, 0x62, 0x57, 0x6a, 0x9e, 0x5d, 0x2e, 0x1d, 0x0a, 0x66, 0xa6, 0x15, 0xbe, 0x48, 0x01, 0x96, 0xa6, 0x15, 0x25, 0x01, 0x45, 0x02, 0x00, 0x65, 0xff, 0x6d, 0xe6, 0xac, 0x03, 0x92, 0x35, 0x26, 0x55, 0x25, 0x06, 0x9e, 0x1e, 0x58, 0x29, 0x58, 0x05, 0x26, 0x49, 0x58, 0x05, 0x25, 0x3e, 0x58, 0xfe, 0x5d, 0xc5, 0x2e, 0xdb, 0x58, 0x4c, 0x9e, 0x04, 0xd9, 
+0xc0, 0x09, 0xff, 0x65, 0xe6, 0xac, 0x04, 0x92, 0x35, 0x26, 0xfe, 0x5e, 0x55, 0x25, 0x07, 0x9e, 0x1e, 0x58, 0x29, 0x58, 0x05, 0x26, 0xfe, 0x5e, 0x49, 0x58, 0x05, 0x25, 0x3e, 0x58, 0xc5, 0x2e, 0x9e, 0x5d, 0x2e, 0x1d, 0x05, 0x00, 0xdb, 0x58, 0x05, 0x10, 0x14, 0x9e, 0x00, 0x65, 0xff, 0x6d, 0xe6, 0xac, 0x03, 0x92, 0x35, 0x26, 0x55, 0x25, 0x06, 0x9e, 0x1e, 0x58, 0x29, 0x58, 0x05, 0x26, 0x49, 0x58, 0x05, 0x25, 0x3e, 0x58, 0xfe, 0x5d, 0xc5, 0x2e, 0x9e, 0x5d, 0x2e, 0x1d, 0x05, 0x00, 0xdb, 0x58, 0x05, 0x10, 0x05, 0x66, 0xdf, 0x48, 0x09, 0x8a, 0x0b, 0x66, 0xdf, 0x48, 0x12, 0x8a, 0x11, 0x66, 0xdf, 0x48, 0x0f, 0x8a, 0x19, 0x01, 0x19, 0x02, 0x17, 0x9e, 0xe6, 0xac, 0x05, 0x92, 0xe0, 0x61, 0x1a, 0x69, 0x00, 0x62, 0x1b, 0x6a, 0x04, 0x9e, 0x40, 0x61, 0x57, 0x69, 0x60, 0x62, 0x57, 0x6a, 0xdf, 0x21, 
+0x00, 0x0a, 0x0b, 0x9e, 0xe6, 0xac, 0x05, 0x92, 0xe6, 0x61, 0x1a, 0x69, 0x06, 0x62, 0x1b, 0x6a, 0x04, 0x9e, 0x46, 0x61, 0x57, 0x69, 0x66, 0x62, 0x57, 0x6a, 0x19, 0x07, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x90, 0x60, 0x5e, 0x68, 0x48, 0x64, 0x0e, 0x6c, 0x00, 0x65, 0x00, 0x66, 0x00, 0x67, 0xff, 0x63, 0xff, 0x6b, 0x6f, 0x3c, 0x5a, 0x0a, 0x09, 0x5a, 0x48, 0x65, 0x5d, 0x48, 0x34, 0x8a, 0x1e, 0x58, 0x19, 0x03, 0x0c, 0x65, 0x65, 0x40, 0xe6, 0xac, 0x03, 0x92, 0x00, 0x61, 0x05, 0x69, 0x02, 0x9e, 0x80, 0x61, 0x57, 0x69, 0x20, 0x01, 0xb6, 0x62, 0x5e, 0x6a, 0x13, 0xb8, 0x14, 0xb8, 0x15, 0xb8, 0x6f, 0x39, 0x52, 0x0a, 0xe6, 0xac, 0x02, 0x92, 0x23, 0x5e, 0x01, 0x9e, 0x29, 0x5e, 0xc4, 0x3f, 0x00, 0xff, 0xfe, 0x5f, 0x3c, 0x29, 
+0x40, 0x0a, 0xc4, 0x3e, 0xff, 0x00, 0x49, 0x5d, 0x48, 0x60, 0x1d, 0x48, 0x03, 0x8a, 0x85, 0x04, 0xdb, 0x5c, 0x85, 0x14, 0x19, 0x02, 0x49, 0x5d, 0x48, 0x60, 0x1d, 0x48, 0x03, 0x8a, 0x85, 0x04, 0xfb, 0x5c, 0x85, 0x14, 0x19, 0x02, 0x19, 0x01, 0x95, 0xb8, 0x94, 0xb8, 0x93, 0xb8, 0x16, 0x65, 0x85, 0x04, 0x3e, 0x58, 0x1a, 0x38, 0x19, 0x00, 0x3a, 0x38, 0x9e, 0x59, 0xf1, 0x1e, 0x1c, 0x11, 0x1e, 0x98, 0x9e, 0x59, 0xf2, 0x1e, 0x22, 0x39, 0x88, 0x00, 0x11, 0x8a, 0x9e, 0x59, 0x58, 0x1a, 0x1a, 0x11, 0x01, 0x94, 0x14, 0x9e, 0x88, 0x61, 0xbe, 0x59, 0xf2, 0x1e, 0x8d, 0x61, 0x9e, 0x58, 0xef, 0x1e, 0x1b, 0x59, 0x97, 0x61, 0x9e, 0x58, 0xee, 0x1e, 0x1b, 0x59, 0x18, 0x9e, 0x9e, 0x59, 0x58, 0x1a, 0x19, 0x11, 0xf0, 0x95, 0x9e, 0x59, 0xf1, 0x1e, 0x1c, 0x11, 0x00, 0x98, 0x00, 0x61, 0xbe, 0x59, 0x00, 0xa0, 
+0x80, 0x0a, 0xf2, 0x1e, 0x9e, 0x59, 0xf0, 0x1e, 0x22, 0x39, 0x66, 0x00, 0x08, 0x88, 0x8d, 0x61, 0x23, 0x58, 0xbe, 0x58, 0xef, 0x1e, 0x97, 0x61, 0x23, 0x58, 0xbe, 0x58, 0xee, 0x1e, 0x3a, 0x38, 0x9e, 0x59, 0xf3, 0x1e, 0x1c, 0x11, 0x1e, 0x98, 0x9e, 0x59, 0xf7, 0x1e, 0x22, 0x39, 0x88, 0x00, 0x11, 0x8a, 0x9e, 0x59, 0x58, 0x1a, 0x1b, 0x11, 0x01, 0x94, 0x14, 0x9e, 0x88, 0x61, 0xbe, 0x59, 0xf7, 0x1e, 0x8e, 0x61, 0x9e, 0x58, 0xf5, 0x1e, 0x1b, 0x59, 0x98, 0x61, 0x9e, 0x58, 0xf6, 0x1e, 0x1b, 0x59, 0x18, 0x9e, 0x9e, 0x59, 0x58, 0x1a, 0x1a, 0x11, 0xf0, 0x95, 0x9e, 0x59, 0xf3, 0x1e, 0x1c, 0x11, 0x00, 0x98, 0x00, 0x61, 0xbe, 0x59, 0xf7, 0x1e, 0x9e, 0x59, 0xf4, 0x1e, 0x22, 0x39, 0x66, 0x00, 0x08, 0x88, 0x8e, 0x61, 0x23, 0x58, 0xbe, 0x58, 0xf5, 0x1e, 0x98, 0x61, 0x23, 0x58, 0xbe, 0x58, 0x07, 0x85, 
+0xc0, 0x0a, 0xf6, 0x1e, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x9e, 0x58, 0xea, 0x04, 0x18, 0x10, 0x0a, 0x88, 0x00, 0x60, 0x01, 0x61, 0x1f, 0x69, 0x06, 0x62, 0x1f, 0x6a, 0x8f, 0x38, 0xd5, 0x0a, 0x1d, 0x59, 0x1d, 0x5a, 0x1a, 0x38, 0x9e, 0x58, 0x00, 0x1f, 0x19, 0x10, 0x23, 0x8a, 0x00, 0x64, 0x7f, 0x6c, 0x8d, 0x61, 0x01, 0x62, 0x1f, 0x6a, 0x8f, 0x38, 0xeb, 0x0a, 0x23, 0x58, 0x04, 0x15, 0x06, 0x8a, 0x43, 0x5b, 0x18, 0x13, 0x01, 0x88, 0x1b, 0x5a, 0x43, 0x58, 0x1b, 0x59, 0x19, 0x01, 0x19, 0x02, 0x30, 0x64, 0x97, 0x61, 0x06, 0x62, 0x1f, 0x6a, 0x8f, 0x38, 0xfc, 0x0a, 0x23, 0x58, 0x04, 0x15, 0x06, 0x8a, 0x43, 0x5b, 0x18, 0x13, 0x01, 0x88, 0x1b, 0x5a, 0x43, 0x58, 0x1b, 0x59, 0x19, 0x01, 0x19, 0x02, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x64, 0xd2, 
+0x00, 0x0b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x10, 0x00, 0x0e, 0x00, 0x0c, 0x00, 0x0a, 0x00, 0x08, 0x00, 0x06, 0x00, 0x06, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x03, 0x00, 0x03, 0x00, 0x02, 0x00, 0x02, 0x00, 0xff, 0x01, 0xff, 0x00, 0x7f, 0x00, 0x3f, 0x00, 0x1f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x02, 0x00, 0x02, 0x00, 0x02, 0x00, 0x03, 0x00, 0x03, 0x00, 0x03, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x04, 0x00, 0x05, 0x00, 0x05, 0x00, 0x05, 0x00, 0x96, 0x54, 
+0x40, 0x0b, 0x05, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x9e, 0x58, 0xe7, 0x00, 0x19, 0x10, 0x01, 0x98, 0xfd, 0x38, 0x6c, 0xcb, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x01, 0x60, 0xbe, 0x58, 0xea, 0x00, 0xbe, 0x58, 0xe7, 0x00, 0xed, 0x9f, 0x9e, 0x58, 0xe7, 0x00, 0x19, 0x10, 0x01, 0x98, 0xfd, 0x38, 0x99, 0xcc, 0x01, 0x60, 0xbe, 0x58, 0xe7, 0x00, 0xf6, 0x9f, 0x1a, 0x38, 0x1a, 0x38, 0x9e, 0x58, 0x36, 0x1d, 0x1b, 0x10, 0x98, 0x3a, 0x74, 0x0c, 0xfb, 0xcd, 0x02, 0x60, 0xbe, 0x58, 0xdd, 0x1e, 0x7d, 0xe4, 0xc7, 0xdd, 0x8a, 0xde, 0xa1, 0xdd, 0xac, 0xe5, 0xa1, 0xcc, 0xd4, 0xdb, 0x4a, 0xee, 0xb7, 0xcc, 0x6e, 0xfd, 
+0x80, 0x0b, 0xd4, 0xcc, 0x48, 0x66, 0x0e, 0x6e, 0xa4, 0xed, 0xf8, 0xcc, 0xd2, 0xde, 0x7f, 0xe2, 0x80, 0x60, 0xbe, 0x58, 0xfd, 0x1e, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0x01, 0x00, 0x1a, 0x10, 0x13, 0x88, 0x9e, 0x58, 0x45, 0x04, 0x02, 0x38, 0x00, 0x01, 0x08, 0x98, 0x9e, 0x58, 0x4d, 0x04, 0x9e, 0x59, 0x4f, 0x04, 0x01, 0x00, 0x02, 0x39, 0x00, 0x02, 0x8a, 0x80, 0x88, 0x60, 0xbe, 0x58, 0xfd, 0x1e, 0xa8, 0xe8, 0x2e, 0xe9, 0x84, 0x9e, 0x1a, 0x38, 0x9e, 0x58, 0xe9, 0x1e, 0x18, 0x10, 0x01, 0x8a, 0x7e, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0x20, 0x1d, 0x1b, 0x60, 0xbe, 0x58, 0x44, 0x1a, 0x9e, 0x58, 0xcd, 0x04, 0xfc, 0x10, 0x1b, 0x98, 0x06, 0x70, 0x50, 0xac, 0x18, 0x92, 0x9e, 0x58, 0x45, 0x04, 0x02, 0x38, 0x00, 0x01, 0x0a, 0x98, 0x9e, 0x58, 0x4d, 0x04, 0x02, 0x38, 0x40, 0x01, 0x4d, 0x4c, 
+0xc0, 0x0b, 0x0e, 0x80, 0x9e, 0x58, 0x4f, 0x04, 0x02, 0x38, 0x40, 0x01, 0x09, 0x80, 0xeb, 0xe5, 0x9e, 0x58, 0x20, 0x1d, 0x18, 0x10, 0x04, 0x8a, 0x05, 0x60, 0xbe, 0x58, 0x44, 0x1a, 0x59, 0x9e, 0x1a, 0x38, 0x06, 0x70, 0x08, 0xac, 0x38, 0x92, 0x00, 0xac, 0x36, 0x92, 0x50, 0xac, 0x34, 0x92, 0x00, 0x60, 0xbe, 0x58, 0x43, 0x04, 0x9e, 0x58, 0xdb, 0x1e, 0x9e, 0x59, 0xdc, 0x1e, 0x01, 0x00, 0x1a, 0x10, 0x2a, 0x8a, 0x9e, 0x58, 0xf1, 0x04, 0x1a, 0x10, 0x01, 0x8a, 0x04, 0x9e, 0x9e, 0x58, 0xf2, 0x04, 0x1a, 0x10, 0x21, 0x8a, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0x01, 0x00, 0x1b, 0x10, 0x14, 0x9a, 0x9e, 0x58, 0x45, 0x04, 0x02, 0x38, 0x60, 0x00, 0x15, 0x80, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0x01, 0x00, 0x1b, 0x10, 0x08, 0x88, 0x9e, 0x58, 0xf1, 0x1e, 0x9e, 0x59, 0x10, 0xe2, 
+0x00, 0x0c, 0xf3, 0x1e, 0x01, 0x00, 0x08, 0x58, 0x1d, 0x10, 0x06, 0x98, 0x1f, 0xdf, 0x9e, 0x58, 0x43, 0x04, 0x01, 0x61, 0x19, 0x48, 0x1d, 0x8a, 0x9e, 0x58, 0x8a, 0x04, 0x1f, 0x10, 0x07, 0x80, 0x9e, 0x58, 0x8b, 0x04, 0x1f, 0x10, 0x03, 0x80, 0x05, 0x60, 0xbe, 0x58, 0x44, 0x1a, 0x9e, 0x58, 0x36, 0x1d, 0x1a, 0x10, 0x08, 0x8a, 0x9e, 0x58, 0x36, 0x1d, 0x1c, 0x10, 0x03, 0x8a, 0x98, 0xe2, 0x98, 0xe2, 0x01, 0x9e, 0x98, 0xe2, 0x9e, 0x58, 0x45, 0x04, 0x02, 0x38, 0x80, 0x01, 0x01, 0x80, 0x69, 0xe2, 0xcb, 0xce, 0x1f, 0xcd, 0x9e, 0xce, 0xb0, 0xce, 0x2a, 0xcf, 0x72, 0xdc, 0x17, 0xd2, 0x9e, 0x58, 0x43, 0x04, 0x01, 0x61, 0x19, 0x48, 0x0a, 0x8a, 0x9e, 0x58, 0xb1, 0x04, 0x19, 0x10, 0x06, 0x8a, 0x9e, 0x58, 0xb8, 0x04, 0x18, 0x10, 0x02, 0x88, 0x2c, 0xe4, 0xc3, 0xe1, 0xc1, 0xf8, 0x8a, 0xf8, 0x7f, 0x91, 
+0x40, 0x0c, 0x56, 0xd0, 0x19, 0x38, 0x92, 0x4a, 0x9e, 0x58, 0x43, 0x04, 0x01, 0x61, 0x19, 0x48, 0x0c, 0x8a, 0x9e, 0x58, 0x20, 0x1d, 0x18, 0x10, 0x08, 0x88, 0x19, 0x38, 0xc6, 0x4a, 0x19, 0x38, 0xc5, 0x48, 0x19, 0x38, 0x94, 0x49, 0x19, 0x38, 0xd6, 0x4a, 0x03, 0xda, 0x4d, 0xda, 0xf6, 0xed, 0x6b, 0xd3, 0xe1, 0xd3, 0xec, 0xd6, 0x8a, 0xda, 0x9e, 0x58, 0x58, 0x1a, 0x19, 0x10, 0x12, 0x88, 0x9e, 0x58, 0x8a, 0x04, 0x9e, 0x59, 0x8b, 0x04, 0x01, 0x00, 0x02, 0x39, 0x05, 0x00, 0x0a, 0x98, 0xaa, 0x61, 0x15, 0x69, 0x23, 0x58, 0x02, 0x39, 0x0d, 0x00, 0x04, 0x80, 0xaa, 0x61, 0x15, 0x69, 0x0d, 0x60, 0x1b, 0x59, 0xbf, 0xdc, 0x7a, 0xdd, 0x3a, 0x38, 0xfb, 0xcd, 0xa1, 0xcc, 0xd4, 0xdb, 0xc8, 0xcc, 0xd4, 0xcc, 0xf8, 0xcc, 0x7f, 0xe2, 0xcb, 0xce, 0x1f, 0xcd, 0x9e, 0xce, 0xb0, 0xce, 0x2a, 0xcf, 0x3f, 0xb2, 
+0x80, 0x0c, 0x17, 0xd2, 0x56, 0xd0, 0x03, 0xda, 0x4d, 0xda, 0x6b, 0xd3, 0xe1, 0xd3, 0xec, 0xd6, 0x8a, 0xda, 0xbf, 0xdc, 0x7a, 0xdd, 0x3a, 0x38, 0xfb, 0xcd, 0xa1, 0xcc, 0xd4, 0xcc, 0xf8, 0xcc, 0x7a, 0xce, 0xcb, 0xce, 0x1f, 0xcd, 0x9e, 0xce, 0xb0, 0xce, 0x2a, 0xcf, 0x17, 0xd2, 0x56, 0xd0, 0x03, 0xda, 0x3a, 0x38, 0x4d, 0xda, 0x6b, 0xd3, 0xe1, 0xd3, 0xec, 0xd6, 0x8a, 0xda, 0xbf, 0xdc, 0x7a, 0xdd, 0x3a, 0x38, 0x30, 0x67, 0x0b, 0x6f, 0x9e, 0x5e, 0xe9, 0x00, 0x48, 0x65, 0x0e, 0x6d, 0x9e, 0x5c, 0xda, 0x00, 0x19, 0x14, 0x87, 0x38, 0xb5, 0x0c, 0xc5, 0x5c, 0xf4, 0x14, 0x7c, 0xac, 0x04, 0x92, 0x00, 0x61, 0x02, 0x62, 0x82, 0x40, 0x01, 0x5c, 0x9d, 0x5d, 0x19, 0x07, 0x3a, 0x38, 0x30, 0x60, 0x1c, 0x78, 0x06, 0x70, 0x50, 0xac, 0x08, 0x92, 0x08, 0xac, 0x04, 0x92, 0x00, 0xac, 0x02, 0x92, 0x2d, 0x02, 
+0xc0, 0x0c, 0x10, 0x60, 0x03, 0x9e, 0x30, 0x60, 0x01, 0x9e, 0x68, 0x60, 0x25, 0x78, 0x26, 0x78, 0x3a, 0x38, 0x30, 0x60, 0x1c, 0x78, 0x30, 0x60, 0x25, 0x78, 0x26, 0x78, 0x3a, 0x38, 0x40, 0x60, 0x1c, 0x78, 0x30, 0x60, 0x25, 0x78, 0x26, 0x78, 0x3a, 0x38, 0x48, 0x67, 0x0e, 0x6f, 0x9e, 0x5d, 0xfd, 0x1b, 0x19, 0x15, 0x9e, 0x5e, 0xfe, 0x1b, 0xff, 0x64, 0x7f, 0x6c, 0xa7, 0x38, 0xe2, 0x0c, 0x9f, 0x49, 0x01, 0x9a, 0xe3, 0x5c, 0x19, 0x07, 0x18, 0x14, 0x01, 0x94, 0x00, 0x64, 0x90, 0x3c, 0x26, 0x00, 0x90, 0x3c, 0x05, 0x1c, 0xf2, 0x3f, 0xfd, 0x1b, 0x00, 0x62, 0xa7, 0x38, 0xf4, 0x0c, 0xf2, 0x13, 0x03, 0x96, 0xf4, 0x13, 0x01, 0x94, 0x00, 0x63, 0x7d, 0x5f, 0x19, 0x16, 0xe4, 0x89, 0x3a, 0x38, 0x48, 0x67, 0x0e, 0x6f, 0x9e, 0x5d, 0xfd, 0x1b, 0x9e, 0x5e, 0xfe, 0x1b, 0x19, 0x16, 0xff, 0x64, 0x7d, 0x69, 
+0x00, 0x0d, 0x7f, 0x6c, 0xc7, 0x38, 0x08, 0x0d, 0x9f, 0x49, 0x01, 0x9a, 0xe3, 0x5c, 0xf0, 0x3f, 0xfd, 0x1b, 0x1a, 0x38, 0x18, 0x14, 0x01, 0x94, 0x00, 0x64, 0x90, 0x3c, 0x25, 0x00, 0x90, 0x3c, 0x05, 0x1c, 0x00, 0x62, 0xc7, 0x38, 0x1a, 0x0d, 0xf2, 0x3f, 0xfd, 0x1b, 0xf2, 0x13, 0x03, 0x96, 0xf4, 0x13, 0x01, 0x94, 0x00, 0x63, 0x7b, 0x5f, 0x19, 0x07, 0x19, 0x15, 0xe1, 0x89, 0x3a, 0x38, 0x05, 0x71, 0x49, 0xaa, 0x05, 0x79, 0x00, 0x66, 0x60, 0x65, 0x11, 0x6d, 0x48, 0x64, 0x0e, 0x6c, 0x9e, 0x5b, 0xfd, 0x1b, 0x1a, 0x05, 0xa3, 0x05, 0x00, 0x67, 0x9e, 0x58, 0xfd, 0x1b, 0x19, 0x10, 0x07, 0x38, 0xbb, 0x0d, 0x1d, 0x70, 0x1c, 0x49, 0x85, 0x94, 0x05, 0x71, 0x49, 0xa8, 0x05, 0x79, 0x00, 0x60, 0xa2, 0x3b, 0x01, 0x00, 0x63, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x29, 0x88, 0xb2, 0x3b, 0xd3, 0x97, 
+0x40, 0x0d, 0xfd, 0x1b, 0x19, 0x13, 0x63, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x21, 0x88, 0xa3, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x6d, 0x88, 0x9e, 0x5b, 0xf0, 0x04, 0x4b, 0x62, 0x1a, 0x6a, 0x7a, 0x49, 0x06, 0x98, 0xa3, 0x59, 0x24, 0x39, 0x00, 0x80, 0x23, 0x29, 0x3b, 0x5d, 0x08, 0x9e, 0x43, 0x5b, 0x19, 0x03, 0x7b, 0x5a, 0xa3, 0x59, 0x24, 0x39, 0x00, 0x80, 0x23, 0x29, 0x3b, 0x5d, 0x19, 0x13, 0x60, 0x3a, 0xaa, 0x15, 0x43, 0x59, 0x19, 0x01, 0x3b, 0x5a, 0xdf, 0xce, 0x51, 0x9e, 0xa3, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x4c, 0x88, 0xa2, 0x3b, 0x01, 0x00, 0xb2, 0x3a, 0xfd, 0x1b, 0x19, 0x12, 0x63, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x1f, 0x8a, 0x43, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x1a, 0x8a, 0x63, 0x59, 0x24, 0x39, 0xff, 0x00, 0x43, 0x58, 0x9e, 0xe0, 
+0x80, 0x0d, 0x04, 0x38, 0xff, 0x00, 0x38, 0x48, 0x12, 0x8a, 0x20, 0x39, 0xbd, 0x15, 0x43, 0x58, 0x00, 0x38, 0xbd, 0x15, 0x03, 0x58, 0x19, 0x49, 0x01, 0x94, 0x1b, 0x59, 0x00, 0x39, 0xbd, 0x15, 0x63, 0x58, 0x00, 0x38, 0xbd, 0x15, 0x03, 0x58, 0x19, 0x49, 0x01, 0x94, 0x1b, 0x59, 0x00, 0x60, 0x43, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x09, 0x8a, 0x43, 0x5b, 0x64, 0x3b, 0xff, 0x00, 0xa3, 0x59, 0x24, 0x39, 0x00, 0x80, 0x23, 0x29, 0x3b, 0x5d, 0x0d, 0x9e, 0x63, 0x59, 0x24, 0x39, 0xff, 0x00, 0x19, 0x48, 0x08, 0x8a, 0x63, 0x5b, 0x64, 0x3b, 0xff, 0x00, 0xa3, 0x59, 0x24, 0x39, 0x00, 0x80, 0x23, 0x29, 0x3b, 0x5d, 0x19, 0x13, 0x60, 0x3a, 0xaa, 0x15, 0x43, 0x59, 0x19, 0x01, 0x3b, 0x5a, 0xec, 0xce, 0x19, 0x04, 0x19, 0x05, 0x19, 0x07, 0x19, 0x05, 0x19, 0x06, 0x9e, 0x5a, 0xfe, 0x1b, 0xa8, 0xc2, 
+0xc0, 0x0d, 0x5e, 0x48, 0x69, 0x99, 0x3a, 0x38, 0xe8, 0x67, 0x03, 0x6f, 0xbe, 0x5f, 0x54, 0x1a, 0x9e, 0x5c, 0x58, 0x1a, 0x82, 0x39, 0x00, 0x00, 0x20, 0x8a, 0x00, 0x67, 0xbe, 0x5f, 0x54, 0x1a, 0x9e, 0x5a, 0xfd, 0x1b, 0x72, 0x65, 0x19, 0x6d, 0x86, 0x66, 0x19, 0x6e, 0x19, 0x14, 0xff, 0x61, 0x7f, 0x69, 0x00, 0x63, 0x87, 0x38, 0xe5, 0x0d, 0xa5, 0x58, 0x46, 0x4a, 0x00, 0x38, 0x48, 0x0e, 0x38, 0x49, 0x01, 0x9a, 0x03, 0x59, 0x78, 0x49, 0x01, 0x94, 0x03, 0x5b, 0x17, 0x07, 0x19, 0x04, 0xe1, 0x58, 0x00, 0x61, 0x1c, 0x5c, 0xbe, 0x58, 0x54, 0x1a, 0x3a, 0x38, 0x9e, 0x58, 0xe3, 0x19, 0x00, 0x67, 0x27, 0x76, 0x19, 0x16, 0xc7, 0x38, 0xf7, 0x0d, 0x04, 0x39, 0x01, 0x00, 0xe1, 0x07, 0x08, 0x58, 0xbe, 0x5f, 0xea, 0x04, 0x3a, 0x38, 0x9e, 0x58, 0x00, 0x1f, 0x9e, 0x5f, 0x20, 0x1d, 0x18, 0x17, 0x57, 0x53, 
+0x00, 0x0e, 0x01, 0x8a, 0x1b, 0x00, 0xbe, 0x58, 0x11, 0x00, 0x7a, 0x67, 0x02, 0x6f, 0x00, 0x66, 0x9e, 0x58, 0x5d, 0x1a, 0x19, 0x10, 0x07, 0x38, 0x0e, 0x0e, 0xdd, 0x5f, 0x1a, 0x38, 0x1a, 0x38, 0xed, 0xcd, 0xc3, 0xcd, 0x9e, 0x5f, 0xea, 0x04, 0x0a, 0x67, 0xbe, 0x5f, 0xe4, 0x19, 0x9e, 0x58, 0x54, 0x1a, 0x9e, 0x59, 0x48, 0x1a, 0x24, 0x3a, 0x00, 0xe0, 0x07, 0x8a, 0x22, 0x39, 0x00, 0x20, 0xbe, 0x59, 0x48, 0x1a, 0x24, 0x38, 0xff, 0x1f, 0x17, 0x9e, 0x18, 0x10, 0x0b, 0x8a, 0x9e, 0x59, 0x48, 0x1a, 0x18, 0x11, 0x05, 0x8a, 0x26, 0x5a, 0x41, 0x02, 0x02, 0x00, 0x08, 0x58, 0x08, 0x58, 0xbe, 0x58, 0x48, 0x1a, 0x9e, 0x59, 0xe2, 0x19, 0x3f, 0x48, 0x07, 0x8a, 0x9e, 0x58, 0x48, 0x1a, 0x05, 0x39, 0x00, 0x80, 0xbe, 0x59, 0x48, 0x1a, 0x06, 0x58, 0x24, 0x3a, 0x00, 0xe0, 0x00, 0x8a, 0x30, 0x62, 0xa0, 0x62, 
+0x40, 0x0e, 0x0b, 0x6a, 0x50, 0x3a, 0x4b, 0x1a, 0x49, 0x5a, 0x02, 0x40, 0x00, 0x61, 0x02, 0x69, 0x01, 0x40, 0xbe, 0x59, 0x05, 0x1c, 0x9e, 0x59, 0x4b, 0x1a, 0xbe, 0x59, 0x03, 0x1c, 0x00, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0x58, 0x1a, 0x60, 0x66, 0x11, 0x6e, 0x00, 0x61, 0x80, 0x69, 0x9e, 0x5f, 0xff, 0x1b, 0x19, 0x17, 0xe7, 0x38, 0x5c, 0x0e, 0xd1, 0x22, 0x5d, 0x5e, 0xaa, 0x63, 0x15, 0x6b, 0xbe, 0x62, 0x15, 0x6a, 0x00, 0x61, 0x9e, 0x5f, 0xf0, 0x04, 0x19, 0x17, 0xe7, 0x38, 0x69, 0x0e, 0x1d, 0x5b, 0x19, 0x01, 0x3d, 0x5a, 0xbe, 0x58, 0x4b, 0x1a, 0xc8, 0x63, 0x1b, 0x6b, 0x00, 0x60, 0x13, 0x67, 0xe7, 0x38, 0x74, 0x0e, 0x1d, 0x5b, 0x1a, 0x38, 0x1a, 0x38, 0x9e, 0x58, 0x06, 0x1c, 0xbe, 0x58, 0x1c, 0x00, 0x3a, 0x38, 0x60, 0x67, 0x11, 0x6f, 0x48, 0x66, 0x0e, 0x6e, 0x00, 0x64, 0x01, 0x63, 0xf6, 0x44, 
+0x80, 0x0e, 0x24, 0x72, 0x9e, 0x58, 0x05, 0x1c, 0x08, 0x58, 0x40, 0x02, 0x00, 0x61, 0x80, 0x69, 0x20, 0x58, 0x9e, 0x5d, 0xda, 0x00, 0x19, 0x15, 0xa7, 0x38, 0x9c, 0x0e, 0xf1, 0x25, 0x08, 0x8a, 0xd3, 0x15, 0x0a, 0x98, 0xf0, 0x25, 0xbb, 0x5f, 0x9e, 0x49, 0x06, 0x98, 0x9b, 0x5e, 0x04, 0x9e, 0xd2, 0x15, 0xfa, 0x9b, 0xf1, 0x2d, 0xbb, 0x5f, 0x19, 0x07, 0x19, 0x06, 0x3a, 0x38, 0xbe, 0x63, 0x15, 0x6b, 0x00, 0x65, 0x9e, 0x5c, 0x4b, 0x1a, 0x18, 0x14, 0x0a, 0x8a, 0x19, 0x14, 0x87, 0x38, 0xae, 0x0e, 0x65, 0x04, 0x83, 0x5e, 0x19, 0x16, 0x66, 0x07, 0xe3, 0x5e, 0xdb, 0x5c, 0x19, 0x05, 0x3a, 0x38, 0x9e, 0x5e, 0x4b, 0x1a, 0x0f, 0x9a, 0x0e, 0x8a, 0x19, 0x16, 0xc7, 0x38, 0xc1, 0x0e, 0xc0, 0x3d, 0xbe, 0x15, 0xa3, 0x5f, 0x19, 0x17, 0xdf, 0x48, 0x04, 0x8a, 0xaa, 0x62, 0x15, 0x6a, 0xc3, 0xce, 0x95, 0xc4, 
+0xc0, 0x0e, 0x01, 0xcf, 0x19, 0x16, 0x3a, 0x38, 0xe2, 0x04, 0x83, 0x58, 0xc2, 0x02, 0x50, 0x00, 0x1b, 0x5c, 0xde, 0x5a, 0x00, 0x00, 0x3a, 0x38, 0x00, 0x60, 0xff, 0x61, 0xde, 0x66, 0x15, 0x6e, 0xf2, 0x65, 0x15, 0x6d, 0x06, 0x64, 0x16, 0x6c, 0x1a, 0x63, 0x16, 0x6b, 0x9e, 0x5f, 0xf0, 0x04, 0x19, 0x17, 0xe7, 0x38, 0xdd, 0x0e, 0x3d, 0x5e, 0x1d, 0x5d, 0x1d, 0x5c, 0x3d, 0x5b, 0x3a, 0x38, 0x60, 0x38, 0xde, 0x15, 0xfb, 0x58, 0x60, 0x38, 0xf2, 0x15, 0xfb, 0x58, 0x60, 0x38, 0x06, 0x16, 0xdb, 0x58, 0x60, 0x38, 0x1a, 0x16, 0xdb, 0x58, 0x3a, 0x38, 0x60, 0x38, 0xde, 0x15, 0xf8, 0x49, 0x01, 0x94, 0xfb, 0x58, 0x60, 0x38, 0xf2, 0x15, 0xf8, 0x49, 0x01, 0x9a, 0xfb, 0x58, 0x60, 0x38, 0x06, 0x16, 0xd8, 0x49, 0x01, 0x9a, 0xdb, 0x58, 0x60, 0x38, 0x1a, 0x16, 0xd8, 0x49, 0x01, 0x94, 0xdb, 0x58, 0x72, 0xe8, 
+0x00, 0x0f, 0x3a, 0x38, 0xc0, 0x38, 0xde, 0x15, 0x03, 0x59, 0xe0, 0x3a, 0xde, 0x15, 0x3a, 0x49, 0x01, 0x94, 0x3b, 0x5a, 0xde, 0x58, 0xff, 0x00, 0xc0, 0x38, 0xf2, 0x15, 0x03, 0x59, 0xe0, 0x3a, 0xf2, 0x15, 0x3a, 0x49, 0x01, 0x9a, 0x3b, 0x5a, 0xde, 0x58, 0x00, 0x00, 0xc0, 0x38, 0x06, 0x16, 0x03, 0x59, 0xe0, 0x3a, 0x06, 0x16, 0x3a, 0x49, 0x01, 0x9a, 0x3b, 0x5a, 0xde, 0x58, 0x00, 0x00, 0xc0, 0x38, 0x1a, 0x16, 0x03, 0x59, 0xe0, 0x3a, 0x1a, 0x16, 0x3a, 0x49, 0x01, 0x94, 0x3b, 0x5a, 0xde, 0x58, 0xff, 0x00, 0x3a, 0x38, 0x00, 0x61, 0xbe, 0x59, 0x58, 0x1a, 0x00, 0x67, 0x23, 0x70, 0xe0, 0x39, 0xaa, 0x15, 0x19, 0x49, 0x32, 0x98, 0x02, 0xdc, 0x9e, 0x58, 0xe9, 0x1e, 0x18, 0x10, 0x0e, 0x8a, 0x06, 0x70, 0x08, 0xac, 0x08, 0x92, 0x00, 0xac, 0x06, 0x92, 0x50, 0xac, 0x04, 0x92, 0x20, 0x60, 0x7b, 0x06, 
+0x40, 0x0f, 0x01, 0x68, 0x1c, 0x78, 0x03, 0x9e, 0x00, 0x60, 0x02, 0x68, 0x1c, 0x78, 0x9e, 0x58, 0x20, 0x1d, 0x02, 0x38, 0x80, 0x01, 0x03, 0x88, 0x40, 0x60, 0xbe, 0x58, 0x1c, 0x00, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5e, 0xe0, 0x3b, 0xde, 0x15, 0x63, 0x5d, 0x14, 0x60, 0x58, 0x62, 0x1a, 0x6a, 0x1a, 0x49, 0x12, 0x9a, 0x6d, 0xcf, 0x19, 0x05, 0xe0, 0x3b, 0xf2, 0x15, 0xbb, 0x49, 0xf5, 0x9b, 0x19, 0x06, 0xe0, 0x38, 0x06, 0x16, 0xd8, 0x49, 0xed, 0x9b, 0x66, 0xdc, 0x19, 0x07, 0x9e, 0x58, 0x4b, 0x1a, 0xf8, 0x48, 0xc4, 0x97, 0x01, 0x9e, 0x66, 0xdc, 0x3a, 0x38, 0x9e, 0x5a, 0xfd, 0x1b, 0xa0, 0x38, 0x48, 0x0e, 0x46, 0x48, 0x03, 0x5c, 0xe0, 0x3b, 0xc8, 0x1b, 0x63, 0x58, 0x04, 0x00, 0x1b, 0x5b, 0x1c, 0x73, 0x9b, 0x48, 0x31, 0x96, 0x1e, 0x5f, 0x01, 0x67, 0xe0, 0x39, 0x0c, 0x10, 0x29, 0x59, 0xae, 0x85, 
+0x80, 0x0f, 0x25, 0x03, 0x62, 0x39, 0x00, 0x00, 0x14, 0x96, 0x72, 0x39, 0xfd, 0x1b, 0x11, 0x94, 0xe0, 0x39, 0x15, 0x10, 0x29, 0x59, 0x26, 0x02, 0x42, 0x39, 0x00, 0x00, 0x0a, 0x96, 0x52, 0x39, 0xfe, 0x1b, 0x07, 0x94, 0x9e, 0x59, 0xfd, 0x1b, 0x60, 0x38, 0x48, 0x0e, 0x22, 0x48, 0x98, 0x49, 0x13, 0x96, 0x19, 0x07, 0xe2, 0x38, 0x09, 0x00, 0xe1, 0x97, 0x3e, 0x5f, 0x58, 0x61, 0x1a, 0x69, 0x23, 0x58, 0x00, 0x3a, 0x72, 0x19, 0xfe, 0x5f, 0xaf, 0x2a, 0xfe, 0x5f, 0x00, 0x3a, 0x86, 0x19, 0xdb, 0x5a, 0x08, 0x39, 0x01, 0x00, 0x01, 0x9e, 0x3e, 0x5f, 0x3a, 0x38, 0x1e, 0x5f, 0x00, 0x67, 0xe0, 0x3c, 0x0c, 0x10, 0x89, 0x5c, 0x85, 0x03, 0x62, 0x39, 0x00, 0x00, 0x50, 0x96, 0x72, 0x39, 0xfd, 0x1b, 0x4d, 0x94, 0xe0, 0x3c, 0x15, 0x10, 0x89, 0x5c, 0x86, 0x02, 0x42, 0x39, 0x00, 0x00, 0x46, 0x96, 0x5c, 0x6a, 
+0xc0, 0x0f, 0x52, 0x39, 0xfe, 0x1b, 0x43, 0x94, 0x9e, 0x59, 0xfd, 0x1b, 0x60, 0x38, 0x32, 0x16, 0x22, 0x48, 0x03, 0x5c, 0x82, 0x39, 0x00, 0x00, 0x3a, 0x9a, 0x1e, 0x5f, 0x1e, 0x5c, 0x1e, 0xd0, 0x81, 0x58, 0x3e, 0x5c, 0x19, 0x17, 0x20, 0x98, 0x19, 0x11, 0x1e, 0x98, 0x1e, 0x5c, 0x00, 0x3f, 0x72, 0x19, 0xe3, 0x5f, 0x00, 0x39, 0x86, 0x19, 0x23, 0x59, 0x9e, 0x5c, 0xfd, 0x1b, 0xe0, 0x38, 0x32, 0x16, 0x81, 0x48, 0x03, 0x5f, 0xa0, 0x38, 0x32, 0x16, 0x86, 0x48, 0x3e, 0x5c, 0x17, 0x07, 0x80, 0x41, 0x1c, 0x5f, 0x01, 0x5c, 0x3e, 0x5f, 0xe2, 0x38, 0x05, 0x00, 0x04, 0x96, 0xfd, 0x61, 0xb4, 0x69, 0x81, 0x40, 0x21, 0x5c, 0x1e, 0x5f, 0x50, 0x67, 0x1a, 0x6f, 0xe5, 0x58, 0xe3, 0x59, 0x83, 0x48, 0x3f, 0x5f, 0x1b, 0x5f, 0x52, 0x67, 0x1a, 0x6f, 0xe5, 0x58, 0xe3, 0x59, 0x82, 0x48, 0x3f, 0x5f, 0x1f, 0xab, 
+0x00, 0x10, 0x1b, 0x5f, 0x90, 0x38, 0x54, 0x1a, 0xbe, 0x58, 0x54, 0x1a, 0x3e, 0x5f, 0x19, 0x07, 0xe2, 0x38, 0x09, 0x00, 0xa5, 0x97, 0x3e, 0x5f, 0x3a, 0x38, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0x01, 0x00, 0x01, 0x00, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0x00, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0x01, 0x00, 0x01, 0x00, 0x9e, 0x5c, 0x58, 0x1a, 0x18, 0x14, 0x29, 0x9a, 0x19, 0x14, 0xff, 0x67, 0x7f, 0x6f, 0x87, 0x38, 0x3d, 0x10, 0x80, 0x38, 0x72, 0x19, 0x80, 0x39, 0x86, 0x19, 0xb8, 0x49, 0x02, 0x88, 0xd9, 0x49, 0x0e, 0x8a, 0x13, 0x10, 0x01, 0x8c, 0x02, 0x58, 0x32, 0x11, 0x01, 0x8c, 0x22, 0x59, 0x01, 0x00, 0xe4, 0x39, 0xff, 0x00, 0x19, 0x48, 0x03, 0x94, 0xfe, 0x5c, 0x04, 0x2f, 0xfe, 0x5c, 0x19, 0x14, 0xe4, 0x3c, 0x00, 0xff, 0x03, 0xe2, 
+0x40, 0x10, 0xfe, 0x5c, 0x80, 0x38, 0x72, 0x19, 0x13, 0x11, 0x01, 0x8c, 0x22, 0x59, 0x80, 0x38, 0x86, 0x19, 0x12, 0x17, 0x01, 0x8c, 0xe2, 0x5f, 0x3a, 0x38, 0x21, 0x72, 0x43, 0x43, 0x01, 0x5c, 0x43, 0x41, 0x24, 0x01, 0x9e, 0x5c, 0x54, 0x1a, 0x1c, 0x5c, 0x18, 0x00, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0xd2, 0x60, 0x15, 0x68, 0x03, 0x59, 0x22, 0x38, 0x01, 0x00, 0x03, 0x8a, 0x22, 0x38, 0x02, 0x00, 0x06, 0x8a, 0x00, 0x60, 0xbe, 0x58, 0x0b, 0x1f, 0xbe, 0x58, 0x0c, 0x1f, 0x0a, 0x9e, 0xb2, 0x60, 0x19, 0x68, 0x03, 0x59, 0xbe, 0x59, 0x0c, 0x1f, 0xbe, 0x60, 0x19, 0x68, 0x03, 0x59, 0xbe, 0x59, 0x0b, 0x1f, 0x3e, 0x59, 0x3e, 0x58, 0x00, 0x60, 0xbe, 0x58, 0xe2, 0x19, 0x58, 0x60, 0x1a, 0x68, 0x00, 0x61, 0x38, 0x49, 0x58, 0x8a, 0x00, 0x67, 0xe0, 0x38, 0x72, 0x19, 0x03, 0x5d, 0xe0, 0x38, 0x68, 0xec, 
+0x80, 0x10, 0x86, 0x19, 0x03, 0x5e, 0xd4, 0xd0, 0xf4, 0xd1, 0x9e, 0x58, 0x59, 0x1a, 0x19, 0x10, 0x05, 0x8a, 0xe0, 0xd0, 0x9e, 0x58, 0x59, 0x1a, 0x1a, 0x10, 0x01, 0x8a, 0xad, 0xcf, 0x51, 0x63, 0x1a, 0x6b, 0x4c, 0xd0, 0x9e, 0x5d, 0xe2, 0x19, 0xa0, 0x3b, 0xb2, 0x19, 0x1b, 0x5b, 0x53, 0x63, 0x1a, 0x6b, 0x4c, 0xd0, 0xa0, 0x3b, 0xbe, 0x19, 0x1b, 0x5b, 0x1e, 0x58, 0x1e, 0x59, 0xa2, 0x38, 0x00, 0x00, 0x13, 0x88, 0x9e, 0x58, 0x0b, 0x1f, 0x18, 0x10, 0x05, 0x88, 0x9e, 0x58, 0x0c, 0x1f, 0x18, 0x10, 0x01, 0x88, 0x0a, 0x9e, 0x9e, 0x58, 0x0b, 0x1f, 0xb2, 0x61, 0x19, 0x69, 0x1b, 0x59, 0x9e, 0x58, 0x0c, 0x1f, 0xbe, 0x61, 0x19, 0x69, 0x1b, 0x59, 0x3e, 0x59, 0x3e, 0x58, 0xe2, 0x62, 0x19, 0x6a, 0xca, 0x63, 0x19, 0x6b, 0x53, 0x03, 0xde, 0x5b, 0xff, 0xff, 0xd6, 0x63, 0x19, 0x6b, 0x53, 0x03, 0xd6, 0xe0, 
+0xc0, 0x10, 0xde, 0x5b, 0xff, 0x7f, 0x43, 0x5b, 0x68, 0x3a, 0x01, 0x00, 0x59, 0x60, 0x1a, 0x68, 0xde, 0x58, 0x00, 0x00, 0x9e, 0x58, 0xe2, 0x19, 0x12, 0x38, 0x27, 0x00, 0x05, 0x94, 0x19, 0x07, 0x58, 0x60, 0x1a, 0x68, 0xf8, 0x49, 0xa9, 0x81, 0x3a, 0x38, 0x50, 0x60, 0x1a, 0x68, 0x00, 0x61, 0x04, 0x62, 0x47, 0x38, 0xdb, 0x10, 0x3d, 0x58, 0x1a, 0x38, 0x59, 0x60, 0x1a, 0x68, 0x3b, 0x58, 0x3a, 0x38, 0xbe, 0x5d, 0xe1, 0x1b, 0xbe, 0x5e, 0xe2, 0x1b, 0x1e, 0x5f, 0x00, 0x67, 0xe0, 0x39, 0xde, 0x15, 0x23, 0x59, 0xe0, 0x3a, 0xf2, 0x15, 0x43, 0x5a, 0xe0, 0x3b, 0x06, 0x16, 0x63, 0x5b, 0xe0, 0x3c, 0x1a, 0x16, 0x83, 0x5c, 0xb9, 0x48, 0x07, 0x96, 0xba, 0x48, 0x05, 0x98, 0xdb, 0x48, 0x03, 0x98, 0xdc, 0x48, 0x01, 0x96, 0x05, 0x9e, 0x19, 0x07, 0xf2, 0x39, 0x4b, 0x1a, 0xe7, 0x97, 0xa9, 0x9e, 0xcb, 0x8d, 
+0x00, 0x11, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x00, 0x67, 0x00, 0x60, 0xe0, 0x3d, 0x72, 0x19, 0xa3, 0x5d, 0xe0, 0x3e, 0x86, 0x19, 0xc3, 0x5e, 0xb9, 0x48, 0x0a, 0x96, 0xba, 0x48, 0x08, 0x98, 0xdb, 0x48, 0x06, 0x98, 0xdc, 0x48, 0x04, 0x96, 0x19, 0x00, 0xfe, 0x5f, 0x07, 0x28, 0xfe, 0x5f, 0x19, 0x07, 0xf2, 0x3d, 0x58, 0x1a, 0xea, 0x97, 0x3e, 0x5f, 0x04, 0x3d, 0xff, 0x00, 0x19, 0x15, 0x01, 0x8a, 0x86, 0x9e, 0x41, 0x16, 0xc1, 0x5f, 0x64, 0x15, 0xdd, 0x48, 0x01, 0x94, 0xa1, 0x5f, 0x1d, 0x17, 0x7b, 0x98, 0x04, 0x3f, 0x00, 0xff, 0xfe, 0x5f, 0x1a, 0x16, 0x0d, 0x94, 0xe0, 0x38, 0x72, 0x19, 0x03, 0x58, 0x18, 0x10, 0x02, 0x9a, 0x02, 0x39, 0x01, 0x00, 0x12, 0x3e, 0xfd, 0x1b, 0x19, 0x06, 0x02, 0x94, 0x00, 0x3a, 0x01, 0x00, 0x1a, 0x15, 0x0d, 0x94, 0xe0, 0x38, 0x86, 0x19, 0x03, 0x58, 0xdb, 0x66, 
+0x40, 0x11, 0x18, 0x10, 0x02, 0x9a, 0x02, 0x3c, 0x01, 0x00, 0x12, 0x3e, 0xfe, 0x1b, 0x19, 0x06, 0x02, 0x94, 0x00, 0x3b, 0x01, 0x00, 0x1e, 0x59, 0x21, 0x5d, 0x9e, 0x5e, 0xfd, 0x1b, 0xa0, 0x38, 0x32, 0x16, 0xc4, 0x48, 0x03, 0x5e, 0x9e, 0x58, 0xe6, 0x1b, 0x00, 0x61, 0x01, 0x69, 0x19, 0x48, 0x12, 0x98, 0xb2, 0x38, 0xe1, 0x1b, 0x03, 0x88, 0x92, 0x38, 0xe2, 0x1b, 0x0c, 0x8a, 0x18, 0x16, 0x07, 0x9a, 0x08, 0x60, 0xc0, 0x40, 0x08, 0x5e, 0xc0, 0x06, 0xc8, 0x5e, 0xc8, 0x5e, 0xc8, 0x5e, 0x9e, 0x58, 0xe4, 0x1b, 0xc0, 0x06, 0x18, 0x16, 0x2b, 0x9a, 0x50, 0x67, 0x1a, 0x6f, 0xe5, 0x58, 0xe3, 0x59, 0xc5, 0x48, 0x3f, 0x5f, 0x1b, 0x5f, 0x52, 0x67, 0x1a, 0x6f, 0xe5, 0x58, 0xe3, 0x59, 0xc4, 0x48, 0x3f, 0x5f, 0x1b, 0x5f, 0xd0, 0x3f, 0x54, 0x1a, 0xbe, 0x5f, 0x54, 0x1a, 0x7f, 0xac, 0x17, 0x90, 0xbd, 0x55, 
+0x80, 0x11, 0xe8, 0x5f, 0xbe, 0x5f, 0x54, 0x1a, 0x9e, 0x58, 0x50, 0x1a, 0x9e, 0x59, 0x51, 0x1a, 0x28, 0x59, 0x0c, 0x58, 0xbe, 0x59, 0x51, 0x1a, 0xbe, 0x58, 0x50, 0x1a, 0x9e, 0x58, 0x52, 0x1a, 0x9e, 0x59, 0x53, 0x1a, 0x28, 0x59, 0x0c, 0x58, 0xbe, 0x59, 0x53, 0x1a, 0xbe, 0x58, 0x52, 0x1a, 0xa2, 0x37, 0x02, 0x8a, 0x19, 0x05, 0xb1, 0x9f, 0x3e, 0x59, 0x83, 0x37, 0x02, 0x8a, 0x19, 0x04, 0xaa, 0x9f, 0x02, 0x65, 0xbe, 0x5d, 0x59, 0x1a, 0x03, 0x9e, 0x03, 0x65, 0xbe, 0x5d, 0x59, 0x1a, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5f, 0x3a, 0x38, 0x1e, 0x5c, 0x9e, 0x5d, 0xe1, 0x1b, 0x9e, 0x5e, 0xe2, 0x1b, 0xa0, 0x38, 0x32, 0x16, 0x16, 0x67, 0x1e, 0x59, 0x00, 0x61, 0xc7, 0x48, 0x3e, 0x59, 0x03, 0x5f, 0x18, 0x17, 0x35, 0x9a, 0x1e, 0x59, 0x1e, 0x5a, 0x00, 0x61, 0xe1, 0x58, 0xbe, 0x5f, 0xe6, 0x1b, 0x35, 0x15, 
+0xc0, 0x11, 0x06, 0x58, 0x2a, 0x59, 0x06, 0x58, 0x2a, 0x59, 0x0c, 0x62, 0x1c, 0x5a, 0xbe, 0x58, 0xe3, 0x1b, 0x00, 0x61, 0xe1, 0x58, 0xa8, 0x62, 0x1c, 0x5a, 0xbe, 0x58, 0xe4, 0x1b, 0x3e, 0x5a, 0x3e, 0x59, 0x41, 0x10, 0x21, 0x5f, 0x07, 0x38, 0xea, 0x11, 0xfd, 0x48, 0x02, 0x88, 0x9e, 0x48, 0x12, 0x8a, 0x20, 0x38, 0x32, 0x16, 0x1e, 0x59, 0x1e, 0x5a, 0x16, 0x62, 0x00, 0x61, 0x82, 0x48, 0x3e, 0x5a, 0x3e, 0x59, 0x03, 0x58, 0x18, 0x10, 0x06, 0x9a, 0x1e, 0x59, 0x9e, 0x59, 0xe3, 0x1b, 0x19, 0x48, 0x3e, 0x59, 0x05, 0x94, 0x19, 0x07, 0x19, 0x04, 0x9b, 0x48, 0xe2, 0x9b, 0x03, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0xe4, 0x1b, 0x3e, 0x5c, 0x3a, 0x38, 0x9e, 0x58, 0x58, 0x1a, 0x02, 0x39, 0x01, 0x00, 0x1d, 0x9a, 0x00, 0x62, 0x5f, 0x48, 0x16, 0x8a, 0x40, 0x38, 0x72, 0x19, 0x03, 0x5b, 0x40, 0x38, 0xb8, 0xbd, 
+0x00, 0x12, 0x86, 0x19, 0x03, 0x5c, 0xa3, 0x10, 0x01, 0x8c, 0x02, 0x58, 0x02, 0x39, 0x01, 0x00, 0x0a, 0x88, 0xc4, 0x10, 0x01, 0x8c, 0x02, 0x58, 0x02, 0x39, 0x01, 0x00, 0x04, 0x88, 0x01, 0x61, 0xbe, 0x59, 0x59, 0x1a, 0x04, 0x9e, 0x19, 0x02, 0x52, 0x39, 0x58, 0x1a, 0xe4, 0x89, 0x3a, 0x38, 0x9e, 0x58, 0x58, 0x1a, 0x02, 0x39, 0x01, 0x00, 0x66, 0x9a, 0x00, 0x67, 0xe0, 0x3e, 0x86, 0x19, 0xe0, 0x3a, 0x01, 0x00, 0x40, 0x3b, 0x72, 0x19, 0x40, 0x3c, 0x86, 0x19, 0xe0, 0x3d, 0x72, 0x19, 0xa3, 0x5d, 0xa4, 0x38, 0x00, 0xff, 0x63, 0x5b, 0x64, 0x39, 0x00, 0xff, 0x19, 0x48, 0x4a, 0x88, 0xa4, 0x3d, 0xff, 0x00, 0x64, 0x3b, 0xff, 0x00, 0x1e, 0x5f, 0x1e, 0x5a, 0x9e, 0x5f, 0xfd, 0x1b, 0x60, 0x38, 0x48, 0x0e, 0xe4, 0x49, 0x03, 0x5a, 0xa0, 0x38, 0x48, 0x0e, 0xe6, 0x49, 0x00, 0x61, 0x58, 0x49, 0x7a, 0x8f, 
+0x40, 0x12, 0x02, 0x9a, 0x01, 0x61, 0x03, 0x5a, 0x1e, 0x59, 0x9e, 0x58, 0x44, 0x1a, 0x40, 0x40, 0x9f, 0x38, 0x08, 0x58, 0xbe, 0x58, 0x83, 0x1a, 0x8f, 0xd2, 0x19, 0x10, 0x28, 0x8a, 0x9e, 0x58, 0x58, 0x1a, 0x19, 0x10, 0xbe, 0x58, 0x58, 0x1a, 0x3e, 0x59, 0x3e, 0x5a, 0x3e, 0x5f, 0x40, 0x3b, 0x72, 0x19, 0xe0, 0x3d, 0x72, 0x19, 0x18, 0x11, 0x04, 0x8a, 0x63, 0x59, 0x3b, 0x5d, 0x83, 0x59, 0x3b, 0x5e, 0x72, 0x61, 0x19, 0x69, 0x30, 0x39, 0x58, 0x1a, 0x23, 0x59, 0x3b, 0x5b, 0x86, 0x61, 0x19, 0x69, 0x30, 0x39, 0x58, 0x1a, 0x23, 0x59, 0x3b, 0x5c, 0x19, 0x10, 0x14, 0x8a, 0x52, 0x38, 0x58, 0x1a, 0x0c, 0x94, 0xf2, 0x38, 0x58, 0x1a, 0x19, 0x00, 0x0d, 0x94, 0xab, 0x9f, 0x3e, 0x59, 0x3e, 0x5a, 0x3e, 0x5f, 0x19, 0x02, 0x52, 0x39, 0x58, 0x1a, 0xa4, 0x97, 0x19, 0x07, 0xf2, 0x39, 0x58, 0x1a, 0x11, 0xac, 
+0x80, 0x12, 0x19, 0x01, 0x9b, 0x97, 0x9e, 0x58, 0x58, 0x1a, 0x18, 0x10, 0x08, 0x8a, 0x72, 0x66, 0x19, 0x6e, 0xff, 0x61, 0x19, 0x10, 0x07, 0x38, 0x8d, 0x12, 0xd1, 0x25, 0xbd, 0x5e, 0x3a, 0x38, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5b, 0x1e, 0x5c, 0x83, 0x5a, 0x7d, 0x48, 0x03, 0x9a, 0x5e, 0x49, 0x23, 0x9a, 0x32, 0x9e, 0x5e, 0x49, 0x10, 0x9a, 0x61, 0x5a, 0xbe, 0x5a, 0x2e, 0x16, 0xa1, 0x5a, 0xbe, 0x5a, 0x2f, 0x16, 0xc3, 0x5a, 0xbe, 0x5a, 0x30, 0x16, 0x83, 0x5a, 0xbe, 0x5a, 0x31, 0x16, 0x02, 0x62, 0xbe, 0x5a, 0x82, 0x1a, 0x2f, 0x9e, 0x61, 0x5a, 0xbe, 0x5a, 0x2e, 0x16, 0xa1, 0x5a, 0xbe, 0x5a, 0x2f, 0x16, 0x83, 0x5a, 0xbe, 0x5a, 0x30, 0x16, 0xc3, 0x5a, 0xbe, 0x5a, 0x31, 0x16, 0x00, 0x62, 0xbe, 0x5a, 0x82, 0x1a, 0x1f, 0x9e, 0xa1, 0x5a, 0xbe, 0x5a, 0x2e, 0x16, 0x61, 0x5a, 0xbe, 0x5a, 0x5d, 0xe2, 
+0xc0, 0x12, 0x2f, 0x16, 0x83, 0x5a, 0xbe, 0x5a, 0x30, 0x16, 0xc3, 0x5a, 0xbe, 0x5a, 0x31, 0x16, 0x06, 0x62, 0xbe, 0x5a, 0x82, 0x1a, 0x0f, 0x9e, 0xa1, 0x5a, 0xbe, 0x5a, 0x2e, 0x16, 0x61, 0x5a, 0xbe, 0x5a, 0x2f, 0x16, 0xc3, 0x5a, 0xbe, 0x5a, 0x30, 0x16, 0x83, 0x5a, 0xbe, 0x5a, 0x31, 0x16, 0x04, 0x62, 0xbe, 0x5a, 0x82, 0x1a, 0xc3, 0x5e, 0xa1, 0x58, 0xc1, 0x59, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5b, 0x1e, 0x5c, 0x00, 0x67, 0x9e, 0x5a, 0x82, 0x1a, 0x40, 0x3c, 0x2a, 0x13, 0x89, 0x5c, 0x85, 0x04, 0x92, 0x39, 0x2e, 0x16, 0x23, 0x96, 0x92, 0x39, 0x2f, 0x16, 0x20, 0x98, 0x40, 0x3b, 0x32, 0x13, 0x69, 0x5b, 0x66, 0x03, 0x72, 0x39, 0x30, 0x16, 0x19, 0x96, 0x72, 0x39, 0x31, 0x16, 0x16, 0x98, 0x9e, 0x59, 0xfd, 0x1b, 0x80, 0x38, 0x48, 0x0e, 0x23, 0x48, 0x9e, 0x59, 0x83, 0x1a, 0x38, 0x49, 0x36, 0x4b, 
+0x00, 0x13, 0x0d, 0x98, 0x81, 0x5d, 0x61, 0x5e, 0x9e, 0x59, 0x82, 0x1a, 0x01, 0xac, 0x02, 0x90, 0x1e, 0x01, 0x01, 0x9e, 0x1f, 0x01, 0x1f, 0x21, 0xbe, 0x59, 0x82, 0x1a, 0x08, 0x9e, 0x19, 0x02, 0x1f, 0x22, 0xbe, 0x5a, 0x82, 0x1a, 0x19, 0x07, 0xe2, 0x39, 0x08, 0x00, 0xce, 0x97, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x59, 0x3e, 0x58, 0xd9, 0x48, 0x04, 0x88, 0xb8, 0x48, 0x02, 0x88, 0x01, 0x60, 0x05, 0x9e, 0xdc, 0x49, 0xbb, 0x89, 0xbb, 0x48, 0xb9, 0x89, 0x00, 0x60, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5e, 0x3e, 0x5d, 0x3a, 0x38, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0xff, 0xff, 0x02, 0x3f, 0x01, 0x00, 0x0c, 0x98, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5d, 0xba, 0x1f, 
+0x40, 0x13, 0xe8, 0x00, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x47, 0x13, 0xa5, 0x59, 0x3d, 0x5e, 0x21, 0x9e, 0x12, 0x3f, 0x22, 0x00, 0x1e, 0x98, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5d, 0xe8, 0x00, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x57, 0x13, 0xa5, 0x5f, 0xd7, 0x07, 0xfd, 0x5e, 0x12, 0x3f, 0x22, 0x00, 0x0f, 0x88, 0x30, 0x66, 0x0b, 0x6e, 0x22, 0x75, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x68, 0x13, 0x00, 0x61, 0xc3, 0x58, 0x1c, 0x5d, 0x1d, 0x5e, 0x1a, 0x38, 0x1a, 0x38, 0x00, 0x60, 0x3a, 0x38, 0x27, 0x76, 0x19, 0x16, 0x39, 0x60, 0x15, 0x68, 0x9a, 0x61, 0x19, 0x69, 0x45, 0x62, 0x15, 0x6a, 0xa6, 0x63, 0x19, 0x6b, 0x00, 0x64, 0x80, 0x6c, 0x00, 0x67, 0xc7, 0x38, 0x83, 0x13, 0xf8, 0x49, 0x04, 0x98, 0x03, 0x5d, 0xbb, 0x59, 0x43, 0x5d, 0xbb, 0x5b, 0x0b, 0xa4, 
+0x80, 0x13, 0x19, 0x01, 0x19, 0x03, 0x9d, 0x58, 0x9d, 0x5a, 0x21, 0x60, 0x15, 0x68, 0x2b, 0x61, 0x1c, 0x69, 0x2d, 0x62, 0x15, 0x6a, 0x37, 0x63, 0x1c, 0x6b, 0x00, 0x65, 0xc7, 0x38, 0xa2, 0x13, 0xa0, 0x3c, 0x85, 0x29, 0x89, 0x5c, 0x94, 0x3c, 0xe3, 0x19, 0x05, 0x8a, 0x03, 0x5c, 0x9b, 0x59, 0x43, 0x5c, 0x9b, 0x5b, 0x04, 0x9e, 0xde, 0x59, 0x00, 0x80, 0xde, 0x5b, 0x00, 0x80, 0x19, 0x01, 0x19, 0x03, 0x19, 0x00, 0x19, 0x02, 0x19, 0x05, 0x00, 0x67, 0x80, 0x6f, 0x51, 0x60, 0x15, 0x68, 0x21, 0x61, 0x15, 0x69, 0x5d, 0x62, 0x15, 0x6a, 0x2d, 0x63, 0x15, 0x6b, 0xc7, 0x38, 0xb8, 0x13, 0xf8, 0x49, 0x04, 0x8a, 0x03, 0x5c, 0x9b, 0x59, 0x43, 0x5c, 0x9b, 0x5b, 0x19, 0x01, 0x19, 0x03, 0x19, 0x00, 0x19, 0x02, 0xca, 0x60, 0x19, 0x68, 0xd6, 0x61, 0x19, 0x69, 0xc7, 0x38, 0xc4, 0x13, 0xde, 0x58, 0xb0, 0xea, 
+0xc0, 0x13, 0xff, 0xff, 0xde, 0x59, 0xff, 0x7f, 0x19, 0x00, 0x19, 0x01, 0x9e, 0x58, 0xfa, 0x1b, 0x12, 0x38, 0xe2, 0x19, 0x16, 0x9a, 0x00, 0x67, 0x01, 0x65, 0xc7, 0x38, 0xdf, 0x13, 0xb4, 0x38, 0x4c, 0x1a, 0x0d, 0x88, 0xe0, 0x38, 0x9a, 0x19, 0xde, 0x58, 0x00, 0x80, 0xe0, 0x38, 0xa6, 0x19, 0xde, 0x58, 0x00, 0x80, 0xa0, 0x5c, 0x94, 0x3c, 0x00, 0x1c, 0xbe, 0x5c, 0x00, 0x1c, 0xa6, 0x5d, 0x19, 0x07, 0x3a, 0x38, 0x9e, 0x5f, 0xe2, 0x19, 0x18, 0x17, 0x24, 0x8a, 0x21, 0x72, 0x23, 0x61, 0x22, 0x40, 0x00, 0x3b, 0x00, 0x00, 0x15, 0x61, 0x22, 0x40, 0x00, 0x3c, 0x00, 0x00, 0xe1, 0x5e, 0x00, 0x67, 0xe0, 0x39, 0xb2, 0x19, 0xe0, 0x3a, 0xbe, 0x19, 0x79, 0x49, 0x02, 0x80, 0x9a, 0x49, 0x0c, 0x82, 0x19, 0x16, 0xdf, 0x48, 0x0c, 0x8a, 0xc0, 0x38, 0xb2, 0x19, 0x03, 0x58, 0x1b, 0x59, 0xc0, 0x38, 0xaa, 0xd3, 
+0x00, 0x14, 0xbe, 0x19, 0x03, 0x58, 0x1b, 0x5a, 0xec, 0x9f, 0x19, 0x07, 0xe6, 0x15, 0xe9, 0x97, 0xbe, 0x5e, 0xe2, 0x19, 0x01, 0x60, 0xbe, 0x58, 0x82, 0x1a, 0x00, 0x67, 0xe2, 0x60, 0x19, 0x68, 0xf8, 0x49, 0x31, 0x94, 0xe0, 0x38, 0xca, 0x19, 0x00, 0x61, 0x38, 0x49, 0x2a, 0x9a, 0x00, 0x66, 0x27, 0x70, 0x19, 0x10, 0x07, 0x38, 0x3f, 0x14, 0xc0, 0x38, 0x39, 0x15, 0x00, 0x61, 0x38, 0x49, 0x1f, 0x9a, 0xc0, 0x38, 0x9a, 0x19, 0x00, 0x61, 0x38, 0x49, 0x03, 0x9a, 0xfe, 0x65, 0x7f, 0x6d, 0x0f, 0x9e, 0xe0, 0x38, 0xb2, 0x19, 0xc0, 0x39, 0x9a, 0x19, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0xbe, 0x19, 0xc0, 0x39, 0xa6, 0x19, 0x23, 0x59, 0x11, 0x13, 0x5a, 0x40, 0x63, 0x48, 0x46, 0xd9, 0xe0, 0x38, 0xd6, 0x19, 0xb8, 0x49, 0x04, 0x94, 0xbb, 0x58, 0xe0, 0x38, 0xca, 0x19, 0xdb, 0x58, 0x19, 0x06, 0xde, 0xb2, 
+0x40, 0x14, 0x19, 0x07, 0xcb, 0x9f, 0x00, 0x60, 0xbe, 0x58, 0x82, 0x1a, 0x00, 0x67, 0x9e, 0x5d, 0xe2, 0x19, 0xfd, 0x48, 0x25, 0x94, 0xe0, 0x3e, 0x01, 0x00, 0xa2, 0x38, 0x01, 0x00, 0x07, 0x38, 0x6c, 0x14, 0xdd, 0x48, 0x1b, 0x94, 0xe0, 0x3c, 0xca, 0x19, 0x83, 0x58, 0xc0, 0x3b, 0xca, 0x19, 0x1b, 0x49, 0x13, 0x88, 0xe0, 0x3a, 0xd6, 0x19, 0x43, 0x58, 0xc0, 0x39, 0xd6, 0x19, 0x19, 0x49, 0x05, 0x9a, 0xde, 0x5c, 0xff, 0xff, 0xde, 0x5a, 0xff, 0x7f, 0x04, 0x9e, 0xde, 0x5b, 0xff, 0xff, 0xde, 0x59, 0xff, 0x7f, 0x01, 0x60, 0xbe, 0x58, 0x82, 0x1a, 0x19, 0x06, 0x19, 0x07, 0xd9, 0x9f, 0x00, 0x67, 0xe2, 0x60, 0x19, 0x68, 0xf8, 0x49, 0x15, 0x94, 0xe0, 0x38, 0xca, 0x19, 0x00, 0x61, 0x38, 0x49, 0x0e, 0x98, 0x39, 0x61, 0x15, 0x69, 0x11, 0x01, 0xe0, 0x3a, 0xb2, 0x19, 0x43, 0x5a, 0x5b, 0x59, 0xd2, 0xa6, 
+0x80, 0x14, 0x45, 0x61, 0x15, 0x69, 0x11, 0x01, 0xe0, 0x3a, 0xbe, 0x19, 0x43, 0x5a, 0x5b, 0x59, 0x19, 0x07, 0xe7, 0x9f, 0x82, 0x60, 0x1a, 0x68, 0x01, 0x61, 0x38, 0x49, 0x7e, 0x8b, 0x9e, 0x58, 0xe2, 0x19, 0x19, 0x10, 0x01, 0x9a, 0x25, 0xdb, 0x92, 0x60, 0x15, 0x68, 0xff, 0x61, 0xff, 0x69, 0x27, 0x76, 0x19, 0x16, 0xd7, 0x38, 0x3d, 0x58, 0x9e, 0x5f, 0xe2, 0x19, 0x18, 0x17, 0x10, 0x8a, 0x92, 0x66, 0x15, 0x6e, 0x19, 0x17, 0xe7, 0x38, 0xae, 0x14, 0xe0, 0x3b, 0xca, 0x19, 0x76, 0x03, 0xe0, 0x3c, 0xd6, 0x19, 0x83, 0x5c, 0x18, 0x14, 0x01, 0x88, 0x21, 0x74, 0x9b, 0x5b, 0x19, 0x17, 0x01, 0x67, 0x27, 0x76, 0x19, 0x16, 0xc7, 0x38, 0xb5, 0x14, 0xe6, 0x5f, 0x1a, 0x38, 0x19, 0x17, 0xbe, 0x5f, 0x84, 0x1a, 0xf6, 0xd5, 0x9e, 0x58, 0xe2, 0x19, 0xbe, 0x58, 0xfa, 0x1b, 0x00, 0x67, 0x27, 0x70, 0xe3, 0x18, 
+0xc0, 0x14, 0x19, 0x10, 0x07, 0x38, 0x56, 0x15, 0x9e, 0x58, 0xea, 0x04, 0x18, 0x10, 0x03, 0x8a, 0x02, 0x60, 0x20, 0x78, 0x02, 0x9e, 0x02, 0x60, 0x20, 0x78, 0xe0, 0x38, 0x39, 0x15, 0xe0, 0x3c, 0xd2, 0x15, 0x00, 0x61, 0x38, 0x49, 0x50, 0x98, 0xd0, 0x73, 0x7c, 0x49, 0x02, 0x9a, 0x7b, 0x5c, 0x7e, 0x9e, 0x70, 0x3b, 0x20, 0x00, 0x7c, 0x49, 0x14, 0x98, 0xe0, 0x38, 0x85, 0x29, 0x09, 0x58, 0xe3, 0x61, 0x19, 0x69, 0x30, 0x2a, 0x5b, 0x59, 0x4c, 0x61, 0x1a, 0x69, 0x30, 0x2a, 0x5b, 0x59, 0x70, 0x3b, 0xcf, 0x00, 0x7c, 0x49, 0x34, 0x98, 0x4d, 0x61, 0x1a, 0x69, 0x30, 0x2a, 0x5b, 0x59, 0x66, 0x9e, 0xe0, 0x38, 0x85, 0x29, 0x09, 0x58, 0x14, 0x3a, 0xe3, 0x19, 0x02, 0x8a, 0x7b, 0x5c, 0x27, 0x9e, 0xe0, 0x38, 0x92, 0x15, 0x0a, 0x61, 0x38, 0x49, 0x09, 0x9c, 0xe0, 0x38, 0x85, 0x29, 0x09, 0x58, 0x3a, 0x4e, 
+0x00, 0x15, 0x00, 0x61, 0x1c, 0x69, 0x00, 0x5a, 0x32, 0x22, 0x5b, 0x59, 0x19, 0x9e, 0xd0, 0x70, 0x19, 0x00, 0x1c, 0x49, 0x15, 0x88, 0xe0, 0x38, 0x85, 0x29, 0x09, 0x58, 0x00, 0x61, 0x1c, 0x69, 0x30, 0x22, 0x0e, 0x88, 0x30, 0x2a, 0x5b, 0x59, 0xe0, 0x38, 0x39, 0x15, 0x03, 0x58, 0xe0, 0x39, 0x13, 0x1c, 0x1b, 0x59, 0xe0, 0x38, 0x45, 0x15, 0x03, 0x58, 0xe0, 0x39, 0x1f, 0x1c, 0x1b, 0x59, 0x83, 0x58, 0x08, 0x3c, 0x01, 0x00, 0x33, 0x9e, 0xe0, 0x38, 0x85, 0x29, 0x09, 0x58, 0xd0, 0x73, 0x14, 0x39, 0x4c, 0x1a, 0x04, 0x8a, 0x00, 0x61, 0x91, 0x11, 0x09, 0x98, 0x0b, 0x9e, 0x7c, 0x49, 0x09, 0x94, 0x7b, 0x5c, 0x00, 0x61, 0x1c, 0x69, 0x00, 0x5a, 0x32, 0x22, 0x5b, 0x59, 0x83, 0x59, 0x2a, 0x3c, 0x01, 0x00, 0x00, 0x58, 0x70, 0x3b, 0x1f, 0x00, 0x7c, 0x49, 0x10, 0x96, 0xe3, 0x61, 0x19, 0x69, 0x0f, 0x86, 
+0x40, 0x15, 0x30, 0x22, 0x5b, 0x59, 0x4d, 0x61, 0x1a, 0x69, 0x30, 0x22, 0x5b, 0x59, 0x83, 0x5b, 0x72, 0x3b, 0xd0, 0x00, 0x0c, 0x9a, 0xd0, 0x73, 0x19, 0x13, 0x7b, 0x5c, 0x08, 0x9e, 0x59, 0xd5, 0x19, 0x03, 0x7c, 0x49, 0x04, 0x96, 0x4d, 0x61, 0x1a, 0x69, 0x30, 0x22, 0x5b, 0x59, 0x19, 0x07, 0x99, 0xd6, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x5b, 0x21, 0x72, 0x23, 0x65, 0xa2, 0x40, 0x00, 0x3d, 0x00, 0x00, 0xe0, 0x38, 0x5b, 0x1c, 0x03, 0x58, 0x18, 0x10, 0x02, 0x94, 0x00, 0x60, 0x0b, 0x9e, 0x1d, 0x48, 0x02, 0x9a, 0xa1, 0x58, 0x07, 0x9e, 0x40, 0x3b, 0x00, 0x00, 0x1b, 0x48, 0x03, 0x96, 0xa2, 0x13, 0x1b, 0x48, 0x03, 0x9a, 0xe0, 0x39, 0x9a, 0x19, 0x1b, 0x59, 0x15, 0x65, 0xa2, 0x40, 0x00, 0x3d, 0x00, 0x00, 0xe0, 0x38, 0x67, 0x1c, 0x03, 0x58, 0x18, 0x10, 0x02, 0x94, 0x00, 0x60, 0x0b, 0x9e, 0xef, 0xbb, 
+0x80, 0x15, 0x1d, 0x48, 0x02, 0x9a, 0xa1, 0x58, 0x07, 0x9e, 0x40, 0x3b, 0x00, 0x00, 0x1b, 0x48, 0x03, 0x96, 0xa2, 0x13, 0x1b, 0x48, 0x03, 0x9a, 0xe0, 0x39, 0xa6, 0x19, 0x1b, 0x59, 0x3e, 0x5b, 0x3e, 0x58, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0x04, 0x1c, 0x9e, 0x58, 0xe2, 0x19, 0x12, 0x38, 0xea, 0x04, 0x31, 0x94, 0x01, 0x60, 0xbe, 0x58, 0x04, 0x1c, 0x27, 0x76, 0x19, 0x16, 0x00, 0x65, 0x00, 0x67, 0xc7, 0x38, 0xc9, 0x15, 0xe0, 0x38, 0x9a, 0x19, 0xb8, 0x49, 0x23, 0x98, 0xe0, 0x3e, 0x85, 0x29, 0xc9, 0x5e, 0xd4, 0x3e, 0xe3, 0x19, 0x0b, 0x88, 0x03, 0x58, 0xe0, 0x39, 0x5b, 0x1c, 0x1b, 0x59, 0xe0, 0x38, 0xa6, 0x19, 0x03, 0x58, 0xe0, 0x39, 0x67, 0x1c, 0x1b, 0x59, 0x12, 0x9e, 0xe0, 0x39, 0x43, 0x1c, 0x23, 0x59, 0xe0, 0x3a, 0x4f, 0x1c, 0x43, 0x5a, 0xe0, 0x38, 0x9a, 0x19, 0x11, 0x00, 0x9c, 0xb8, 
+0xc0, 0x15, 0xe0, 0x39, 0x5b, 0x1c, 0x1b, 0x59, 0xe0, 0x38, 0xa6, 0x19, 0x12, 0x00, 0xe0, 0x39, 0x67, 0x1c, 0x1b, 0x59, 0x19, 0x07, 0x3a, 0x38, 0x27, 0x76, 0x19, 0x16, 0x00, 0x67, 0xc7, 0x38, 0xf4, 0x15, 0x00, 0x62, 0xe0, 0x38, 0x39, 0x15, 0x58, 0x49, 0x1f, 0x98, 0xe0, 0x39, 0x9a, 0x19, 0x59, 0x49, 0x1b, 0x98, 0x23, 0x5a, 0x12, 0x12, 0xe0, 0x3c, 0x43, 0x1c, 0x5b, 0x5c, 0xe0, 0x38, 0x45, 0x15, 0xe0, 0x39, 0xa6, 0x19, 0x23, 0x5b, 0x13, 0x13, 0xe0, 0x3c, 0x4f, 0x1c, 0x7b, 0x5c, 0x9e, 0x58, 0x04, 0x1c, 0x18, 0x10, 0x09, 0x8a, 0x5a, 0x40, 0x63, 0x48, 0x46, 0xd9, 0x18, 0x15, 0x01, 0x88, 0x21, 0x75, 0xe0, 0x38, 0x92, 0x15, 0xbb, 0x58, 0x19, 0x07, 0x3a, 0x38, 0x27, 0x75, 0x19, 0x15, 0xa7, 0x38, 0x73, 0x16, 0xa0, 0x3f, 0x85, 0x29, 0xe9, 0x5f, 0x9e, 0x5c, 0x86, 0x1a, 0xe0, 0x5b, 0x06, 0xd5, 
+0x00, 0x16, 0x83, 0x24, 0xa0, 0x3b, 0xa0, 0x1a, 0x63, 0x5b, 0xbd, 0x13, 0x01, 0x96, 0x87, 0x2c, 0xbe, 0x5c, 0x86, 0x1a, 0xa0, 0x3c, 0x92, 0x15, 0x83, 0x5c, 0x82, 0x38, 0xff, 0xff, 0x64, 0x8a, 0x21, 0x73, 0x66, 0x5b, 0x83, 0x11, 0x60, 0x9a, 0x81, 0x58, 0xa0, 0x3a, 0x9e, 0x15, 0x43, 0x5a, 0x21, 0x73, 0x68, 0x5b, 0x42, 0x39, 0xfe, 0x7f, 0x05, 0x88, 0xf4, 0x39, 0x87, 0x1a, 0x02, 0x8a, 0x61, 0x5a, 0x16, 0x9e, 0x5b, 0x48, 0x14, 0x98, 0xa0, 0x39, 0x88, 0x1a, 0x23, 0x59, 0x18, 0x11, 0x02, 0x8a, 0x04, 0x62, 0x0d, 0x9e, 0x02, 0xa8, 0xa0, 0x39, 0xa0, 0x1a, 0x23, 0x59, 0xbd, 0x11, 0x07, 0x96, 0xa0, 0x39, 0x94, 0x1a, 0x23, 0x59, 0x24, 0x39, 0xff, 0x00, 0x01, 0x8a, 0x61, 0x5a, 0x04, 0x61, 0x01, 0x40, 0x1c, 0x5a, 0x00, 0x39, 0x01, 0x00, 0x28, 0x59, 0x1a, 0x00, 0x08, 0x58, 0x08, 0x58, 0xd5, 0x3e, 
+0x40, 0x16, 0x1a, 0x11, 0x03, 0x88, 0xf4, 0x39, 0x4a, 0x1a, 0x23, 0x88, 0x04, 0x62, 0xf4, 0x3e, 0x86, 0x1a, 0x01, 0x8a, 0x19, 0x62, 0x9e, 0x59, 0x20, 0x1d, 0x18, 0x11, 0x13, 0x8a, 0x22, 0x39, 0x68, 0x01, 0x14, 0x8a, 0x9e, 0x5e, 0xdb, 0x1e, 0x9e, 0x59, 0xdc, 0x1e, 0xc1, 0x06, 0x1b, 0x16, 0x09, 0x88, 0x9e, 0x5e, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0xc1, 0x06, 0x1b, 0x16, 0x02, 0x88, 0x3a, 0x02, 0x05, 0x9e, 0x9e, 0x59, 0xb5, 0x00, 0x1a, 0x11, 0x01, 0x88, 0x3a, 0x02, 0x02, 0x11, 0x0b, 0x96, 0xa0, 0x38, 0x85, 0x29, 0x09, 0x58, 0x14, 0x3a, 0x00, 0x1c, 0x05, 0x88, 0x00, 0x58, 0x84, 0x61, 0x1a, 0x69, 0x30, 0x22, 0x5b, 0x59, 0x19, 0x15, 0x21, 0x74, 0x88, 0x5c, 0x92, 0x60, 0x15, 0x68, 0x9e, 0x61, 0x15, 0x69, 0x00, 0x65, 0x27, 0x76, 0x19, 0x16, 0xc7, 0x38, 0x97, 0x16, 0xa0, 0x3f, 0x70, 0x78, 
+0x80, 0x16, 0x85, 0x29, 0xe9, 0x5f, 0xff, 0x66, 0xff, 0x6e, 0xd8, 0x49, 0x03, 0x8a, 0x03, 0x5a, 0x5b, 0x59, 0x0c, 0x9e, 0xf4, 0x3b, 0xe3, 0x19, 0x09, 0x8a, 0xa0, 0x3b, 0xa0, 0x1a, 0x63, 0x5b, 0xbd, 0x13, 0x04, 0x82, 0x99, 0x49, 0x02, 0x82, 0x8a, 0x39, 0x01, 0x00, 0x19, 0x00, 0x19, 0x01, 0x19, 0x05, 0x3a, 0x38, 0x9e, 0x58, 0xe3, 0x19, 0x9e, 0x59, 0x84, 0x1a, 0x20, 0x59, 0x20, 0x21, 0xbe, 0x59, 0x4a, 0x1a, 0x14, 0x3a, 0x84, 0x1a, 0xbe, 0x5a, 0xe3, 0x19, 0x16, 0x39, 0x85, 0x1a, 0x20, 0x21, 0xbe, 0x59, 0x87, 0x1a, 0xbe, 0x58, 0x85, 0x1a, 0x01, 0x65, 0x00, 0x66, 0x27, 0x77, 0x19, 0x17, 0xe7, 0x38, 0xea, 0x16, 0x05, 0x27, 0x09, 0x8a, 0xc0, 0x39, 0x88, 0x1a, 0x23, 0x5b, 0x66, 0x5b, 0xb4, 0x3f, 0x4a, 0x1a, 0x01, 0x8a, 0x03, 0xa8, 0x7b, 0x59, 0xc0, 0x39, 0xa0, 0x1a, 0x23, 0x5b, 0x78, 0xfa, 
+0xc0, 0x16, 0xa2, 0x27, 0x0e, 0x8a, 0xd0, 0x77, 0xf0, 0x3f, 0x20, 0x00, 0xf0, 0x3f, 0xcf, 0x00, 0xc0, 0x3c, 0xd2, 0x15, 0xfc, 0x49, 0x05, 0x98, 0x62, 0x3f, 0x64, 0x00, 0x03, 0x82, 0x19, 0x03, 0x01, 0x9e, 0x00, 0x63, 0x7b, 0x59, 0x05, 0x27, 0x0f, 0x8a, 0xc0, 0x39, 0x94, 0x1a, 0x23, 0x5b, 0x66, 0x5b, 0xc0, 0x3c, 0x92, 0x15, 0x83, 0x5c, 0x92, 0x3f, 0x21, 0x00, 0x04, 0x80, 0x82, 0x3f, 0x00, 0x10, 0x01, 0x82, 0x03, 0xa8, 0x7b, 0x59, 0xa0, 0x27, 0x04, 0x88, 0xc0, 0x39, 0x9e, 0x15, 0xde, 0x59, 0xaa, 0x55, 0xa6, 0x5d, 0x19, 0x06, 0x3a, 0x38, 0x00, 0x67, 0xbe, 0x5f, 0xf1, 0x1e, 0xbe, 0x5f, 0xf3, 0x1e, 0x00, 0x67, 0x01, 0x66, 0xd0, 0x3e, 0xd0, 0x00, 0xd0, 0x3e, 0x1f, 0x00, 0xe3, 0x60, 0x19, 0x68, 0xe0, 0x39, 0x85, 0x29, 0x29, 0x5c, 0x14, 0x20, 0x87, 0x88, 0xe0, 0x38, 0x39, 0x15, 0x2f, 0x8c, 
+0x00, 0x17, 0x00, 0x61, 0x38, 0x49, 0x45, 0x98, 0x37, 0x9e, 0x95, 0x38, 0x4d, 0x1a, 0xbe, 0x58, 0x4d, 0x1a, 0xe0, 0x38, 0x85, 0x29, 0x09, 0x58, 0x00, 0x61, 0x1c, 0x69, 0x30, 0x22, 0x2c, 0x8a, 0x00, 0x58, 0x30, 0x22, 0x5b, 0x59, 0xe0, 0x3b, 0x13, 0x1c, 0xe0, 0x39, 0x43, 0x1c, 0x23, 0x59, 0x71, 0x13, 0x18, 0x13, 0x02, 0x94, 0x00, 0x63, 0x07, 0x9e, 0x21, 0x72, 0x23, 0x65, 0xa2, 0x40, 0x18, 0x00, 0x78, 0x48, 0x01, 0x9a, 0x01, 0x5b, 0xe0, 0x39, 0x51, 0x15, 0x7b, 0x59, 0xe0, 0x3b, 0x1f, 0x1c, 0xe0, 0x39, 0x4f, 0x1c, 0x23, 0x59, 0x71, 0x13, 0x18, 0x13, 0x02, 0x94, 0x00, 0x63, 0x07, 0x9e, 0x21, 0x72, 0x15, 0x65, 0xa2, 0x40, 0x18, 0x00, 0x78, 0x48, 0x01, 0x9a, 0x01, 0x5b, 0xe0, 0x39, 0x5d, 0x15, 0x7b, 0x59, 0xee, 0x9e, 0xe0, 0x38, 0x39, 0x15, 0x03, 0x58, 0xe0, 0x39, 0x51, 0x15, 0x41, 0xd8, 
+0x40, 0x17, 0x1b, 0x59, 0xe0, 0x38, 0x45, 0x15, 0x03, 0x58, 0xe0, 0x39, 0x5d, 0x15, 0x1b, 0x59, 0xe1, 0x9e, 0xe0, 0x38, 0xd2, 0x15, 0x38, 0x49, 0x22, 0x88, 0xd0, 0x71, 0x3b, 0x58, 0x80, 0x5c, 0x4c, 0x61, 0x1a, 0x69, 0x34, 0x20, 0x1b, 0x59, 0x00, 0x62, 0x80, 0x6a, 0xe0, 0x38, 0x51, 0x15, 0xe0, 0x39, 0x5d, 0x15, 0x5b, 0x58, 0x5b, 0x59, 0xe0, 0x38, 0x21, 0x15, 0xe0, 0x39, 0x2d, 0x15, 0xe0, 0x3b, 0x9a, 0x19, 0xe0, 0x3c, 0xa6, 0x19, 0x5b, 0x58, 0x5b, 0x59, 0x5b, 0x5b, 0x5b, 0x5c, 0xe0, 0x38, 0x2b, 0x1c, 0xe0, 0x39, 0x37, 0x1c, 0x5b, 0x58, 0x5b, 0x59, 0xbb, 0x9e, 0xe0, 0x38, 0x73, 0x1c, 0x03, 0x58, 0x39, 0x10, 0x05, 0x94, 0xe0, 0x38, 0x7f, 0x1c, 0x03, 0x58, 0x39, 0x10, 0x19, 0x96, 0xe0, 0x38, 0x9a, 0x19, 0x03, 0x58, 0xe0, 0x3b, 0xa6, 0x19, 0x63, 0x5b, 0xe0, 0x39, 0x51, 0x15, 0x98, 0x01, 
+0x80, 0x17, 0x1b, 0x59, 0xe0, 0x3d, 0x5d, 0x15, 0x7b, 0x5d, 0xa4, 0x9e, 0x94, 0x38, 0x4d, 0x1a, 0x16, 0x88, 0xe0, 0x38, 0x39, 0x15, 0x00, 0x61, 0x38, 0x49, 0x77, 0x9b, 0xe0, 0x38, 0xd2, 0x15, 0xd8, 0x49, 0xdd, 0x9b, 0xe0, 0x38, 0x21, 0x15, 0x03, 0x58, 0xe0, 0x39, 0x51, 0x15, 0x1b, 0x59, 0xe0, 0x38, 0x2d, 0x15, 0x03, 0x58, 0xe0, 0x39, 0x5d, 0x15, 0x1b, 0x59, 0x8b, 0x9e, 0x94, 0x3d, 0x84, 0x1a, 0x01, 0x88, 0x99, 0x9f, 0x00, 0x60, 0xe0, 0x39, 0x39, 0x15, 0x19, 0x49, 0x36, 0x9a, 0xe0, 0x38, 0x2b, 0x1c, 0x03, 0x58, 0xe0, 0x39, 0x21, 0x15, 0x30, 0x12, 0x01, 0x8c, 0x42, 0x5a, 0xe0, 0x38, 0x37, 0x1c, 0x03, 0x58, 0xe0, 0x39, 0x2d, 0x15, 0x30, 0x13, 0x01, 0x8c, 0x62, 0x5b, 0xd0, 0x75, 0xb0, 0x3d, 0x20, 0x00, 0xb0, 0x3d, 0xcf, 0x00, 0x19, 0x15, 0xe0, 0x38, 0xd2, 0x15, 0xb8, 0x49, 0x58, 0x3b, 
+0xc0, 0x17, 0x06, 0x88, 0xe0, 0x38, 0x73, 0x1c, 0x5b, 0x58, 0xe0, 0x38, 0x7f, 0x1c, 0x7b, 0x58, 0xe0, 0x38, 0x73, 0x1c, 0x03, 0x5a, 0xe0, 0x38, 0x7f, 0x1c, 0x03, 0x5b, 0x39, 0x12, 0x02, 0x94, 0x39, 0x13, 0xc0, 0x97, 0xe0, 0x39, 0x39, 0x15, 0xe0, 0x38, 0x9a, 0x19, 0x03, 0x58, 0x1b, 0x59, 0xe0, 0x3b, 0xa6, 0x19, 0x63, 0x5b, 0xe0, 0x39, 0x45, 0x15, 0x7b, 0x59, 0x32, 0xd9, 0x19, 0x00, 0x00, 0x61, 0x21, 0x75, 0x5f, 0x38, 0xa8, 0x5d, 0x1c, 0x5d, 0xe2, 0x39, 0x00, 0x00, 0x02, 0x88, 0xbe, 0x58, 0xf1, 0x1e, 0xe2, 0x39, 0x01, 0x00, 0x02, 0x88, 0xbe, 0x58, 0xf3, 0x1e, 0x16, 0x61, 0x01, 0x11, 0x0c, 0x94, 0x01, 0x61, 0x19, 0x48, 0x05, 0x9a, 0x01, 0x11, 0x20, 0x39, 0x05, 0x0b, 0x29, 0x5d, 0x07, 0x9e, 0x05, 0x65, 0x0b, 0x6d, 0xa9, 0x5d, 0x03, 0x9e, 0x1a, 0x65, 0x0b, 0x6d, 0xa9, 0x5d, 0x4e, 0x05, 
+0x00, 0x18, 0x9e, 0x5a, 0xcd, 0x04, 0x42, 0x3a, 0x50, 0x00, 0x01, 0x96, 0x1a, 0x05, 0x9e, 0x5a, 0x20, 0x1d, 0x18, 0x12, 0x01, 0x8a, 0x1b, 0x05, 0xa2, 0x3a, 0x01, 0x00, 0x0d, 0x8a, 0xe0, 0x3a, 0x21, 0x15, 0xe0, 0x38, 0x39, 0x15, 0x03, 0x58, 0x2f, 0xd8, 0xe0, 0x3a, 0x2d, 0x15, 0xe0, 0x38, 0x45, 0x15, 0x03, 0x58, 0x58, 0xd8, 0x0e, 0x9e, 0x00, 0x61, 0x1e, 0x5e, 0x81, 0xd8, 0x3e, 0x5e, 0xe0, 0x39, 0x51, 0x15, 0x1b, 0x59, 0x01, 0x61, 0x1e, 0x5e, 0x81, 0xd8, 0x3e, 0x5e, 0xe0, 0x39, 0x5d, 0x15, 0x1b, 0x59, 0x19, 0x07, 0xf2, 0x39, 0x27, 0x00, 0x98, 0x3d, 0xf7, 0x16, 0x3a, 0x38, 0x1e, 0x5e, 0x1e, 0x58, 0x21, 0x71, 0x23, 0x63, 0x23, 0x40, 0x00, 0x3e, 0x00, 0x00, 0x3e, 0x58, 0xa2, 0x3b, 0x01, 0x00, 0x00, 0x61, 0x62, 0x49, 0x01, 0x5b, 0x1c, 0x5d, 0x01, 0x5c, 0x05, 0x40, 0x60, 0x10, 0x64, 0x1b, 
+0x40, 0x18, 0x0a, 0x8a, 0xd2, 0x39, 0x21, 0x00, 0xe0, 0x38, 0x39, 0x15, 0x03, 0x58, 0x19, 0x48, 0x03, 0x9a, 0x80, 0x10, 0x01, 0x98, 0x19, 0x04, 0x81, 0x58, 0x18, 0x10, 0x02, 0x94, 0x00, 0x60, 0x03, 0x9e, 0x1e, 0x48, 0x01, 0x9a, 0xc1, 0x58, 0xe0, 0x39, 0x51, 0x15, 0x1b, 0x59, 0x3e, 0x5e, 0x3a, 0x38, 0x1e, 0x5e, 0x1e, 0x58, 0x21, 0x71, 0x15, 0x63, 0x23, 0x40, 0x00, 0x3e, 0x00, 0x00, 0x3e, 0x58, 0xa2, 0x3b, 0x01, 0x00, 0x00, 0x61, 0x62, 0x49, 0x01, 0x5b, 0x1c, 0x5d, 0x01, 0x5c, 0x05, 0x40, 0x60, 0x10, 0x0a, 0x8a, 0xd2, 0x39, 0x21, 0x00, 0xe0, 0x38, 0x45, 0x15, 0x03, 0x58, 0x19, 0x48, 0x03, 0x9a, 0x80, 0x10, 0x01, 0x98, 0x19, 0x04, 0x81, 0x58, 0x18, 0x10, 0x02, 0x94, 0x00, 0x60, 0x03, 0x9e, 0x1e, 0x48, 0x01, 0x9a, 0xc1, 0x58, 0xe0, 0x39, 0x5d, 0x15, 0x1b, 0x59, 0x3e, 0x5e, 0x9b, 0x65, 
+0x80, 0x18, 0x3a, 0x38, 0x1e, 0x59, 0x14, 0x60, 0x1e, 0x58, 0xb0, 0xd8, 0x3e, 0x5b, 0xa3, 0x14, 0x10, 0x9a, 0x3e, 0x59, 0x01, 0xac, 0x05, 0x92, 0xe0, 0x3a, 0x21, 0x15, 0xe0, 0x38, 0x39, 0x15, 0x04, 0x9e, 0xe0, 0x3a, 0x2d, 0x15, 0xe0, 0x38, 0x45, 0x15, 0x80, 0x41, 0x62, 0x49, 0x1c, 0x5d, 0x17, 0x9e, 0x1e, 0x75, 0x3e, 0x59, 0x01, 0xac, 0x05, 0x92, 0xe0, 0x3a, 0x21, 0x15, 0xe0, 0x38, 0x39, 0x15, 0x04, 0x9e, 0xe0, 0x3a, 0x2d, 0x15, 0xe0, 0x38, 0x45, 0x15, 0xa2, 0x3b, 0x01, 0x00, 0x00, 0x61, 0x03, 0x58, 0x62, 0x49, 0x06, 0x58, 0x2a, 0x59, 0x1c, 0x5d, 0x19, 0x00, 0x08, 0x58, 0x3a, 0x38, 0xe0, 0x39, 0x21, 0x15, 0x00, 0x65, 0xb9, 0x49, 0x0d, 0x98, 0xe0, 0x38, 0x39, 0x15, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0x45, 0x15, 0xe0, 0x39, 0x2d, 0x15, 0x23, 0x59, 0x11, 0x13, 0x5a, 0x40, 0x89, 0x98, 
+0xc0, 0x18, 0x63, 0x48, 0x0f, 0xd9, 0x3a, 0x38, 0xe0, 0x39, 0x21, 0x15, 0x00, 0x65, 0xb9, 0x49, 0x0d, 0x98, 0xe0, 0x38, 0x9a, 0x19, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0xa6, 0x19, 0xe0, 0x39, 0x2d, 0x15, 0x23, 0x59, 0x11, 0x13, 0x5a, 0x40, 0x63, 0x48, 0x0f, 0xd9, 0x3a, 0x38, 0xe0, 0x39, 0x2b, 0x1c, 0x00, 0x65, 0xb9, 0x49, 0x0d, 0x98, 0xe0, 0x38, 0x9a, 0x19, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0xa6, 0x19, 0xe0, 0x39, 0x37, 0x1c, 0x23, 0x59, 0x11, 0x13, 0x5a, 0x40, 0x63, 0x48, 0x0f, 0xd9, 0x3a, 0x38, 0xe0, 0x39, 0x9a, 0x19, 0x00, 0x65, 0xb9, 0x49, 0x0d, 0x98, 0xe0, 0x38, 0x39, 0x15, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0x45, 0x15, 0xe0, 0x39, 0xa6, 0x19, 0x23, 0x59, 0x11, 0x13, 0x5a, 0x40, 0x63, 0x48, 0x0f, 0xd9, 0x3a, 0x38, 0xe0, 0x39, 0x2b, 0x1c, 0x00, 0x65, 0xb9, 0x49, 0x3a, 0x77, 
+0x00, 0x19, 0x0d, 0x98, 0xe0, 0x38, 0x21, 0x15, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0x2d, 0x15, 0xe0, 0x39, 0x37, 0x1c, 0x23, 0x59, 0x11, 0x13, 0x5a, 0x40, 0x63, 0x48, 0x0f, 0xd9, 0x3a, 0x38, 0x01, 0x5a, 0x21, 0x5b, 0xff, 0x65, 0xad, 0x48, 0x0a, 0x8c, 0x00, 0x65, 0x80, 0x64, 0xa4, 0x05, 0x41, 0x58, 0x61, 0x59, 0xad, 0x48, 0x01, 0x8c, 0xa4, 0x15, 0x88, 0x5c, 0xf8, 0x89, 0x3a, 0x38, 0xe0, 0x39, 0x51, 0x15, 0x00, 0x65, 0xb9, 0x49, 0x0d, 0x98, 0xe0, 0x38, 0x39, 0x15, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0x45, 0x15, 0xe0, 0x39, 0x5d, 0x15, 0x23, 0x59, 0x11, 0x13, 0x5a, 0x40, 0x63, 0x48, 0x0f, 0xd9, 0x3a, 0x38, 0xe0, 0x39, 0x2b, 0x1c, 0x00, 0x65, 0xb9, 0x49, 0x0d, 0x98, 0xe0, 0x38, 0x9a, 0x19, 0x23, 0x59, 0x11, 0x12, 0xe0, 0x38, 0xa6, 0x19, 0xe0, 0x39, 0x37, 0x1c, 0x23, 0x59, 0x69, 0xdd, 
+0x40, 0x19, 0x11, 0x13, 0x5a, 0x40, 0x63, 0x48, 0x46, 0xd9, 0xa1, 0x58, 0x3a, 0x38, 0x01, 0x5a, 0x21, 0x5b, 0xff, 0x65, 0x03, 0x6d, 0xad, 0x48, 0x0b, 0x8c, 0x00, 0x65, 0x00, 0x64, 0x02, 0x6c, 0xa4, 0x05, 0x41, 0x58, 0x61, 0x59, 0xad, 0x48, 0x01, 0x8c, 0xa4, 0x15, 0x88, 0x5c, 0xf8, 0x89, 0x3a, 0x38, 0x16, 0x60, 0xbe, 0x58, 0xfd, 0x1b, 0x24, 0x60, 0xbe, 0x58, 0xfe, 0x1b, 0x18, 0x60, 0x03, 0x68, 0xbe, 0x58, 0xda, 0x00, 0x53, 0x60, 0x03, 0x68, 0xbe, 0x58, 0xff, 0x1b, 0x04, 0x67, 0x22, 0x7f, 0x40, 0x67, 0x21, 0x7f, 0x04, 0x67, 0x1e, 0x7f, 0x01, 0x67, 0x1f, 0x7f, 0x02, 0x67, 0x20, 0x7f, 0x01, 0x67, 0xd0, 0x7f, 0x01, 0x67, 0xcf, 0x7f, 0x01, 0x67, 0x23, 0x7f, 0x04, 0x67, 0x24, 0x7f, 0x10, 0x67, 0x25, 0x7f, 0x10, 0x67, 0x26, 0x7f, 0x0c, 0x67, 0x27, 0x7f, 0x14, 0x67, 0xbe, 0x5f, 0x1e, 0x0c, 
+0x80, 0x19, 0xf0, 0x04, 0x0a, 0x67, 0xbe, 0x5f, 0xe4, 0x19, 0x19, 0x38, 0x2b, 0x4b, 0x08, 0x67, 0x1d, 0x7f, 0x30, 0x67, 0x1c, 0x7f, 0xbe, 0x5f, 0x06, 0x1c, 0x00, 0x67, 0xbe, 0x5f, 0x20, 0x1d, 0xbe, 0x5f, 0x1d, 0x1d, 0x1b, 0x67, 0xbe, 0x5f, 0x44, 0x1a, 0x60, 0x67, 0x11, 0x6f, 0x9e, 0x5d, 0xda, 0x00, 0x19, 0x15, 0x00, 0x66, 0xa7, 0x38, 0x9d, 0x19, 0xdd, 0x5f, 0x1a, 0x38, 0xd0, 0x71, 0xd2, 0x60, 0x15, 0x68, 0x27, 0x77, 0x19, 0x17, 0xf7, 0x38, 0x3d, 0x58, 0x00, 0x61, 0xbe, 0x59, 0xe3, 0x19, 0xbe, 0x59, 0x4c, 0x1a, 0xbe, 0x59, 0x4d, 0x1a, 0xbe, 0x59, 0xfb, 0x1b, 0xbe, 0x59, 0xfc, 0x1b, 0xbe, 0x59, 0x58, 0x1a, 0xbe, 0x59, 0xfa, 0x1b, 0xbe, 0x59, 0x01, 0x1c, 0xbe, 0x59, 0x02, 0x1c, 0x00, 0x64, 0x80, 0x6c, 0x39, 0x63, 0x15, 0x6b, 0xff, 0x3a, 0x9d, 0x5b, 0x9a, 0x63, 0x19, 0x6b, 0x66, 0x82, 
+0xc0, 0x19, 0xff, 0x3a, 0x9d, 0x5b, 0x00, 0x64, 0x80, 0x6c, 0x8b, 0x63, 0x1c, 0x6b, 0xff, 0x3a, 0x9d, 0x5b, 0x00, 0x64, 0x80, 0x6c, 0x21, 0x63, 0x15, 0x6b, 0xff, 0x3a, 0x9d, 0x5b, 0x2b, 0x63, 0x1c, 0x6b, 0xff, 0x3a, 0x9d, 0x5b, 0x9e, 0x60, 0x15, 0x68, 0xff, 0x61, 0x7f, 0x69, 0x7f, 0x39, 0x3d, 0x58, 0xbe, 0x58, 0x85, 0x1a, 0x88, 0x61, 0x1a, 0x69, 0x7f, 0x39, 0x1d, 0x59, 0x94, 0x61, 0x1a, 0x69, 0x7f, 0x39, 0x1d, 0x59, 0x13, 0x67, 0x1c, 0x6f, 0x1f, 0x66, 0x1c, 0x6e, 0x00, 0x60, 0x80, 0x68, 0x6f, 0x39, 0xeb, 0x19, 0x1d, 0x5f, 0x1d, 0x5e, 0x00, 0x61, 0xbe, 0x59, 0x00, 0x1c, 0x00, 0x61, 0x7f, 0x69, 0xe6, 0x66, 0x1b, 0x6e, 0x3f, 0x39, 0x3d, 0x5e, 0x00, 0x61, 0xf0, 0x66, 0x1b, 0x6e, 0x3f, 0x39, 0x3d, 0x5e, 0x00, 0x61, 0x30, 0x60, 0x1d, 0x68, 0x04, 0x62, 0x57, 0x38, 0x3d, 0x58, 0xb0, 0x4e, 
+0x00, 0x1a, 0xa2, 0xf8, 0xf2, 0xdb, 0x3a, 0x38, 0x9e, 0x5f, 0xe2, 0x19, 0x19, 0x17, 0x45, 0x9a, 0x00, 0x67, 0xe0, 0x3d, 0xb2, 0x19, 0xa3, 0x5d, 0xe0, 0x3c, 0xbe, 0x19, 0x83, 0x5c, 0xe0, 0x3e, 0x01, 0x00, 0xc0, 0x3b, 0xb2, 0x19, 0x63, 0x5b, 0xa3, 0x13, 0x01, 0x8c, 0x62, 0x5b, 0x62, 0x3b, 0x40, 0x00, 0x2a, 0x98, 0xc0, 0x3b, 0xbe, 0x19, 0x63, 0x5b, 0x83, 0x13, 0x01, 0x8c, 0x62, 0x5b, 0x62, 0x3b, 0x40, 0x00, 0x21, 0x98, 0xe0, 0x3c, 0xbe, 0x19, 0xc0, 0x3d, 0xbe, 0x19, 0xa3, 0x59, 0x91, 0x01, 0x28, 0x5b, 0x7b, 0x5c, 0xe0, 0x3c, 0xb2, 0x19, 0xc0, 0x3a, 0xb2, 0x19, 0x43, 0x59, 0x91, 0x01, 0x28, 0x5b, 0x7b, 0x5c, 0x9e, 0x59, 0xe2, 0x19, 0x19, 0x11, 0x20, 0x3c, 0xbe, 0x19, 0x83, 0x5c, 0x9b, 0x5d, 0x20, 0x3c, 0xb2, 0x19, 0x83, 0x5c, 0x9b, 0x5a, 0xbe, 0x59, 0xe2, 0x19, 0x22, 0x38, 0xc9, 0x2a, 
+0x40, 0x1a, 0x01, 0x00, 0x0a, 0x9a, 0xcd, 0x9f, 0x19, 0x06, 0xd2, 0x39, 0xe2, 0x19, 0xc9, 0x97, 0x19, 0x07, 0xf2, 0x38, 0xe2, 0x19, 0x19, 0x00, 0xbc, 0x97, 0x3a, 0x38, 0x9e, 0x5f, 0xe2, 0x19, 0x18, 0x17, 0x19, 0x8a, 0x23, 0x66, 0x21, 0x75, 0xa6, 0x40, 0x00, 0x3e, 0x00, 0x00, 0x15, 0x64, 0xa4, 0x40, 0x00, 0x3d, 0x00, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x69, 0x1a, 0xe0, 0x38, 0xbe, 0x19, 0x03, 0x5a, 0xe0, 0x39, 0xb2, 0x19, 0x23, 0x5b, 0xe0, 0x38, 0xb2, 0x19, 0x5b, 0x58, 0xe0, 0x39, 0xbe, 0x19, 0x7b, 0x59, 0x19, 0x17, 0x3a, 0x38, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5e, 0xe0, 0x3b, 0xde, 0x15, 0x63, 0x5d, 0x00, 0x64, 0x1e, 0x5d, 0xa0, 0x38, 0x48, 0x0e, 0x9e, 0x5b, 0xfd, 0x1b, 0x66, 0x48, 0x98, 0x49, 0x01, 0x94, 0x03, 0x5c, 0xe0, 0x3b, 0xf2, 0x15, 0x75, 0x33, 0x03, 0x8a, 0x19, 0x00, 0x9a, 0xa3, 
+0x80, 0x1a, 0x19, 0x05, 0xf6, 0x9f, 0x3e, 0x5d, 0xe0, 0x3b, 0x06, 0x16, 0x76, 0x33, 0x02, 0x8a, 0x19, 0x06, 0xe9, 0x9f, 0x3a, 0x38, 0x9e, 0x5f, 0xe4, 0x19, 0xf2, 0x38, 0x27, 0x00, 0x90, 0x94, 0x00, 0x65, 0xe0, 0x3e, 0x85, 0x29, 0xc9, 0x5e, 0xd4, 0x3b, 0xe3, 0x19, 0x85, 0x8a, 0xc0, 0x5e, 0xd4, 0x3b, 0xe3, 0x19, 0xbe, 0x5b, 0xe3, 0x19, 0xb2, 0x38, 0xe4, 0x19, 0x7d, 0x94, 0xa0, 0x3e, 0x85, 0x29, 0xc9, 0x5e, 0xd4, 0x3e, 0xe3, 0x19, 0x75, 0x88, 0xe0, 0x3e, 0x39, 0x15, 0xa0, 0x3c, 0x39, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0x45, 0x15, 0xa0, 0x3c, 0x45, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0x9a, 0x19, 0xa0, 0x3c, 0x9a, 0x19, 0x20, 0xdb, 0xe0, 0x3e, 0xa6, 0x19, 0xa0, 0x3c, 0xa6, 0x19, 0x20, 0xdb, 0xe0, 0x3e, 0x51, 0x15, 0xa0, 0x3c, 0x51, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0x5d, 0x15, 0xa0, 0x3c, 0x5c, 0x3f, 
+0xc0, 0x1a, 0x5d, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0x21, 0x15, 0xa0, 0x3c, 0x21, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0x2d, 0x15, 0xa0, 0x3c, 0x2d, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0xd2, 0x15, 0xa0, 0x3c, 0xd2, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0x2b, 0x1c, 0xa0, 0x3c, 0x2b, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x37, 0x1c, 0xa0, 0x3c, 0x37, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x43, 0x1c, 0xa0, 0x3c, 0x43, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x4f, 0x1c, 0xa0, 0x3c, 0x4f, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x5b, 0x1c, 0xa0, 0x3c, 0x5b, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x67, 0x1c, 0xa0, 0x3c, 0x67, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x07, 0x1c, 0xa0, 0x3c, 0x07, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x73, 0x1c, 0xa0, 0x3c, 0x73, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x7f, 0x1c, 0xa0, 0x3c, 0x7f, 0x1c, 0x20, 0xdb, 0xe0, 0x3e, 0x88, 0x1a, 0xc3, 0xf1, 
+0x00, 0x1b, 0xa0, 0x3c, 0x88, 0x1a, 0x20, 0xdb, 0xe0, 0x3e, 0x94, 0x1a, 0xa0, 0x3c, 0x94, 0x1a, 0x20, 0xdb, 0xe0, 0x3e, 0xa0, 0x1a, 0xa0, 0x3c, 0xa0, 0x1a, 0x20, 0xdb, 0xe0, 0x3e, 0x92, 0x15, 0xa0, 0x3c, 0x92, 0x15, 0x20, 0xdb, 0xe0, 0x3e, 0x9e, 0x15, 0xa0, 0x3c, 0x9e, 0x15, 0x20, 0xdb, 0x19, 0x05, 0x02, 0x9e, 0x19, 0x05, 0x80, 0x9f, 0x19, 0x07, 0xf2, 0x38, 0x27, 0x00, 0x71, 0x97, 0x3a, 0x38, 0xc3, 0x5b, 0x83, 0x5a, 0x7b, 0x5c, 0x5b, 0x5e, 0x3a, 0x38, 0x00, 0x67, 0x00, 0x61, 0xe0, 0x38, 0x9a, 0x19, 0x38, 0x49, 0xa4, 0x98, 0xe0, 0x38, 0x39, 0x15, 0x38, 0x49, 0xa0, 0x98, 0x27, 0x76, 0x19, 0x16, 0xdf, 0x48, 0x9a, 0x8a, 0x00, 0x61, 0xc0, 0x38, 0x9a, 0x19, 0x38, 0x49, 0x95, 0x98, 0xc0, 0x38, 0x39, 0x15, 0x38, 0x49, 0x91, 0x98, 0xe0, 0x3a, 0x9a, 0x19, 0xe0, 0x3b, 0x39, 0x15, 0xf3, 0x5f, 
+0x40, 0x1b, 0x63, 0x5b, 0x53, 0x12, 0xe0, 0x3b, 0xa6, 0x19, 0xe0, 0x3c, 0x45, 0x15, 0x83, 0x5c, 0x74, 0x13, 0xc0, 0x3c, 0x9a, 0x19, 0xe0, 0x3d, 0x39, 0x15, 0xa3, 0x5d, 0x95, 0x14, 0xc0, 0x3d, 0xa6, 0x19, 0xe0, 0x38, 0x45, 0x15, 0x03, 0x58, 0xb0, 0x15, 0x5d, 0x40, 0x6c, 0x48, 0x21, 0x5c, 0xc0, 0x3d, 0x39, 0x15, 0xe0, 0x39, 0x39, 0x15, 0x23, 0x59, 0xb1, 0x15, 0xc0, 0x38, 0x45, 0x15, 0xe0, 0x39, 0x45, 0x15, 0x23, 0x59, 0x11, 0x10, 0x58, 0x40, 0x6d, 0x48, 0x81, 0x31, 0x79, 0xac, 0x65, 0x90, 0xc0, 0x3a, 0x9a, 0x19, 0xc0, 0x3b, 0x39, 0x15, 0x63, 0x5b, 0x53, 0x12, 0xc0, 0x3b, 0xa6, 0x19, 0xc0, 0x3c, 0x45, 0x15, 0x83, 0x5c, 0x74, 0x13, 0xe0, 0x3c, 0x9a, 0x19, 0xc0, 0x3d, 0x39, 0x15, 0xa3, 0x5d, 0x95, 0x14, 0xe0, 0x3d, 0xa6, 0x19, 0xc0, 0x38, 0x45, 0x15, 0x03, 0x58, 0xb0, 0x15, 0x27, 0x1c, 
+0x80, 0x1b, 0x5d, 0x40, 0x6c, 0x48, 0x21, 0x5c, 0xe0, 0x3d, 0x39, 0x15, 0xc0, 0x39, 0x39, 0x15, 0x23, 0x59, 0xb1, 0x15, 0xe0, 0x38, 0x45, 0x15, 0xc0, 0x39, 0x45, 0x15, 0x23, 0x59, 0x11, 0x10, 0x58, 0x40, 0x6d, 0x48, 0x81, 0x31, 0x79, 0xac, 0x39, 0x90, 0xe0, 0x38, 0x39, 0x15, 0xc0, 0x39, 0x39, 0x15, 0x03, 0x5a, 0x23, 0x5b, 0x7b, 0x58, 0x5b, 0x59, 0xe0, 0x38, 0x45, 0x15, 0xc0, 0x39, 0x45, 0x15, 0x03, 0x5a, 0x23, 0x5b, 0x7b, 0x58, 0x5b, 0x59, 0x9e, 0x5d, 0xe2, 0x19, 0x19, 0x15, 0xca, 0x64, 0x19, 0x6c, 0xa7, 0x38, 0xae, 0x1b, 0xfc, 0x4a, 0x01, 0x88, 0x01, 0x9e, 0x1a, 0x38, 0x82, 0x3c, 0xcb, 0x19, 0xca, 0x63, 0x19, 0x6b, 0xa7, 0x38, 0xb8, 0x1b, 0xdb, 0x4a, 0x01, 0x88, 0x01, 0x9e, 0x1a, 0x38, 0x62, 0x3b, 0xcb, 0x19, 0x1e, 0x5f, 0x80, 0x38, 0xca, 0x19, 0x60, 0x39, 0xca, 0x19, 0x08, 0xee, 
+0xc0, 0x1b, 0x03, 0x5d, 0x23, 0x5f, 0xfb, 0x58, 0xbb, 0x59, 0x80, 0x38, 0xd6, 0x19, 0x60, 0x39, 0xd6, 0x19, 0x03, 0x5d, 0x23, 0x5f, 0xfb, 0x58, 0xbb, 0x59, 0x3e, 0x5f, 0x19, 0x16, 0x62, 0x95, 0x19, 0x07, 0xf2, 0x38, 0x27, 0x00, 0x53, 0x97, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x48, 0x64, 0x0e, 0x6c, 0x32, 0x65, 0x16, 0x6d, 0x17, 0x67, 0x03, 0x6f, 0xe7, 0x38, 0xe8, 0x1b, 0x83, 0x5f, 0xa3, 0x5e, 0xfb, 0x5d, 0x19, 0x04, 0x19, 0x05, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x7f, 0x61, 0xa6, 0x66, 0x1c, 0x6e, 0xba, 0x64, 0x1c, 0x6c, 0x9e, 0x5f, 0xf0, 0x04, 0x19, 0x17, 0xe7, 0x38, 0xfd, 0x1b, 0x3d, 0x5e, 0x3d, 0x5c, 0x00, 0x60, 0xbe, 0x58, 0x4a, 0xea, 
+0x00, 0x1c, 0x03, 0x1c, 0x3a, 0x38, 0x1e, 0x5f, 0xe0, 0x38, 0xde, 0x15, 0x03, 0x58, 0xe0, 0x39, 0xf2, 0x15, 0x23, 0x59, 0xe0, 0x3a, 0x06, 0x16, 0x43, 0x5a, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0x9e, 0x5e, 0x03, 0x1c, 0x18, 0x16, 0x19, 0x9a, 0x19, 0x16, 0x7f, 0x65, 0xc7, 0x38, 0x2b, 0x1c, 0xc0, 0x3c, 0xa6, 0x1c, 0x95, 0x27, 0x3f, 0x48, 0x0f, 0x96, 0x83, 0x5f, 0xfe, 0x5f, 0xe5, 0x27, 0x1f, 0x48, 0x0a, 0x98, 0xc0, 0x3c, 0xba, 0x1c, 0x83, 0x5f, 0xfe, 0x5f, 0xe5, 0x27, 0x7f, 0x48, 0x03, 0x98, 0x95, 0x27, 0x5f, 0x48, 0x13, 0x94, 0x19, 0x16, 0x3e, 0x5f, 0xe0, 0x39, 0xaa, 0x15, 0x23, 0x59, 0x00, 0x60, 0x01, 0x68, 0x32, 0x39, 0x23, 0x00, 0x07, 0x96, 0x24, 0x62, 0x41, 0x48, 0x02, 0x39, 0xc0, 0x01, 0x02, 0x9a, 0xc0, 0x60, 0x01, 0x68, 0x1c, 0x78, 0x04, 0x9e, 0x3e, 0x5f, 0x9e, 0x58, 0x7b, 0x8a, 
+0x40, 0x1c, 0x06, 0x1c, 0x1c, 0x78, 0x9e, 0x5a, 0x58, 0x1a, 0xbe, 0x5a, 0x82, 0x1a, 0x3a, 0x38, 0xe0, 0x3a, 0xf2, 0x15, 0x9e, 0x5c, 0xfd, 0x1b, 0x19, 0x14, 0x9a, 0x49, 0x17, 0x88, 0x19, 0x14, 0xe0, 0x3b, 0xde, 0x15, 0x9b, 0x49, 0x12, 0x98, 0x10, 0x88, 0x0b, 0x9e, 0xe0, 0x3a, 0xde, 0x15, 0x43, 0x5a, 0x18, 0x12, 0x0b, 0x88, 0x01, 0x62, 0xe0, 0x3b, 0xf2, 0x15, 0x5b, 0x49, 0x06, 0x96, 0x04, 0x88, 0x06, 0x60, 0x08, 0x58, 0x20, 0x01, 0x01, 0x9e, 0x1e, 0x01, 0x3a, 0x38, 0xe0, 0x39, 0xa6, 0x1c, 0x23, 0x5a, 0x7a, 0xaa, 0x9e, 0x58, 0x58, 0x1a, 0x12, 0x38, 0x82, 0x1a, 0x01, 0x9a, 0x7a, 0xa8, 0x5b, 0x59, 0x3a, 0x38, 0xa6, 0x60, 0x1c, 0x68, 0xba, 0x61, 0x1c, 0x69, 0x00, 0x62, 0x80, 0x6a, 0x7f, 0x63, 0x9e, 0x5e, 0xf0, 0x04, 0x19, 0x16, 0xc7, 0x38, 0x81, 0x1c, 0x12, 0x26, 0xcb, 0x28, 0xab, 0xb6, 
+0x80, 0x1c, 0x7d, 0x59, 0x19, 0x00, 0x9e, 0x5e, 0x4b, 0x1a, 0x18, 0x16, 0x38, 0x9a, 0x00, 0x67, 0x19, 0x16, 0xc7, 0x38, 0xbd, 0x1c, 0xe0, 0x38, 0xa6, 0x1c, 0x03, 0x5a, 0x7a, 0xac, 0x2e, 0x90, 0x7a, 0xaa, 0x5b, 0x58, 0xe0, 0x38, 0xde, 0x15, 0x03, 0x58, 0xe0, 0x39, 0xf2, 0x15, 0x23, 0x59, 0xe0, 0x3a, 0x06, 0x16, 0x43, 0x5a, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0x3a, 0x10, 0x01, 0x94, 0x00, 0x60, 0x32, 0x3e, 0xfd, 0x1b, 0x3b, 0x06, 0x02, 0x94, 0x3a, 0x01, 0x03, 0x9e, 0x9e, 0x59, 0xfd, 0x1b, 0x19, 0x11, 0x3a, 0x13, 0x01, 0x94, 0x00, 0x63, 0x52, 0x3e, 0xfe, 0x1b, 0x3b, 0x06, 0x02, 0x94, 0x3a, 0x02, 0x03, 0x9e, 0x9e, 0x5a, 0xfe, 0x1b, 0x19, 0x12, 0xe0, 0x3c, 0xa6, 0x1c, 0xfe, 0x59, 0x28, 0x2c, 0xe0, 0x3c, 0xba, 0x1c, 0xfe, 0x5a, 0x4b, 0x2c, 0x19, 0x07, 0x3a, 0x38, 0x9e, 0x5f, 0x00, 0xaf, 
+0xc0, 0x1c, 0xc6, 0x04, 0x18, 0x17, 0xa4, 0x9a, 0x00, 0x67, 0x21, 0x72, 0x23, 0x66, 0x46, 0x40, 0x00, 0x3e, 0x00, 0x00, 0x15, 0x64, 0x44, 0x40, 0x00, 0x3d, 0x00, 0x00, 0x1e, 0x5e, 0x1e, 0x5d, 0x48, 0x5e, 0xe0, 0x3d, 0xde, 0x15, 0x45, 0x41, 0x00, 0x3d, 0x00, 0x00, 0xa6, 0x15, 0xe0, 0x3c, 0xf2, 0x15, 0x44, 0x41, 0x00, 0x3c, 0x00, 0x00, 0x86, 0x04, 0xe0, 0x3b, 0x06, 0x16, 0x63, 0x5b, 0x64, 0x3b, 0xff, 0x00, 0x43, 0x40, 0x00, 0x3b, 0x00, 0x00, 0x66, 0x03, 0xe0, 0x38, 0x1a, 0x16, 0x40, 0x41, 0x00, 0x3a, 0x00, 0x00, 0x46, 0x12, 0x3e, 0x59, 0x3e, 0x58, 0x18, 0x15, 0x01, 0x94, 0x00, 0x65, 0x99, 0x48, 0x01, 0x9a, 0x21, 0x5c, 0x78, 0x48, 0x01, 0x9a, 0x01, 0x5b, 0x18, 0x12, 0x01, 0x94, 0x00, 0x62, 0xfe, 0x5f, 0x00, 0x61, 0x00, 0x66, 0x2f, 0x39, 0x1b, 0x1d, 0xc0, 0x38, 0xe6, 0x1b, 0x94, 0xa2, 
+0x00, 0x1d, 0x03, 0x58, 0x04, 0x38, 0x00, 0x7f, 0x02, 0x38, 0x00, 0x7f, 0x15, 0x88, 0xc0, 0x38, 0x45, 0x15, 0xb8, 0x49, 0x11, 0x98, 0x98, 0x49, 0x0f, 0x96, 0xc0, 0x38, 0x39, 0x15, 0x58, 0x49, 0x0b, 0x98, 0x78, 0x49, 0x09, 0x96, 0x19, 0x01, 0xc0, 0x38, 0xe6, 0x1b, 0x1e, 0x5a, 0x03, 0x5a, 0x44, 0x3a, 0xff, 0x00, 0xea, 0x28, 0x3e, 0x5a, 0x19, 0x06, 0xfe, 0x5f, 0x18, 0x11, 0x44, 0x8a, 0x21, 0x5e, 0x1e, 0x5c, 0x1e, 0x5d, 0xe0, 0x3c, 0xc8, 0x1b, 0x83, 0x58, 0x00, 0x61, 0x1c, 0x5e, 0x01, 0x5c, 0xe0, 0x38, 0xaa, 0x15, 0x03, 0x58, 0x00, 0x61, 0x1c, 0x5e, 0xfe, 0x5f, 0x1e, 0x5a, 0x1e, 0x5b, 0x00, 0x66, 0x2f, 0x39, 0x5d, 0x1d, 0xc0, 0x3b, 0xe6, 0x1b, 0xc0, 0x3d, 0xce, 0x1c, 0x63, 0x59, 0x24, 0x3a, 0x00, 0xff, 0x5f, 0x48, 0x21, 0x88, 0x1e, 0x58, 0x24, 0x3a, 0xff, 0x00, 0x18, 0x12, 0xd6, 0x28, 
+0x40, 0x1d, 0x14, 0x8a, 0x00, 0x61, 0x60, 0x69, 0x20, 0x40, 0x06, 0x58, 0x2a, 0x59, 0x06, 0x58, 0x2a, 0x58, 0x1e, 0x5c, 0x1e, 0x5d, 0x01, 0x5d, 0x01, 0x64, 0x00, 0x61, 0x9d, 0x40, 0x08, 0x61, 0x41, 0x48, 0x00, 0x61, 0x09, 0x64, 0x1c, 0x5c, 0x3e, 0x5d, 0x3e, 0x5c, 0x02, 0x39, 0x20, 0x00, 0x01, 0x96, 0x1f, 0x60, 0xe0, 0x2a, 0x5b, 0x5b, 0x9b, 0x5d, 0x3e, 0x58, 0x19, 0x06, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x5d, 0x3e, 0x5c, 0xfe, 0x5f, 0x19, 0x07, 0xf2, 0x38, 0xc6, 0x04, 0x5d, 0x97, 0x00, 0x66, 0x9e, 0x5f, 0xe3, 0x19, 0x2f, 0x39, 0x78, 0x1d, 0xc0, 0x38, 0xe6, 0x1b, 0x07, 0xac, 0x03, 0x92, 0xde, 0x58, 0x00, 0x7f, 0x04, 0x9e, 0x03, 0x59, 0x25, 0x39, 0x00, 0x7f, 0x3b, 0x58, 0xe8, 0x5f, 0x19, 0x06, 0x3a, 0x38, 0x00, 0x63, 0xf0, 0x62, 0x1b, 0x6a, 0x2f, 0x39, 0x81, 0x1d, 0x7b, 0x5a, 0x1a, 0xf7, 
+0x80, 0x1d, 0x19, 0x02, 0x1a, 0x38, 0xca, 0x63, 0x19, 0x6b, 0x16, 0x64, 0x00, 0x62, 0x2f, 0x39, 0x9f, 0x1d, 0x65, 0x5f, 0x7f, 0xac, 0x14, 0x92, 0x72, 0x65, 0x19, 0x6d, 0xa2, 0x05, 0x86, 0x66, 0x19, 0x6e, 0xc2, 0x06, 0x00, 0x61, 0xa3, 0x58, 0x86, 0x49, 0x48, 0x61, 0x0e, 0x69, 0x01, 0x01, 0x23, 0x58, 0x1e, 0x5c, 0xf0, 0x64, 0x1b, 0x6c, 0x87, 0x04, 0x1b, 0x5c, 0x3e, 0x5c, 0x19, 0x02, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x62, 0xbe, 0x5a, 0xe9, 0x1e, 0x9e, 0x58, 0x4d, 0x04, 0x02, 0x38, 0x00, 0x06, 0x1d, 0x80, 0x9e, 0x58, 0x4c, 0x04, 0x03, 0x61, 0x19, 0x48, 0x08, 0x80, 0x9e, 0x58, 0x4c, 0x04, 0x16, 0x61, 0x03, 0x62, 0x22, 0x11, 0x19, 0x48, 0x01, 0x94, 0x10, 0x9e, 0xdf, 0x61, 0x1e, 0x69, 0x00, 0x62, 0x4f, 0x38, 0xbf, 0x1d, 0x25, 0x5b, 0xfe, 0x5b, 0x64, 0x3b, 0xff, 0x00, 0x43, 0x02, 0xfb, 0xb8, 
+0xc0, 0x1d, 0x0a, 0x61, 0x59, 0x48, 0x03, 0x80, 0x66, 0x62, 0xbe, 0x5a, 0xe9, 0x1e, 0x3a, 0x38, 0x00, 0x61, 0xbe, 0x59, 0xfe, 0x04, 0x00, 0x61, 0xbe, 0x59, 0xf1, 0x04, 0xbe, 0x59, 0xf2, 0x04, 0xbe, 0x59, 0xd6, 0x1e, 0xbe, 0x59, 0x05, 0x1d, 0xbe, 0x59, 0x06, 0x1d, 0xbe, 0x59, 0x07, 0x1d, 0x9e, 0x58, 0x4d, 0x04, 0x9e, 0x59, 0x4f, 0x04, 0x01, 0x00, 0x02, 0x3a, 0x20, 0x00, 0x01, 0x98, 0x0b, 0x9e, 0x9e, 0x58, 0x4d, 0x04, 0x02, 0x3a, 0x20, 0x00, 0x06, 0x9a, 0x9e, 0x59, 0x4f, 0x04, 0x22, 0x3a, 0x20, 0x00, 0x01, 0x9a, 0x01, 0x9e, 0x3a, 0x38, 0x9e, 0x5a, 0x4d, 0x04, 0x48, 0x5a, 0x48, 0x5a, 0x48, 0x5a, 0x00, 0x66, 0x48, 0x63, 0x1d, 0x6b, 0x16, 0x60, 0x08, 0xde, 0xbe, 0x5e, 0xf1, 0x04, 0x9e, 0x5a, 0x4f, 0x04, 0x48, 0x5a, 0x48, 0x5a, 0x48, 0x5a, 0x00, 0x66, 0x48, 0x63, 0x1d, 0x6b, 0x0c, 0x61, 
+0x00, 0x1e, 0x70, 0x3b, 0xb8, 0x00, 0x24, 0x60, 0x08, 0xde, 0xbe, 0x5e, 0xf2, 0x04, 0x44, 0xde, 0x3a, 0x38, 0x63, 0x5d, 0x60, 0x3c, 0x01, 0x00, 0x83, 0x59, 0xb9, 0x48, 0x03, 0x80, 0xba, 0x48, 0x01, 0x9a, 0x19, 0x06, 0x19, 0x03, 0x1b, 0x10, 0x07, 0x38, 0x38, 0x1e, 0x63, 0x5d, 0xba, 0x48, 0x20, 0x80, 0x62, 0x3c, 0x01, 0x00, 0x83, 0x59, 0xb9, 0x48, 0x1b, 0x9a, 0x60, 0x3c, 0x01, 0x00, 0x83, 0x58, 0xb8, 0x48, 0x16, 0x80, 0x67, 0x14, 0x1a, 0x14, 0x11, 0x88, 0x62, 0x3c, 0x02, 0x00, 0x83, 0x58, 0x05, 0x00, 0x08, 0x58, 0x00, 0x61, 0x08, 0x64, 0x1c, 0x5c, 0x07, 0x64, 0x04, 0x40, 0x62, 0x3c, 0x01, 0x00, 0x83, 0x59, 0xbe, 0x59, 0xfe, 0x04, 0x38, 0x48, 0x02, 0x98, 0x19, 0x06, 0x61, 0x5f, 0x19, 0x03, 0x63, 0x5d, 0x62, 0x3c, 0x01, 0x00, 0x83, 0x59, 0xb9, 0x48, 0x03, 0x80, 0xba, 0x48, 0x58, 0xc2, 
+0x40, 0x1e, 0x01, 0x9a, 0x19, 0x06, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x60, 0x9e, 0x5a, 0xf1, 0x04, 0x19, 0x02, 0x48, 0x63, 0x1d, 0x6b, 0x9e, 0x5c, 0xb8, 0x00, 0x19, 0x14, 0x87, 0x38, 0x51, 0x1e, 0x63, 0x5d, 0x05, 0x00, 0x19, 0x03, 0x00, 0x61, 0x1c, 0x5a, 0xbe, 0x58, 0x05, 0x1d, 0x00, 0x60, 0x9e, 0x5a, 0xf2, 0x04, 0x19, 0x02, 0x9e, 0x5c, 0xb9, 0x00, 0x19, 0x14, 0x87, 0x38, 0x61, 0x1e, 0x63, 0x5d, 0x05, 0x00, 0x19, 0x03, 0x00, 0x61, 0x1c, 0x5a, 0xbe, 0x58, 0x06, 0x1d, 0x9e, 0x5a, 0xf1, 0x04, 0x9e, 0x5b, 0xf2, 0x04, 0x43, 0x03, 0x9e, 0x5c, 0x05, 0x1d, 0x9e, 0x5d, 0x06, 0x1d, 0x85, 0x04, 0x81, 0x58, 0x00, 0x61, 0x1c, 0x5b, 0xbe, 0x58, 0x07, 0x1d, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x00, 0x63, 0x9e, 0x58, 0xbf, 0x00, 0x19, 0x10, 0x48, 0x61, 0x0e, 0x69, 0xd2, 0xaf, 
+0x80, 0x1e, 0x07, 0x38, 0x84, 0x1e, 0x7d, 0x59, 0x1a, 0x38, 0x1a, 0x38, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0xff, 0x63, 0xbe, 0x5b, 0x8a, 0x04, 0xbe, 0x5b, 0x8b, 0x04, 0x9e, 0x58, 0x4d, 0x04, 0x02, 0x3a, 0x20, 0x00, 0x2b, 0x9a, 0x9e, 0x59, 0x4f, 0x04, 0x22, 0x3a, 0x20, 0x00, 0x26, 0x9a, 0x9e, 0x5e, 0x4c, 0x04, 0x9e, 0x5f, 0x4c, 0x04, 0x9e, 0x5a, 0xb8, 0x00, 0x19, 0x12, 0x9e, 0x58, 0x4d, 0x04, 0x08, 0x58, 0x08, 0x58, 0x48, 0x63, 0x1d, 0x6b, 0xc0, 0xde, 0xe6, 0x14, 0x19, 0x04, 0xbe, 0x5c, 0x8a, 0x04, 0x9e, 0x5e, 0x4e, 0x04, 0x9e, 0x5f, 0x4e, 0x04, 0x9e, 0x5a, 0xb9, 0x00, 0x19, 0x12, 0x9e, 0x58, 0x4f, 0x04, 0x08, 0x58, 0x08, 0x58, 0x48, 0x63, 0x1d, 0x6b, 0x70, 0x3b, 0xb8, 0x00, 0xc0, 0xde, 0xe6, 0x14, 0x19, 0x04, 0xbe, 0x5c, 0x8b, 0x04, 0x3a, 0x38, 0xc9, 0xab, 
+0xc0, 0x1e, 0x00, 0x64, 0x47, 0x38, 0xd0, 0x1e, 0x65, 0x5d, 0xb8, 0x48, 0x0a, 0x9a, 0xa2, 0x39, 0x20, 0x00, 0x07, 0x9a, 0x9e, 0x48, 0x02, 0x94, 0x81, 0x5e, 0x03, 0x9e, 0x9f, 0x48, 0x01, 0x9a, 0x81, 0x5f, 0x19, 0x04, 0x3a, 0x38, 0x48, 0x64, 0x0e, 0x6c, 0x17, 0x67, 0x03, 0x6f, 0x00, 0x62, 0x00, 0x65, 0x00, 0x66, 0x00, 0x63, 0xe7, 0x38, 0xf1, 0x1e, 0x85, 0x5f, 0x7f, 0xac, 0x09, 0x92, 0xfe, 0x48, 0x01, 0x80, 0xe1, 0x5e, 0xe2, 0x3f, 0x60, 0x00, 0x7f, 0xac, 0x0b, 0x92, 0x19, 0x02, 0x09, 0x9e, 0xe2, 0x5f, 0xfb, 0x48, 0x01, 0x80, 0xe1, 0x5b, 0xe2, 0x3f, 0x60, 0x00, 0x7f, 0xac, 0x01, 0x92, 0x19, 0x05, 0x1a, 0x38, 0xbe, 0x5b, 0x45, 0x04, 0xbe, 0x5e, 0x44, 0x04, 0xbe, 0x5a, 0x46, 0x04, 0xbe, 0x5d, 0x47, 0x04, 0x3a, 0x38, 0x00, 0x01, 0x40, 0x01, 0xf0, 0x00, 0x40, 0x01, 0x40, 0x01, 0x2e, 0xbb, 
+0x00, 0x1f, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0xf0, 0x00, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0x40, 0x01, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x06, 0x00, 0x07, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x06, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0x0a, 0x00, 0xa0, 0xdf, 0xff, 0x63, 0x9e, 0x59, 0x8a, 0x04, 0x23, 0x12, 0x77, 0x8a, 0x9e, 0x59, 0x4e, 0x04, 0x30, 0x48, 0x00, 0x00, 0x72, 0x8a, 0x9e, 0x59, 0x4e, 0x04, 0x30, 0x48, 0x23, 0x00, 0x6d, 0x8a, 0x9e, 0x59, 0x4c, 0x04, 0x30, 0x48, 0x00, 0x00, 0x68, 0x8a, 0x9e, 0x59, 0x4c, 0x04, 0x30, 0x48, 0x15, 0x00, 0x63, 0x8a, 0x9e, 0x59, 0x8a, 0x04, 0x9e, 0x5a, 0x8b, 0x04, 0x9e, 0x5c, 0xf1, 0x04, 0x9e, 0x5d, 0xaa, 0xac, 
+0x40, 0x1f, 0xf2, 0x04, 0x81, 0x58, 0x9d, 0x48, 0x01, 0x98, 0xa1, 0x58, 0x10, 0x48, 0x08, 0x00, 0x01, 0x9a, 0x08, 0x60, 0x00, 0x3b, 0x16, 0x1f, 0x69, 0x5b, 0x3b, 0x48, 0x03, 0x98, 0x5b, 0x48, 0x01, 0x98, 0x4b, 0x9e, 0x00, 0x3b, 0x0d, 0x1f, 0x69, 0x5b, 0x3b, 0x48, 0x03, 0x80, 0x5b, 0x48, 0x01, 0x80, 0x43, 0x9e, 0x3a, 0x48, 0x1a, 0x98, 0x9e, 0x58, 0xf2, 0x04, 0x10, 0x48, 0x08, 0x00, 0x01, 0x96, 0x08, 0x60, 0x00, 0x39, 0xfb, 0x1e, 0x29, 0x59, 0x9e, 0x58, 0x4d, 0x04, 0x01, 0x10, 0x34, 0x9a, 0x16, 0x60, 0xbe, 0x58, 0x3f, 0x04, 0x24, 0x60, 0xbe, 0x58, 0x40, 0x04, 0x01, 0x60, 0xbe, 0x58, 0x42, 0x04, 0x00, 0x60, 0xbe, 0x58, 0x41, 0x04, 0x1c, 0x9e, 0x9e, 0x58, 0xf1, 0x04, 0x10, 0x48, 0x08, 0x00, 0x01, 0x96, 0x08, 0x60, 0x00, 0x39, 0x04, 0x1f, 0x29, 0x59, 0x9e, 0x58, 0x4f, 0x04, 0x2e, 0x61, 
+0x80, 0x1f, 0x01, 0x10, 0x1a, 0x9a, 0x24, 0x60, 0xbe, 0x58, 0x3f, 0x04, 0x16, 0x60, 0xbe, 0x58, 0x40, 0x04, 0x16, 0x60, 0xbe, 0x58, 0x42, 0x04, 0x01, 0x60, 0xbe, 0x58, 0x41, 0x04, 0x01, 0x60, 0xbe, 0x58, 0xfa, 0x1c, 0x01, 0x63, 0xbe, 0x5b, 0x43, 0x04, 0x40, 0x63, 0xbe, 0x5b, 0x44, 0x1a, 0x66, 0xe0, 0xbb, 0xdf, 0xcb, 0xe0, 0x46, 0xe1, 0x03, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0xfa, 0x1c, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0x43, 0x04, 0x24, 0x60, 0x19, 0x10, 0x00, 0x61, 0x44, 0x66, 0x1b, 0x6e, 0x69, 0x67, 0x1b, 0x6f, 0x07, 0x38, 0xad, 0x1f, 0x3d, 0x5e, 0x3d, 0x5f, 0x50, 0x60, 0x04, 0x68, 0x9e, 0x5c, 0xb8, 0x00, 0x90, 0x3c, 0xb9, 0x00, 0x19, 0x14, 0x87, 0x38, 0xb9, 0x1f, 0x00, 0x67, 0xfb, 0x58, 0x19, 0x00, 0x3a, 0x38, 0xb0, 0x62, 0x02, 0x6a, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xd2, 0xf7, 
+0xc0, 0x1f, 0xf2, 0x04, 0x01, 0x00, 0x1b, 0x10, 0x02, 0x88, 0x00, 0x62, 0x04, 0x6a, 0xbe, 0x5a, 0x15, 0x1f, 0x01, 0x62, 0x9e, 0x58, 0x41, 0x04, 0x19, 0x10, 0x01, 0x8a, 0x00, 0x62, 0xbe, 0x5a, 0xf7, 0x04, 0x9e, 0x5a, 0x4d, 0x04, 0x48, 0x5a, 0x48, 0x5a, 0x48, 0x67, 0x1d, 0x6f, 0x50, 0x66, 0x04, 0x6e, 0x16, 0x60, 0x44, 0x61, 0x1b, 0x69, 0x05, 0xe0, 0x48, 0x67, 0x1d, 0x6f, 0x50, 0x66, 0x04, 0x6e, 0x16, 0x60, 0x49, 0xe0, 0x00, 0x62, 0x9e, 0x58, 0x41, 0x04, 0x19, 0x10, 0x01, 0x8a, 0x01, 0x62, 0xbe, 0x5a, 0xf7, 0x04, 0x9e, 0x5a, 0x4f, 0x04, 0x48, 0x5a, 0x48, 0x5a, 0x48, 0x67, 0x1d, 0x6f, 0xf0, 0x3f, 0xb8, 0x00, 0x50, 0x66, 0x04, 0x6e, 0xd0, 0x3e, 0xb8, 0x00, 0x24, 0x60, 0x44, 0x61, 0x1b, 0x69, 0x05, 0xe0, 0x48, 0x67, 0x1d, 0x6f, 0xf0, 0x3f, 0xb8, 0x00, 0x50, 0x66, 0x04, 0x6e, 0x1a, 0x20, 
+0x00, 0x20, 0xd0, 0x3e, 0xb8, 0x00, 0x24, 0x60, 0x49, 0xe0, 0x3a, 0x38, 0x19, 0x06, 0x19, 0x07, 0x19, 0x01, 0x1b, 0x10, 0x07, 0x38, 0x47, 0x20, 0x00, 0x63, 0xe3, 0x5d, 0xba, 0x48, 0x35, 0x80, 0xe2, 0x3c, 0x01, 0x00, 0x83, 0x58, 0xb8, 0x48, 0x30, 0x80, 0xe0, 0x3c, 0x01, 0x00, 0x83, 0x58, 0xb8, 0x48, 0x2b, 0x80, 0xa1, 0x5b, 0x9e, 0x5c, 0xf7, 0x04, 0x18, 0x14, 0x26, 0x8a, 0x23, 0x5c, 0x82, 0x38, 0xb0, 0x00, 0x0f, 0x98, 0x22, 0x3c, 0x01, 0x00, 0x83, 0x5c, 0x82, 0x38, 0xb0, 0x00, 0x09, 0x98, 0x20, 0x3c, 0x01, 0x00, 0x83, 0x5c, 0x82, 0x38, 0xb0, 0x00, 0x03, 0x98, 0x66, 0x63, 0x06, 0x6b, 0x13, 0x9e, 0x23, 0x5c, 0x92, 0x38, 0x15, 0x1f, 0x0d, 0x98, 0x22, 0x3c, 0x01, 0x00, 0x83, 0x5c, 0x92, 0x38, 0x15, 0x1f, 0x07, 0x98, 0x20, 0x3c, 0x01, 0x00, 0x83, 0x5c, 0x92, 0x38, 0x15, 0x1f, 0xd1, 0x22, 
+0x40, 0x20, 0x01, 0x98, 0x02, 0x9e, 0x88, 0x63, 0x08, 0x6b, 0x7b, 0x5e, 0x19, 0x07, 0x19, 0x06, 0x19, 0x01, 0x3a, 0x38, 0x19, 0x06, 0x19, 0x07, 0x1a, 0x10, 0x00, 0x62, 0xc3, 0x5d, 0xba, 0x48, 0x0f, 0x8a, 0xe2, 0x3c, 0x01, 0x00, 0x83, 0x5b, 0xc2, 0x3c, 0x01, 0x00, 0xbb, 0x5c, 0xe0, 0x3c, 0x01, 0x00, 0x83, 0x5b, 0xc0, 0x3c, 0x01, 0x00, 0xbb, 0x5c, 0x19, 0x07, 0x19, 0x06, 0x19, 0x10, 0x19, 0x07, 0x19, 0x06, 0x19, 0x10, 0x18, 0x10, 0xe9, 0x99, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x66, 0xbe, 0x5e, 0x49, 0x04, 0xbe, 0x5e, 0x48, 0x04, 0xbe, 0x5e, 0x4b, 0x04, 0xbe, 0x5e, 0x4a, 0x04, 0x00, 0x67, 0x00, 0x65, 0x00, 0x62, 0x00, 0x63, 0x00, 0x61, 0x16, 0x64, 0x41, 0x58, 0x83, 0x48, 0x9e, 0x5d, 0x41, 0x04, 0x19, 0x15, 0x03, 0x8a, 0x00, 0x61, 0x61, 0x58, 0x82, 0x48, 0x32, 0x64, 0x16, 0x6c, 0x78, 0xee, 
+0x80, 0x20, 0x80, 0x04, 0x83, 0x59, 0x79, 0xac, 0x10, 0x90, 0x22, 0x59, 0x9e, 0x5f, 0x4b, 0x04, 0x3f, 0x48, 0x19, 0x80, 0xbe, 0x59, 0x4b, 0x04, 0x9e, 0x5f, 0x49, 0x04, 0x3f, 0x48, 0x13, 0x80, 0xbe, 0x5f, 0x4b, 0x04, 0xbe, 0x59, 0x49, 0x04, 0x0e, 0x9e, 0x9e, 0x5f, 0x4a, 0x04, 0x3f, 0x48, 0x0a, 0x80, 0xbe, 0x59, 0x4a, 0x04, 0x9e, 0x5f, 0x48, 0x04, 0x3f, 0x48, 0x04, 0x80, 0xbe, 0x5f, 0x4a, 0x04, 0xbe, 0x59, 0x48, 0x04, 0x19, 0x03, 0x9e, 0x5c, 0x3f, 0x04, 0x19, 0x14, 0x7c, 0x48, 0xcb, 0x9d, 0x9e, 0x5c, 0x49, 0x04, 0x9e, 0x5e, 0x4b, 0x04, 0x86, 0x04, 0x69, 0x67, 0x1b, 0x6f, 0xe2, 0x07, 0x9b, 0x5f, 0x9e, 0x5d, 0x48, 0x04, 0x9e, 0x5e, 0x4a, 0x04, 0xa6, 0x05, 0x44, 0x67, 0x1b, 0x6f, 0xe2, 0x07, 0xbb, 0x5f, 0x00, 0x65, 0x00, 0x67, 0x00, 0x66, 0xbe, 0x5e, 0x49, 0x04, 0xbe, 0x5e, 0x21, 0x04, 
+0xc0, 0x20, 0x48, 0x04, 0xbe, 0x5e, 0x4b, 0x04, 0xbe, 0x5e, 0x4a, 0x04, 0x19, 0x02, 0x9e, 0x5c, 0x40, 0x04, 0x5c, 0x48, 0xa8, 0x9d, 0x3a, 0x38, 0x01, 0x62, 0x9e, 0x5c, 0x40, 0x04, 0x1b, 0x14, 0x87, 0x38, 0x44, 0x21, 0x50, 0x60, 0x04, 0x68, 0x9e, 0x5d, 0x41, 0x04, 0x19, 0x15, 0x02, 0x8a, 0x10, 0x38, 0xb8, 0x00, 0x02, 0x00, 0x03, 0x5c, 0x18, 0x14, 0x67, 0x8a, 0x82, 0x3d, 0x88, 0x08, 0x64, 0x8a, 0x81, 0x5d, 0x82, 0x3c, 0x66, 0x06, 0x01, 0x88, 0x80, 0x65, 0x9e, 0x5b, 0x41, 0x04, 0x19, 0x13, 0x23, 0x8a, 0x9e, 0x5e, 0x4d, 0x04, 0xc8, 0x5e, 0x9e, 0x58, 0x4c, 0x04, 0x41, 0x5b, 0x33, 0xe1, 0x9e, 0x58, 0x4c, 0x04, 0x18, 0x10, 0x09, 0x8a, 0x19, 0x10, 0x48, 0x63, 0x1d, 0x6b, 0x60, 0x03, 0x63, 0x59, 0x3e, 0x48, 0x02, 0x80, 0x41, 0x5b, 0x33, 0xe1, 0x9e, 0x58, 0x4c, 0x04, 0x19, 0x00, 0x34, 0xe4, 
+0x00, 0x21, 0x12, 0x3b, 0xb8, 0x00, 0x41, 0x8a, 0x48, 0x63, 0x1d, 0x6b, 0x60, 0x03, 0x63, 0x59, 0x3e, 0x48, 0x3b, 0x80, 0x41, 0x5b, 0x33, 0xe1, 0x38, 0x9e, 0x9e, 0x5e, 0x4f, 0x04, 0xc8, 0x5e, 0x9e, 0x5b, 0x4e, 0x04, 0x41, 0x58, 0x33, 0xe1, 0x9e, 0x5b, 0x4e, 0x04, 0x18, 0x10, 0x0b, 0x8a, 0x19, 0x13, 0x48, 0x60, 0x1d, 0x68, 0x10, 0x38, 0xb8, 0x00, 0x03, 0x00, 0x03, 0x59, 0x3e, 0x48, 0x02, 0x80, 0x41, 0x58, 0x33, 0xe1, 0x9e, 0x5b, 0x4e, 0x04, 0x19, 0x03, 0x72, 0x38, 0xb9, 0x00, 0x1c, 0x8a, 0x48, 0x60, 0x1d, 0x68, 0x10, 0x38, 0xb8, 0x00, 0x03, 0x00, 0x03, 0x59, 0x3e, 0x48, 0x14, 0x80, 0x41, 0x58, 0x33, 0xe1, 0x11, 0x9e, 0x00, 0x61, 0x16, 0x64, 0x83, 0x48, 0x32, 0x61, 0x16, 0x69, 0x20, 0x01, 0x23, 0x5c, 0x00, 0x67, 0x9f, 0x48, 0x01, 0x98, 0x82, 0x5c, 0x48, 0x61, 0x0e, 0x69, 0x6e, 0x3d, 
+0x40, 0x21, 0x20, 0x01, 0x85, 0x04, 0x9b, 0x59, 0x3a, 0x38, 0x19, 0x02, 0x3a, 0x38, 0x9e, 0x58, 0xbf, 0x00, 0x19, 0x10, 0x48, 0x61, 0x0e, 0x69, 0x32, 0x62, 0x16, 0x6a, 0x07, 0x38, 0x51, 0x21, 0x25, 0x5b, 0x7d, 0x5a, 0x1a, 0x38, 0x01, 0x66, 0x50, 0x60, 0x04, 0x68, 0x9e, 0x5c, 0x41, 0x04, 0x19, 0x14, 0x02, 0x8a, 0x10, 0x38, 0xb8, 0x00, 0x06, 0x00, 0x03, 0x5c, 0x18, 0x14, 0x5d, 0x8a, 0x82, 0x3c, 0x88, 0x08, 0x5a, 0x8a, 0x01, 0x67, 0x00, 0x65, 0x00, 0x61, 0x9e, 0x5c, 0x41, 0x04, 0x19, 0x14, 0x0b, 0x8a, 0x50, 0x60, 0x04, 0x68, 0x07, 0x00, 0x03, 0x5c, 0x18, 0x14, 0x47, 0x8a, 0xe1, 0x58, 0x9e, 0x5c, 0xb8, 0x00, 0x86, 0x48, 0x0c, 0x9e, 0x50, 0x60, 0x04, 0x68, 0x10, 0x38, 0xb8, 0x00, 0x07, 0x00, 0x03, 0x5c, 0x18, 0x14, 0x3a, 0x8a, 0xc1, 0x58, 0x9e, 0x5c, 0xb8, 0x00, 0x87, 0x48, 0xce, 0xef, 
+0x80, 0x21, 0x32, 0x64, 0x16, 0x6c, 0x80, 0x04, 0x83, 0x5d, 0x82, 0x39, 0x01, 0x00, 0x23, 0x5b, 0xa3, 0x05, 0x80, 0x39, 0x01, 0x00, 0x23, 0x5b, 0xa3, 0x05, 0x9e, 0x5a, 0xb8, 0x00, 0x82, 0x11, 0x23, 0x5b, 0xa3, 0x05, 0x82, 0x01, 0x23, 0x5b, 0xa3, 0x05, 0x82, 0x11, 0x19, 0x01, 0x23, 0x5b, 0xa3, 0x05, 0x82, 0x11, 0x19, 0x11, 0x23, 0x5b, 0xa3, 0x05, 0x82, 0x01, 0x19, 0x01, 0x23, 0x5b, 0xa3, 0x05, 0x82, 0x01, 0x19, 0x11, 0x23, 0x5b, 0xa3, 0x05, 0x00, 0x61, 0x9e, 0x5c, 0x41, 0x04, 0x19, 0x14, 0x05, 0x8a, 0xe1, 0x58, 0x9e, 0x5c, 0xb8, 0x00, 0x86, 0x48, 0x04, 0x9e, 0xc1, 0x58, 0x9e, 0x5c, 0xb8, 0x00, 0x87, 0x48, 0x48, 0x63, 0x0e, 0x6b, 0x60, 0x03, 0xbb, 0x5b, 0x19, 0x07, 0x9e, 0x59, 0x3f, 0x04, 0x19, 0x11, 0xf9, 0x48, 0xa7, 0x81, 0x19, 0x06, 0x9e, 0x59, 0x40, 0x04, 0x19, 0x11, 0x51, 0x64, 
+0xc0, 0x21, 0xd9, 0x48, 0x91, 0x81, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0x70, 0x1a, 0x4a, 0x65, 0x19, 0x6d, 0x5e, 0x66, 0x19, 0x6e, 0x9e, 0x5c, 0x71, 0x1a, 0x9e, 0x5f, 0x58, 0x1a, 0x98, 0x48, 0x65, 0x8a, 0xf8, 0x48, 0x63, 0x8a, 0xfc, 0x48, 0x01, 0x82, 0x60, 0x9e, 0x19, 0x17, 0xe7, 0x38, 0xda, 0x21, 0x00, 0x63, 0x7d, 0x5d, 0x7d, 0x5e, 0x72, 0x60, 0x1a, 0x68, 0x9e, 0x5a, 0x70, 0x1a, 0x00, 0x63, 0x7c, 0x48, 0x11, 0x94, 0x01, 0x66, 0x00, 0x67, 0x05, 0x5d, 0xbf, 0x48, 0x01, 0x98, 0x06, 0x9e, 0x19, 0x15, 0xa7, 0x38, 0xed, 0x21, 0xc6, 0x5e, 0x1a, 0x38, 0x1a, 0x38, 0x46, 0x2a, 0xbe, 0x5a, 0x70, 0x1a, 0x19, 0x03, 0xed, 0x9f, 0x72, 0x60, 0x19, 0x68, 0x86, 0x61, 0x19, 0x69, 0x4a, 0x65, 0x19, 0x6d, 0x5e, 0x66, 0x19, 0x6e, 0x00, 0x63, 0x9e, 0x5c, 0x58, 0x1a, 0x9e, 0x5a, 0x70, 0x1a, 0x16, 0x60, 
+0x00, 0x22, 0x7c, 0x48, 0x0b, 0x94, 0x02, 0xac, 0x04, 0x92, 0x03, 0x5f, 0xfd, 0x5d, 0x23, 0x5f, 0xfd, 0x5e, 0x48, 0x5a, 0x19, 0x00, 0x19, 0x01, 0x19, 0x03, 0xf3, 0x9f, 0x72, 0x60, 0x19, 0x68, 0x86, 0x61, 0x19, 0x69, 0x4a, 0x65, 0x19, 0x6d, 0x5e, 0x66, 0x19, 0x6e, 0x9e, 0x5c, 0x58, 0x1a, 0x19, 0x14, 0x87, 0x38, 0x1c, 0x22, 0x00, 0x63, 0x7d, 0x58, 0x7d, 0x59, 0x72, 0x60, 0x19, 0x68, 0x86, 0x61, 0x19, 0x69, 0x4a, 0x65, 0x19, 0x6d, 0x5e, 0x66, 0x19, 0x6e, 0x9e, 0x5c, 0x58, 0x1a, 0x19, 0x14, 0x87, 0x38, 0x2d, 0x22, 0xa5, 0x5f, 0xfd, 0x58, 0xc5, 0x5f, 0xfd, 0x59, 0x9e, 0x5c, 0x58, 0x1a, 0x9e, 0x5e, 0x71, 0x1a, 0x86, 0x14, 0xbe, 0x5c, 0x58, 0x1a, 0x3a, 0x38, 0x9e, 0x58, 0x43, 0x04, 0x01, 0x61, 0x19, 0x48, 0x01, 0x8a, 0x3a, 0x38, 0xbe, 0x64, 0x19, 0x6c, 0x9e, 0x5d, 0x41, 0x04, 0xd5, 0x2b, 
+0x40, 0x22, 0x19, 0x15, 0x02, 0x8a, 0xb2, 0x64, 0x19, 0x6c, 0x81, 0x5b, 0x00, 0x67, 0x9e, 0x5d, 0x58, 0x1a, 0xa2, 0x3e, 0x01, 0x00, 0xc7, 0x38, 0x4e, 0x22, 0x65, 0x59, 0xe1, 0x07, 0x1a, 0x38, 0xe1, 0x58, 0x00, 0x61, 0x1c, 0x5d, 0x00, 0x62, 0x81, 0x5b, 0xc7, 0x38, 0x5f, 0x22, 0x65, 0x59, 0x01, 0x17, 0x7f, 0xac, 0x01, 0x90, 0xe2, 0x5f, 0xe2, 0x39, 0x0a, 0x00, 0x01, 0x98, 0x19, 0x02, 0x1a, 0x38, 0x45, 0x17, 0x06, 0x88, 0x81, 0x5b, 0xc7, 0x38, 0x67, 0x22, 0x1d, 0x5b, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0x48, 0x63, 0x0e, 0x6b, 0x32, 0x60, 0x16, 0x68, 0x17, 0x67, 0x03, 0x6f, 0xe7, 0x38, 0x7d, 0x22, 0x03, 0x59, 0x79, 0xac, 0x06, 0x90, 0x22, 0x59, 0xa0, 0x62, 0x3a, 0x48, 0x02, 0x9c, 0x10, 0x66, 0xdb, 0x5b, 0x1a, 0x38, 0x1a, 0x38, 0x19, 0x00, 0x19, 0x03, 0x3a, 0x38, 0x00, 0x60, 0xed, 0x6c, 
+0x80, 0x22, 0x60, 0x66, 0x11, 0x6e, 0x9e, 0x5f, 0xff, 0x1b, 0x19, 0x17, 0xe7, 0x38, 0x89, 0x22, 0x1d, 0x5e, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0x9e, 0x5a, 0xec, 0x19, 0x9e, 0x59, 0xeb, 0x19, 0x9e, 0x58, 0xea, 0x19, 0xbe, 0x5a, 0x5b, 0x1a, 0xbe, 0x59, 0xaf, 0x1a, 0xbe, 0x58, 0x5a, 0x1a, 0x3a, 0x38, 0x00, 0x62, 0xbe, 0x5a, 0x62, 0x1a, 0xbe, 0x5a, 0x02, 0x1d, 0xbe, 0x5a, 0x03, 0x1d, 0x18, 0x60, 0x03, 0x68, 0x19, 0x10, 0x48, 0x61, 0x0e, 0x69, 0x60, 0x62, 0x11, 0x6a, 0x07, 0x38, 0xac, 0x22, 0x25, 0x5b, 0x7b, 0xac, 0x01, 0x90, 0x00, 0x63, 0x7d, 0x5a, 0x01, 0x66, 0x9e, 0x58, 0x5a, 0x1a, 0x9e, 0x59, 0xaf, 0x1a, 0x9e, 0x5a, 0x5b, 0x1a, 0x24, 0x63, 0x1a, 0x13, 0x67, 0x38, 0xc7, 0x22, 0x19, 0x06, 0x4c, 0x5a, 0x2c, 0x59, 0x0c, 0x58, 0x0a, 0x82, 0x19, 0x16, 0x00, 0x65, 0x01, 0x6d, 0xee, 0xcf, 
+0xc0, 0x22, 0x1e, 0x5a, 0x1e, 0x59, 0x1e, 0x58, 0xe4, 0xe2, 0x3e, 0x58, 0x3e, 0x59, 0x3e, 0x5a, 0x1a, 0x38, 0x00, 0x60, 0x60, 0x66, 0x11, 0x6e, 0x9e, 0x5f, 0xff, 0x1b, 0x19, 0x17, 0xe7, 0x38, 0xd2, 0x22, 0x1d, 0x5e, 0x1a, 0x38, 0x1a, 0x38, 0x9e, 0x5a, 0x62, 0x1a, 0x00, 0x61, 0x59, 0x48, 0x0b, 0x8a, 0x18, 0x60, 0x03, 0x68, 0x19, 0x10, 0x48, 0x61, 0x0e, 0x69, 0x32, 0x62, 0x16, 0x6a, 0x07, 0x38, 0xe2, 0x22, 0x25, 0x5b, 0x7d, 0x5a, 0x3a, 0x38, 0x01, 0x67, 0x00, 0x61, 0xe1, 0x58, 0x16, 0x64, 0xc4, 0x48, 0x60, 0x64, 0x11, 0x6c, 0x80, 0x04, 0x83, 0x5b, 0x01, 0x62, 0x62, 0x13, 0x7b, 0xac, 0x15, 0x92, 0x02, 0x62, 0xbe, 0x5a, 0x61, 0x1a, 0x01, 0x63, 0x2d, 0xe3, 0x0e, 0xe3, 0xe5, 0x13, 0x19, 0x13, 0x62, 0x39, 0x01, 0x00, 0x05, 0x8a, 0x62, 0x39, 0x02, 0x00, 0x02, 0x8a, 0xe1, 0x5d, 0x2b, 0x64, 
+0x00, 0x23, 0x05, 0x9e, 0xe1, 0x5d, 0x00, 0x62, 0xbe, 0x5a, 0x61, 0x1a, 0x2d, 0xe3, 0x19, 0x00, 0x19, 0x07, 0x16, 0x62, 0x19, 0x12, 0xfa, 0x48, 0xdd, 0x89, 0x19, 0x06, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x81, 0x5d, 0x00, 0x63, 0x19, 0x03, 0x5e, 0x00, 0x5e, 0x05, 0xa3, 0x59, 0x01, 0x62, 0x22, 0x11, 0x79, 0xac, 0x04, 0x90, 0x62, 0x3a, 0x03, 0x00, 0xf5, 0x89, 0x06, 0x9e, 0x19, 0x13, 0x04, 0x8a, 0x01, 0x62, 0xbe, 0x5a, 0x61, 0x1a, 0x2d, 0xe3, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x58, 0x3a, 0x38, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x1e, 0x5b, 0x9e, 0x59, 0x61, 0x1a, 0x00, 0x65, 0x25, 0x11, 0x02, 0x88, 0x19, 0x10, 0x06, 0x9e, 0x9e, 0x59, 0x61, 0x1a, 0x01, 0x65, 0x25, 0x11, 0x01, 0x88, 0x5e, 0x10, 0x00, 0x3c, 0x85, 0x78, 
+0x40, 0x23, 0x60, 0x11, 0x83, 0x5a, 0xff, 0x63, 0xff, 0x6b, 0xbe, 0x5b, 0x60, 0x1a, 0x00, 0x63, 0x5b, 0x48, 0x14, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xff, 0x7f, 0xbe, 0x5d, 0x60, 0x1a, 0x41, 0x59, 0x22, 0x01, 0x22, 0x01, 0x22, 0x01, 0x22, 0x01, 0x22, 0x01, 0x22, 0x01, 0x22, 0x01, 0x00, 0x62, 0x10, 0x6a, 0x3a, 0x48, 0x02, 0x9c, 0x00, 0x61, 0x10, 0x69, 0x5e, 0x14, 0x19, 0x14, 0x83, 0x5a, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0x7f, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x19, 0x04, 0x83, 0x5a, 0x22, 0x01, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xbf, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x5e, 0x14, 0x83, 0x5a, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xff, 0xfe, 0xbe, 0x5d, 0x60, 0x1a, 0x5e, 0x04, 0xd3, 0xe2, 
+0x80, 0x23, 0x19, 0x04, 0x83, 0x5a, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xdf, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x5e, 0x04, 0x83, 0x5a, 0x22, 0x01, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xf7, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x19, 0x04, 0x83, 0x5a, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xff, 0xf7, 0xbe, 0x5d, 0x60, 0x1a, 0x19, 0x14, 0x1a, 0x14, 0x83, 0x5a, 0x22, 0x01, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xef, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x19, 0x14, 0x83, 0x5a, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xff, 0xfb, 0xbe, 0x5d, 0x60, 0x1a, 0x19, 0x04, 0x5e, 0x04, 0x83, 0x5a, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0x78, 0xcd, 
+0xc0, 0x23, 0xa4, 0x3d, 0xfb, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x19, 0x04, 0x83, 0x5a, 0x22, 0x01, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xfd, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x5e, 0x04, 0x83, 0x5a, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xff, 0xfd, 0xbe, 0x5d, 0x60, 0x1a, 0x5e, 0x14, 0x19, 0x04, 0x83, 0x5a, 0x22, 0x01, 0x5b, 0x48, 0x06, 0x88, 0x9e, 0x5d, 0x60, 0x1a, 0xa4, 0x3d, 0xfe, 0xff, 0xbe, 0x5d, 0x60, 0x1a, 0x1e, 0x58, 0x08, 0x65, 0x21, 0x58, 0x00, 0x61, 0x1c, 0x5d, 0x01, 0x59, 0x3e, 0x58, 0x00, 0x65, 0xbe, 0x5d, 0x61, 0x1a, 0x9e, 0x5d, 0x60, 0x1a, 0x35, 0xac, 0x02, 0x92, 0x45, 0xac, 0x0d, 0x90, 0x0d, 0xac, 0x02, 0x92, 0x4d, 0xac, 0x09, 0x90, 0x25, 0xac, 0x02, 0x92, 0x55, 0xac, 0x05, 0x90, 0x1d, 0xac, 0x06, 0x92, 0x08, 0x8d, 
+0x00, 0x24, 0x5d, 0xac, 0x01, 0x90, 0x03, 0x9e, 0x01, 0x65, 0xbe, 0x5d, 0x61, 0x1a, 0x9e, 0x5c, 0x02, 0x1d, 0x19, 0x04, 0xbe, 0x5c, 0x02, 0x1d, 0x00, 0x3c, 0x48, 0x0e, 0x83, 0x5b, 0x9e, 0x5a, 0x1d, 0x1f, 0x18, 0x12, 0x07, 0x88, 0x9e, 0x5d, 0x61, 0x1a, 0x05, 0xac, 0x0c, 0x92, 0x61, 0x12, 0x7a, 0xac, 0x09, 0x90, 0x3b, 0x5c, 0x01, 0x62, 0xbe, 0x5a, 0x62, 0x1a, 0x9e, 0x5a, 0x03, 0x1d, 0x19, 0x02, 0xbe, 0x5a, 0x03, 0x1d, 0x3e, 0x5b, 0x19, 0x13, 0x00, 0x62, 0x62, 0x14, 0x0a, 0x89, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x72, 0x62, 0x19, 0x6a, 0x86, 0x63, 0x19, 0x6b, 0x00, 0x60, 0xbe, 0x58, 0x71, 0x1a, 0x00, 0x67, 0x00, 0x60, 0x9e, 0x59, 0x58, 0x1a, 0x38, 0x48, 0xd6, 0xa1, 
+0x40, 0x24, 0x33, 0x8a, 0x19, 0x11, 0x27, 0x38, 0x73, 0x24, 0x40, 0x04, 0x83, 0x5d, 0x48, 0x64, 0x1d, 0x6c, 0x85, 0x04, 0x83, 0x5d, 0x15, 0x66, 0xbe, 0x48, 0x09, 0x82, 0x19, 0x04, 0x83, 0x5d, 0xbe, 0x48, 0x05, 0x82, 0x1a, 0x14, 0x83, 0x5d, 0xbe, 0x48, 0x01, 0x82, 0x13, 0x9e, 0x60, 0x04, 0x83, 0x5d, 0x48, 0x64, 0x1d, 0x6c, 0x85, 0x04, 0x90, 0x3c, 0xb8, 0x00, 0x83, 0x5d, 0x15, 0x66, 0xbe, 0x48, 0x10, 0x82, 0x19, 0x04, 0x83, 0x5d, 0xbe, 0x48, 0x0c, 0x82, 0x1a, 0x14, 0x83, 0x5d, 0xbe, 0x48, 0x08, 0x82, 0x19, 0x07, 0xbe, 0x5f, 0x71, 0x1a, 0x72, 0x65, 0x1a, 0x6d, 0xa7, 0x06, 0x19, 0x16, 0x1b, 0x5e, 0x1a, 0x38, 0x1a, 0x38, 0x19, 0x00, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x00, 0x67, 0xdf, 0x60, 0x1e, 0x68, 0x67, 0xd8, 
+0x80, 0x24, 0x2f, 0x39, 0x84, 0x24, 0xfd, 0x58, 0x1a, 0x38, 0x1a, 0x38, 0x00, 0x67, 0x50, 0x65, 0x04, 0x6d, 0x9e, 0x5c, 0xb8, 0x00, 0x9e, 0x5e, 0xb9, 0x00, 0x86, 0x04, 0x19, 0x14, 0x87, 0x38, 0x92, 0x24, 0xfd, 0x5d, 0x1a, 0x38, 0x1a, 0x38, 0xbe, 0x5f, 0xdb, 0x1e, 0xbe, 0x5f, 0xdc, 0x1e, 0x9e, 0x58, 0x4d, 0x04, 0x9e, 0x59, 0x4f, 0x04, 0x01, 0x00, 0x02, 0x3a, 0xb0, 0x00, 0x01, 0x98, 0x3a, 0x38, 0x00, 0x61, 0x9e, 0x58, 0x4d, 0x04, 0x9e, 0x5a, 0xdd, 0x1e, 0x1c, 0x5a, 0x02, 0x39, 0x20, 0x00, 0x01, 0x98, 0x20, 0x60, 0x00, 0x61, 0x01, 0x62, 0x00, 0x67, 0x50, 0x65, 0x04, 0x6d, 0x48, 0x63, 0x1d, 0x6b, 0x9e, 0x5c, 0xb8, 0x00, 0x19, 0x14, 0x87, 0x38, 0xcd, 0x24, 0x65, 0x5c, 0x98, 0x48, 0x06, 0x80, 0x5b, 0x5d, 0xbe, 0x5a, 0xdb, 0x1e, 0x19, 0x01, 0x01, 0x67, 0x0e, 0x9e, 0x07, 0xac, 0xaf, 0x52, 
+0xc0, 0x24, 0x0c, 0x90, 0x1e, 0x5d, 0x40, 0x3d, 0xdf, 0x1e, 0x19, 0x15, 0x50, 0x48, 0x08, 0x00, 0x01, 0x8a, 0x3b, 0x5d, 0x3e, 0x5d, 0x00, 0x61, 0x00, 0x67, 0x19, 0x02, 0x19, 0x05, 0x1e, 0x5d, 0x40, 0x3d, 0xdf, 0x1e, 0x19, 0x15, 0x50, 0x48, 0x08, 0x00, 0x01, 0x8a, 0x3b, 0x5d, 0x3e, 0x5d, 0x00, 0x61, 0x9e, 0x58, 0x4f, 0x04, 0x9e, 0x5a, 0xdd, 0x1e, 0x1c, 0x5a, 0x02, 0x39, 0x20, 0x00, 0x01, 0x98, 0x20, 0x60, 0x00, 0x61, 0x01, 0x62, 0x00, 0x67, 0x50, 0x65, 0x04, 0x6d, 0x48, 0x63, 0x1d, 0x6b, 0x9e, 0x5c, 0xb8, 0x00, 0xa4, 0x05, 0x64, 0x03, 0x9e, 0x5c, 0xb9, 0x00, 0x19, 0x14, 0x87, 0x38, 0x0d, 0x25, 0x65, 0x5c, 0x98, 0x48, 0x06, 0x80, 0x5b, 0x5d, 0xbe, 0x5a, 0xdc, 0x1e, 0x19, 0x01, 0x01, 0x67, 0x13, 0x9e, 0x07, 0xac, 0x11, 0x90, 0x1e, 0x5d, 0x1e, 0x5e, 0x40, 0x3d, 0xdf, 0x1e, 0xc9, 0x52, 
+0x00, 0x25, 0x19, 0x15, 0x50, 0x48, 0x08, 0x00, 0x04, 0x8a, 0xa3, 0x5e, 0xfe, 0x59, 0xc1, 0x06, 0xdb, 0x5d, 0x3e, 0x5e, 0x3e, 0x5d, 0x00, 0x61, 0x00, 0x67, 0x19, 0x02, 0x19, 0x05, 0x1e, 0x5d, 0x1e, 0x5e, 0x40, 0x3d, 0xdf, 0x1e, 0x19, 0x15, 0x50, 0x48, 0x08, 0x00, 0x04, 0x8a, 0xa3, 0x5e, 0xfe, 0x59, 0xc1, 0x06, 0xdb, 0x5d, 0x3e, 0x5e, 0x3e, 0x5d, 0x00, 0x60, 0xbe, 0x58, 0xe8, 0x1e, 0xbe, 0x58, 0xe7, 0x1e, 0xdf, 0x62, 0x1e, 0x6a, 0x01, 0x67, 0xef, 0x38, 0x2e, 0x25, 0x45, 0x5b, 0x64, 0x3b, 0xff, 0x00, 0x78, 0x48, 0x02, 0x96, 0x61, 0x58, 0xe1, 0x5c, 0x19, 0x07, 0x1a, 0x38, 0xbe, 0x5c, 0xe7, 0x1e, 0xdf, 0x62, 0x1e, 0x6a, 0x01, 0x67, 0x00, 0x60, 0xef, 0x38, 0x40, 0x25, 0x45, 0x5b, 0xfe, 0x5b, 0x64, 0x3b, 0xff, 0x00, 0x78, 0x48, 0x02, 0x96, 0x61, 0x58, 0xe1, 0x5d, 0x19, 0x07, 0x33, 0xd5, 
+0x40, 0x25, 0x1a, 0x38, 0xbe, 0x5d, 0xe8, 0x1e, 0x7a, 0x60, 0x02, 0x68, 0x50, 0x61, 0x04, 0x69, 0x39, 0x62, 0x47, 0x38, 0x4d, 0x25, 0x23, 0x5b, 0x7b, 0x58, 0x19, 0x01, 0x19, 0x00, 0x3a, 0x38, 0x92, 0x62, 0xf8, 0x6a, 0x00, 0x64, 0x17, 0x63, 0x67, 0x38, 0x57, 0x25, 0x45, 0x5b, 0x83, 0x04, 0x1a, 0x38, 0xfe, 0x5c, 0x84, 0x3c, 0x00, 0xff, 0x9e, 0x5f, 0x34, 0x1d, 0xe0, 0x3b, 0x30, 0x1d, 0x9e, 0x59, 0xb5, 0x00, 0x24, 0x29, 0x3b, 0x5b, 0x30, 0x63, 0x1d, 0x6b, 0x00, 0x60, 0xbe, 0x58, 0x36, 0x1d, 0x04, 0x65, 0x19, 0x15, 0xa7, 0x38, 0x70, 0x25, 0x63, 0x5e, 0xc4, 0x3e, 0xff, 0x00, 0x06, 0x00, 0x19, 0x03, 0x19, 0x05, 0x00, 0x61, 0x1c, 0x5d, 0xbe, 0x58, 0x35, 0x1d, 0x30, 0x63, 0x1d, 0x6b, 0x04, 0x65, 0x19, 0x15, 0xa7, 0x38, 0x81, 0x25, 0x63, 0x5e, 0xc4, 0x3e, 0x00, 0xff, 0xfe, 0x5e, 0x97, 0xe9, 
+0x80, 0x25, 0x06, 0x00, 0x19, 0x03, 0x19, 0x05, 0x00, 0x61, 0x1c, 0x5d, 0x01, 0x5b, 0xbe, 0x58, 0xbc, 0x1d, 0x9e, 0x58, 0x35, 0x1d, 0x19, 0x07, 0xe2, 0x3a, 0x04, 0x00, 0x01, 0x88, 0x00, 0x67, 0xbe, 0x5f, 0x34, 0x1d, 0x01, 0x61, 0x9e, 0x5a, 0xb1, 0x04, 0x42, 0x3f, 0x01, 0x00, 0x11, 0x8a, 0x01, 0x61, 0x02, 0x3f, 0x04, 0x00, 0x0d, 0x9a, 0x04, 0x61, 0x02, 0x3f, 0x06, 0x00, 0x09, 0x9a, 0x02, 0x61, 0x02, 0x3f, 0x08, 0x00, 0x05, 0x9a, 0x03, 0x61, 0x02, 0x3f, 0x0a, 0x00, 0x01, 0x9a, 0x01, 0x61, 0xbe, 0x59, 0x36, 0x1d, 0x1a, 0x38, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x00, 0x63, 0x00, 0x65, 0x9c, 0x60, 0x1e, 0x68, 0x9e, 0x59, 0xb8, 0x00, 0x19, 0x11, 0x27, 0x38, 0xc1, 0x25, 0x03, 0x5a, 0x5b, 0x48, 0x01, 0x96, 0x41, 0x5b, 0xce, 0x09, 
+0xc0, 0x25, 0x19, 0x00, 0x1a, 0x38, 0xbe, 0x5b, 0x60, 0x1e, 0x9e, 0x59, 0xb9, 0x00, 0x19, 0x11, 0x27, 0x38, 0xce, 0x25, 0x03, 0x5a, 0x5d, 0x48, 0x01, 0x96, 0x41, 0x5d, 0x19, 0x00, 0x1a, 0x38, 0xbe, 0x5d, 0x5f, 0x1e, 0x10, 0x64, 0x65, 0x02, 0x50, 0x48, 0x00, 0x01, 0x0b, 0x80, 0x61, 0x58, 0x7d, 0x48, 0x01, 0x98, 0xa1, 0x58, 0x01, 0x5c, 0x00, 0x61, 0x07, 0x62, 0x82, 0x40, 0x0a, 0x62, 0x1c, 0x5a, 0x01, 0x5c, 0xbe, 0x5c, 0x61, 0x1e, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0x01, 0x00, 0x10, 0x48, 0x05, 0x00, 0x18, 0x3e, 0x4f, 0x27, 0x9e, 0x58, 0xdb, 0x1e, 0x10, 0x48, 0x02, 0x00, 0x18, 0x3e, 0x4f, 0x27, 0x9e, 0x59, 0xdc, 0x1e, 0x30, 0x48, 0x02, 0x00, 0x18, 0x3e, 0x4f, 0x27, 0x15, 0x0e, 
+0x00, 0x26, 0x9e, 0x58, 0x45, 0x04, 0x02, 0x38, 0x50, 0x01, 0x3d, 0x98, 0xdf, 0x60, 0x1e, 0x68, 0x05, 0x59, 0x24, 0x3a, 0xff, 0x00, 0xfe, 0x59, 0x24, 0x3b, 0xff, 0x00, 0x43, 0x06, 0x03, 0x59, 0x24, 0x3c, 0xff, 0x00, 0xfe, 0x59, 0x24, 0x3d, 0xff, 0x00, 0x85, 0x07, 0xc7, 0x00, 0x38, 0x10, 0x2a, 0x98, 0xd0, 0x48, 0x06, 0x00, 0x27, 0x98, 0xf0, 0x48, 0x06, 0x00, 0x24, 0x98, 0x45, 0x00, 0x10, 0x48, 0x06, 0x00, 0x20, 0x98, 0x64, 0x00, 0x10, 0x48, 0x06, 0x00, 0x1c, 0x98, 0x9e, 0x58, 0x4d, 0x04, 0x9e, 0x59, 0x4f, 0x04, 0x19, 0x48, 0x01, 0x98, 0x21, 0x58, 0x9e, 0x59, 0x44, 0x04, 0x19, 0x48, 0x10, 0x80, 0x9e, 0x58, 0xf1, 0x04, 0x19, 0x10, 0x04, 0x88, 0x9e, 0x58, 0x8a, 0x04, 0x1a, 0x10, 0x09, 0x98, 0x9e, 0x58, 0xf2, 0x04, 0x19, 0x10, 0x04, 0x88, 0x9e, 0x58, 0x8b, 0x04, 0x1a, 0x10, 0x1d, 0x27, 
+0x40, 0x26, 0x01, 0x98, 0xfc, 0x9e, 0x9e, 0x59, 0x4e, 0x04, 0x30, 0x48, 0x00, 0x00, 0x8a, 0x8a, 0x9e, 0x59, 0x4e, 0x04, 0x30, 0x48, 0x23, 0x00, 0x85, 0x8a, 0x9e, 0x59, 0x4c, 0x04, 0x30, 0x48, 0x00, 0x00, 0x80, 0x8a, 0x9e, 0x59, 0x4c, 0x04, 0x30, 0x48, 0x15, 0x00, 0x7b, 0x8a, 0x9e, 0x58, 0x46, 0x04, 0x9e, 0x59, 0x47, 0x04, 0x01, 0x00, 0x02, 0x38, 0x40, 0x00, 0x08, 0x98, 0x9e, 0x58, 0xdb, 0x1e, 0x9e, 0x59, 0xdc, 0x1e, 0x01, 0x00, 0x02, 0x39, 0x02, 0x00, 0x12, 0x8a, 0x9e, 0x58, 0x46, 0x04, 0x38, 0x10, 0x67, 0x98, 0x9e, 0x58, 0xdb, 0x1e, 0x9e, 0x59, 0xdc, 0x1e, 0x01, 0x00, 0x1b, 0x10, 0x60, 0x88, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0x01, 0x10, 0x5a, 0x8a, 0x28, 0x9e, 0x80, 0x60, 0x01, 0x68, 0xbe, 0x58, 0x20, 0x1d, 0x9e, 0x58, 0x4d, 0x04, 0x9e, 0x59, 0x4f, 0x04, 0xd4, 0xd9, 
+0x80, 0x26, 0x19, 0x48, 0x01, 0x9a, 0x21, 0x58, 0xbe, 0x58, 0x14, 0x1f, 0x51, 0xe7, 0x01, 0x60, 0x01, 0x61, 0xb8, 0xe7, 0x9e, 0x58, 0x0d, 0x1f, 0x18, 0x10, 0xb1, 0x8a, 0x00, 0x63, 0xbe, 0x5b, 0x0e, 0x1f, 0xbe, 0x5b, 0x10, 0x1f, 0x9e, 0x5b, 0xb8, 0x00, 0x19, 0x13, 0xbe, 0x5b, 0x0f, 0x1f, 0x9e, 0x5b, 0xb9, 0x00, 0x19, 0x13, 0xbe, 0x5b, 0x11, 0x1f, 0x01, 0x60, 0x01, 0x61, 0x77, 0xe7, 0x9e, 0x9e, 0x9e, 0x58, 0x46, 0x04, 0x9e, 0x59, 0x47, 0x04, 0x19, 0x48, 0x98, 0x98, 0x68, 0x60, 0x01, 0x68, 0xbe, 0x58, 0x20, 0x1d, 0x76, 0xde, 0x9e, 0x58, 0x4d, 0x04, 0x9e, 0x59, 0x4f, 0x04, 0x19, 0x48, 0x01, 0x9a, 0x21, 0x58, 0x08, 0x58, 0xbe, 0x58, 0x14, 0x1f, 0x00, 0x63, 0xbe, 0x5b, 0x0e, 0x1f, 0xbe, 0x5b, 0x10, 0x1f, 0x9e, 0x5b, 0xb8, 0x00, 0x19, 0x13, 0xbe, 0x5b, 0x0f, 0x1f, 0x9e, 0x5b, 0xd0, 0x0a, 
+0xc0, 0x26, 0xb9, 0x00, 0x19, 0x13, 0xbe, 0x5b, 0x11, 0x1f, 0x01, 0x60, 0x01, 0x61, 0x77, 0xe7, 0x01, 0x60, 0x02, 0x61, 0x77, 0xe7, 0x02, 0x60, 0x01, 0x61, 0x77, 0xe7, 0x02, 0x60, 0x02, 0x61, 0x77, 0xe7, 0x6d, 0x9e, 0x0c, 0x60, 0xbe, 0x58, 0xdd, 0x1e, 0x7d, 0xe4, 0xdf, 0x60, 0x1e, 0x68, 0x05, 0x59, 0x24, 0x3a, 0xff, 0x00, 0xfe, 0x59, 0x24, 0x3b, 0xff, 0x00, 0x43, 0x06, 0x03, 0x59, 0x24, 0x3c, 0xff, 0x00, 0xfe, 0x59, 0x24, 0x3d, 0xff, 0x00, 0x85, 0x07, 0xd0, 0x48, 0x0f, 0x00, 0x04, 0x98, 0xf0, 0x48, 0x0f, 0x00, 0x01, 0x98, 0x04, 0x9e, 0x04, 0x60, 0xbe, 0x58, 0xdd, 0x1e, 0x7d, 0xe4, 0x9e, 0x58, 0xdb, 0x1e, 0x9e, 0x59, 0xdc, 0x1e, 0x01, 0x00, 0x1a, 0x10, 0x0b, 0x88, 0x60, 0x60, 0xbe, 0x58, 0x20, 0x1d, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0x01, 0x00, 0x1c, 0x10, 0xc5, 0x27, 
+0x00, 0x27, 0x4e, 0x88, 0x3c, 0x9e, 0x66, 0x60, 0xbe, 0x58, 0x20, 0x1d, 0x70, 0xe8, 0x01, 0x60, 0x01, 0x61, 0xb8, 0xe7, 0x9e, 0x58, 0x0d, 0x1f, 0x1e, 0x10, 0x03, 0x80, 0x01, 0x60, 0x01, 0x61, 0x77, 0xe7, 0x01, 0x60, 0x02, 0x61, 0xb8, 0xe7, 0x9e, 0x58, 0x0d, 0x1f, 0x1e, 0x10, 0x03, 0x80, 0x01, 0x60, 0x02, 0x61, 0x77, 0xe7, 0x02, 0x60, 0x01, 0x61, 0xb8, 0xe7, 0x9e, 0x58, 0x0d, 0x1f, 0x1e, 0x10, 0x03, 0x80, 0x02, 0x60, 0x01, 0x61, 0x77, 0xe7, 0x02, 0x60, 0x02, 0x61, 0xb8, 0xe7, 0x9e, 0x58, 0x0d, 0x1f, 0x1e, 0x10, 0x03, 0x80, 0x02, 0x60, 0x02, 0x61, 0x77, 0xe7, 0x98, 0xe2, 0x06, 0x71, 0x09, 0xac, 0x0c, 0x92, 0x01, 0xac, 0x0a, 0x92, 0x51, 0xac, 0x08, 0x92, 0x9e, 0x58, 0x20, 0x1d, 0x00, 0x61, 0x19, 0x48, 0x03, 0x8a, 0x01, 0x60, 0xbe, 0x58, 0x44, 0x1a, 0x9e, 0x58, 0x8a, 0x04, 0x5e, 0x57, 
+0x40, 0x27, 0x10, 0x48, 0x0a, 0x00, 0x05, 0x98, 0x9e, 0x58, 0x8b, 0x04, 0x10, 0x48, 0x0a, 0x00, 0x03, 0x9c, 0x01, 0x60, 0xbe, 0x58, 0x1d, 0x1f, 0x98, 0xe2, 0x00, 0x60, 0xbe, 0x58, 0x1d, 0x1f, 0x1a, 0x38, 0x3a, 0x38, 0x9e, 0x58, 0xb8, 0x00, 0x1b, 0x10, 0x7a, 0x61, 0x02, 0x69, 0x60, 0xe7, 0x9e, 0x58, 0xb9, 0x00, 0x1b, 0x10, 0x7a, 0x61, 0x02, 0x69, 0x30, 0x39, 0xb8, 0x00, 0x60, 0xe7, 0x3a, 0x38, 0x19, 0x01, 0x00, 0x66, 0x07, 0x38, 0x75, 0x27, 0x23, 0x5a, 0x18, 0x12, 0x08, 0x8a, 0x18, 0x16, 0x04, 0x88, 0x21, 0x5b, 0x19, 0x13, 0x01, 0x64, 0x9b, 0x5b, 0x01, 0x66, 0x06, 0x9e, 0x18, 0x16, 0x04, 0x8a, 0x21, 0x5b, 0x01, 0x64, 0x9b, 0x5b, 0x00, 0x66, 0x19, 0x01, 0x3a, 0x38, 0xbe, 0x58, 0x82, 0x1d, 0xbe, 0x59, 0x83, 0x1d, 0x9e, 0x5e, 0x10, 0x1f, 0x9e, 0x5f, 0x0e, 0x1f, 0x7a, 0x63, 0x57, 0x28, 
+0x80, 0x27, 0x02, 0x6b, 0x67, 0x03, 0x63, 0x5b, 0x9e, 0x59, 0x82, 0x1d, 0x79, 0x48, 0x26, 0x88, 0x48, 0x63, 0x1d, 0x6b, 0x67, 0x03, 0x63, 0x5b, 0x18, 0x13, 0x20, 0x8a, 0x7a, 0x62, 0x02, 0x6a, 0x50, 0x3a, 0xb8, 0x00, 0x46, 0x02, 0x43, 0x5a, 0x9e, 0x59, 0x83, 0x1d, 0x59, 0x48, 0x16, 0x88, 0x48, 0x62, 0x1d, 0x6a, 0x50, 0x3a, 0xb8, 0x00, 0x46, 0x02, 0x43, 0x5a, 0x00, 0x61, 0x61, 0x58, 0x43, 0x40, 0x9e, 0x5d, 0x14, 0x1f, 0x1c, 0x5d, 0x01, 0x5d, 0x9e, 0x5c, 0xb8, 0x00, 0x00, 0x61, 0xe1, 0x58, 0x86, 0x48, 0x48, 0x64, 0x0e, 0x6c, 0x80, 0x04, 0xbb, 0x5c, 0x19, 0x07, 0x9e, 0x5a, 0x0f, 0x1f, 0xfa, 0x48, 0xcd, 0x9d, 0x19, 0x06, 0x9e, 0x5a, 0x11, 0x1f, 0xda, 0x48, 0xc6, 0x9d, 0x3a, 0x38, 0x9e, 0x5b, 0xb8, 0x00, 0xbe, 0x5b, 0x0e, 0x1f, 0x00, 0x63, 0xbe, 0x5b, 0x0f, 0x1f, 0x9e, 0x5b, 0x82, 0xeb, 
+0xc0, 0x27, 0xb9, 0x00, 0xbe, 0x5b, 0x10, 0x1f, 0x00, 0x63, 0xbe, 0x5b, 0x11, 0x1f, 0x00, 0x63, 0xbe, 0x5b, 0x0d, 0x1f, 0x01, 0x63, 0xbe, 0x5b, 0x12, 0x1f, 0xbe, 0x5b, 0x13, 0x1f, 0x00, 0x63, 0x00, 0x65, 0xbe, 0x58, 0x00, 0x1d, 0xbe, 0x59, 0x04, 0x1d, 0x00, 0x66, 0x00, 0x67, 0x7a, 0x62, 0x02, 0x6a, 0x47, 0x02, 0x43, 0x5a, 0x9e, 0x59, 0x00, 0x1d, 0x59, 0x48, 0x61, 0x88, 0x7a, 0x62, 0x02, 0x6a, 0x50, 0x3a, 0xb8, 0x00, 0x46, 0x02, 0x43, 0x5a, 0x9e, 0x59, 0x04, 0x1d, 0x59, 0x48, 0x57, 0x88, 0x48, 0x62, 0x1d, 0x6a, 0x47, 0x02, 0x43, 0x5a, 0x9e, 0x59, 0x12, 0x1f, 0x59, 0x48, 0x02, 0x9a, 0xbe, 0x5a, 0x12, 0x1f, 0x48, 0x62, 0x1d, 0x6a, 0x50, 0x3a, 0xb8, 0x00, 0x46, 0x02, 0x43, 0x5a, 0x9e, 0x59, 0x13, 0x1f, 0x59, 0x48, 0x02, 0x9a, 0xbe, 0x5a, 0x13, 0x1f, 0x9e, 0x5c, 0xb8, 0x00, 0xb3, 0xe8, 
+0x00, 0x28, 0x00, 0x61, 0xe1, 0x58, 0x86, 0x48, 0x32, 0x64, 0x16, 0x6c, 0x9e, 0x5d, 0x20, 0x1d, 0xb0, 0x48, 0x66, 0x00, 0x02, 0x88, 0x48, 0x64, 0x0e, 0x6c, 0x80, 0x04, 0x83, 0x59, 0x79, 0xac, 0x2f, 0x92, 0x10, 0x60, 0x38, 0x48, 0x2c, 0x9a, 0x9e, 0x58, 0x0e, 0x1f, 0xf8, 0x48, 0x07, 0x98, 0xbe, 0x5f, 0x0e, 0x1f, 0x9e, 0x58, 0x0d, 0x1f, 0x19, 0x00, 0xbe, 0x58, 0x0d, 0x1f, 0x9e, 0x58, 0x0f, 0x1f, 0xf8, 0x48, 0x07, 0x80, 0xbe, 0x5f, 0x0f, 0x1f, 0x9e, 0x58, 0x0d, 0x1f, 0x19, 0x00, 0xbe, 0x58, 0x0d, 0x1f, 0x9e, 0x58, 0x10, 0x1f, 0xd8, 0x48, 0x07, 0x98, 0xbe, 0x5e, 0x10, 0x1f, 0x9e, 0x58, 0x0d, 0x1f, 0x19, 0x00, 0xbe, 0x58, 0x0d, 0x1f, 0x9e, 0x58, 0x11, 0x1f, 0xd8, 0x48, 0x07, 0x80, 0xbe, 0x5e, 0x11, 0x1f, 0x9e, 0x58, 0x0d, 0x1f, 0x19, 0x00, 0xbe, 0x58, 0x0d, 0x1f, 0x19, 0x07, 0xf7, 0xe6, 
+0x40, 0x28, 0x9e, 0x5a, 0xb8, 0x00, 0x19, 0x12, 0xfa, 0x48, 0x91, 0x9d, 0x19, 0x06, 0x9e, 0x5a, 0xb9, 0x00, 0x19, 0x12, 0xda, 0x48, 0x8a, 0x9d, 0x9e, 0x58, 0x12, 0x1f, 0x9e, 0x59, 0x13, 0x1f, 0x38, 0x48, 0x01, 0x98, 0x21, 0x58, 0x9e, 0x5e, 0x4d, 0x04, 0x9e, 0x5f, 0x4f, 0x04, 0xc7, 0x06, 0xc2, 0x3e, 0x00, 0x06, 0x04, 0x80, 0x02, 0x39, 0x40, 0x01, 0x01, 0x98, 0x10, 0x60, 0x02, 0x39, 0x80, 0x03, 0x02, 0x80, 0x08, 0x59, 0x01, 0x00, 0x9e, 0x5e, 0x12, 0x1f, 0x9e, 0x5f, 0x13, 0x1f, 0xc7, 0x06, 0xc2, 0x3e, 0x00, 0x02, 0x02, 0x98, 0x08, 0x58, 0x08, 0x58, 0xbe, 0x58, 0x14, 0x1f, 0x3a, 0x38, 0x00, 0x62, 0x7a, 0x67, 0x02, 0x6f, 0x16, 0x60, 0xe5, 0x5c, 0x18, 0x14, 0x01, 0x88, 0x8b, 0xe8, 0x19, 0x02, 0x19, 0x10, 0x18, 0x10, 0xf8, 0x89, 0x00, 0x62, 0x7a, 0x67, 0x02, 0x6f, 0x16, 0x66, 0x1e, 0xda, 
+0x80, 0x28, 0xe6, 0x07, 0x24, 0x66, 0xe5, 0x5c, 0x18, 0x14, 0x01, 0x88, 0x98, 0xe8, 0x19, 0x02, 0x19, 0x16, 0x18, 0x16, 0xf8, 0x89, 0x3a, 0x38, 0x00, 0x64, 0x48, 0x63, 0x0e, 0x6b, 0x62, 0x03, 0x16, 0x65, 0x24, 0x66, 0x19, 0x16, 0xc7, 0x38, 0x96, 0x28, 0x9b, 0x5b, 0x65, 0x03, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x64, 0x16, 0x65, 0x48, 0x63, 0x0e, 0x6b, 0x00, 0x61, 0x00, 0x60, 0x45, 0x40, 0x03, 0x03, 0x16, 0x65, 0x19, 0x15, 0xa7, 0x38, 0xa6, 0x28, 0x9d, 0x5b, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0x48, 0x60, 0x1d, 0x68, 0x9c, 0x61, 0x1e, 0x69, 0x9e, 0x5b, 0x4c, 0x04, 0x70, 0x48, 0x00, 0x00, 0x0c, 0x8a, 0x9e, 0x5b, 0x4c, 0x04, 0x70, 0x48, 0x01, 0x00, 0x0f, 0x8a, 0x70, 0x48, 0x14, 0x00, 0x15, 0x8a, 0x70, 0x48, 0x15, 0x00, 0x1b, 0x8a, 0x23, 0x9e, 0x03, 0x00, 0x23, 0x01, 0x4f, 0x38, 0x53, 0xa0, 
+0xc0, 0x28, 0xc3, 0x28, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x23, 0x9e, 0x19, 0x13, 0x03, 0x00, 0x23, 0x01, 0x6f, 0x38, 0xcc, 0x28, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x1a, 0x9e, 0x19, 0x13, 0x03, 0x00, 0x23, 0x01, 0x4f, 0x38, 0xd5, 0x28, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x11, 0x9e, 0x1a, 0x13, 0x03, 0x00, 0x23, 0x01, 0x4f, 0x38, 0xde, 0x28, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x08, 0x9e, 0x1a, 0x13, 0x03, 0x00, 0x23, 0x01, 0x8f, 0x38, 0xe7, 0x28, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x48, 0x60, 0x1d, 0x68, 0x10, 0x38, 0xb8, 0x00, 0x9c, 0x61, 0x1e, 0x69, 0x30, 0x39, 0xb8, 0x00, 0x9e, 0x5b, 0x4e, 0x04, 0x70, 0x48, 0x00, 0x00, 0x0c, 0x8a, 0x9e, 0x5b, 0x4e, 0x04, 0x70, 0x48, 0x01, 0x00, 0x0f, 0x8a, 0x70, 0x48, 0x22, 0x00, 0x15, 0x8a, 0x70, 0x48, 0x23, 0x00, 0x1b, 0x8a, 0x3d, 0x49, 
+0x00, 0x29, 0x23, 0x9e, 0x03, 0x00, 0x23, 0x01, 0x4f, 0x38, 0x07, 0x29, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x23, 0x9e, 0x19, 0x13, 0x03, 0x00, 0x23, 0x01, 0x6f, 0x38, 0x10, 0x29, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x1a, 0x9e, 0x19, 0x13, 0x03, 0x00, 0x23, 0x01, 0x4f, 0x38, 0x19, 0x29, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x11, 0x9e, 0x1a, 0x13, 0x03, 0x00, 0x23, 0x01, 0x4f, 0x38, 0x22, 0x29, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x08, 0x9e, 0x1a, 0x13, 0x03, 0x00, 0x23, 0x01, 0x8f, 0x38, 0x2b, 0x29, 0x05, 0x5a, 0x5d, 0x59, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x00, 0x66, 0x00, 0x67, 0x9c, 0x63, 0x1e, 0x6b, 0x67, 0x03, 0x63, 0x5b, 0x18, 0x13, 0x24, 0x8a, 0x48, 0x62, 0x1d, 0x6a, 0xda, 0xc3, 
+0x40, 0x29, 0x50, 0x3a, 0xb8, 0x00, 0x46, 0x02, 0x43, 0x5a, 0x00, 0x61, 0x59, 0x48, 0x1b, 0x8a, 0x9c, 0x62, 0x1e, 0x6a, 0x50, 0x3a, 0xb8, 0x00, 0x46, 0x02, 0x43, 0x5a, 0x00, 0x61, 0x61, 0x58, 0x43, 0x40, 0x9e, 0x5d, 0x61, 0x1e, 0x1c, 0x5d, 0x01, 0x5d, 0x9e, 0x5c, 0xb8, 0x00, 0x00, 0x61, 0xe1, 0x58, 0x86, 0x48, 0x32, 0x64, 0x16, 0x6c, 0x80, 0x04, 0x48, 0x63, 0x0e, 0x6b, 0x60, 0x03, 0xbb, 0x5c, 0xbb, 0x5b, 0x0e, 0x9e, 0x9e, 0x5c, 0xb8, 0x00, 0x00, 0x61, 0xe1, 0x58, 0x86, 0x48, 0x32, 0x64, 0x16, 0x6c, 0x80, 0x04, 0x48, 0x63, 0x0e, 0x6b, 0x60, 0x03, 0x00, 0x65, 0xbb, 0x5c, 0xbb, 0x5b, 0x19, 0x07, 0x9e, 0x5a, 0xb8, 0x00, 0x19, 0x12, 0xfa, 0x48, 0xc2, 0x9d, 0x19, 0x06, 0x9e, 0x5a, 0xb9, 0x00, 0x19, 0x12, 0xda, 0x48, 0xbb, 0x9d, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x1a, 0x35, 
+0x80, 0x29, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0xe0, 0xac, 0x98, 0x3c, 0xbb, 0x2a, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x52, 0xb1, 0x39, 0xac, 0xfd, 0x93, 0x00, 0xbc, 0xbc, 0x00, 0x78, 0xa8, 0x70, 0xa8, 0x00, 0xbd, 0xbc, 0x00, 0x00, 0xbc, 0xb1, 0x00, 0x38, 0xa8, 0x70, 0xa8, 0x00, 0xbd, 0xb1, 0x00, 0x00, 0xbc, 0x1c, 0x00, 0x78, 0xaa, 0x00, 0xbd, 0x1c, 0x00, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x00, 0xbc, 0xb1, 0x00, 0x30, 0xaa, 0x47, 0xb4, 
+0xc0, 0x29, 0x00, 0xaa, 0x00, 0xbd, 0xb1, 0x00, 0x1d, 0xb0, 0x38, 0xa8, 0x40, 0xa8, 0x48, 0xa8, 0x9d, 0xb0, 0x9a, 0xaa, 0x00, 0x60, 0xbe, 0x58, 0x5e, 0x00, 0xbe, 0x58, 0x5f, 0x00, 0xbe, 0x58, 0x60, 0x00, 0xbe, 0x58, 0x61, 0x00, 0x3e, 0xb0, 0x70, 0xaa, 0x78, 0xaa, 0xbe, 0xb0, 0x30, 0xb0, 0xbe, 0x58, 0x2a, 0x1d, 0x31, 0xb0, 0xbe, 0x58, 0x2b, 0x1d, 0x33, 0xb0, 0xbe, 0x58, 0x2c, 0x1d, 0x34, 0xb0, 0xbe, 0x58, 0x2d, 0x1d, 0x00, 0x60, 0x00, 0xbd, 0x31, 0x00, 0x00, 0x60, 0x00, 0xbd, 0x05, 0x00, 0x00, 0xbc, 0x34, 0x00, 0x00, 0x60, 0x00, 0xbd, 0x34, 0x00, 0x00, 0xbc, 0x30, 0x00, 0x00, 0xaa, 0x08, 0xaa, 0x10, 0xaa, 0x18, 0xaa, 0x20, 0xaa, 0x28, 0xaa, 0x30, 0xaa, 0x38, 0xaa, 0x40, 0xaa, 0x48, 0xaa, 0x50, 0xaa, 0x58, 0xaa, 0x60, 0xaa, 0x68, 0xaa, 0x70, 0xaa, 0x78, 0xaa, 0x00, 0xbd, 0xdb, 0xd8, 
+0x00, 0x2a, 0x30, 0x00, 0x00, 0xbc, 0x04, 0x00, 0x00, 0xaa, 0x08, 0xaa, 0x10, 0xaa, 0x18, 0xaa, 0x20, 0xaa, 0x28, 0xaa, 0x30, 0xaa, 0x38, 0xaa, 0x40, 0xaa, 0x48, 0xaa, 0x50, 0xaa, 0x58, 0xaa, 0x60, 0xaa, 0x68, 0xaa, 0x70, 0xaa, 0x78, 0xaa, 0x00, 0xbd, 0x04, 0x00, 0x00, 0xbc, 0x33, 0x00, 0x00, 0xaa, 0x08, 0xaa, 0x10, 0xaa, 0x18, 0xaa, 0x20, 0xaa, 0x28, 0xaa, 0x30, 0xaa, 0x38, 0xaa, 0x40, 0xaa, 0x48, 0xaa, 0x50, 0xaa, 0x58, 0xaa, 0x60, 0xaa, 0x68, 0xaa, 0x70, 0xaa, 0x78, 0xaa, 0x00, 0xbd, 0x33, 0x00, 0x9e, 0x58, 0xc3, 0x1d, 0x06, 0x38, 0xaa, 0x55, 0x02, 0x8a, 0x42, 0xa9, 0x8b, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xab, 0x62, 0x60, 0xb1, 0x68, 0xef, 0xb0, 0x12, 0xa9, 0x1a, 0x38, 0x1a, 0x38, 0x00, 0xbc, 0x04, 0x00, 0x38, 0xa8, 0x00, 0xbd, 0x04, 0x00, 0x9e, 0x58, 0xfd, 0x6c, 
+0x40, 0x2a, 0x2a, 0x1d, 0xb0, 0xb0, 0x9e, 0x58, 0x2b, 0x1d, 0xb1, 0xb0, 0x9e, 0x58, 0x2c, 0x1d, 0xb3, 0xb0, 0x9e, 0x58, 0x2d, 0x1d, 0xb4, 0xb0, 0x9a, 0xac, 0xfe, 0x91, 0x9e, 0x58, 0x5e, 0x00, 0x02, 0x38, 0x54, 0x00, 0x03, 0x8a, 0xb2, 0xac, 0xfe, 0x93, 0x81, 0x9f, 0xe0, 0xac, 0x7f, 0x91, 0x9a, 0xaa, 0x00, 0x60, 0xbe, 0x58, 0xae, 0x00, 0x00, 0xbc, 0xb1, 0x00, 0x30, 0xa8, 0x00, 0xbd, 0xb1, 0x00, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0xbc, 0xbc, 0x00, 0x78, 0xaa, 0x70, 0xaa, 0x00, 0xbd, 0xbc, 0x00, 0x00, 0xbc, 0xb1, 0x00, 0x38, 0xaa, 0x70, 0xaa, 0x00, 0xbd, 0xb1, 0x00, 0x00, 0xbc, 0x1c, 0x00, 0x78, 0xa8, 0x00, 0xbd, 0x1c, 0x00, 0x3e, 0xb0, 0x70, 0xa8, 0x78, 0xa8, 0xbe, 0xb0, 0x19, 0x38, 0x8c, 0x50, 0x00, 0x60, 0xbe, 0x58, 0xe7, 0x00, 0x00, 0x60, 0x49, 0xca, 
+0x80, 0x2a, 0x05, 0x68, 0xbe, 0x58, 0xe9, 0x00, 0x18, 0x60, 0x08, 0x68, 0xbe, 0x58, 0xe8, 0x00, 0xea, 0x60, 0x2f, 0x68, 0x07, 0x38, 0x8d, 0x2a, 0x1a, 0x38, 0x1a, 0x38, 0x1a, 0x38, 0x1a, 0x38, 0xe5, 0xaa, 0x00, 0x61, 0xff, 0x65, 0xff, 0x6d, 0x0c, 0x62, 0x47, 0x63, 0xf8, 0x6b, 0x53, 0x64, 0xf8, 0x6c, 0x19, 0x12, 0x47, 0x38, 0x9d, 0x2a, 0x3d, 0x5b, 0xbd, 0x5c, 0x1a, 0x38, 0xc5, 0xfc, 0x1e, 0x59, 0x96, 0x61, 0xbe, 0x59, 0xfc, 0x1c, 0x3e, 0x59, 0x02, 0xc8, 0x9e, 0x58, 0xc4, 0x1d, 0x06, 0x38, 0x55, 0xaa, 0x02, 0x8a, 0x42, 0xa9, 0x0f, 0x9e, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xff, 0xa9, 0x9e, 0x58, 0xd6, 0x1a, 0xbe, 0x58, 0x47, 0x1e, 0xbe, 0x58, 0x04, 0xf8, 0x9e, 0x58, 0xda, 0x1a, 0xbe, 0x58, 0xb3, 0xf8, 0x8c, 0xed, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0xb1, 0x00, 0xb5, 0xef, 0xfb, 0xcd, 
+0xc0, 0x2a, 0x9e, 0x59, 0xbc, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x00, 0xbe, 0x58, 0xb1, 0x00, 0x19, 0x48, 0xf6, 0x81, 0xd5, 0xf0, 0x9e, 0x58, 0xe7, 0x00, 0x1a, 0x10, 0x08, 0x88, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x1d, 0x39, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0xb1, 0x00, 0xbe, 0x58, 0xb0, 0x00, 0x9e, 0x58, 0x36, 0x1d, 0x1d, 0x10, 0x04, 0x8a, 0x9e, 0x58, 0x36, 0x1d, 0x1b, 0x10, 0x20, 0x88, 0xe5, 0xac, 0x1e, 0x90, 0x9e, 0x58, 0xe8, 0x00, 0x02, 0x38, 0x00, 0x05, 0x09, 0x8a, 0x00, 0x60, 0x05, 0x68, 0xbe, 0x58, 0xe8, 0x00, 0x18, 0x60, 0x08, 0x68, 0xbe, 0x58, 0xe9, 0x00, 0x08, 0x9e, 0x18, 0x60, 0x08, 0x68, 0xbe, 0x58, 0xe8, 0x00, 0x00, 0x60, 0x05, 0x68, 0xbe, 0x58, 0xe9, 0x00, 0x9e, 0x58, 0xe7, 0x00, 0x02, 0x39, 0x01, 0x00, 0x25, 0xc9, 
+0x00, 0x2b, 0x03, 0x98, 0x19, 0x00, 0xbe, 0x58, 0xe7, 0x00, 0x9e, 0x5d, 0xd5, 0x00, 0x9e, 0x5b, 0xd4, 0x00, 0x9e, 0x5c, 0xd3, 0x00, 0x04, 0xac, 0x07, 0x90, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0xb5, 0xef, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x9e, 0x59, 0xbc, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x00, 0x01, 0x31, 0x06, 0x8a, 0xbe, 0x58, 0xb1, 0x00, 0xa8, 0x5d, 0x6c, 0x5b, 0x8c, 0x5c, 0xea, 0x9f, 0xd5, 0xf0, 0x9e, 0x58, 0xe7, 0x00, 0x1a, 0x10, 0x08, 0x88, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x1d, 0x39, 0x3a, 0x38, 0x3a, 0x38, 0x9e, 0x58, 0xe2, 0x19, 0x00, 0x61, 0x01, 0x30, 0x01, 0x88, 0x05, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0xae, 0x00, 0xd0, 0xaa, 0x3f, 0x9e, 0x9e, 0x58, 0xae, 0x00, 0x9e, 0x59, 0xc0, 0x00, 0x19, 0x48, 0x01, 0x82, 0xe9, 0x6a, 
+0x40, 0x2b, 0x38, 0x9e, 0x52, 0xb1, 0x39, 0xac, 0xfd, 0x93, 0xd0, 0xa8, 0x74, 0xb0, 0x78, 0xaa, 0xf4, 0xb0, 0x00, 0xbc, 0xb1, 0x00, 0x00, 0xa8, 0x00, 0xbd, 0xb1, 0x00, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x4f, 0xb0, 0x50, 0xa8, 0xcf, 0xb0, 0x9e, 0x58, 0xaf, 0x00, 0x9e, 0x59, 0xc5, 0x00, 0x19, 0x48, 0x03, 0x82, 0x74, 0x60, 0x82, 0xb0, 0xf7, 0x9f, 0x00, 0x60, 0xbe, 0x58, 0xaf, 0x00, 0x4f, 0xb0, 0x50, 0xaa, 0xcf, 0xb0, 0x00, 0xbc, 0xb1, 0x00, 0x00, 0xaa, 0x00, 0xbd, 0xb1, 0x00, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0x20, 0x60, 0x07, 0x38, 0x78, 0x2b, 0x1a, 0x38, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0x19, 0x38, 0x02, 0x48, 0xb9, 0xaa, 0x00, 0x9e, 0x3a, 0x38, 0x3a, 0x38, 0x38, 0x27, 
+0x80, 0x2b, 0x52, 0xb2, 0x3a, 0xac, 0xfd, 0x93, 0x78, 0xab, 0x5a, 0x62, 0xe1, 0x6a, 0xac, 0xb2, 0x00, 0x62, 0xff, 0x3f, 0x7a, 0x38, 0xac, 0xb2, 0x78, 0xa9, 0x3a, 0x38, 0x00, 0x62, 0xac, 0xb2, 0xff, 0x3f, 0x0f, 0x59, 0x3a, 0x38, 0x01, 0x62, 0xef, 0x3f, 0x99, 0x2b, 0x05, 0x5d, 0x25, 0x5c, 0xbc, 0x48, 0x02, 0x88, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x62, 0x3a, 0x38, 0x9e, 0x58, 0xbf, 0x00, 0x19, 0x10, 0x0f, 0x61, 0x27, 0x69, 0x9e, 0x5b, 0xe8, 0x00, 0x9e, 0x58, 0xd5, 0x00, 0x9e, 0x5a, 0xd4, 0x00, 0x9e, 0x5c, 0xd3, 0x00, 0xbe, 0x58, 0xed, 0x19, 0xbe, 0x5a, 0xee, 0x19, 0xbe, 0x5c, 0xef, 0x19, 0x00, 0x65, 0x9e, 0x5e, 0xe9, 0x19, 0xa0, 0xac, 0x26, 0x90, 0x9e, 0x5b, 0xe8, 0x00, 0x30, 0x67, 0x0b, 0x6f, 0xa6, 0x40, 0x60, 0x03, 0xe0, 0x07, 0x00, 0xa9, 0x9e, 0x58, 0xed, 0x19, 0x9e, 0x5a, 0xdb, 0x0f, 
+0xc0, 0x2b, 0xee, 0x19, 0x9e, 0x5c, 0xef, 0x19, 0x0c, 0x58, 0x4c, 0x5a, 0x8c, 0x5c, 0xbe, 0x58, 0xed, 0x19, 0xbe, 0x5a, 0xee, 0x19, 0xbe, 0x5c, 0xef, 0x19, 0x00, 0xad, 0x07, 0x92, 0xc2, 0x38, 0x01, 0x00, 0x07, 0x38, 0xd4, 0x2b, 0xe5, 0x59, 0x3d, 0x5b, 0x1a, 0x38, 0x19, 0x05, 0x9e, 0x58, 0xe8, 0x19, 0xb8, 0x48, 0xdb, 0x81, 0x29, 0x9e, 0x9e, 0x5b, 0xe8, 0x00, 0x30, 0x67, 0x0b, 0x6f, 0x65, 0x03, 0xe5, 0x07, 0x00, 0xa9, 0x9e, 0x58, 0xed, 0x19, 0x9e, 0x5a, 0xee, 0x19, 0x9e, 0x5c, 0xef, 0x19, 0x0c, 0x58, 0x4c, 0x5a, 0x8c, 0x5c, 0xbe, 0x58, 0xed, 0x19, 0xbe, 0x5a, 0xee, 0x19, 0xbe, 0x5c, 0xef, 0x19, 0x00, 0xad, 0x0b, 0x92, 0xc2, 0x38, 0x01, 0x00, 0x07, 0x38, 0xfd, 0x2b, 0xe3, 0x59, 0x3b, 0x5b, 0x70, 0x3b, 0xe8, 0x19, 0xf0, 0x3f, 0xe8, 0x19, 0x1a, 0x38, 0x19, 0x05, 0x9e, 0x58, 0xe7, 0x59, 
+0x00, 0x2c, 0xe8, 0x19, 0xb8, 0x48, 0xd8, 0x81, 0x00, 0x9e, 0x3a, 0x38, 0x52, 0xb1, 0x39, 0xac, 0xfd, 0x93, 0xfd, 0xab, 0xf5, 0xab, 0x1a, 0x38, 0x1a, 0x38, 0x02, 0xa9, 0x00, 0xbd, 0xb0, 0x00, 0x1a, 0x38, 0x1a, 0x38, 0x02, 0xab, 0x1a, 0x38, 0x7a, 0xad, 0xfe, 0x93, 0xfd, 0xa9, 0xf5, 0xa9, 0x3a, 0x38, 0x00, 0xbc, 0xaa, 0x00, 0x10, 0x48, 0x00, 0x00, 0x01, 0x8a, 0x42, 0xa9, 0x40, 0x60, 0x21, 0x71, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x0c, 0x60, 0x27, 0x71, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x0a, 0x60, 0x9e, 0x59, 0xe4, 0x19, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x14, 0x60, 0x9e, 0x59, 0xf0, 0x04, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x16, 0x60, 0x9e, 0x59, 0xba, 0x00, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x18, 0x60, 0x03, 0x68, 0x9e, 0x59, 0xbf, 0x00, 0x19, 0x48, 0x01, 0x8a, 0x91, 0xac, 
+0x40, 0x2c, 0x42, 0xa9, 0x16, 0x60, 0x9e, 0x59, 0xbb, 0x00, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x24, 0x60, 0x9e, 0x59, 0xbc, 0x00, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x9e, 0x58, 0xe7, 0x00, 0x10, 0x48, 0x02, 0x00, 0x01, 0x9a, 0x42, 0xa9, 0x9e, 0x58, 0x1b, 0x1f, 0x10, 0x48, 0xaa, 0x55, 0x01, 0x8a, 0x42, 0xa9, 0x9e, 0x58, 0x1c, 0x1f, 0x10, 0x48, 0x55, 0xaa, 0x01, 0x8a, 0x42, 0xa9, 0x9e, 0x58, 0x1b, 0x1f, 0x9e, 0x59, 0x1c, 0x1f, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x1a, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x00, 0x61, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x1b, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x00, 0x61, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x1c, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x00, 0x61, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0xff, 0xad, 0x01, 0x92, 0x42, 0xa9, 0x9e, 0x58, 0xe8, 0x00, 0x06, 0xb1, 
+0x80, 0x2c, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x9e, 0x58, 0x1f, 0x00, 0x10, 0x48, 0x01, 0x00, 0x01, 0x8a, 0x42, 0xa9, 0xed, 0xac, 0x5f, 0x92, 0x2c, 0x60, 0x1b, 0x68, 0x1f, 0x61, 0x1f, 0x69, 0x14, 0x62, 0x19, 0x12, 0x47, 0x38, 0x9a, 0x2c, 0x05, 0x5b, 0x70, 0x48, 0x1f, 0x1f, 0x01, 0x8a, 0x42, 0xa9, 0x1a, 0x38, 0x02, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xd5, 0x1a, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x0a, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xd8, 0x1a, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x05, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xd7, 0x1a, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x0e, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0x58, 0x01, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x0c, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0x57, 0x01, 0x0f, 0x53, 
+0xc0, 0x2c, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x09, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xba, 0x01, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0xaf, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xc7, 0x01, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0xb0, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xc8, 0x01, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0xb7, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xcf, 0x01, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0xb8, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x9e, 0x59, 0xd1, 0x01, 0x19, 0x48, 0x01, 0x8a, 0x42, 0xa9, 0x1a, 0x38, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0xf3, 0xec, 0x03, 0xed, 0x2d, 0xed, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0x1f, 0x1e, 0xbe, 0x58, 0x20, 0x1e, 0xbe, 0x58, 0x21, 0x1e, 0x22, 0x61, 0x1e, 0x69, 0x23, 0x62, 0x47, 0x38, 0x01, 0x2d, 0x1d, 0x59, 0xec, 0x10, 
+0x00, 0x2d, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0x30, 0x60, 0x0b, 0x68, 0x9e, 0x59, 0xe8, 0x00, 0x9e, 0x5a, 0xe9, 0x00, 0x9e, 0x5f, 0xfe, 0x1b, 0x9e, 0x5e, 0xfd, 0x1b, 0x19, 0x16, 0x00, 0x63, 0x00, 0x64, 0x00, 0x65, 0xc7, 0x38, 0x1d, 0x2d, 0x68, 0x5b, 0x8c, 0x5c, 0xac, 0x5d, 0x25, 0x5e, 0x16, 0x16, 0xdd, 0x5a, 0xd2, 0x3e, 0x19, 0x1e, 0x01, 0x96, 0x7b, 0xa8, 0x19, 0x00, 0x75, 0x3b, 0x1f, 0x1e, 0x95, 0x3c, 0x20, 0x1e, 0xb5, 0x3d, 0x21, 0x1e, 0xbe, 0x5b, 0x1f, 0x1e, 0xbe, 0x5c, 0x20, 0x1e, 0xbe, 0x5d, 0x21, 0x1e, 0x19, 0x17, 0xdf, 0x99, 0x3a, 0x38, 0x9e, 0x5b, 0x1f, 0x1e, 0x9e, 0x5c, 0x20, 0x1e, 0x9e, 0x5a, 0x21, 0x1e, 0x00, 0x65, 0x9e, 0x5f, 0xfd, 0x1b, 0x19, 0x17, 0x7b, 0xac, 0x0e, 0x92, 0xf0, 0x38, 0xe9, 0x00, 0x22, 0x61, 0x1e, 0x69, 0x23, 0x66, 0xc7, 0x38, 0x45, 0x2d, 0xcc, 0x4f, 
+0x40, 0x2d, 0x03, 0x5e, 0x36, 0x06, 0xdd, 0x59, 0x10, 0x38, 0xfd, 0x1b, 0x1a, 0x38, 0x19, 0x05, 0x46, 0x5a, 0x8a, 0x5c, 0x6a, 0x5b, 0x19, 0x17, 0xeb, 0x95, 0xbe, 0x5d, 0x46, 0x1e, 0x3a, 0x38, 0x9e, 0x5b, 0x46, 0x1e, 0x18, 0x13, 0x0d, 0x8a, 0x24, 0x62, 0x22, 0x64, 0x1e, 0x6c, 0x47, 0x38, 0x5f, 0x2d, 0x00, 0x61, 0x83, 0x58, 0x78, 0xac, 0x02, 0x90, 0xff, 0x61, 0xff, 0x69, 0x3c, 0x5b, 0x1d, 0x5c, 0x3a, 0x38, 0x9e, 0x5b, 0xe9, 0x00, 0x22, 0x64, 0x1e, 0x6c, 0x85, 0x5d, 0x24, 0x67, 0x9e, 0x5e, 0xfd, 0x1b, 0x19, 0x16, 0xc7, 0x38, 0x6e, 0x2d, 0x75, 0x16, 0xdd, 0x5b, 0x1a, 0x38, 0x85, 0x5d, 0x19, 0x17, 0xf5, 0x99, 0x3a, 0x38, 0x9e, 0x58, 0x15, 0x1e, 0x00, 0xac, 0x21, 0x90, 0xff, 0x61, 0x07, 0x69, 0x34, 0x38, 0xe3, 0x19, 0x18, 0x10, 0x1b, 0x88, 0x9e, 0x58, 0x1a, 0x1e, 0x02, 0x61, 0x23, 0x6a, 
+0x80, 0x2d, 0x19, 0x48, 0x16, 0x88, 0x9e, 0x58, 0xd6, 0x1a, 0xbe, 0x58, 0x47, 0x1e, 0xbe, 0x58, 0x04, 0xf8, 0x9e, 0x58, 0xda, 0x1a, 0xbe, 0x58, 0xb3, 0xf8, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x1a, 0x1e, 0x00, 0x60, 0xbe, 0x58, 0x1b, 0x1e, 0xbe, 0x58, 0x1c, 0x1e, 0xff, 0x60, 0xbe, 0x58, 0x1d, 0x1e, 0x3a, 0x38, 0x9e, 0x58, 0x1a, 0x1e, 0x1a, 0x10, 0x04, 0x8a, 0xa2, 0xed, 0xd8, 0xed, 0x08, 0xee, 0x2f, 0xee, 0x3a, 0x38, 0x9e, 0x5e, 0xe9, 0x00, 0x00, 0x65, 0xbe, 0x5d, 0x48, 0x1e, 0x9e, 0x5f, 0xfd, 0x1b, 0xbe, 0x5f, 0x49, 0x1e, 0x19, 0x17, 0xe6, 0x00, 0x03, 0x5b, 0x10, 0x38, 0xfd, 0x1b, 0x9e, 0x59, 0xfe, 0x1b, 0x1a, 0x11, 0x27, 0x38, 0xc7, 0x2d, 0x03, 0x5a, 0x10, 0x39, 0xfd, 0x1b, 0x23, 0x5c, 0x43, 0x13, 0x09, 0x9a, 0x44, 0x14, 0x07, 0x9a, 0x72, 0x39, 0x16, 0x1e, 0x03, 0x98, 0x68, 0xe1, 
+0xc0, 0x2d, 0x92, 0x39, 0x16, 0x1e, 0x01, 0x9a, 0x19, 0x05, 0x41, 0x5b, 0x10, 0x38, 0xfd, 0x1b, 0x1a, 0x38, 0x9e, 0x5b, 0x48, 0x1e, 0x7d, 0x48, 0x02, 0x94, 0xbe, 0x5d, 0x48, 0x1e, 0x9e, 0x5b, 0x49, 0x1e, 0x7d, 0x48, 0x02, 0x9a, 0xbe, 0x5d, 0x49, 0x1e, 0x00, 0x65, 0x19, 0x17, 0xd5, 0x95, 0x3a, 0x38, 0x9e, 0x5f, 0x1a, 0x1e, 0x19, 0x07, 0x18, 0x17, 0x01, 0x9a, 0x00, 0x67, 0xbe, 0x5f, 0x1a, 0x1e, 0x9e, 0x58, 0x48, 0x1e, 0x12, 0x39, 0x49, 0x1e, 0x06, 0x62, 0xd6, 0xac, 0x01, 0x90, 0x02, 0x62, 0xbe, 0x5a, 0x17, 0x1e, 0x12, 0x3a, 0x17, 0x1e, 0x08, 0x9a, 0x01, 0x67, 0xbe, 0x5f, 0x1a, 0x1e, 0x9e, 0x5f, 0x1b, 0x1e, 0x19, 0x07, 0xbe, 0x5f, 0x1b, 0x1e, 0x3a, 0x38, 0x00, 0x63, 0x9e, 0x58, 0x48, 0x1e, 0x12, 0x39, 0x49, 0x1e, 0x06, 0x62, 0xd6, 0xac, 0x01, 0x90, 0x02, 0x62, 0xbe, 0x5a, 0x6e, 0x02, 
+0x00, 0x2e, 0x17, 0x1e, 0x12, 0x3a, 0x17, 0x1e, 0x01, 0x9a, 0x01, 0x63, 0xbe, 0x5b, 0x1e, 0x1e, 0x3a, 0x38, 0x9e, 0x58, 0x1a, 0x1e, 0x18, 0x10, 0x1f, 0x8a, 0x9e, 0x58, 0x1b, 0x1e, 0x02, 0x39, 0x05, 0x00, 0x0a, 0x8a, 0x9e, 0x59, 0x48, 0x1e, 0x32, 0x3a, 0x1d, 0x1e, 0x18, 0x98, 0xbe, 0x59, 0x1d, 0x1e, 0xbe, 0x58, 0x1c, 0x1e, 0x13, 0x9e, 0x9e, 0x59, 0x15, 0x1e, 0x09, 0xac, 0x08, 0x92, 0x02, 0x67, 0xbe, 0x5f, 0x1a, 0x1e, 0x9e, 0x5f, 0x1c, 0x1e, 0xbe, 0x5f, 0x1b, 0x1e, 0x07, 0x9e, 0x00, 0x67, 0xbe, 0x5f, 0x1b, 0x1e, 0x03, 0x9e, 0x00, 0x63, 0xbe, 0x5b, 0x1e, 0x1e, 0x3a, 0x38, 0x9e, 0x58, 0x1a, 0x1e, 0x18, 0x10, 0x16, 0x8a, 0x9e, 0x58, 0x1b, 0x1e, 0x9e, 0x59, 0x15, 0x1e, 0x11, 0xac, 0x02, 0x90, 0x08, 0x58, 0x08, 0x58, 0xd6, 0xac, 0x03, 0x90, 0x00, 0x38, 0x8a, 0x2e, 0x02, 0x9e, 0x2a, 0x8c, 
+0x40, 0x2e, 0x00, 0x38, 0x8f, 0x2e, 0x09, 0x58, 0x9e, 0x59, 0xd6, 0x1a, 0x01, 0x00, 0x78, 0xa8, 0xbe, 0x58, 0x47, 0x1e, 0x3a, 0x38, 0x48, 0x62, 0x0e, 0x6a, 0x9e, 0x5b, 0xfd, 0x1b, 0x9e, 0x5c, 0xfd, 0x1b, 0x41, 0x5d, 0x00, 0x61, 0x00, 0x67, 0x9e, 0x5e, 0xfe, 0x1b, 0x19, 0x16, 0xc7, 0x38, 0x5d, 0x2e, 0xa3, 0x58, 0x18, 0x10, 0x02, 0x94, 0x19, 0x07, 0x20, 0x01, 0xa3, 0x05, 0x21, 0x58, 0x00, 0x61, 0x02, 0x58, 0x1c, 0x5f, 0x01, 0x59, 0x32, 0x39, 0x18, 0x1e, 0x0d, 0x9a, 0x41, 0x5d, 0x9e, 0x5e, 0xfe, 0x1b, 0x19, 0x16, 0x08, 0x58, 0xc7, 0x38, 0x72, 0x2e, 0xa3, 0x5e, 0x18, 0x06, 0x02, 0x9a, 0xc0, 0x06, 0xdb, 0x5d, 0xa3, 0x05, 0x19, 0x02, 0x19, 0x14, 0xda, 0x89, 0x3a, 0x38, 0x01, 0x60, 0xbe, 0x58, 0x15, 0x1e, 0x40, 0x60, 0xbe, 0x58, 0x16, 0x1e, 0xff, 0x60, 0x1f, 0x68, 0xbe, 0x58, 0x16, 0x16, 
+0x80, 0x2e, 0x18, 0x1e, 0x80, 0x60, 0xbe, 0x58, 0x19, 0x1e, 0x9e, 0x58, 0xd6, 0x1a, 0xbe, 0x58, 0x47, 0x1e, 0x8c, 0xed, 0x3a, 0x38, 0x1d, 0x00, 0x1d, 0x00, 0x1d, 0x00, 0x1d, 0x00, 0x1d, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x30, 0x00, 0x00, 0x00, 0x08, 0x00, 0x18, 0x00, 0x30, 0x00, 0x38, 0x00, 0x3c, 0xab, 0x3a, 0x38, 0xfa, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x56, 0x01, 0xd6, 0x1a, 0xd7, 0x1a, 0xd8, 0x1a, 0x57, 0x01, 0x5b, 0x01, 0x2d, 0x62, 0x01, 0x6a, 0x26, 0x63, 0x04, 0x6b, 0xeb, 0x64, 0x00, 0x67, 0x10, 0x6f, 0xef, 0x3a, 0xb6, 0x2e, 0x45, 0x5d, 0x65, 0x5e, 0x85, 0x58, 0xbb, 0x5e, 0x3a, 0x38, 0x9e, 0x5e, 0x20, 0x04, 0xc6, 0x5e, 0x7c, 0x62, 0x01, 0x6a, 0x94, 0x63, 0x01, 0x6b, 0x17, 0x64, 0xcd, 0x1d, 
+0xc0, 0x2e, 0x01, 0x6c, 0x01, 0x65, 0x01, 0x6d, 0xef, 0x3a, 0xca, 0x2e, 0x45, 0x58, 0xc0, 0x40, 0x1d, 0x5c, 0x65, 0x58, 0xc0, 0x40, 0x1d, 0x5d, 0x3a, 0x38, 0xef, 0xa8, 0x9e, 0x58, 0x17, 0x04, 0x9e, 0x59, 0x1f, 0x04, 0x01, 0x10, 0x19, 0x48, 0x03, 0x9a, 0xbe, 0x58, 0x18, 0x04, 0x02, 0x9e, 0xbe, 0x59, 0x18, 0x04, 0x9e, 0x58, 0xb5, 0x00, 0x18, 0x10, 0x03, 0x8a, 0x19, 0x10, 0x01, 0x8a, 0x09, 0x9e, 0x9e, 0x58, 0x1d, 0x04, 0x18, 0x10, 0x04, 0x8a, 0x19, 0x10, 0xbe, 0x58, 0x1d, 0x04, 0x01, 0x9e, 0xef, 0xaa, 0x3a, 0x38, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xb6, 0xb8, 
+0x00, 0x2f, 0x25, 0x00, 0x25, 0x00, 0x04, 0x00, 0x08, 0x00, 0x30, 0x00, 0x01, 0x00, 0x0a, 0x00, 0x05, 0x00, 0x05, 0x00, 0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x01, 0x00, 0x20, 0x00, 0x00, 0x00, 0x02, 0x00, 0x10, 0x00, 0x0a, 0x00, 0x03, 0x00, 0x12, 0x00, 0x0e, 0x00, 0x08, 0x00, 0x08, 0x00, 0x40, 0x00, 0x10, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x00, 0x04, 0x00, 0x01, 0x00, 0x05, 0x00, 0x05, 0x00, 0x13, 0x00, 0x50, 0x00, 0x38, 0x00, 0x18, 0x00, 0x1a, 0x00, 0x24, 0x00, 0x30, 0x00, 0x20, 0x00, 0x24, 0x00, 0x30, 0x00, 0x14, 0x00, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x55, 0x2a, 
+0x40, 0x2f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x7f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x30, 0x27, 
+0x80, 0x2f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x01, 0x00, 0x10, 0xef, 0x00, 0xbc, 0xb1, 0x00, 0x30, 0xa8, 0x28, 0xa8, 0x20, 0xa8, 0x68, 0xa8, 0x60, 0xaa, 0x00, 0xbd, 0xb1, 0x00, 0x9e, 0x58, 0x01, 0xf8, 0x08, 0xaa, 0xbe, 0x58, 0x01, 0xf8, 0x3e, 0xb0, 0x60, 0xaa, 0xbe, 0xb0, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x1f, 0x60, 0x4e, 0x68, 0x07, 0x38, 0xb0, 0x2f, 0x1a, 0x38, 0x1a, 0x38, 0x1a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0x01, 0x00, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0xb0, 0x00, 0xdb, 0xef, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0xff, 0x60, 0xff, 0x68, 0x62, 0x0c, 
+0xc0, 0x2f, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0xd5, 0xf0, 0xc6, 0xf0, 0x54, 0xf0, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x9e, 0x59, 0xb0, 0x00, 0x19, 0x01, 0xbe, 0x59, 0xb0, 0x00, 0x9e, 0x58, 0xbd, 0x00, 0x38, 0x48, 0xde, 0x81, 0x3a, 0x38, 0x9e, 0x58, 0xb1, 0x00, 0x0c, 0x61, 0x01, 0x40, 0x80, 0x65, 0x57, 0x6d, 0x05, 0x00, 0x3b, 0x64, 0xf8, 0x6c, 0x6f, 0x39, 0xe7, 0x2f, 0x0b, 0x5f, 0xfd, 0x5c, 0xe5, 0xac, 0x2b, 0x90, 0x9e, 0x58, 0xb1, 0x00, 0x9e, 0x59, 0xbb, 0x00, 0x01, 0x40, 0x00, 0x3f, 0x30, 0x0b, 0x9e, 0x5e, 0xd5, 0x1a, 0x19, 0x16, 0xc6, 0x5e, 0x47, 0x64, 0xf8, 0x6c, 0x53, 0x65, 0xf8, 0x6d, 0x6f, 0x39, 0x14, 0x30, 0xe5, 0x58, 0x00, 0x61, 0x1c, 0x5e, 0x01, 0x5a, 0xe5, 0x58, 0xb9, 0x05, 
+0x00, 0x30, 0x00, 0x61, 0x1c, 0x5e, 0x01, 0x5b, 0x1e, 0x59, 0x1e, 0x5f, 0x1e, 0x5e, 0x18, 0x66, 0x46, 0x11, 0x66, 0x17, 0xfe, 0x5f, 0xe1, 0x28, 0x1d, 0x5c, 0x18, 0x66, 0x46, 0x01, 0x66, 0x07, 0xfe, 0x5f, 0xe1, 0x28, 0x1d, 0x5d, 0x3e, 0x5e, 0x3e, 0x5f, 0x3e, 0x59, 0x1a, 0x38, 0x3a, 0x38, 0x94, 0xab, 0x9e, 0x58, 0xb0, 0x00, 0x18, 0x61, 0x01, 0x40, 0x00, 0x3f, 0xb6, 0x5e, 0x9e, 0x5d, 0xba, 0x00, 0x9e, 0x5c, 0xb1, 0x00, 0x92, 0x39, 0xb9, 0x00, 0x1a, 0x8e, 0x00, 0x3f, 0xcf, 0x5e, 0x30, 0x3d, 0xbb, 0x00, 0x26, 0x66, 0x04, 0x6e, 0x48, 0x61, 0x9e, 0x5c, 0xba, 0x00, 0xef, 0x3a, 0x3d, 0x30, 0xeb, 0x58, 0x01, 0x12, 0x08, 0x8a, 0x1e, 0x59, 0x00, 0x61, 0x04, 0x40, 0x05, 0x00, 0x3e, 0x59, 0x10, 0x38, 0xe8, 0x00, 0x02, 0x9e, 0x3e, 0x60, 0x04, 0x68, 0x1d, 0x5e, 0x13, 0x9e, 0x9e, 0x5c, 0xd5, 0x91, 
+0x40, 0x30, 0xb1, 0x00, 0x85, 0x40, 0x10, 0x3d, 0xe8, 0x00, 0x26, 0x66, 0x04, 0x6e, 0x48, 0x61, 0xef, 0x3a, 0x50, 0x30, 0xeb, 0x58, 0x19, 0x48, 0x02, 0x8a, 0xa0, 0x00, 0x02, 0x9e, 0x3e, 0x60, 0x04, 0x68, 0x1d, 0x5e, 0x00, 0x9e, 0x94, 0xa9, 0x3a, 0x38, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x9e, 0x58, 0x00, 0xf8, 0x10, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x17, 0xf0, 0xed, 0xac, 0x27, 0x92, 0x62, 0x61, 0xf8, 0x69, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x21, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x1d, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x19, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x15, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x11, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x0d, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x09, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x7a, 0x23, 
+0x80, 0x30, 0x05, 0x88, 0x25, 0x5a, 0x25, 0x5b, 0x5b, 0x48, 0x01, 0x88, 0x42, 0xa9, 0xe5, 0xac, 0x0c, 0x90, 0x9e, 0x58, 0xe7, 0x00, 0x1a, 0x10, 0x08, 0x88, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x1d, 0x39, 0x00, 0x9e, 0x1a, 0x38, 0x1a, 0x38, 0x9e, 0x5e, 0xb2, 0x00, 0x1e, 0xac, 0xfa, 0x91, 0x00, 0x66, 0xbe, 0x5e, 0xb2, 0x00, 0x3a, 0x38, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xe5, 0xac, 0xf0, 0x91, 0x9e, 0x58, 0xe7, 0x00, 0x1a, 0x10, 0x08, 0x88, 0x9e, 0x5a, 0xe8, 0x00, 0x9e, 0x5b, 0xe9, 0x00, 0x5b, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x1d, 0x39, 0x1a, 0x38, 0x1a, 0x38, 0x9e, 0x5e, 0xb2, 0x00, 0x1e, 0xac, 0xfa, 0x91, 0x00, 0x66, 0xbe, 0x5e, 0xb2, 0x00, 0x3a, 0x38, 0x02, 0x3a, 0x0c, 0x00, 0x06, 0x80, 0x02, 0x3a, 0x24, 0x00, 0x02, 0x82, 0x71, 0xbc, 
+0xc0, 0x30, 0x3c, 0x10, 0x01, 0x9e, 0x78, 0x10, 0x00, 0x3a, 0x62, 0xf8, 0x3a, 0x38, 0x9e, 0x58, 0xb1, 0x00, 0x90, 0x61, 0x5e, 0x69, 0x01, 0x02, 0x49, 0x5a, 0x48, 0x60, 0x58, 0x48, 0x05, 0x8a, 0x78, 0xab, 0x41, 0xa9, 0xe5, 0xf0, 0x78, 0xa9, 0x41, 0xab, 0x3a, 0x38, 0x00, 0x60, 0x1a, 0x61, 0xf8, 0x69, 0x8f, 0x38, 0xdb, 0x30, 0x1d, 0x59, 0x1a, 0x38, 0x3a, 0x38, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x44, 0x39, 0x07, 0x00, 0x20, 0x39, 0xdd, 0x30, 0x29, 0x59, 0x48, 0x5a, 0x48, 0x5a, 0x48, 0x5a, 0x40, 0x3b, 0x1a, 0xf8, 0x63, 0x5c, 0x81, 0x2c, 0x9b, 0x5b, 0x3a, 0x38, 0x9e, 0x5a, 0xe8, 0x00, 0x30, 0x63, 0x0b, 0x6b, 0x9e, 0x5c, 0xbf, 0x00, 0x19, 0x14, 0x87, 0x38, 0xfd, 0x30, 0x65, 0x58, 0x1d, 0x5a, 0x3a, 0x38, 0x00, 0x67, 0x38, 0x9a, 
+0x00, 0x31, 0x50, 0x66, 0x07, 0x6e, 0xc7, 0x2f, 0x0f, 0xa8, 0x07, 0xaa, 0xe0, 0xbd, 0xbc, 0x00, 0x1a, 0x38, 0xbe, 0x5f, 0xfb, 0x04, 0x41, 0xab, 0x3a, 0x38, 0x9e, 0x58, 0x36, 0x1d, 0x1d, 0x10, 0xad, 0x8a, 0x9e, 0x58, 0x36, 0x1d, 0x1b, 0x10, 0xa9, 0x8a, 0x1a, 0x38, 0x28, 0xf8, 0xe5, 0xac, 0x1e, 0x90, 0x9e, 0x58, 0xe8, 0x00, 0x02, 0x38, 0x00, 0x05, 0x09, 0x8a, 0x00, 0x60, 0x05, 0x68, 0xbe, 0x58, 0xe8, 0x00, 0x18, 0x60, 0x08, 0x68, 0xbe, 0x58, 0xe9, 0x00, 0x08, 0x9e, 0x18, 0x60, 0x08, 0x68, 0xbe, 0x58, 0xe8, 0x00, 0x00, 0x60, 0x05, 0x68, 0xbe, 0x58, 0xe9, 0x00, 0x9e, 0x58, 0xe7, 0x00, 0x02, 0x39, 0x01, 0x00, 0x03, 0x98, 0x19, 0x00, 0xbe, 0x58, 0xe7, 0x00, 0xef, 0x61, 0x02, 0x69, 0x48, 0x62, 0x1d, 0x6a, 0x9e, 0x58, 0x5d, 0x1a, 0x19, 0x10, 0x07, 0x38, 0x41, 0x31, 0x25, 0x5b, 0x36, 0xfd, 
+0x40, 0x31, 0x7d, 0x5a, 0x1a, 0x38, 0x8e, 0x61, 0x1b, 0x69, 0x62, 0x62, 0x1e, 0x6a, 0x9e, 0x58, 0x5d, 0x1a, 0x19, 0x10, 0x07, 0x38, 0x4d, 0x31, 0x25, 0x5b, 0x7d, 0x5a, 0x1a, 0x38, 0x09, 0x61, 0x1a, 0x69, 0x9c, 0x62, 0x1e, 0x6a, 0x9e, 0x58, 0x5d, 0x1a, 0x19, 0x10, 0x07, 0x38, 0x59, 0x31, 0x25, 0x5b, 0x7d, 0x5a, 0x1a, 0x38, 0x9e, 0x5a, 0xec, 0x19, 0x9e, 0x59, 0xeb, 0x19, 0x9e, 0x58, 0xea, 0x19, 0xbe, 0x5a, 0x5b, 0x1a, 0xbe, 0x59, 0xaf, 0x1a, 0xbe, 0x58, 0x5a, 0x1a, 0x9e, 0x58, 0xea, 0x1e, 0xbe, 0x58, 0x4c, 0x04, 0x9e, 0x58, 0xeb, 0x1e, 0xbe, 0x58, 0x4d, 0x04, 0x9e, 0x58, 0xec, 0x1e, 0xbe, 0x58, 0x4e, 0x04, 0x9e, 0x58, 0xed, 0x1e, 0xbe, 0x58, 0x4f, 0x04, 0x00, 0x60, 0xbe, 0x58, 0x43, 0x1a, 0x2c, 0xf2, 0x1a, 0x38, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0x61, 0xf8, 
+0x80, 0x31, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x9e, 0x58, 0x00, 0xf8, 0x10, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x9f, 0xf0, 0x1a, 0x38, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x3d, 0xf3, 0x1a, 0x38, 0xf9, 0x60, 0x01, 0x68, 0x03, 0x59, 0x05, 0x62, 0x0f, 0x63, 0x1a, 0x38, 0x3a, 0x48, 0x98, 0x3a, 0x31, 0x33, 0x1a, 0x38, 0x3b, 0x48, 0x18, 0x3a, 0x2a, 0x33, 0x1a, 0x38, 0xf9, 0x60, 0x01, 0x68, 0xfa, 0x61, 0x01, 0x69, 0x00, 0x62, 0x5b, 0x58, 0x5b, 0x59, 0x1a, 0x38, 0xe1, 0xf1, 0x65, 0xf3, 0x9e, 0x58, 0xe7, 0x00, 0x1a, 0x10, 0x08, 0x88, 0x9e, 0x58, 0xe8, 0x00, 0x9e, 0x59, 0xe9, 0x00, 0x19, 0x48, 0x01, 0x88, 0x42, 0xa9, 0x1d, 0x39, 0x1a, 0x38, 0x1a, 0x38, 0x3a, 0x38, 0x11, 0x46, 
+0xc0, 0x31, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0xb5, 0x61, 0x02, 0x69, 0x29, 0x62, 0x03, 0x6a, 0x2f, 0x3f, 0xcc, 0x31, 0x23, 0x58, 0x1b, 0x5a, 0x19, 0x01, 0x19, 0x02, 0x02, 0x61, 0x02, 0x69, 0x3d, 0x62, 0x02, 0x6a, 0x0f, 0x3f, 0xd6, 0x31, 0x23, 0x58, 0x1b, 0x5a, 0x19, 0x01, 0x19, 0x02, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x34, 0xf8, 0x82, 0xf3, 0xbe, 0xf3, 0x02, 0xf4, 0x9d, 0xf4, 0x3a, 0x38, 0x02, 0x62, 0x02, 0x6a, 0xb5, 0x64, 0x02, 0x6c, 0xf1, 0x61, 0x31, 0x69, 0x2f, 0x3f, 0xee, 0x31, 0x29, 0x5b, 0x43, 0x03, 0x63, 0x5d, 0xbb, 0x5c, 0x19, 0x01, 0x19, 0x04, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x00, 0x04, 0x00, 0x08, 0x00, 0x0c, 0x00, 0x10, 0x00, 0x14, 0x00, 0x01, 0x00, 0x05, 0x00, 0x09, 0x00, 0x0d, 0x00, 0x11, 0x00, 0x15, 0x00, 0x02, 0x00, 0x06, 0x00, 0x0a, 0x00, 0xdb, 0x62, 
+0x00, 0x32, 0x0e, 0x00, 0x12, 0x00, 0x16, 0x00, 0x03, 0x00, 0x07, 0x00, 0x0b, 0x00, 0x0f, 0x00, 0x18, 0x00, 0x1c, 0x00, 0x20, 0x00, 0x24, 0x00, 0x28, 0x00, 0x2c, 0x00, 0x30, 0x00, 0x34, 0x00, 0x38, 0x00, 0x3c, 0x00, 0x19, 0x00, 0x1d, 0x00, 0x21, 0x00, 0x25, 0x00, 0x29, 0x00, 0x2d, 0x00, 0x31, 0x00, 0x35, 0x00, 0x39, 0x00, 0x3d, 0x00, 0x1a, 0x00, 0x1e, 0x00, 0x22, 0x00, 0x26, 0x00, 0x2a, 0x00, 0x2e, 0x00, 0x32, 0x00, 0x36, 0x00, 0x3a, 0x00, 0x3e, 0x00, 0x1b, 0x00, 0x1f, 0x00, 0x23, 0x00, 0x27, 0x00, 0x2b, 0x00, 0x2f, 0x00, 0x3a, 0x38, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x58, 0x00, 0xac, 0x02, 0x90, 0x77, 0x9e, 0x3a, 0x38, 0x9e, 0x58, 0x1b, 0x1e, 0xd6, 0xac, 0x03, 0x92, 0x00, 0x38, 0x99, 0x2e, 0x02, 0x9e, 0x00, 0x38, 0x94, 0x2e, 0x09, 0x58, 0x9e, 0x59, 0xda, 0x1a, 0x20, 0x01, 0x8f, 0x92, 
+0x40, 0x32, 0xb3, 0x60, 0xf8, 0x68, 0x3b, 0x58, 0x9e, 0x59, 0xdb, 0x1a, 0xb4, 0x60, 0xf8, 0x68, 0x3b, 0x58, 0x9e, 0x59, 0xdc, 0x1a, 0xb9, 0x60, 0xf8, 0x68, 0x3b, 0x58, 0x20, 0x61, 0xb1, 0x60, 0xf8, 0x68, 0x9e, 0x5a, 0xc9, 0x00, 0x18, 0x12, 0x01, 0x8a, 0x20, 0x61, 0x3b, 0x58, 0xaa, 0x60, 0xf8, 0x68, 0x03, 0x59, 0x01, 0xa8, 0x21, 0xa8, 0x29, 0xa8, 0x31, 0xa8, 0x39, 0xa8, 0x41, 0xaa, 0x49, 0xaa, 0x51, 0xaa, 0x59, 0xaa, 0x79, 0xa8, 0x3b, 0x58, 0xab, 0x60, 0xf8, 0x68, 0x03, 0x59, 0x01, 0xa8, 0x09, 0xa8, 0x11, 0xa8, 0x19, 0xa8, 0x21, 0xa8, 0x29, 0xaa, 0x31, 0xaa, 0x39, 0xaa, 0x41, 0xaa, 0x3b, 0x58, 0xe0, 0x61, 0x1a, 0x69, 0x30, 0x39, 0xf9, 0x01, 0xac, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0xe6, 0x61, 0x1a, 0x69, 0x30, 0x39, 0xf9, 0x01, 0xad, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x12, 0x8a, 
+0x80, 0x32, 0x5b, 0x58, 0x20, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0xd4, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0x26, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0xd5, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0x00, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0xd0, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0x06, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0xd1, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0xf9, 0x62, 0x01, 0x6a, 0x43, 0x5a, 0xae, 0x64, 0xf8, 0x6c, 0x5b, 0x5c, 0x1a, 0x38, 0x89, 0x9f, 0x9e, 0x58, 0x1b, 0x1e, 0xd6, 0xac, 0x03, 0x92, 0x00, 0x38, 0x99, 0x2e, 0x02, 0x9e, 0x00, 0x38, 0x94, 0x2e, 0x09, 0x58, 0x9e, 0x59, 0xdd, 0x1a, 0x20, 0x01, 0xb3, 0x60, 0xf8, 0x68, 0x3b, 0x58, 0x9e, 0x59, 0xde, 0x1a, 0xb4, 0x60, 0xf8, 0x68, 0x3b, 0x58, 0x9e, 0x59, 0xdf, 0x1a, 0x65, 0xd9, 
+0xc0, 0x32, 0xb9, 0x60, 0xf8, 0x68, 0x3b, 0x58, 0x20, 0x61, 0xb1, 0x60, 0xf8, 0x68, 0x9e, 0x5a, 0xc9, 0x00, 0x18, 0x12, 0x01, 0x8a, 0x20, 0x61, 0x3b, 0x58, 0xaa, 0x60, 0xf8, 0x68, 0x03, 0x59, 0x01, 0xa8, 0x21, 0xaa, 0x29, 0xaa, 0x31, 0xaa, 0x39, 0xaa, 0x41, 0xa8, 0x49, 0xa8, 0x51, 0xa8, 0x59, 0xa8, 0x79, 0xa8, 0x3b, 0x58, 0xab, 0x60, 0xf8, 0x68, 0x03, 0x59, 0x01, 0xa8, 0x09, 0xaa, 0x11, 0xaa, 0x19, 0xaa, 0x21, 0xaa, 0x29, 0xa8, 0x31, 0xa8, 0x39, 0xa8, 0x41, 0xa8, 0x3b, 0x58, 0xec, 0x61, 0x1a, 0x69, 0x30, 0x39, 0xf9, 0x01, 0x1e, 0x11, 0xac, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0xf6, 0x61, 0x1a, 0x69, 0x30, 0x39, 0xf9, 0x01, 0x1e, 0x11, 0xad, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0x2c, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0x1e, 0x11, 0xd6, 0x60, 0xf8, 0x68, 0xe1, 0xb8, 
+0x00, 0x33, 0x23, 0x5a, 0x5b, 0x58, 0x36, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0x1e, 0x11, 0xd7, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0x0c, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0x1e, 0x11, 0xd2, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0x16, 0x61, 0x1b, 0x69, 0x30, 0x39, 0xf9, 0x01, 0x1e, 0x11, 0xd3, 0x60, 0xf8, 0x68, 0x23, 0x5a, 0x5b, 0x58, 0xf9, 0x62, 0x01, 0x6a, 0x43, 0x5a, 0x06, 0x63, 0x43, 0x12, 0x44, 0x3a, 0xff, 0x00, 0xfe, 0x5a, 0xae, 0x64, 0xf8, 0x6c, 0x5b, 0x5c, 0x1a, 0x38, 0x08, 0x9f, 0xf9, 0x60, 0x01, 0x68, 0x03, 0x59, 0x19, 0x01, 0x3b, 0x58, 0x98, 0x3f, 0x79, 0x31, 0xf9, 0x60, 0x01, 0x68, 0x03, 0x59, 0x19, 0x01, 0x3b, 0x58, 0xfa, 0x61, 0x01, 0x69, 0x23, 0x58, 0x00, 0xa8, 0x1b, 0x59, 0x98, 0x3f, 0x79, 0x31, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x59, 0xbf, 0xf4, 
+0x40, 0x33, 0x01, 0xac, 0x01, 0x90, 0x11, 0x9e, 0xda, 0x65, 0xf8, 0x6d, 0xf9, 0x63, 0x01, 0x6b, 0x63, 0x5b, 0x04, 0x60, 0x03, 0x40, 0x02, 0x63, 0x02, 0x6b, 0x03, 0x04, 0x6f, 0x38, 0x51, 0x33, 0xa5, 0x5e, 0xdd, 0x5c, 0x1a, 0x38, 0xdb, 0x5c, 0x10, 0x9e, 0xde, 0x65, 0xf8, 0x6d, 0xf9, 0x63, 0x01, 0x6b, 0x63, 0x5b, 0x04, 0x60, 0x03, 0x40, 0x02, 0x63, 0x02, 0x6b, 0x03, 0x04, 0x6f, 0x38, 0x62, 0x33, 0xa5, 0x5e, 0xdd, 0x5c, 0x1a, 0x38, 0x00, 0x9e, 0x3a, 0x38, 0xaa, 0x60, 0xf8, 0x68, 0x03, 0x59, 0x21, 0xaa, 0x29, 0xaa, 0x31, 0xaa, 0x39, 0xaa, 0x41, 0xaa, 0x49, 0xaa, 0x51, 0xaa, 0x59, 0xaa, 0x3b, 0x58, 0xab, 0x60, 0xf8, 0x68, 0x03, 0x59, 0x01, 0xaa, 0x09, 0xaa, 0x11, 0xaa, 0x19, 0xaa, 0x21, 0xaa, 0x29, 0xaa, 0x31, 0xaa, 0x39, 0xaa, 0x41, 0xaa, 0xae, 0x60, 0xf8, 0x68, 0x00, 0x61, 0xfc, 0x92, 
+0x80, 0x33, 0x3b, 0x58, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x9e, 0x58, 0x5d, 0x1a, 0x9e, 0x59, 0xc0, 0x1a, 0x09, 0xac, 0x02, 0x90, 0x9e, 0x58, 0x5c, 0x1a, 0x19, 0x10, 0xef, 0x61, 0x02, 0x69, 0x29, 0x62, 0x03, 0x6a, 0xb5, 0x63, 0x02, 0x6b, 0x8e, 0x66, 0x1b, 0x6e, 0x07, 0x38, 0xb4, 0x33, 0x65, 0x5c, 0x45, 0x5d, 0x85, 0x15, 0xbd, 0x5e, 0x1e, 0x59, 0x9e, 0x59, 0xc1, 0x1a, 0xa1, 0x15, 0x3e, 0x59, 0x00, 0x9e, 0x7d, 0xac, 0x01, 0x90, 0x00, 0x65, 0x1e, 0x59, 0x1e, 0x58, 0x1e, 0x5a, 0x00, 0x61, 0x01, 0x62, 0xa2, 0x40, 0x01, 0x5d, 0x3e, 0x5a, 0x3e, 0x58, 0x3e, 0x59, 0xbd, 0x59, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x35, 0x30, 
+0xc0, 0x33, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x9e, 0x58, 0xe8, 0x19, 0x19, 0x10, 0xef, 0x61, 0x02, 0x69, 0xa0, 0xac, 0x02, 0x90, 0x30, 0x39, 0xe9, 0x19, 0x0f, 0x67, 0x27, 0x6f, 0x00, 0x65, 0x0f, 0x64, 0x27, 0x6c, 0xbe, 0x5c, 0x80, 0x1a, 0x00, 0x64, 0x07, 0x38, 0xe6, 0x33, 0x23, 0x5e, 0xfe, 0x48, 0x01, 0x9c, 0xc1, 0x5f, 0xbe, 0x48, 0x06, 0x98, 0xc1, 0x5d, 0x00, 0x60, 0xd8, 0x48, 0x02, 0x8a, 0xbe, 0x5c, 0x80, 0x1a, 0x19, 0x01, 0x19, 0x04, 0xef, 0x61, 0x02, 0x69, 0xa0, 0xac, 0x02, 0x90, 0x30, 0x39, 0xe9, 0x19, 0x9e, 0x5c, 0x80, 0x1a, 0x81, 0x04, 0x83, 0x59, 0x9e, 0x5a, 0xc2, 0x1a, 0x3a, 0x48, 0x04, 0x82, 0x0f, 0x64, 0x27, 0x6c, 0xbe, 0x5c, 0x80, 0x1a, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x9a, 0x5c, 
+0x00, 0x34, 0x3e, 0x58, 0x3a, 0x38, 0xff, 0x60, 0xff, 0x68, 0x01, 0x5d, 0x01, 0x5c, 0x01, 0x5e, 0x9e, 0x59, 0xe8, 0x19, 0x19, 0x11, 0xee, 0x62, 0x02, 0x6a, 0x50, 0x3a, 0xb8, 0x00, 0xa0, 0xac, 0x04, 0x90, 0xee, 0x62, 0x02, 0x6a, 0x50, 0x3a, 0x5c, 0x1a, 0x00, 0x63, 0x27, 0x38, 0x4e, 0x34, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x00, 0xab, 0x43, 0x5f, 0x9e, 0x58, 0xe7, 0x19, 0x00, 0xac, 0x03, 0x92, 0x9e, 0x5e, 0xc3, 0x1a, 0x03, 0x9e, 0x9e, 0x5e, 0xc3, 0x1a, 0xc8, 0x5e, 0xdf, 0x48, 0x1f, 0x9c, 0x43, 0x5f, 0x00, 0x60, 0x78, 0x48, 0x0a, 0x8a, 0x40, 0x3e, 0x01, 0x00, 0xc3, 0x58, 0x1e, 0x59, 0x9e, 0x59, 0xc4, 0x1a, 0x01, 0x00, 0x3e, 0x59, 0x1f, 0x48, 0x11, 0x9c, 0x43, 0x5f, 0x9e, 0x58, 0xe8, 0x19, 0x19, 0x10, 0x78, 0x48, 0x0a, 0x8a, 0x42, 0x3e, 0x01, 0x00, 0xc3, 0x58, 0x1e, 0x59, 0xb5, 0xde, 
+0x40, 0x34, 0x9e, 0x59, 0xc4, 0x1a, 0x01, 0x00, 0x3e, 0x59, 0x1f, 0x48, 0x01, 0x9c, 0x00, 0xa9, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x8a, 0x5c, 0xaa, 0x5d, 0xca, 0x5e, 0x19, 0x12, 0x19, 0x03, 0xbe, 0x5c, 0xea, 0x19, 0xbe, 0x5d, 0xeb, 0x19, 0xbe, 0x5e, 0xec, 0x19, 0x81, 0x58, 0xa1, 0x59, 0xc1, 0x5a, 0x0a, 0x58, 0x2a, 0x59, 0x4a, 0x5a, 0x00, 0xa8, 0xbe, 0x58, 0xed, 0x19, 0xbe, 0x59, 0xee, 0x19, 0xbe, 0x5a, 0xef, 0x19, 0x81, 0x58, 0xa1, 0x59, 0xc1, 0x5a, 0x4c, 0x5a, 0x2c, 0x59, 0x0c, 0x58, 0x7a, 0xa8, 0x12, 0xa8, 0x9e, 0x5b, 0xed, 0x19, 0x03, 0x28, 0x80, 0x24, 0x9e, 0x5b, 0xee, 0x19, 0x23, 0x29, 0xa1, 0x25, 0x9e, 0x5b, 0xef, 0x19, 0x43, 0x2a, 0xc2, 0x26, 0x1e, 0x5e, 0xff, 0x61, 0xff, 0x69, 0xff, 0x62, 0xff, 0x6a, 0xff, 0x63, 0xff, 0x6b, 0x01, 0x66, 0xc4, 0x26, 0x00, 0x67, 0x0b, 0xc9, 
+0x80, 0x34, 0xfe, 0x48, 0x02, 0x88, 0xfc, 0x61, 0xff, 0x69, 0x02, 0x66, 0xc4, 0x26, 0x00, 0x67, 0xfe, 0x48, 0x02, 0x88, 0xf8, 0x62, 0xff, 0x6a, 0x04, 0x66, 0xc4, 0x26, 0x00, 0x67, 0xfe, 0x48, 0x02, 0x88, 0xf1, 0x63, 0xff, 0x6b, 0x22, 0x21, 0x23, 0x21, 0x24, 0x24, 0x3e, 0x5e, 0xbe, 0x5c, 0xea, 0x19, 0xbe, 0x5d, 0xeb, 0x19, 0xbe, 0x5e, 0xec, 0x19, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x00, 0x66, 0x00, 0x67, 0x9e, 0x58, 0x80, 0x1a, 0x0f, 0x61, 0x27, 0x69, 0x19, 0x48, 0x42, 0x8a, 0x9e, 0x5e, 0xea, 0x19, 0x9e, 0x5f, 0xeb, 0x19, 0x9e, 0x5d, 0xec, 0x19, 0x9e, 0x5a, 0xe8, 0x19, 0x00, 0x61, 0x38, 0x48, 0x04, 0x8a, 0x3a, 0x48, 0x2f, 0x8a, 0x19, 0x01, 0xfa, 0x9f, 0xc1, 0x63, 0x34, 0x6b, 0x61, 0x03, 0x69, 0x5b, 0x03, 0xc9, 
+0xc0, 0x34, 0x5e, 0x5b, 0xfe, 0x34, 0x01, 0x35, 0x05, 0x35, 0x09, 0x35, 0x0d, 0x35, 0x11, 0x35, 0x15, 0x35, 0x19, 0x35, 0x1d, 0x35, 0x21, 0x35, 0x25, 0x35, 0x29, 0x35, 0x2d, 0x35, 0x31, 0x35, 0x35, 0x35, 0x39, 0x35, 0x3d, 0x35, 0x41, 0x35, 0x45, 0x35, 0x49, 0x35, 0x4d, 0x35, 0x51, 0x35, 0x55, 0x35, 0x59, 0x35, 0x5d, 0x35, 0x61, 0x35, 0x65, 0x35, 0x69, 0x35, 0x6d, 0x35, 0x71, 0x35, 0x75, 0x35, 0x79, 0x35, 0x7d, 0x35, 0x81, 0x35, 0x85, 0x35, 0x89, 0x35, 0x8d, 0x35, 0x91, 0x35, 0x95, 0x35, 0x99, 0x35, 0xbe, 0x5e, 0xea, 0x19, 0xbe, 0x5f, 0xeb, 0x19, 0xbe, 0x5d, 0xec, 0x19, 0xbe, 0x5e, 0xee, 0x19, 0xbe, 0x5f, 0xed, 0x19, 0xbe, 0x5d, 0xef, 0x19, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x06, 0xaa, 0x0e, 0xaa, 0x14, 0x22, 
+0x00, 0x35, 0xe8, 0x9f, 0x06, 0xaa, 0x0e, 0xaa, 0x16, 0xaa, 0xe4, 0x9f, 0x0e, 0xaa, 0x16, 0xaa, 0x1e, 0xaa, 0xe0, 0x9f, 0x16, 0xaa, 0x1e, 0xaa, 0x26, 0xaa, 0xdc, 0x9f, 0x1e, 0xaa, 0x26, 0xaa, 0x2e, 0xaa, 0xd8, 0x9f, 0x26, 0xaa, 0x2e, 0xaa, 0x36, 0xaa, 0xd4, 0x9f, 0x2e, 0xaa, 0x36, 0xaa, 0x3e, 0xaa, 0xd0, 0x9f, 0x36, 0xaa, 0x3e, 0xaa, 0x46, 0xaa, 0xcc, 0x9f, 0x3e, 0xaa, 0x46, 0xaa, 0x4e, 0xaa, 0xc8, 0x9f, 0x46, 0xaa, 0x4e, 0xaa, 0x56, 0xaa, 0xc4, 0x9f, 0x4e, 0xaa, 0x56, 0xaa, 0x5e, 0xaa, 0xc0, 0x9f, 0x56, 0xaa, 0x5e, 0xaa, 0x66, 0xaa, 0xbc, 0x9f, 0x5e, 0xaa, 0x66, 0xaa, 0x6e, 0xaa, 0xb8, 0x9f, 0x66, 0xaa, 0x6e, 0xaa, 0x76, 0xaa, 0xb4, 0x9f, 0x6e, 0xaa, 0x76, 0xaa, 0x7e, 0xaa, 0xb0, 0x9f, 0x76, 0xaa, 0x7e, 0xaa, 0x07, 0xaa, 0xac, 0x9f, 0x7e, 0xaa, 0x07, 0xaa, 0x0f, 0xaa, 0x03, 0x1e, 
+0x40, 0x35, 0xa8, 0x9f, 0x07, 0xaa, 0x0f, 0xaa, 0x17, 0xaa, 0xa4, 0x9f, 0x0f, 0xaa, 0x17, 0xaa, 0x1f, 0xaa, 0xa0, 0x9f, 0x17, 0xaa, 0x1f, 0xaa, 0x27, 0xaa, 0x9c, 0x9f, 0x1f, 0xaa, 0x27, 0xaa, 0x2f, 0xaa, 0x98, 0x9f, 0x27, 0xaa, 0x2f, 0xaa, 0x37, 0xaa, 0x94, 0x9f, 0x2f, 0xaa, 0x37, 0xaa, 0x3f, 0xaa, 0x90, 0x9f, 0x37, 0xaa, 0x3f, 0xaa, 0x47, 0xaa, 0x8c, 0x9f, 0x3f, 0xaa, 0x47, 0xaa, 0x4f, 0xaa, 0x88, 0x9f, 0x47, 0xaa, 0x4f, 0xaa, 0x57, 0xaa, 0x84, 0x9f, 0x4f, 0xaa, 0x57, 0xaa, 0x5f, 0xaa, 0x80, 0x9f, 0x57, 0xaa, 0x5f, 0xaa, 0x67, 0xaa, 0x7c, 0x9f, 0x5f, 0xaa, 0x67, 0xaa, 0x6f, 0xaa, 0x78, 0x9f, 0x67, 0xaa, 0x6f, 0xaa, 0x77, 0xaa, 0x74, 0x9f, 0x6f, 0xaa, 0x77, 0xaa, 0x7f, 0xaa, 0x70, 0x9f, 0x77, 0xaa, 0x7f, 0xaa, 0x05, 0xaa, 0x6c, 0x9f, 0x7f, 0xaa, 0x05, 0xaa, 0x0d, 0xaa, 0x6a, 0x1a, 
+0x80, 0x35, 0x68, 0x9f, 0x05, 0xaa, 0x0d, 0xaa, 0x15, 0xaa, 0x64, 0x9f, 0x0d, 0xaa, 0x15, 0xaa, 0x1d, 0xaa, 0x60, 0x9f, 0x15, 0xaa, 0x1d, 0xaa, 0x25, 0xaa, 0x5c, 0x9f, 0x25, 0xaa, 0x2d, 0xaa, 0x35, 0xaa, 0x58, 0x9f, 0x2d, 0xaa, 0x35, 0xaa, 0x3d, 0xaa, 0x54, 0x9f, 0x35, 0xaa, 0x3d, 0xaa, 0x45, 0xaa, 0x50, 0x9f, 0x3d, 0xaa, 0x45, 0xaa, 0x4d, 0xaa, 0x4c, 0x9f, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x00, 0x61, 0xff, 0x63, 0xff, 0x6b, 0xbe, 0x5b, 0xed, 0x19, 0xbe, 0x5b, 0xee, 0x19, 0xbe, 0x5b, 0xef, 0x19, 0x9e, 0x5c, 0xe8, 0x19, 0x10, 0x67, 0x9f, 0x48, 0x02, 0x80, 0xe1, 0x5b, 0x01, 0x9e, 0x81, 0x5b, 0x9e, 0x5d, 0xea, 0x19, 0x01, 0x67, 0x00, 0x64, 0x3c, 0x48, 0x04, 0x8a, 0x0f, 0x64, 0x3c, 0x48, 0x08, 0x80, 0x17, 0x9e, 0x78, 0x6f, 
+0xc0, 0x35, 0xff, 0x62, 0xff, 0x6a, 0x05, 0xac, 0x1e, 0x92, 0x02, 0xaa, 0x0a, 0xaa, 0x1b, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0xe5, 0x26, 0x00, 0x64, 0x9e, 0x48, 0x15, 0x88, 0xe8, 0x5f, 0x47, 0x34, 0xe6, 0x5f, 0x47, 0x36, 0xc4, 0x26, 0xe6, 0x5f, 0x47, 0x34, 0xc4, 0x22, 0xe8, 0x5f, 0x0b, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0x7d, 0xac, 0x07, 0x92, 0x7a, 0xaa, 0x72, 0xaa, 0x9e, 0x5c, 0xee, 0x19, 0x04, 0xaa, 0xbe, 0x5c, 0xee, 0x19, 0x19, 0x01, 0xe6, 0x5f, 0x9e, 0x5c, 0xed, 0x19, 0x82, 0x24, 0xbe, 0x5c, 0xed, 0x19, 0x79, 0x48, 0x01, 0x8a, 0xcd, 0x9f, 0x9e, 0x5c, 0xe8, 0x19, 0x10, 0x67, 0x9f, 0x48, 0x80, 0x8a, 0x7f, 0x80, 0x00, 0x61, 0xe1, 0x5b, 0x87, 0x16, 0xdf, 0x48, 0x01, 0x94, 0xc1, 0x5b, 0x9e, 0x5d, 0xeb, 0x19, 0x01, 0x67, 0x00, 0x64, 0x3c, 0x48, 0x04, 0x8a, 0x0f, 0x64, 0x3c, 0x48, 0x9c, 0x3f, 
+0x00, 0x36, 0x0d, 0x80, 0x1c, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0x05, 0xac, 0x23, 0x92, 0x9e, 0x5c, 0xed, 0x19, 0x7c, 0xaa, 0xbe, 0x5c, 0xed, 0x19, 0x02, 0xaa, 0x0a, 0xaa, 0x1b, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0xe5, 0x26, 0x00, 0x64, 0x9e, 0x48, 0x15, 0x88, 0xe8, 0x5f, 0x47, 0x34, 0xe6, 0x5f, 0x47, 0x36, 0xc4, 0x26, 0xe6, 0x5f, 0x47, 0x34, 0xc4, 0x22, 0xe8, 0x5f, 0x0b, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0x7d, 0xac, 0x07, 0x92, 0x7a, 0xaa, 0x72, 0xaa, 0x9e, 0x5c, 0xef, 0x19, 0x04, 0xaa, 0xbe, 0x5c, 0xef, 0x19, 0x19, 0x01, 0xe6, 0x5f, 0x9e, 0x5c, 0xee, 0x19, 0x82, 0x24, 0xbe, 0x5c, 0xee, 0x19, 0x79, 0x48, 0x01, 0x8a, 0xc8, 0x9f, 0x00, 0x61, 0x9e, 0x5c, 0xe8, 0x19, 0x20, 0x67, 0x9f, 0x48, 0x38, 0x8a, 0x37, 0x80, 0x87, 0x13, 0x9e, 0x5d, 0xec, 0x19, 0x01, 0x67, 0x00, 0x64, 0x3c, 0x48, 0x6b, 0x27, 
+0x40, 0x36, 0x04, 0x8a, 0x0f, 0x64, 0x3c, 0x48, 0x0d, 0x80, 0x1c, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0x05, 0xac, 0x1e, 0x92, 0x02, 0xaa, 0x0a, 0xaa, 0x9e, 0x5c, 0xee, 0x19, 0x7c, 0xaa, 0xbe, 0x5c, 0xee, 0x19, 0x16, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0xe5, 0x26, 0x00, 0x64, 0x9e, 0x48, 0x10, 0x88, 0xe8, 0x5f, 0x47, 0x34, 0xe6, 0x5f, 0x47, 0x36, 0xc4, 0x26, 0xe6, 0x5f, 0x47, 0x34, 0xc4, 0x22, 0xe8, 0x5f, 0x06, 0x9e, 0xff, 0x62, 0xff, 0x6a, 0x7d, 0xac, 0x02, 0x92, 0x7a, 0xaa, 0x72, 0xaa, 0x19, 0x01, 0xe6, 0x5f, 0x9e, 0x5c, 0xef, 0x19, 0x82, 0x24, 0xbe, 0x5c, 0xef, 0x19, 0x79, 0x48, 0x01, 0x8a, 0xcd, 0x9f, 0x9e, 0x59, 0xed, 0x19, 0xbe, 0x59, 0xea, 0x19, 0x9e, 0x5a, 0xee, 0x19, 0xbe, 0x5a, 0xeb, 0x19, 0x9e, 0x5b, 0xef, 0x19, 0xbe, 0x5b, 0xec, 0x19, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x03, 0x6d, 
+0x80, 0x36, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0xef, 0x63, 0x02, 0x6b, 0x65, 0x58, 0x63, 0x59, 0x19, 0x48, 0x03, 0x82, 0x21, 0x5a, 0x01, 0x67, 0x02, 0x9e, 0x01, 0x5a, 0x00, 0x67, 0xef, 0x63, 0x02, 0x6b, 0x1a, 0x03, 0x02, 0x64, 0x9e, 0x5d, 0xb8, 0x00, 0x1b, 0x15, 0xa7, 0x38, 0xaa, 0x36, 0x63, 0x59, 0x41, 0x5a, 0x3a, 0x48, 0x01, 0x82, 0x02, 0x9e, 0x81, 0x5f, 0x21, 0x5a, 0x19, 0x03, 0x19, 0x04, 0xbe, 0x5f, 0xea, 0x1e, 0xbe, 0x5a, 0xeb, 0x1e, 0x1e, 0x59, 0x9e, 0x59, 0xc5, 0x1a, 0x41, 0x16, 0x3e, 0x59, 0x17, 0x80, 0xef, 0x64, 0x02, 0x6c, 0x09, 0x63, 0x1a, 0x6b, 0x9e, 0x5d, 0xb8, 0x00, 0x19, 0x15, 0xa7, 0x38, 0xca, 0x36, 0x41, 0x58, 0x9e, 0x5f, 0x99, 0x5e, 
+0xc0, 0x36, 0xc8, 0x1a, 0x00, 0x61, 0x9e, 0x5d, 0xc7, 0x1a, 0x07, 0x40, 0x1c, 0x5d, 0x85, 0x5e, 0xc0, 0x15, 0x01, 0x82, 0x00, 0x65, 0xbd, 0x5b, 0x0a, 0x9e, 0x09, 0x63, 0x1a, 0x6b, 0x9e, 0x5d, 0x5d, 0x1a, 0x19, 0x15, 0xa7, 0x38, 0xd4, 0x36, 0x00, 0x65, 0xbd, 0x5b, 0x00, 0x9e, 0xef, 0x63, 0x02, 0x6b, 0x70, 0x3b, 0xb8, 0x00, 0x65, 0x58, 0x63, 0x59, 0x19, 0x48, 0x03, 0x82, 0x21, 0x5a, 0x01, 0x67, 0x02, 0x9e, 0x01, 0x5a, 0x00, 0x67, 0xef, 0x63, 0x02, 0x6b, 0x1a, 0x03, 0x70, 0x3b, 0xb8, 0x00, 0x02, 0x64, 0x9e, 0x5d, 0xb9, 0x00, 0x1b, 0x15, 0xa7, 0x38, 0xf6, 0x36, 0x63, 0x59, 0x41, 0x5a, 0x3a, 0x48, 0x01, 0x82, 0x02, 0x9e, 0x81, 0x5f, 0x21, 0x5a, 0x19, 0x03, 0x19, 0x04, 0xbe, 0x5f, 0xec, 0x1e, 0xbe, 0x5a, 0xed, 0x1e, 0x1e, 0x59, 0x9e, 0x59, 0xc6, 0x1a, 0x41, 0x16, 0x3e, 0x59, 0xfd, 0x54, 
+0x00, 0x37, 0x1b, 0x80, 0x09, 0x63, 0x1a, 0x6b, 0x70, 0x3b, 0xb8, 0x00, 0xef, 0x64, 0x02, 0x6c, 0x90, 0x3c, 0xb8, 0x00, 0x9e, 0x5d, 0xb9, 0x00, 0x19, 0x15, 0xa7, 0x38, 0x1a, 0x37, 0x41, 0x58, 0x9e, 0x5f, 0xc9, 0x1a, 0x00, 0x61, 0x9e, 0x5d, 0xc7, 0x1a, 0x07, 0x40, 0x1c, 0x5d, 0x85, 0x5e, 0xc0, 0x15, 0x01, 0x82, 0x00, 0x65, 0xbd, 0x5b, 0x09, 0x9e, 0x09, 0x63, 0x1a, 0x6b, 0x9e, 0x5d, 0x5d, 0x1a, 0x19, 0x15, 0xa7, 0x38, 0x24, 0x37, 0x00, 0x65, 0xbd, 0x5b, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0xbf, 0x60, 0xf8, 0x68, 0xde, 0x58, 0x00, 0x00, 0xc0, 0x60, 0xf8, 0x68, 0xde, 0x58, 0x00, 0x00, 0xc1, 0x60, 0xf8, 0x68, 0xde, 0x58, 0x00, 0x00, 0xc2, 0x60, 0xf8, 0x68, 0xde, 0x58, 0x00, 0x00, 0xc7, 0x60, 0xf8, 0x68, 0x0e, 0x47, 
+0x40, 0x37, 0xde, 0x58, 0xff, 0xff, 0xc8, 0x60, 0xf8, 0x68, 0xde, 0x58, 0xff, 0xff, 0xc9, 0x60, 0xf8, 0x68, 0xde, 0x58, 0xff, 0xff, 0xca, 0x60, 0xf8, 0x68, 0xde, 0x58, 0xff, 0xff, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x9e, 0x58, 0xfc, 0x01, 0x78, 0xac, 0x0a, 0x90, 0x09, 0x60, 0xbe, 0x58, 0xa5, 0x1c, 0xbe, 0x58, 0xfd, 0x1c, 0xde, 0xfc, 0x90, 0xff, 0xb9, 0xff, 0xb9, 0xfe, 0x26, 0x9e, 0x9e, 0x58, 0xfc, 0x01, 0x19, 0x00, 0xff, 0x61, 0x0f, 0x69, 0x19, 0x48, 0x02, 0x82, 0xbe, 0x58, 0xfc, 0x01, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x00, 0x64, 0x9e, 0x5d, 0xfc, 0x1c, 0x9d, 0x48, 0x02, 0x88, 0x0f, 0x61, 0x01, 0x9e, 0x01, 0x61, 0x9e, 0x5e, 0xfc, 0x1c, 0x9e, 0x48, 0x01, 0x8a, 0x19, 0x16, 0xbe, 0x5e, 0xfc, 0x1c, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x19, 0x48, 0x09, 0x9c, 0xf6, 0x03, 
+0x80, 0x37, 0x9e, 0x58, 0xfc, 0x01, 0x78, 0xa8, 0xbe, 0x58, 0xfc, 0x01, 0x03, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0xfc, 0x01, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x04, 0x00, 0x08, 0x00, 0x10, 0x00, 0x20, 0x00, 0x40, 0x00, 0x80, 0x00, 0x60, 0xb0, 0x78, 0xb1, 0x78, 0x0f, 0x78, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0x44, 0xa9, 0xdb, 0xef, 0xb1, 0x70, 0x9e, 0x59, 0xbc, 0x00, 0x19, 0x48, 0x6e, 0x8a, 0x9e, 0x58, 0xb1, 0x00, 0xd5, 0xf0, 0xc6, 0xf0, 0x00, 0x60, 0xb0, 0x78, 0x0f, 0x78, 0xb0, 0x72, 0x9e, 0x59, 0xbb, 0x00, 0x0f, 0x77, 0x27, 0x01, 0x59, 0x48, 0x5c, 0x8a, 0x44, 0x3b, 0x0f, 0x00, 0x60, 0x3b, 0x8d, 0x37, 0x69, 0x5b, 0xbf, 0x2a, 
+0xc0, 0x37, 0x42, 0x38, 0x0f, 0x00, 0x01, 0x9a, 0x06, 0x9e, 0xbe, 0x5b, 0x0f, 0xf8, 0x00, 0x63, 0xbe, 0x5b, 0x10, 0xf8, 0x05, 0x9e, 0xbe, 0x5b, 0x10, 0xf8, 0x00, 0x63, 0xbe, 0x5b, 0x0f, 0xf8, 0x9e, 0x58, 0xb1, 0x00, 0x9e, 0x59, 0xb0, 0x00, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x0c, 0xb7, 0x17, 0xaa, 0x8c, 0xb7, 0x9e, 0x59, 0x00, 0xf8, 0x11, 0xa8, 0xbe, 0x59, 0x00, 0xf8, 0x00, 0x9e, 0x1a, 0x38, 0x9e, 0x59, 0x00, 0xf8, 0x19, 0xac, 0xfb, 0x91, 0x0c, 0xb7, 0x17, 0xa8, 0x8c, 0xb7, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0xbe, 0x58, 0xb1, 0x00, 0xbe, 0x59, 0xb0, 0x00, 0x9e, 0x5c, 0xe8, 0x00, 0x40, 0x3d, 0x62, 0xf8, 0xa3, 0x5d, 0xe9, 0xc8, 
+0x00, 0x38, 0x00, 0x61, 0x9e, 0x5b, 0xbb, 0x00, 0xb1, 0x70, 0x03, 0x40, 0x04, 0x04, 0x40, 0x3e, 0xb6, 0x5e, 0xc9, 0x5e, 0xd0, 0x48, 0x48, 0x00, 0x03, 0x8a, 0x86, 0x04, 0xbb, 0x5c, 0x03, 0x9e, 0x0f, 0x77, 0x19, 0x07, 0x0f, 0x7f, 0xb0, 0x72, 0x19, 0x02, 0xb0, 0x7a, 0x19, 0x07, 0x9d, 0x9f, 0xb1, 0x70, 0x19, 0x00, 0xb1, 0x78, 0x8b, 0x9f, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x10, 0xf8, 0x44, 0xab, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x3a, 0x38, 0x40, 0x60, 0x57, 0x68, 0xe0, 0x63, 0x1a, 0x6b, 0x40, 0x61, 0x19, 0x11, 0x27, 0x38, 0x32, 0x38, 0x0b, 0x5a, 0x5d, 0x5b, 0x1a, 0x38, 0x3a, 0x38, 0x06, 0x71, 0x51, 0xac, 0x1c, 0x92, 0x09, 0xac, 0x36, 0x92, 0x01, 0xac, 0x34, 0x92, 0x0a, 0x60, 0xbe, 0x58, 0xc1, 0x1a, 0x03, 0x60, 0xbe, 0x58, 0x40, 0x7b, 
+0x40, 0x38, 0xc2, 0x1a, 0x12, 0x60, 0xbe, 0x58, 0xc3, 0x1a, 0x0e, 0x60, 0xbe, 0x58, 0xc4, 0x1a, 0x9e, 0x58, 0xd6, 0x1a, 0xbe, 0x58, 0x47, 0x1e, 0xbe, 0x58, 0x04, 0xf8, 0x01, 0x60, 0x23, 0x78, 0x00, 0x60, 0xbe, 0x58, 0x1b, 0x1e, 0x36, 0x9e, 0x48, 0x60, 0xbe, 0x58, 0xc1, 0x1a, 0x48, 0x60, 0xbe, 0x58, 0xc2, 0x1a, 0x60, 0x60, 0xbe, 0x58, 0xc3, 0x1a, 0x60, 0x60, 0xbe, 0x58, 0xc4, 0x1a, 0x50, 0x60, 0x02, 0x68, 0x1c, 0x78, 0x02, 0x60, 0x23, 0x78, 0x9e, 0x59, 0x47, 0x1e, 0x9e, 0x58, 0xd6, 0x1a, 0x19, 0x48, 0x1f, 0x88, 0x9e, 0x59, 0xd6, 0x1a, 0xbe, 0x59, 0x04, 0xf8, 0x1a, 0x9e, 0x20, 0x60, 0xbe, 0x58, 0xc1, 0x1a, 0x20, 0x60, 0xbe, 0x58, 0xc2, 0x1a, 0x30, 0x60, 0xbe, 0x58, 0xc3, 0x1a, 0x30, 0x60, 0xbe, 0x58, 0xc4, 0x1a, 0x80, 0x60, 0x1c, 0x78, 0x01, 0x60, 0x23, 0x78, 0x9e, 0x59, 0x59, 0x63, 
+0x80, 0x38, 0x47, 0x1e, 0x9e, 0x58, 0xd6, 0x1a, 0x19, 0x48, 0x04, 0x88, 0x9e, 0x59, 0xd6, 0x1a, 0xbe, 0x59, 0x04, 0xf8, 0x3a, 0x38, 0xaa, 0x66, 0x15, 0x6e, 0xc3, 0x5d, 0xa4, 0x3d, 0xff, 0x0f, 0xbb, 0x5e, 0x9e, 0x5f, 0x4b, 0x1a, 0xe2, 0x38, 0x01, 0x00, 0x0b, 0x9a, 0xe2, 0x3e, 0x01, 0x00, 0xc7, 0x38, 0x9f, 0x38, 0xe0, 0x3e, 0xaa, 0x15, 0xc3, 0x5d, 0xa4, 0x3d, 0xff, 0x00, 0xbb, 0x5e, 0x19, 0x17, 0x1a, 0x38, 0x3a, 0x38, 0x3c, 0x60, 0xbe, 0x58, 0xce, 0x04, 0x0f, 0x60, 0xbe, 0x58, 0xd0, 0x04, 0x06, 0x60, 0xbe, 0x58, 0xd1, 0x04, 0x04, 0x60, 0xbe, 0x58, 0xd2, 0x04, 0x07, 0x60, 0xbe, 0x58, 0xd3, 0x04, 0x01, 0x60, 0xbe, 0x58, 0xd4, 0x04, 0x14, 0x60, 0xbe, 0x58, 0xd5, 0x04, 0x05, 0x60, 0xbe, 0x58, 0xd6, 0x04, 0x3c, 0x60, 0xbe, 0x58, 0xcd, 0x04, 0x00, 0x60, 0xbe, 0x58, 0xc7, 0x04, 0x25, 0xb4, 
+0xc0, 0x38, 0x3a, 0x38, 0x8a, 0xf8, 0xce, 0x60, 0x04, 0x68, 0xd0, 0x61, 0x04, 0x69, 0xd1, 0x62, 0x04, 0x6a, 0xd2, 0x63, 0x04, 0x6b, 0xd3, 0x64, 0x04, 0x6c, 0xd4, 0x65, 0x04, 0x6d, 0xd5, 0x66, 0x04, 0x6e, 0xd6, 0x67, 0x04, 0x6f, 0x9e, 0x58, 0xe2, 0x19, 0x1a, 0x10, 0x04, 0x8a, 0x9e, 0x58, 0xea, 0x04, 0x1a, 0x10, 0x61, 0x88, 0x9e, 0x58, 0x58, 0x1a, 0x18, 0x10, 0x5d, 0x9a, 0x1a, 0x10, 0x5b, 0x98, 0x9e, 0x58, 0x58, 0x1a, 0x1a, 0x10, 0x19, 0x8a, 0x9e, 0x58, 0xcd, 0x04, 0x9e, 0x59, 0xce, 0x04, 0x30, 0x39, 0xd5, 0x04, 0x01, 0x10, 0x05, 0x98, 0x9e, 0x58, 0xc7, 0x04, 0x12, 0x38, 0xd4, 0x04, 0x3e, 0x96, 0xc7, 0x60, 0x04, 0x68, 0x9e, 0x59, 0xd4, 0x04, 0x3b, 0x58, 0xae, 0xfc, 0x46, 0xf9, 0x00, 0xfc, 0x8a, 0xf8, 0x3e, 0x58, 0x98, 0x3f, 0x41, 0x0c, 0x9e, 0x58, 0x72, 0x19, 0x73, 0x61, 0xdc, 0x71, 
+0x00, 0x39, 0x19, 0x69, 0x23, 0x59, 0x20, 0x10, 0x04, 0x58, 0x9e, 0x59, 0x86, 0x19, 0x87, 0x62, 0x19, 0x6a, 0x43, 0x5a, 0x41, 0x11, 0x04, 0x59, 0x01, 0x00, 0xbe, 0x58, 0xee, 0x04, 0x9e, 0x59, 0xd3, 0x04, 0x01, 0x11, 0x22, 0x98, 0xc7, 0x60, 0x04, 0x68, 0x03, 0x59, 0x19, 0x01, 0x32, 0x3a, 0xd4, 0x04, 0x02, 0x94, 0x3b, 0x58, 0x2a, 0x9e, 0x9e, 0x59, 0xd4, 0x04, 0x3b, 0x58, 0xcd, 0x60, 0x04, 0x68, 0x5a, 0x61, 0x03, 0x5a, 0x19, 0x02, 0x41, 0x13, 0x02, 0x94, 0x3b, 0x58, 0x1e, 0x9e, 0x9e, 0x59, 0xce, 0x04, 0x26, 0x59, 0x41, 0x13, 0x01, 0x9a, 0x21, 0x5a, 0x5b, 0x58, 0x16, 0x9e, 0x0b, 0x9e, 0x3c, 0x60, 0xbe, 0x58, 0xcd, 0x04, 0x11, 0x9e, 0xc7, 0x60, 0x04, 0x68, 0x03, 0x59, 0x19, 0x11, 0x22, 0x3a, 0x00, 0x00, 0x09, 0x98, 0xc7, 0x60, 0x04, 0x68, 0xde, 0x58, 0x00, 0x00, 0x9e, 0x58, 0x73, 0xc2, 
+0x40, 0x39, 0xce, 0x04, 0xbe, 0x58, 0xcd, 0x04, 0x01, 0x9e, 0x3b, 0x58, 0x3a, 0x38, 0xc8, 0x67, 0x04, 0x6f, 0x00, 0x65, 0xbd, 0x5f, 0xbb, 0x5f, 0xbe, 0x5d, 0xcb, 0x04, 0xbe, 0x5d, 0xcc, 0x04, 0x9e, 0x5f, 0x4b, 0x1a, 0x18, 0x17, 0xa5, 0x8a, 0xe2, 0x38, 0x14, 0x00, 0x1a, 0x00, 0xa5, 0x94, 0x00, 0x67, 0xe0, 0x38, 0xaa, 0x15, 0x03, 0x58, 0x12, 0x38, 0x23, 0x00, 0x93, 0x96, 0xe0, 0x3e, 0xde, 0x15, 0xc3, 0x5e, 0xe0, 0x3d, 0xf2, 0x15, 0xa3, 0x5d, 0xa6, 0x16, 0x19, 0x06, 0xe0, 0x3d, 0x1a, 0x16, 0xa3, 0x5d, 0xe0, 0x3c, 0x06, 0x16, 0x83, 0x5c, 0x85, 0x15, 0x19, 0x05, 0xe0, 0x3c, 0xaa, 0x15, 0x83, 0x5c, 0xc5, 0x00, 0xbe, 0x58, 0xec, 0x04, 0x12, 0x38, 0xd1, 0x04, 0x7a, 0x96, 0xc5, 0x00, 0x12, 0x38, 0xd0, 0x04, 0x76, 0x98, 0xe0, 0x38, 0xaa, 0x15, 0x7c, 0xa8, 0x9b, 0x58, 0x06, 0xac, 0x0c, 0x00, 
+0x80, 0x39, 0x3b, 0x92, 0x05, 0xac, 0x20, 0x92, 0xe0, 0x3c, 0xde, 0x15, 0x83, 0x5c, 0xc8, 0x5a, 0x19, 0x12, 0x82, 0x04, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0xa8, 0x59, 0x19, 0x11, 0x61, 0x03, 0x80, 0x38, 0x48, 0x0e, 0x9e, 0x5a, 0xb8, 0x00, 0x43, 0x48, 0x03, 0x59, 0x01, 0xa8, 0x3d, 0x58, 0x03, 0x59, 0x01, 0xa8, 0x3f, 0x58, 0x10, 0x38, 0xb8, 0x00, 0x03, 0x59, 0x01, 0xa8, 0x3d, 0x58, 0x03, 0x59, 0x01, 0xa8, 0x3b, 0x58, 0x4c, 0x9e, 0xe0, 0x3c, 0xde, 0x15, 0x83, 0x5c, 0xc8, 0x5a, 0x19, 0x12, 0x82, 0x04, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0xa2, 0x39, 0x01, 0x00, 0x28, 0x59, 0x61, 0x03, 0x80, 0x38, 0x48, 0x0e, 0x9e, 0x5a, 0xb8, 0x00, 0x43, 0x48, 0x03, 0x59, 0x01, 0xa8, 0x3d, 0x58, 0x03, 0x59, 0x01, 0xa8, 0x3b, 0x58, 0x33, 0x9e, 0x05, 0xac, 0x1b, 0x92, 0xe0, 0x3c, 0xde, 0x15, 0x9b, 0x9c, 
+0xc0, 0x39, 0x83, 0x5c, 0xc2, 0x3a, 0x01, 0x00, 0x48, 0x5a, 0x82, 0x04, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0xa8, 0x59, 0x19, 0x11, 0x61, 0x03, 0x80, 0x38, 0x48, 0x0e, 0x9e, 0x5a, 0xb8, 0x00, 0x43, 0x48, 0x03, 0x59, 0x01, 0xa8, 0x3b, 0x58, 0x10, 0x38, 0xb8, 0x00, 0x03, 0x59, 0x01, 0xa8, 0x3b, 0x58, 0x16, 0x9e, 0xe0, 0x3c, 0xde, 0x15, 0x83, 0x5c, 0xc2, 0x3a, 0x01, 0x00, 0x48, 0x5a, 0x82, 0x04, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0xa2, 0x39, 0x01, 0x00, 0x28, 0x59, 0x61, 0x03, 0x80, 0x38, 0x48, 0x0e, 0x9e, 0x5a, 0xb8, 0x00, 0x43, 0x48, 0x03, 0x59, 0x01, 0xa8, 0x3b, 0x58, 0x3e, 0xfa, 0xfd, 0xf9, 0x19, 0x07, 0xf2, 0x38, 0x4b, 0x1a, 0x63, 0x97, 0xa0, 0xfa, 0xcb, 0xfa, 0x04, 0x9e, 0x9e, 0x58, 0xce, 0x04, 0xbe, 0x58, 0xcd, 0x04, 0x3a, 0x38, 0x9e, 0x5e, 0xca, 0x04, 0xc2, 0x38, 0xc1, 0x97, 
+0x00, 0x3a, 0x01, 0x00, 0x23, 0x9a, 0x00, 0x66, 0xc0, 0x3d, 0x01, 0x00, 0xc0, 0x3c, 0xe0, 0x04, 0x83, 0x5c, 0xa0, 0x3b, 0xe0, 0x04, 0x74, 0x10, 0x04, 0x58, 0xc0, 0x3c, 0xe5, 0x04, 0x83, 0x5c, 0xa0, 0x3b, 0xe5, 0x04, 0x74, 0x11, 0x04, 0x59, 0x01, 0x00, 0x19, 0x10, 0x0f, 0x9a, 0x01, 0x61, 0xbe, 0x59, 0xcb, 0x04, 0xc8, 0x60, 0x04, 0x68, 0xe2, 0x39, 0x10, 0x00, 0x01, 0x96, 0x19, 0x00, 0xe0, 0x39, 0x85, 0x29, 0x29, 0x59, 0x11, 0x29, 0x3b, 0x58, 0x0b, 0x9e, 0x9e, 0x58, 0xcd, 0x04, 0x9e, 0x59, 0xce, 0x04, 0x30, 0x39, 0xd5, 0x04, 0x01, 0x10, 0xec, 0x99, 0x02, 0x60, 0xbe, 0x58, 0xcc, 0x04, 0x19, 0x05, 0xb2, 0x38, 0xca, 0x04, 0xd1, 0x97, 0x19, 0x06, 0xd2, 0x38, 0xca, 0x04, 0x19, 0x00, 0xca, 0x97, 0x03, 0x9e, 0x02, 0x60, 0xbe, 0x58, 0xcc, 0x04, 0x3a, 0x38, 0xe0, 0x3b, 0x1a, 0x16, 0xab, 0xe3, 
+0x40, 0x3a, 0x63, 0x5e, 0xe0, 0x3b, 0xde, 0x15, 0x63, 0x5d, 0x00, 0x60, 0xbe, 0x58, 0xca, 0x04, 0x1e, 0x5d, 0x6d, 0xfa, 0x9c, 0xfc, 0x59, 0x48, 0x15, 0x96, 0x5b, 0x48, 0x13, 0x96, 0x88, 0xfc, 0x59, 0x48, 0x10, 0x96, 0x5b, 0x48, 0x0e, 0x96, 0x9e, 0x58, 0xca, 0x04, 0x02, 0x3c, 0x05, 0x00, 0x09, 0x94, 0x00, 0x3c, 0xe0, 0x04, 0xbb, 0x5c, 0x00, 0x3c, 0xe5, 0x04, 0xdb, 0x5c, 0x19, 0x00, 0xbe, 0x58, 0xca, 0x04, 0x19, 0x05, 0xe0, 0x3b, 0xf2, 0x15, 0xbb, 0x49, 0xe2, 0x9b, 0x3e, 0x5d, 0x19, 0x06, 0xe0, 0x3b, 0x06, 0x16, 0xdb, 0x49, 0xdb, 0x9b, 0x3a, 0x38, 0x1e, 0x5e, 0xc0, 0x3c, 0x01, 0x00, 0xa0, 0x3b, 0x01, 0x00, 0x19, 0x16, 0x19, 0x15, 0xd7, 0x62, 0x04, 0x6a, 0x1e, 0x5d, 0xc2, 0x39, 0x00, 0x00, 0x1b, 0x96, 0xd2, 0x39, 0xb9, 0x00, 0x18, 0x94, 0xa0, 0x38, 0x48, 0x0e, 0x9e, 0x59, 0x83, 0x10, 
+0x80, 0x3a, 0xb8, 0x00, 0x26, 0x48, 0xa2, 0x39, 0x00, 0x00, 0x09, 0x96, 0xb2, 0x39, 0xb8, 0x00, 0x06, 0x94, 0x03, 0x59, 0x01, 0xac, 0x01, 0x90, 0x28, 0x59, 0x3d, 0x5a, 0x02, 0x9e, 0x00, 0x61, 0x3d, 0x5a, 0x19, 0x00, 0x19, 0x05, 0xbb, 0x48, 0xee, 0x9b, 0x04, 0x9e, 0x00, 0x61, 0x3d, 0x5a, 0x3d, 0x5a, 0x3d, 0x5a, 0x3e, 0x5d, 0x19, 0x06, 0xdc, 0x48, 0xd9, 0x9b, 0x19, 0x05, 0x3e, 0x5e, 0x3a, 0x38, 0x9e, 0x5f, 0xcb, 0x04, 0xf0, 0x3f, 0xcc, 0x04, 0xe2, 0x38, 0x01, 0x00, 0x17, 0x8a, 0xe2, 0x38, 0x02, 0x00, 0x08, 0x8a, 0xe2, 0x38, 0x03, 0x00, 0x1b, 0x8a, 0x9e, 0x58, 0xce, 0x04, 0xbe, 0x58, 0xcd, 0x04, 0x16, 0x9e, 0x9e, 0x58, 0xcd, 0x04, 0x12, 0x38, 0xd6, 0x04, 0x9e, 0x59, 0xce, 0x04, 0xb8, 0x11, 0x01, 0x11, 0x0d, 0x96, 0xbe, 0x58, 0xcd, 0x04, 0x0a, 0x9e, 0x9e, 0x58, 0xcd, 0x04, 0xf2, 0xf3, 
+0xc0, 0x3a, 0x19, 0x00, 0x9e, 0x59, 0xce, 0x04, 0xb8, 0x01, 0x01, 0x11, 0x02, 0x98, 0xbe, 0x58, 0xcd, 0x04, 0x9e, 0x58, 0xcd, 0x04, 0x3a, 0x38, 0x9e, 0x5f, 0x4b, 0x1a, 0xbe, 0x5f, 0x82, 0x1a, 0x00, 0x67, 0x9e, 0x5e, 0xcd, 0x04, 0x9e, 0x5a, 0xce, 0x04, 0x9e, 0x59, 0xd5, 0x04, 0x41, 0x10, 0xc0, 0x10, 0x19, 0x96, 0x41, 0x00, 0xc0, 0x10, 0x23, 0x9a, 0xe0, 0x38, 0xaa, 0x15, 0x03, 0x58, 0x04, 0x38, 0xff, 0x00, 0xbe, 0x58, 0xed, 0x04, 0x12, 0x39, 0xd2, 0x04, 0x19, 0x9a, 0xc8, 0x60, 0x04, 0x68, 0xe2, 0x39, 0x10, 0x00, 0x01, 0x96, 0x19, 0x00, 0xe0, 0x39, 0x85, 0x29, 0x29, 0x59, 0x11, 0x29, 0x3b, 0x58, 0x18, 0x9e, 0xc8, 0x60, 0x04, 0x68, 0xe2, 0x39, 0x10, 0x00, 0x01, 0x96, 0x19, 0x00, 0xe0, 0x39, 0x85, 0x29, 0x29, 0x59, 0x20, 0x59, 0x11, 0x21, 0x3b, 0x58, 0xe2, 0x9e, 0xc8, 0x60, 0x5f, 0xc7, 
+0x00, 0x3b, 0x04, 0x68, 0xe2, 0x39, 0x10, 0x00, 0x01, 0x96, 0x19, 0x00, 0xe0, 0x39, 0x85, 0x29, 0x29, 0x59, 0x11, 0x21, 0xd7, 0x8a, 0xe0, 0x3e, 0xde, 0x15, 0xc3, 0x5e, 0xe0, 0x3d, 0xf2, 0x15, 0xb6, 0x16, 0x19, 0x06, 0xe0, 0x3d, 0x1a, 0x16, 0xa3, 0x5d, 0xe0, 0x3c, 0x06, 0x16, 0x95, 0x15, 0x19, 0x05, 0xdd, 0x48, 0x04, 0x98, 0x62, 0x96, 0x06, 0xac, 0x32, 0x92, 0x02, 0x9e, 0x06, 0xac, 0x2f, 0x92, 0xe0, 0x3c, 0xde, 0x15, 0x83, 0x5c, 0xc8, 0x5e, 0x19, 0x16, 0xc4, 0x06, 0xe0, 0x38, 0xf2, 0x15, 0x03, 0x59, 0x1e, 0x59, 0xdb, 0x58, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0xa3, 0x05, 0x19, 0x15, 0xe7, 0xfb, 0xe0, 0x38, 0xaa, 0x15, 0x5b, 0x58, 0xc0, 0x3c, 0x01, 0x00, 0x3e, 0x5e, 0x9e, 0x58, 0x4b, 0x1a, 0x00, 0x39, 0xde, 0x15, 0x9b, 0x59, 0x00, 0x39, 0xf2, 0x15, 0xdb, 0x59, 0x00, 0x39, 0x52, 0x38, 
+0x40, 0x3b, 0x06, 0x16, 0xbb, 0x59, 0x00, 0x39, 0x1a, 0x16, 0x7b, 0x59, 0xe7, 0xfb, 0x9e, 0x5c, 0x4b, 0x1a, 0x80, 0x39, 0xaa, 0x15, 0xe1, 0x58, 0xfe, 0x58, 0x68, 0xa8, 0x48, 0x29, 0x8c, 0x9e, 0xe0, 0x3c, 0xde, 0x15, 0x83, 0x5c, 0x19, 0x16, 0xc8, 0x5e, 0xc4, 0x06, 0xe0, 0x38, 0xf2, 0x15, 0x03, 0x59, 0x1e, 0x59, 0xdb, 0x58, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0xa3, 0x05, 0x19, 0x15, 0xe7, 0xfb, 0xe0, 0x38, 0xaa, 0x15, 0x5b, 0x58, 0xc1, 0x5c, 0x3e, 0x5e, 0x9e, 0x58, 0x4b, 0x1a, 0x00, 0x39, 0xde, 0x15, 0x9b, 0x59, 0x00, 0x39, 0xf2, 0x15, 0xdb, 0x59, 0x00, 0x39, 0x06, 0x16, 0xbb, 0x59, 0x00, 0x39, 0x1a, 0x16, 0x7b, 0x59, 0xe7, 0xfb, 0x9e, 0x5c, 0x4b, 0x1a, 0x80, 0x39, 0xaa, 0x15, 0xe1, 0x58, 0xfe, 0x58, 0x68, 0xa8, 0x48, 0x29, 0x5e, 0x9e, 0x05, 0xac, 0x2f, 0x92, 0xe0, 0x3c, 0xc3, 0x56, 
+0x80, 0x3b, 0xde, 0x15, 0x83, 0x5c, 0x86, 0x06, 0x19, 0x16, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0xa8, 0x5d, 0x19, 0x15, 0xa3, 0x05, 0xe0, 0x38, 0x06, 0x16, 0x03, 0x59, 0x1e, 0x59, 0xbb, 0x58, 0xe7, 0xfb, 0xe0, 0x38, 0xaa, 0x15, 0x5b, 0x58, 0xa0, 0x3b, 0x01, 0x00, 0x3e, 0x5d, 0x9e, 0x58, 0x4b, 0x1a, 0x00, 0x39, 0xde, 0x15, 0x9b, 0x59, 0x00, 0x39, 0xf2, 0x15, 0xdb, 0x59, 0x00, 0x39, 0x06, 0x16, 0xbb, 0x59, 0x00, 0x39, 0x1a, 0x16, 0x7b, 0x59, 0xe7, 0xfb, 0x9e, 0x5c, 0x4b, 0x1a, 0x80, 0x39, 0xaa, 0x15, 0xe1, 0x58, 0xfe, 0x58, 0x70, 0xa8, 0x48, 0x29, 0x2d, 0x9e, 0xe0, 0x3c, 0xde, 0x15, 0x83, 0x5c, 0x86, 0x06, 0x19, 0x16, 0xe0, 0x3b, 0x1a, 0x16, 0x63, 0x5b, 0x19, 0x15, 0xa8, 0x5d, 0xa3, 0x05, 0xe0, 0x38, 0x06, 0x16, 0x03, 0x59, 0x1e, 0x59, 0xbb, 0x58, 0xe7, 0xfb, 0xe0, 0x38, 0x1b, 0xff, 
+0xc0, 0x3b, 0xaa, 0x15, 0x5b, 0x58, 0xa1, 0x5b, 0x3e, 0x5d, 0x9e, 0x58, 0x4b, 0x1a, 0x00, 0x39, 0xde, 0x15, 0x9b, 0x59, 0x00, 0x39, 0xf2, 0x15, 0xdb, 0x59, 0x00, 0x39, 0x06, 0x16, 0xbb, 0x59, 0x00, 0x39, 0x1a, 0x16, 0x7b, 0x59, 0xe7, 0xfb, 0x9e, 0x5c, 0x4b, 0x1a, 0x80, 0x39, 0xaa, 0x15, 0xe1, 0x58, 0xfe, 0x58, 0x70, 0xa8, 0x48, 0x29, 0x19, 0x04, 0xbe, 0x5c, 0x4b, 0x1a, 0x82, 0x38, 0x14, 0x00, 0x05, 0x94, 0x19, 0x07, 0xf2, 0x38, 0x82, 0x1a, 0x98, 0x3d, 0xd0, 0x3a, 0x3a, 0x38, 0x1e, 0x5e, 0x1e, 0x5b, 0x00, 0x62, 0xc4, 0x16, 0x80, 0x38, 0x48, 0x0e, 0x9e, 0x59, 0xb8, 0x00, 0x23, 0x48, 0xc7, 0x38, 0xf9, 0x3b, 0x05, 0x59, 0x01, 0xac, 0x01, 0x90, 0x28, 0x59, 0x32, 0x39, 0x1d, 0x00, 0x00, 0x9a, 0x19, 0x02, 0x19, 0x03, 0x7d, 0x48, 0xee, 0x9b, 0x3e, 0x5b, 0x3e, 0x5e, 0x3a, 0x38, 0x78, 0x3d, 
+0x00, 0x3c, 0x00, 0x60, 0xbe, 0x58, 0xe2, 0x19, 0x9e, 0x5f, 0x4b, 0x1a, 0x18, 0x17, 0x5f, 0x9a, 0x00, 0x67, 0xe0, 0x3e, 0xaa, 0x15, 0xc3, 0x5e, 0xc4, 0x3e, 0xff, 0x00, 0xd2, 0x38, 0x23, 0x00, 0x52, 0x96, 0xff, 0x62, 0xe0, 0x3e, 0x1a, 0x16, 0xd2, 0x26, 0xe0, 0x3d, 0xde, 0x15, 0xb2, 0x25, 0xe0, 0x3c, 0x06, 0x16, 0x92, 0x24, 0xe0, 0x3b, 0xf2, 0x15, 0x72, 0x23, 0x1e, 0x5f, 0xd4, 0xd0, 0x1e, 0x5d, 0x9e, 0x5a, 0xb8, 0x00, 0xa0, 0x38, 0x48, 0x0e, 0x46, 0x48, 0x03, 0x5a, 0x42, 0x38, 0x01, 0x00, 0x2b, 0x9a, 0x50, 0x67, 0x1a, 0x6f, 0xe5, 0x58, 0xe3, 0x59, 0x45, 0x48, 0x3f, 0x5f, 0x1b, 0x5f, 0x52, 0x67, 0x1a, 0x6f, 0xe5, 0x58, 0xe3, 0x59, 0x46, 0x48, 0x3f, 0x5f, 0x1b, 0x5f, 0x50, 0x3f, 0x54, 0x1a, 0xbe, 0x5f, 0x54, 0x1a, 0x7f, 0xac, 0x17, 0x90, 0xe8, 0x5f, 0xbe, 0x5f, 0x54, 0x1a, 0x3e, 0x56, 
+0x40, 0x3c, 0x9e, 0x58, 0x50, 0x1a, 0x9e, 0x59, 0x51, 0x1a, 0x28, 0x59, 0x0c, 0x58, 0xbe, 0x59, 0x51, 0x1a, 0xbe, 0x58, 0x50, 0x1a, 0x9e, 0x58, 0x52, 0x1a, 0x9e, 0x59, 0x53, 0x1a, 0x28, 0x59, 0x0c, 0x58, 0xbe, 0x59, 0x53, 0x1a, 0xbe, 0x58, 0x52, 0x1a, 0x19, 0x05, 0xbb, 0x48, 0xc9, 0x9b, 0x3e, 0x5d, 0x19, 0x06, 0xdc, 0x48, 0xc4, 0x9b, 0x3e, 0x5f, 0x67, 0xfc, 0x9e, 0x58, 0xe2, 0x19, 0x12, 0x38, 0x27, 0x00, 0x04, 0x94, 0x19, 0x07, 0xf2, 0x38, 0x4b, 0x1a, 0xa2, 0x97, 0x3a, 0x38, 0x9e, 0x58, 0x54, 0x1a, 0xbe, 0x58, 0x55, 0x1a, 0x00, 0x60, 0xbe, 0x58, 0x56, 0x1a, 0x9e, 0x5d, 0xe2, 0x19, 0x51, 0x63, 0x1a, 0x6b, 0x4c, 0xd0, 0xa0, 0x3b, 0xb2, 0x19, 0x1b, 0x5b, 0x53, 0x63, 0x1a, 0x6b, 0x4c, 0xd0, 0xa0, 0x3b, 0xbe, 0x19, 0x1b, 0x5b, 0xa0, 0x3b, 0xca, 0x19, 0xde, 0x5b, 0xff, 0xff, 0x02, 0xb1, 
+0x80, 0x3c, 0xa0, 0x3b, 0xd6, 0x19, 0xde, 0x5b, 0xff, 0x7f, 0x19, 0x05, 0xbe, 0x5d, 0xe2, 0x19, 0x3a, 0x38, 0xd7, 0x64, 0x04, 0x6c, 0x00, 0x63, 0x4f, 0x38, 0x8e, 0x3c, 0x93, 0x03, 0x1b, 0x04, 0x38, 0x14, 0x00, 0x62, 0x4f, 0x38, 0x94, 0x3c, 0x92, 0x02, 0x1b, 0x04, 0x38, 0x14, 0x00, 0x61, 0x4f, 0x38, 0x9a, 0x3c, 0x91, 0x01, 0x1b, 0x04, 0x3a, 0x38, 0xd7, 0x64, 0x04, 0x6c, 0x00, 0x63, 0x4f, 0x38, 0xa2, 0x3c, 0x93, 0x03, 0x19, 0x04, 0x00, 0x62, 0x4f, 0x38, 0xa7, 0x3c, 0x92, 0x02, 0x19, 0x04, 0x00, 0x61, 0x4f, 0x38, 0xac, 0x3c, 0x91, 0x01, 0x19, 0x04, 0x3a, 0x38, 0x48, 0x60, 0x0e, 0x68, 0x9e, 0x5f, 0xbf, 0x00, 0x19, 0x17, 0xe7, 0x38, 0xb7, 0x3c, 0x03, 0x59, 0x01, 0xaa, 0x3d, 0x58, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0xdd, 0x00, 0xbe, 0x58, 0xe3, 0x00, 0xbe, 0x58, 0xe2, 0x00, 0xb4, 0x44, 
+0xc0, 0x3c, 0xbe, 0x58, 0xe5, 0x00, 0xbe, 0x58, 0x16, 0x1f, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0xe3, 0x00, 0xbe, 0x58, 0xe2, 0x00, 0xbe, 0x58, 0xe5, 0x00, 0xbe, 0x58, 0x1e, 0x1d, 0xbe, 0x58, 0x16, 0x1f, 0x4d, 0xfe, 0xbe, 0x58, 0xdc, 0x00, 0xbe, 0x58, 0xe6, 0x00, 0x00, 0x60, 0x79, 0xfe, 0xbe, 0x58, 0x45, 0x01, 0x00, 0x60, 0x98, 0xfe, 0xbe, 0x58, 0x46, 0x01, 0x3a, 0x38, 0x9e, 0x5f, 0xe2, 0x00, 0x27, 0xaa, 0xbe, 0x5f, 0xe2, 0x00, 0x1f, 0xac, 0x0e, 0x92, 0x9e, 0x5f, 0xe5, 0x00, 0x19, 0x07, 0xbe, 0x5f, 0xe5, 0x00, 0xb8, 0x66, 0x0b, 0x6e, 0xfe, 0x48, 0x05, 0x9c, 0x9e, 0x5f, 0xe2, 0x00, 0x1f, 0xa8, 0xbe, 0x5f, 0xe2, 0x00, 0x9e, 0x5f, 0xdf, 0x00, 0x19, 0x07, 0xbe, 0x5f, 0xdf, 0x00, 0x9e, 0x5e, 0xe1, 0x00, 0xdf, 0x48, 0x98, 0x38, 0x4b, 0x3e, 0x00, 0x67, 0xbe, 0x5f, 0xdf, 0x00, 0xab, 0x3f, 
+0x00, 0x3d, 0x4d, 0xfe, 0xbe, 0x58, 0xdb, 0x00, 0x9e, 0x59, 0xdc, 0x00, 0x19, 0x48, 0x2c, 0x82, 0x20, 0x10, 0x1e, 0x61, 0x38, 0x48, 0x20, 0x82, 0x9e, 0x5f, 0xe2, 0x00, 0x47, 0xa8, 0xbe, 0x5f, 0xe2, 0x00, 0x9e, 0x5a, 0x1e, 0x1d, 0x19, 0x02, 0xbe, 0x5a, 0x1e, 0x1d, 0x03, 0x63, 0x5b, 0x48, 0x1b, 0x96, 0x00, 0x62, 0xbe, 0x5a, 0x1e, 0x1d, 0x9e, 0x5f, 0xe2, 0x00, 0x47, 0xaa, 0xbe, 0x5f, 0xe2, 0x00, 0x9e, 0x58, 0xdb, 0x00, 0x9e, 0x59, 0xdc, 0x00, 0x20, 0x11, 0xbe, 0x58, 0xdc, 0x00, 0x10, 0x60, 0x19, 0x48, 0xd4, 0x82, 0xec, 0x9e, 0x00, 0x62, 0xbe, 0x5a, 0x1e, 0x1d, 0x9e, 0x5f, 0xe2, 0x00, 0x47, 0xaa, 0xbe, 0x5f, 0xe2, 0x00, 0x9e, 0x5f, 0xea, 0x04, 0x18, 0x17, 0x06, 0x8a, 0x00, 0x67, 0xbe, 0x5f, 0xdf, 0x00, 0xbe, 0x5f, 0xe3, 0x00, 0x09, 0x9e, 0x9e, 0x5f, 0xe2, 0x19, 0x18, 0x17, 0x6d, 0x61, 
+0x40, 0x3d, 0x0b, 0x8a, 0x00, 0x67, 0xbe, 0x5f, 0xdf, 0x00, 0xbe, 0x5f, 0xe3, 0x00, 0x9e, 0x58, 0xe6, 0x00, 0xbe, 0x58, 0xdc, 0x00, 0x98, 0x3f, 0x4b, 0x3e, 0x9e, 0x58, 0xe3, 0x00, 0x05, 0x61, 0x19, 0x48, 0x50, 0x96, 0x9e, 0x5f, 0xe2, 0x00, 0x2f, 0xaa, 0xbe, 0x5f, 0xe2, 0x00, 0x9e, 0x5a, 0xe8, 0x00, 0x30, 0x63, 0x0b, 0x6b, 0x00, 0x64, 0x00, 0x65, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x77, 0x3d, 0x65, 0x58, 0x45, 0x59, 0x01, 0x10, 0x05, 0x80, 0x0f, 0x67, 0x1f, 0x48, 0x0f, 0x80, 0x19, 0x04, 0x0d, 0x9e, 0x02, 0x58, 0x40, 0x67, 0x1f, 0x48, 0x05, 0x9c, 0x9e, 0x5f, 0xe2, 0x00, 0x2f, 0xa8, 0xbe, 0x5f, 0xe2, 0x00, 0x1e, 0x67, 0x1f, 0x48, 0x01, 0x80, 0x19, 0x05, 0x1a, 0x38, 0xa4, 0x02, 0x18, 0x12, 0x01, 0x88, 0x01, 0x62, 0x00, 0x61, 0x64, 0x60, 0xa0, 0x40, 0x1c, 0x5a, 0x8f, 0xec, 
+0x80, 0x3d, 0xbe, 0x58, 0xe4, 0x00, 0x63, 0x62, 0x9e, 0x5d, 0xe2, 0x00, 0x2d, 0xac, 0x1a, 0x92, 0x9e, 0x5d, 0xe2, 0x00, 0x1d, 0xac, 0x04, 0x92, 0x46, 0x62, 0x58, 0x48, 0x89, 0x9c, 0x02, 0x9e, 0x58, 0x48, 0x6d, 0x9c, 0x9e, 0x58, 0x08, 0x1d, 0x19, 0x10, 0x0c, 0x8a, 0x9e, 0x58, 0x45, 0x04, 0x02, 0x38, 0x90, 0x01, 0x07, 0x98, 0x62, 0xfe, 0x7f, 0x00, 0xbe, 0x58, 0xdc, 0x00, 0x00, 0x67, 0xbe, 0x5f, 0xe3, 0x00, 0x9e, 0x58, 0xe8, 0x00, 0x5e, 0x00, 0x30, 0x61, 0x0b, 0x69, 0x5e, 0x01, 0x00, 0x66, 0x00, 0x64, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0x5e, 0x17, 0x5e, 0x17, 0xe7, 0x38, 0xfa, 0x3d, 0x00, 0x63, 0x7c, 0x48, 0x3e, 0x8a, 0x9e, 0x5b, 0xb8, 0x00, 0x19, 0x13, 0x7c, 0x48, 0x39, 0x8a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x02, 0x3f, 0x16, 0x00, 0x19, 0x17, 0x8e, 0x07, 
+0xc0, 0x3d, 0xe3, 0x5a, 0x22, 0x3f, 0x16, 0x00, 0x19, 0x17, 0xe3, 0x5f, 0x47, 0x13, 0x00, 0x3f, 0x16, 0x00, 0x19, 0x07, 0xe3, 0x5a, 0x20, 0x3f, 0x16, 0x00, 0x19, 0x07, 0xe3, 0x5f, 0x47, 0x14, 0x00, 0x3f, 0x16, 0x00, 0x19, 0x17, 0xe3, 0x5a, 0x20, 0x3f, 0x16, 0x00, 0x19, 0x17, 0xe3, 0x5f, 0x47, 0x15, 0x02, 0x3f, 0x16, 0x00, 0x19, 0x07, 0xe3, 0x5a, 0x22, 0x3f, 0x16, 0x00, 0x19, 0x07, 0xe3, 0x5f, 0x47, 0x16, 0x64, 0x02, 0x45, 0x12, 0x46, 0x12, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x7a, 0xac, 0x01, 0x90, 0x42, 0x5a, 0x9e, 0x5b, 0xe0, 0x00, 0x5b, 0x48, 0x01, 0x9c, 0x19, 0x06, 0x1a, 0x38, 0x19, 0x00, 0x19, 0x01, 0x19, 0x04, 0x9e, 0x5b, 0xb8, 0x00, 0x7c, 0x48, 0x01, 0x88, 0x00, 0x64, 0x1a, 0x38, 0x18, 0x16, 0x01, 0x8a, 0x47, 0x9e, 0x9e, 0x5d, 0xe8, 0x00, 0xd0, 0x11, 
+0x00, 0x3e, 0x08, 0x62, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x0f, 0x3e, 0xa5, 0x58, 0x00, 0x61, 0x19, 0x12, 0x46, 0x49, 0x19, 0x02, 0x1c, 0x5a, 0x1d, 0x5e, 0x1a, 0x38, 0x9e, 0x5a, 0xe2, 0x00, 0x22, 0xa8, 0x2a, 0xaa, 0xbe, 0x5a, 0xe2, 0x00, 0x2a, 0x9e, 0x9e, 0x59, 0x16, 0x1f, 0x19, 0x48, 0x02, 0x96, 0xbe, 0x58, 0x16, 0x1f, 0xb5, 0x61, 0x02, 0x69, 0x29, 0x62, 0x03, 0x6a, 0x2f, 0x3f, 0x26, 0x3e, 0x23, 0x58, 0x1b, 0x5a, 0x19, 0x01, 0x19, 0x02, 0x79, 0xfe, 0xbe, 0x58, 0x45, 0x01, 0x98, 0xfe, 0xbe, 0x58, 0x46, 0x01, 0x9e, 0x5d, 0xe8, 0x00, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x38, 0x3e, 0xa5, 0x58, 0x1d, 0x5e, 0x1a, 0x38, 0x9e, 0x5a, 0xe2, 0x00, 0x02, 0xaa, 0x22, 0xa8, 0x2a, 0xaa, 0xbe, 0x5a, 0xe2, 0x00, 0xee, 0x1e, 
+0x40, 0x3e, 0x00, 0x9e, 0x00, 0x60, 0xbe, 0x58, 0xe3, 0x00, 0x05, 0x9e, 0x9e, 0x58, 0xe3, 0x00, 0x19, 0x00, 0xbe, 0x58, 0xe3, 0x00, 0x62, 0xfe, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x62, 0xff, 0x63, 0xff, 0x6b, 0x9e, 0x5e, 0xe8, 0x00, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x5f, 0x3e, 0xc5, 0x58, 0x1a, 0x48, 0x04, 0x82, 0x1b, 0x48, 0x03, 0x82, 0x01, 0x5b, 0x01, 0x9e, 0x01, 0x5a, 0x1a, 0x38, 0x43, 0x10, 0x3a, 0x38, 0x00, 0x62, 0xff, 0x63, 0xff, 0x6b, 0x30, 0x66, 0x0b, 0x6e, 0x9e, 0x5f, 0xda, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x74, 0x3e, 0xc5, 0x58, 0x1a, 0x48, 0x04, 0x82, 0x1b, 0x48, 0x03, 0x82, 0x01, 0x5b, 0x01, 0x9e, 0x01, 0x5a, 0x1a, 0x38, 0x43, 0x10, 0xbe, 0x58, 0xe6, 0x00, 0x3a, 0x38, 0x1e, 0x59, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x00, 0x62, 0xff, 0x63, 0xc6, 0x3b, 
+0x80, 0x3e, 0xff, 0x6b, 0xb5, 0x66, 0x02, 0x6e, 0x9e, 0x5f, 0xb8, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x90, 0x3e, 0xc5, 0x58, 0x1a, 0x48, 0x04, 0x82, 0x1b, 0x48, 0x03, 0x82, 0x01, 0x5b, 0x01, 0x9e, 0x01, 0x5a, 0x1a, 0x38, 0x43, 0x10, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x59, 0x3a, 0x38, 0x1e, 0x59, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x00, 0x62, 0xff, 0x63, 0xff, 0x6b, 0xb5, 0x66, 0x02, 0x6e, 0xd0, 0x3e, 0xb8, 0x00, 0x9e, 0x5f, 0xb9, 0x00, 0x19, 0x17, 0xe7, 0x38, 0xb1, 0x3e, 0xc5, 0x58, 0x1a, 0x48, 0x04, 0x82, 0x1b, 0x48, 0x03, 0x82, 0x01, 0x5b, 0x01, 0x9e, 0x01, 0x5a, 0x1a, 0x38, 0x43, 0x10, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x59, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x6b, 0x12, 
+0xc0, 0x3e, 0x1e, 0x5f, 0x9e, 0x58, 0xe2, 0x00, 0x08, 0xaa, 0x10, 0xaa, 0x38, 0xaa, 0xbe, 0x58, 0xe2, 0x00, 0x00, 0x61, 0xbe, 0x59, 0x18, 0x1f, 0x79, 0xfe, 0xbe, 0x58, 0x47, 0x01, 0x9e, 0x58, 0x47, 0x01, 0x9e, 0x5a, 0x45, 0x01, 0x02, 0x13, 0x03, 0x8c, 0x62, 0x5b, 0xbe, 0x5b, 0x18, 0x1f, 0x9e, 0x5c, 0x18, 0x1f, 0x80, 0x61, 0x99, 0x48, 0x6d, 0x94, 0x20, 0x61, 0x79, 0x48, 0x27, 0x82, 0x9e, 0x58, 0xea, 0x04, 0x18, 0x10, 0x7b, 0x88, 0x9e, 0x58, 0x08, 0x1d, 0x19, 0x10, 0x77, 0x8a, 0x9e, 0x5f, 0x58, 0x1a, 0x18, 0x17, 0x73, 0x88, 0xb5, 0x65, 0x02, 0x6d, 0x08, 0x62, 0x29, 0x66, 0x03, 0x6e, 0x9e, 0x5f, 0xb8, 0x00, 0x19, 0x17, 0xe7, 0x38, 0xfc, 0x3e, 0xa5, 0x58, 0x00, 0x61, 0x19, 0x12, 0x46, 0x49, 0x19, 0x02, 0x1c, 0x5a, 0x1d, 0x5e, 0x1a, 0x38, 0x9e, 0x58, 0x47, 0x01, 0xbe, 0x58, 0xc5, 0x64, 
+0x00, 0x3f, 0x45, 0x01, 0x9e, 0x58, 0xe2, 0x00, 0x08, 0xa8, 0xbe, 0x58, 0xe2, 0x00, 0x00, 0x61, 0xbe, 0x59, 0x19, 0x1f, 0x98, 0xfe, 0xbe, 0x58, 0x48, 0x01, 0x9e, 0x58, 0x48, 0x01, 0x9e, 0x5a, 0x46, 0x01, 0x02, 0x13, 0x03, 0x8c, 0x62, 0x5b, 0xbe, 0x5b, 0x19, 0x1f, 0x9e, 0x5c, 0x19, 0x1f, 0x80, 0x61, 0x99, 0x48, 0x2f, 0x94, 0x20, 0x61, 0x79, 0x48, 0x41, 0x82, 0x9e, 0x58, 0xea, 0x04, 0x18, 0x10, 0x3d, 0x88, 0x9e, 0x58, 0x08, 0x1d, 0x19, 0x10, 0x39, 0x8a, 0x9e, 0x5f, 0x58, 0x1a, 0x18, 0x17, 0x35, 0x88, 0xb5, 0x65, 0x02, 0x6d, 0xb0, 0x3d, 0xb8, 0x00, 0x08, 0x62, 0x29, 0x66, 0x03, 0x6e, 0xd0, 0x3e, 0xb8, 0x00, 0x9e, 0x5f, 0xb9, 0x00, 0x19, 0x17, 0xe7, 0x38, 0x3e, 0x3f, 0xa5, 0x58, 0x00, 0x61, 0x19, 0x12, 0x46, 0x49, 0x19, 0x02, 0x1c, 0x5a, 0x1d, 0x5e, 0x1a, 0x38, 0x9e, 0x58, 0x59, 0xd4, 
+0x40, 0x3f, 0x48, 0x01, 0xbe, 0x58, 0x46, 0x01, 0x9e, 0x58, 0xe2, 0x00, 0x10, 0xa8, 0xbe, 0x58, 0xe2, 0x00, 0x15, 0x9e, 0xb5, 0x61, 0x02, 0x69, 0x29, 0x62, 0x03, 0x6a, 0x2f, 0x3f, 0x52, 0x3f, 0x23, 0x58, 0x1b, 0x5a, 0x19, 0x01, 0x19, 0x02, 0x79, 0xfe, 0xbe, 0x58, 0x45, 0x01, 0x98, 0xfe, 0xbe, 0x58, 0x46, 0x01, 0x9e, 0x58, 0xe2, 0x00, 0x38, 0xa8, 0xbe, 0x58, 0xe2, 0x00, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0xb5, 0x60, 0x02, 0x68, 0x29, 0x61, 0x03, 0x69, 0x00, 0x66, 0x9e, 0x5d, 0x5c, 0x1a, 0x19, 0x15, 0xbe, 0x5e, 0xd8, 0x1e, 0xa7, 0x38, 0x84, 0x3f, 0x03, 0x5a, 0x23, 0x5b, 0x5b, 0x48, 0x04, 0x98, 0x62, 0x14, 0xcd, 0x83, 
+0x80, 0x3f, 0x9e, 0x48, 0x01, 0x80, 0x81, 0x5e, 0x19, 0x00, 0x19, 0x01, 0xbe, 0x5e, 0xd8, 0x1e, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0xb5, 0x60, 0x02, 0x68, 0x29, 0x61, 0x03, 0x69, 0x00, 0x66, 0x9e, 0x5d, 0xb8, 0x00, 0x19, 0x15, 0xbe, 0x5e, 0xd9, 0x1e, 0xa7, 0x38, 0xad, 0x3f, 0x03, 0x5a, 0x23, 0x5b, 0x5b, 0x48, 0x04, 0x98, 0x62, 0x14, 0x9e, 0x48, 0x01, 0x80, 0x81, 0x5e, 0x19, 0x00, 0x19, 0x01, 0xbe, 0x5e, 0xd9, 0x1e, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x8b, 0x1e, 
+0xc0, 0x3f, 0x1e, 0x5f, 0xb5, 0x60, 0x02, 0x68, 0x10, 0x38, 0xb8, 0x00, 0x29, 0x61, 0x03, 0x69, 0x30, 0x39, 0xb8, 0x00, 0x00, 0x66, 0x9e, 0x5d, 0xb9, 0x00, 0x19, 0x15, 0xbe, 0x5e, 0xda, 0x1e, 0xa7, 0x38, 0xda, 0x3f, 0x03, 0x5a, 0x23, 0x5b, 0x5b, 0x48, 0x04, 0x98, 0x62, 0x14, 0x9e, 0x48, 0x01, 0x80, 0x81, 0x5e, 0x19, 0x00, 0x19, 0x01, 0xbe, 0x5e, 0xda, 0x1e, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0x00, 0x60, 0x28, 0x61, 0xdf, 0x3b, 0x1d, 0x59, 0xec, 0xff, 0x3a, 0x38, 0x9e, 0x58, 0xb4, 0x00, 0xbe, 0x58, 0x28, 0x00, 0xce, 0xac, 0x02, 0x90, 0x19, 0x38, 0xaf, 0x40, 0x0a, 0x62, 0x09, 0x60, 0x1d, 0x68, 0x13, 0x61, 0x1d, 0x69, 0x9e, 0x5c, 0xe3, 0x19, 0x00, 0x65, 0x1e, 0x5d, 0x1e, 0x5c, 0x1e, 0x5b, 0x1e, 0x5a, 0x68, 0x0e, 
+0x00, 0x40, 0x1e, 0x59, 0x1e, 0x58, 0x01, 0x5b, 0x21, 0x5c, 0x63, 0x5a, 0x44, 0x3d, 0x00, 0xf0, 0x44, 0x3a, 0xff, 0x0f, 0x18, 0x02, 0x18, 0x12, 0x02, 0x94, 0x00, 0x62, 0x08, 0x9e, 0x21, 0x70, 0x23, 0x61, 0x20, 0x40, 0x00, 0x39, 0x00, 0x00, 0x59, 0x48, 0x01, 0x9a, 0x21, 0x5a, 0x45, 0x2a, 0x5b, 0x5b, 0x83, 0x5a, 0x44, 0x3d, 0x00, 0xf0, 0x44, 0x3a, 0xff, 0x0f, 0x18, 0x02, 0x18, 0x12, 0x02, 0x94, 0x00, 0x62, 0x08, 0x9e, 0x21, 0x70, 0x15, 0x61, 0x20, 0x40, 0x00, 0x39, 0x00, 0x00, 0x59, 0x48, 0x01, 0x9a, 0x21, 0x5a, 0x45, 0x2a, 0x5b, 0x5c, 0x3e, 0x58, 0x3e, 0x59, 0x3e, 0x5a, 0x3e, 0x5b, 0x3e, 0x5c, 0x3e, 0x5d, 0x1e, 0x5a, 0x05, 0x5a, 0x25, 0x5b, 0x04, 0xac, 0x06, 0x90, 0x1e, 0x58, 0x1e, 0x59, 0x19, 0x38, 0xff, 0x41, 0x3e, 0x59, 0x3e, 0x58, 0x88, 0x5c, 0x19, 0x05, 0x3e, 0x5a, 0x2b, 0xbb, 
+0x40, 0x40, 0x19, 0x12, 0xf0, 0x89, 0x1e, 0x5f, 0x1e, 0x5e, 0x1e, 0x5d, 0x1e, 0x5c, 0x1e, 0x5b, 0x1e, 0x5a, 0x1e, 0x59, 0x1e, 0x58, 0xce, 0x64, 0x1c, 0x6c, 0x97, 0x66, 0xd9, 0x63, 0x1c, 0x6b, 0x09, 0x65, 0xa7, 0x38, 0x60, 0x40, 0x83, 0x5d, 0x00, 0x61, 0xa1, 0x58, 0x28, 0x67, 0x1c, 0x5f, 0x19, 0x38, 0xa3, 0x40, 0x18, 0x10, 0x01, 0x88, 0x30, 0x60, 0x1b, 0x5c, 0x1b, 0x5e, 0x19, 0x04, 0x19, 0x06, 0x19, 0x03, 0x8d, 0x66, 0xe6, 0x60, 0x1b, 0x68, 0x2f, 0x39, 0x6a, 0x40, 0x03, 0x59, 0x3b, 0x5e, 0x19, 0x00, 0x19, 0x06, 0x19, 0x07, 0x19, 0x38, 0x76, 0x40, 0x3e, 0x58, 0x3e, 0x59, 0x3e, 0x5a, 0x3e, 0x5b, 0x3e, 0x5c, 0x3e, 0x5d, 0x3e, 0x5e, 0x3e, 0x5f, 0x3a, 0x38, 0x9e, 0x5f, 0xb5, 0x00, 0x02, 0x62, 0xfa, 0x48, 0x27, 0x88, 0x09, 0x64, 0x1d, 0x6c, 0x13, 0x65, 0x1d, 0x6d, 0x83, 0x58, 0x65, 0x3e, 
+0x80, 0x40, 0x19, 0x04, 0x83, 0x59, 0x01, 0x17, 0x7f, 0xac, 0x01, 0x90, 0xe2, 0x5f, 0xa3, 0x58, 0x19, 0x05, 0xa3, 0x59, 0x01, 0x16, 0x7e, 0xac, 0x01, 0x90, 0xc2, 0x5e, 0xdf, 0x48, 0x03, 0x9c, 0xe8, 0x5f, 0xe6, 0x07, 0x02, 0x9e, 0xc8, 0x5e, 0xe6, 0x07, 0xb4, 0x60, 0xf8, 0x48, 0x0b, 0x98, 0x58, 0x60, 0x08, 0x61, 0x97, 0x66, 0x8d, 0x67, 0x2f, 0x39, 0xa1, 0x40, 0x1b, 0x5e, 0x3b, 0x5f, 0x19, 0x06, 0x19, 0x07, 0x1a, 0x38, 0x3a, 0x38, 0xf0, 0x67, 0x1f, 0x48, 0x01, 0x9c, 0xff, 0x60, 0x63, 0x59, 0x20, 0x00, 0x20, 0x00, 0x20, 0x00, 0x08, 0x58, 0x08, 0x58, 0x1b, 0x5b, 0x3a, 0x38, 0x9e, 0x58, 0xea, 0x04, 0x18, 0x10, 0x12, 0x88, 0x0a, 0x67, 0x9e, 0x58, 0xf1, 0x04, 0x9e, 0x59, 0xf2, 0x04, 0x01, 0x00, 0x1a, 0x10, 0x08, 0x88, 0x9e, 0x58, 0x8a, 0x04, 0x9e, 0x59, 0x8b, 0x04, 0x01, 0x00, 0xee, 0x47, 
+0xc0, 0x40, 0x1e, 0x10, 0x01, 0x80, 0x0f, 0x67, 0xbe, 0x5f, 0x00, 0x1f, 0x00, 0x67, 0xff, 0x66, 0x0f, 0x6e, 0x01, 0x65, 0x09, 0x7f, 0x2f, 0x39, 0x4a, 0x41, 0x1e, 0x5d, 0xb4, 0x3c, 0xe3, 0x19, 0x70, 0x8a, 0xe0, 0x38, 0x51, 0x15, 0xe0, 0x39, 0x5d, 0x15, 0xe0, 0x3a, 0x7d, 0x15, 0xe0, 0x3b, 0x87, 0x15, 0x16, 0x24, 0x56, 0x25, 0xa4, 0x15, 0x01, 0x8c, 0xa2, 0x5d, 0xb2, 0x3d, 0x11, 0x00, 0x34, 0x94, 0x36, 0x24, 0x76, 0x25, 0xa4, 0x15, 0x01, 0x8c, 0xa2, 0x5d, 0xb2, 0x3d, 0x11, 0x00, 0x2c, 0x94, 0xe2, 0x3d, 0x00, 0x00, 0x03, 0x88, 0x00, 0x65, 0xbe, 0x5d, 0xf0, 0x1e, 0xe2, 0x3d, 0x01, 0x00, 0x03, 0x88, 0x00, 0x65, 0xbe, 0x5d, 0xf4, 0x1e, 0x43, 0x5d, 0xb8, 0x49, 0x03, 0x80, 0xa4, 0x3d, 0x00, 0xf0, 0x03, 0x9e, 0x03, 0x5d, 0xa4, 0x3d, 0x00, 0xf0, 0x56, 0x24, 0xac, 0x2a, 0xe0, 0x38, 0x79, 0x58, 
+0x00, 0x41, 0x09, 0x1d, 0xac, 0x28, 0x63, 0x5d, 0xb9, 0x49, 0x03, 0x80, 0xa4, 0x3d, 0x00, 0xf0, 0x03, 0x9e, 0x23, 0x5d, 0xa4, 0x3d, 0x00, 0xf0, 0x76, 0x24, 0xac, 0x2b, 0xe0, 0x39, 0x13, 0x1d, 0xac, 0x29, 0x09, 0x70, 0x19, 0x00, 0x09, 0x78, 0x34, 0x9e, 0x1e, 0x5a, 0x1e, 0x5b, 0xe0, 0x3a, 0x7d, 0x15, 0x43, 0x5b, 0xff, 0x62, 0x0f, 0x6a, 0x62, 0x13, 0x0a, 0x8a, 0xe0, 0x3a, 0x7d, 0x15, 0x43, 0x5b, 0xff, 0x62, 0x0f, 0x6a, 0x62, 0x13, 0x03, 0x8a, 0x01, 0x62, 0xbe, 0x5a, 0x00, 0x1f, 0x3e, 0x5b, 0x3e, 0x5a, 0xe2, 0x3d, 0x00, 0x00, 0x03, 0x88, 0x66, 0x65, 0xbe, 0x5d, 0xf0, 0x1e, 0xe2, 0x3d, 0x01, 0x00, 0x03, 0x88, 0x66, 0x65, 0xbe, 0x5d, 0xf4, 0x1e, 0x03, 0x5d, 0xbb, 0x5a, 0xe0, 0x3a, 0x09, 0x1d, 0xbb, 0x5a, 0x23, 0x5d, 0xbb, 0x5b, 0xe0, 0x3b, 0x13, 0x1d, 0xbb, 0x5b, 0x08, 0x9e, 0xf3, 0x93, 
+0x40, 0x41, 0xe0, 0x3a, 0x7d, 0x15, 0xe0, 0x3b, 0x87, 0x15, 0xde, 0x5a, 0xff, 0x0f, 0xde, 0x5b, 0xff, 0x0f, 0x3e, 0x5d, 0xa6, 0x5d, 0x19, 0x07, 0x9e, 0x58, 0xe3, 0x19, 0x55, 0x71, 0x19, 0x48, 0x05, 0x88, 0xb4, 0x70, 0x09, 0x71, 0x19, 0x48, 0x01, 0x88, 0xd1, 0xaa, 0x3a, 0x38, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x00, 0x62, 0x00, 0x63, 0x00, 0x64, 0x00, 0x65, 0x00, 0x66, 0x01, 0x64, 0x01, 0x65, 0x01, 0x62, 0x9e, 0x5b, 0x43, 0x04, 0x5b, 0x48, 0x0f, 0x88, 0x01, 0x63, 0x9e, 0x5a, 0x41, 0x04, 0x5b, 0x48, 0x05, 0x8a, 0xbe, 0x5c, 0x11, 0x00, 0xbe, 0x5d, 0xfb, 0x1c, 0x09, 0x9e, 0xbe, 0x5d, 0x11, 0x00, 0xbe, 0x5c, 0xfb, 0x1c, 0x04, 0x9e, 0xbe, 0x5c, 0x11, 0x00, 0xbe, 0x5c, 0xfb, 0x1c, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x00, 0x67, 0x90, 0x6a, 
+0x80, 0x41, 0xff, 0x66, 0x0f, 0x6e, 0x01, 0x65, 0x2f, 0x39, 0xd5, 0x41, 0x1e, 0x5d, 0xb4, 0x3c, 0xe3, 0x19, 0x42, 0x8a, 0xe0, 0x38, 0x51, 0x15, 0xe0, 0x39, 0x5d, 0x15, 0xe0, 0x3a, 0x7d, 0x15, 0xe0, 0x3b, 0x87, 0x15, 0x16, 0x24, 0x56, 0x25, 0xa4, 0x15, 0x01, 0x8c, 0xa2, 0x5d, 0xb2, 0x3d, 0xfb, 0x1c, 0x0f, 0x94, 0x43, 0x5d, 0xb8, 0x49, 0x03, 0x80, 0xa4, 0x3d, 0x00, 0xf0, 0x03, 0x9e, 0x03, 0x5d, 0xa4, 0x3d, 0x00, 0xf0, 0x56, 0x24, 0xac, 0x2a, 0xe0, 0x38, 0x51, 0x15, 0xac, 0x28, 0x06, 0x9e, 0x03, 0x5d, 0xbb, 0x5a, 0xe0, 0x3a, 0x51, 0x15, 0xbb, 0x5a, 0x00, 0x9e, 0x36, 0x24, 0x76, 0x25, 0xa4, 0x15, 0x01, 0x8c, 0xa2, 0x5d, 0xb2, 0x3d, 0x11, 0x00, 0x0f, 0x94, 0x63, 0x5d, 0xb9, 0x49, 0x03, 0x80, 0xa4, 0x3d, 0x00, 0xf0, 0x03, 0x9e, 0x23, 0x5d, 0xa4, 0x3d, 0x00, 0xf0, 0x76, 0x24, 0xce, 0x49, 
+0xc0, 0x41, 0xac, 0x2b, 0xe0, 0x39, 0x5d, 0x15, 0xac, 0x29, 0x0e, 0x9e, 0x23, 0x5d, 0xbb, 0x5b, 0xe0, 0x3b, 0x5d, 0x15, 0xbb, 0x5b, 0x08, 0x9e, 0xe0, 0x3a, 0x7d, 0x15, 0xe0, 0x3b, 0x87, 0x15, 0xde, 0x5a, 0xff, 0x0f, 0xde, 0x5b, 0xff, 0x0f, 0x3e, 0x5d, 0xa6, 0x5d, 0x19, 0x07, 0x3a, 0x38, 0x9e, 0x58, 0xe4, 0x19, 0x00, 0x61, 0x9e, 0x5a, 0xe3, 0x19, 0x02, 0xac, 0x01, 0x90, 0x19, 0x01, 0x48, 0x5a, 0x19, 0x10, 0xfa, 0x89, 0xbe, 0x59, 0xb4, 0x00, 0x9e, 0x58, 0xb4, 0x00, 0x18, 0x10, 0x02, 0x8a, 0xd1, 0xa8, 0x07, 0x9e, 0xd1, 0xaa, 0x9e, 0x59, 0xb5, 0x00, 0x22, 0x38, 0x00, 0x00, 0x01, 0x8a, 0xd1, 0xa8, 0x3a, 0x38, 0x9e, 0x58, 0xe3, 0x19, 0xbe, 0x58, 0x55, 0x00, 0x9e, 0x58, 0xb4, 0x00, 0xbe, 0x58, 0xb5, 0x00, 0x9e, 0x58, 0x20, 0x1d, 0xbe, 0x58, 0x1d, 0x1d, 0x3a, 0x38, 0x13, 0x67, 0xb7, 0xba, 
+0x00, 0x42, 0x42, 0x6f, 0x44, 0x39, 0x00, 0x0f, 0xfe, 0x59, 0x10, 0x60, 0x20, 0x40, 0x64, 0x39, 0x00, 0x0f, 0xfe, 0x59, 0x01, 0x29, 0x1e, 0x5a, 0x1e, 0x5b, 0x44, 0x3a, 0xff, 0x00, 0x64, 0x3b, 0xff, 0x00, 0xa7, 0x06, 0xc9, 0x5e, 0x5e, 0x5e, 0x1d, 0x42, 0x29, 0x42, 0x35, 0x42, 0x41, 0x42, 0x4d, 0x42, 0x59, 0x42, 0x65, 0x42, 0x71, 0x42, 0x7d, 0x42, 0x89, 0x42, 0xbe, 0x59, 0x29, 0x00, 0xbe, 0x5a, 0x2a, 0x00, 0xbe, 0x5b, 0x2b, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x8d, 0x61, 0x19, 0x38, 0x95, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x2c, 0x00, 0xbe, 0x5a, 0x2d, 0x00, 0xbe, 0x5b, 0x2e, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x8d, 0x61, 0x19, 0x38, 0xa1, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x2f, 0x00, 0xbe, 0x5a, 0x30, 0x00, 0xbe, 0x5b, 0x31, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x8e, 0x61, 0x19, 0x38, 0x95, 0x42, 0xee, 0x9e, 
+0x40, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x32, 0x00, 0xbe, 0x5a, 0x33, 0x00, 0xbe, 0x5b, 0x34, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x8e, 0x61, 0x19, 0x38, 0xa1, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x35, 0x00, 0xbe, 0x5a, 0x36, 0x00, 0xbe, 0x5b, 0x37, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x8f, 0x61, 0x19, 0x38, 0x95, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x38, 0x00, 0xbe, 0x5a, 0x39, 0x00, 0xbe, 0x5b, 0x3a, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x8f, 0x61, 0x19, 0x38, 0xa1, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x3b, 0x00, 0xbe, 0x5a, 0x3c, 0x00, 0xbe, 0x5b, 0x3d, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x90, 0x61, 0x19, 0x38, 0x95, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x3e, 0x00, 0xbe, 0x5a, 0x3f, 0x00, 0xbe, 0x5b, 0x40, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x90, 0x61, 0x19, 0x38, 0xa1, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x41, 0x00, 0xbe, 0x5a, 0x94, 0x75, 
+0x80, 0x42, 0x42, 0x00, 0xbe, 0x5b, 0x43, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x91, 0x61, 0x19, 0x38, 0x95, 0x42, 0x3a, 0x38, 0xbe, 0x59, 0x44, 0x00, 0xbe, 0x5a, 0x45, 0x00, 0xbe, 0x5b, 0x46, 0x00, 0x3e, 0x5b, 0x3e, 0x5a, 0x91, 0x61, 0x19, 0x38, 0xa1, 0x42, 0x3a, 0x38, 0x44, 0x3a, 0x00, 0xf0, 0xfe, 0x5a, 0x64, 0x3b, 0x00, 0xf0, 0xfe, 0x5b, 0x43, 0x06, 0xc8, 0x5e, 0xc4, 0x3e, 0xf0, 0x00, 0xdb, 0x59, 0x3a, 0x38, 0x44, 0x3a, 0x00, 0xf0, 0xfe, 0x5a, 0x7f, 0x38, 0x48, 0x5a, 0x64, 0x3b, 0x00, 0xf0, 0xfe, 0x5b, 0x7f, 0x38, 0x68, 0x5b, 0x43, 0x06, 0xc8, 0x5e, 0x36, 0x2e, 0xdb, 0x59, 0x3a, 0x38, 0x9e, 0x5e, 0xe3, 0x19, 0x00, 0x65, 0x05, 0x64, 0x06, 0xac, 0x21, 0x90, 0xa8, 0x59, 0x20, 0x38, 0x90, 0x19, 0x20, 0x3b, 0xc0, 0x01, 0x03, 0x58, 0x63, 0x5b, 0x05, 0xac, 0x0c, 0x92, 0x04, 0x38, 0x42, 0x6f, 
+0xc0, 0x42, 0xff, 0x00, 0x7f, 0x38, 0x06, 0x58, 0x64, 0x3b, 0xff, 0x00, 0x7f, 0x38, 0x66, 0x5b, 0x60, 0x33, 0x0b, 0x8a, 0xd1, 0xa8, 0x09, 0x9e, 0x04, 0x38, 0x00, 0xff, 0xfe, 0x58, 0x64, 0x3b, 0x00, 0xff, 0xfe, 0x5b, 0x60, 0x33, 0x01, 0x8a, 0xd1, 0xa8, 0xe1, 0x01, 0x30, 0x28, 0x1b, 0x59, 0xc8, 0x5e, 0x19, 0x05, 0x19, 0x14, 0xd9, 0x89, 0x9e, 0x5a, 0x90, 0x19, 0xbe, 0x5a, 0xc0, 0x01, 0x9e, 0x5a, 0x91, 0x19, 0xbe, 0x5a, 0xc1, 0x01, 0x9e, 0x5a, 0x92, 0x19, 0xbe, 0x5a, 0xc2, 0x01, 0x3a, 0x38, 0x53, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x82, 0x8a, 0x54, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x98, 0x3a, 0x11, 0x45, 0x57, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x98, 0x3a, 0x00, 0x48, 0x58, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x98, 0x3a, 0x5f, 0x48, 0x19, 0x38, 0x66, 0x43, 0x26, 0x38, 0x66, 0x00, 0x98, 0x3a, 0x2d, 0xca, 
+0x00, 0x43, 0x5b, 0x48, 0x9f, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x0d, 0x88, 0x00, 0x60, 0x16, 0x39, 0x5f, 0x00, 0x36, 0x38, 0x60, 0x00, 0x06, 0x88, 0x01, 0x60, 0x16, 0x39, 0x61, 0x00, 0x02, 0x88, 0xb9, 0xaa, 0xf7, 0xaa, 0x3a, 0x38, 0x96, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x02, 0x88, 0x98, 0x3f, 0x8a, 0x47, 0x97, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x02, 0x88, 0x98, 0x3f, 0xf6, 0x47, 0x98, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x02, 0x88, 0x98, 0x3f, 0xaf, 0x47, 0x5b, 0x60, 0x16, 0x39, 0x5e, 0x00, 0x02, 0x88, 0x98, 0x3f, 0xcf, 0x47, 0x19, 0x38, 0x66, 0x43, 0x26, 0x38, 0x56, 0x00, 0x02, 0x88, 0x84, 0xaa, 0x3a, 0x38, 0x19, 0x38, 0x66, 0x43, 0x26, 0x38, 0xa6, 0x00, 0x02, 0x88, 0x84, 0xa8, 0x3a, 0x38, 0x19, 0x38, 0x66, 0x43, 0x26, 0x38, 0x57, 0x00, 0x02, 0x88, 0xa8, 0xa8, 0x3a, 0x38, 0x19, 0x38, 0x05, 0xed, 
+0x40, 0x43, 0x66, 0x43, 0x26, 0x38, 0xa7, 0x00, 0x02, 0x88, 0xa8, 0xaa, 0x3a, 0x38, 0x19, 0x38, 0x66, 0x43, 0x26, 0x38, 0x55, 0x00, 0x05, 0x88, 0xba, 0xaa, 0x5e, 0x71, 0xbe, 0x59, 0xc1, 0x1d, 0x3a, 0x38, 0x19, 0x38, 0x66, 0x43, 0x26, 0x38, 0xa5, 0x00, 0x09, 0x88, 0xba, 0xa8, 0x81, 0xaa, 0x5e, 0x71, 0xbe, 0x59, 0xc1, 0x1d, 0x00, 0x60, 0xbe, 0x58, 0x27, 0x1d, 0x3a, 0x38, 0x19, 0x38, 0x66, 0x43, 0x26, 0x38, 0x77, 0x00, 0x02, 0x88, 0x42, 0xa9, 0x3a, 0x38, 0x3a, 0x38, 0x5e, 0x70, 0x14, 0x39, 0x5f, 0x00, 0x34, 0x38, 0x60, 0x00, 0x14, 0x39, 0x61, 0x00, 0x3a, 0x38, 0xa2, 0xa8, 0x04, 0x60, 0x69, 0x78, 0x52, 0x60, 0x6a, 0x78, 0x5f, 0x70, 0x6b, 0x78, 0x00, 0x60, 0x6c, 0x78, 0x01, 0x60, 0x6d, 0x78, 0x5f, 0x70, 0x7f, 0x38, 0x08, 0x58, 0x3f, 0x20, 0x00, 0x39, 0x81, 0x43, 0x29, 0x58, 0xd7, 0x4b, 
+0x80, 0x43, 0x5e, 0x58, 0x91, 0x43, 0x95, 0x43, 0x9a, 0x43, 0xbb, 0x43, 0xc5, 0x43, 0xe7, 0x43, 0x02, 0x44, 0x56, 0x44, 0x57, 0x44, 0x9c, 0x44, 0xa4, 0x44, 0xb0, 0x44, 0xdf, 0x44, 0xf3, 0x44, 0xf5, 0x44, 0xf7, 0x44, 0x44, 0x60, 0xa0, 0x68, 0x98, 0x3f, 0xfc, 0x44, 0x1c, 0x61, 0x02, 0x69, 0x29, 0x58, 0x98, 0x3f, 0xfc, 0x44, 0x5f, 0x70, 0x06, 0x39, 0x20, 0x00, 0x0a, 0x8a, 0x06, 0x39, 0x27, 0x00, 0x0e, 0x8a, 0x06, 0x39, 0x28, 0x00, 0x0e, 0x8a, 0x06, 0x39, 0x29, 0x00, 0x0c, 0x8a, 0x3a, 0x38, 0xf5, 0xac, 0x01, 0x90, 0x01, 0x61, 0x6c, 0x79, 0x01, 0x61, 0x6d, 0x79, 0x3a, 0x38, 0xfd, 0xac, 0x09, 0x90, 0x06, 0x9e, 0x02, 0x9e, 0xfa, 0x60, 0x5f, 0x68, 0x09, 0x58, 0x18, 0x10, 0x02, 0x88, 0x01, 0x60, 0x6c, 0x78, 0x3a, 0x38, 0x6b, 0x71, 0x24, 0x39, 0xf0, 0x00, 0x00, 0x60, 0xd8, 0xac, 0xc3, 0xaf, 
+0xc0, 0x43, 0x01, 0x90, 0x18, 0xa8, 0x20, 0x29, 0x6b, 0x79, 0x3a, 0x38, 0x6b, 0x71, 0x24, 0x39, 0xf3, 0x00, 0x03, 0x60, 0x01, 0x20, 0x00, 0x62, 0x1a, 0x48, 0x04, 0x8a, 0x00, 0x60, 0x24, 0x39, 0xf0, 0x00, 0x13, 0x9e, 0x03, 0x60, 0xd6, 0xac, 0x10, 0x92, 0x00, 0x60, 0x86, 0xac, 0x02, 0x90, 0x00, 0xa8, 0x04, 0x9e, 0x00, 0xaa, 0x8e, 0xac, 0x04, 0x90, 0x05, 0x9e, 0x8e, 0xac, 0x01, 0x90, 0x02, 0x9e, 0x08, 0xaa, 0x02, 0x9e, 0x08, 0xa8, 0x00, 0x9e, 0x20, 0x29, 0x6b, 0x79, 0x3a, 0x38, 0x6b, 0x71, 0x26, 0x38, 0x5a, 0x00, 0x0d, 0x8a, 0x24, 0x39, 0xf0, 0x00, 0x00, 0x60, 0xe0, 0xac, 0x05, 0x90, 0xd0, 0xac, 0x02, 0x90, 0x00, 0xa8, 0x01, 0x9e, 0x18, 0xa8, 0x20, 0x29, 0x6b, 0x79, 0x3a, 0x38, 0x9e, 0x59, 0xbd, 0x1d, 0x6b, 0x79, 0x9e, 0x59, 0xbe, 0x1d, 0x6c, 0x79, 0x9e, 0x59, 0xbf, 0x1d, 0x69, 0xa1, 
+0x00, 0x44, 0x6d, 0x79, 0x3a, 0x38, 0xb0, 0xac, 0x06, 0x90, 0xb8, 0xac, 0x02, 0x92, 0x06, 0x60, 0x03, 0x9e, 0x07, 0x60, 0x01, 0x9e, 0x08, 0x60, 0xb3, 0x78, 0x5f, 0x70, 0x3f, 0x20, 0x00, 0x38, 0x12, 0x44, 0x09, 0x59, 0x5e, 0x59, 0x22, 0x44, 0x35, 0x44, 0x36, 0x44, 0x37, 0x44, 0x4a, 0x44, 0x4b, 0x44, 0x4c, 0x44, 0x4d, 0x44, 0x4e, 0x44, 0x4f, 0x44, 0x50, 0x44, 0x51, 0x44, 0x52, 0x44, 0x53, 0x44, 0x54, 0x44, 0x55, 0x44, 0x00, 0x60, 0x00, 0x61, 0x9e, 0x5a, 0xb8, 0x00, 0xb3, 0x73, 0x19, 0x12, 0x43, 0x48, 0x04, 0x3a, 0xff, 0x00, 0x6c, 0x7a, 0x04, 0x3a, 0x00, 0x0f, 0xfe, 0x5a, 0x7f, 0x38, 0x46, 0x5a, 0x55, 0x3a, 0x6d, 0x00, 0x6d, 0x7a, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x00, 0x60, 0x00, 0x61, 0x9e, 0x5a, 0xb9, 0x00, 0xb3, 0x73, 0x19, 0x12, 0x43, 0x48, 0x04, 0x3a, 0xff, 0x00, 0x59, 0xa3, 
+0x40, 0x44, 0x6c, 0x7a, 0x04, 0x3a, 0x00, 0x0f, 0xfe, 0x5a, 0x7f, 0x38, 0x46, 0x5a, 0x55, 0x3a, 0x6d, 0x00, 0x6d, 0x7a, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x5f, 0x70, 0x3f, 0x20, 0x00, 0x38, 0x5e, 0x44, 0x09, 0x59, 0x01, 0x60, 0x5e, 0x59, 0x6e, 0x44, 0x72, 0x44, 0x74, 0x44, 0x75, 0x44, 0x79, 0x44, 0x7d, 0x44, 0x7e, 0x44, 0x7f, 0x44, 0x83, 0x44, 0x87, 0x44, 0x88, 0x44, 0x89, 0x44, 0x8a, 0x44, 0x8c, 0x44, 0x8d, 0x44, 0x8e, 0x44, 0xa1, 0xac, 0x01, 0x92, 0x00, 0xaa, 0x28, 0x9e, 0x12, 0x70, 0x26, 0x9e, 0x25, 0x9e, 0xf8, 0xac, 0x01, 0x92, 0x00, 0xaa, 0x21, 0x9e, 0xca, 0xac, 0x01, 0x92, 0x00, 0xaa, 0x1d, 0x9e, 0x1c, 0x9e, 0x1b, 0x9e, 0xf2, 0xac, 0x8c, 0x4f, 
+0x80, 0x44, 0x01, 0x92, 0x00, 0xaa, 0x17, 0x9e, 0xf0, 0xac, 0x01, 0x92, 0x00, 0xaa, 0x13, 0x9e, 0x12, 0x9e, 0x11, 0x9e, 0x10, 0x9e, 0x11, 0x70, 0x0e, 0x9e, 0x3a, 0x38, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x38, 0x8f, 0x00, 0x02, 0x8a, 0x1a, 0x38, 0x3a, 0x38, 0x01, 0x60, 0xe6, 0xac, 0x01, 0x92, 0x00, 0x60, 0x6c, 0x78, 0x3a, 0x38, 0x6c, 0x78, 0x3a, 0x38, 0x9e, 0x58, 0xfb, 0x04, 0x04, 0x38, 0x00, 0x0f, 0xfe, 0x58, 0x19, 0x00, 0x6c, 0x78, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x38, 0xa0, 0x00, 0x02, 0x8a, 0xa2, 0xaa, 0x3a, 0x38, 0x01, 0x60, 0xe8, 0xac, 0x01, 0x92, 0x00, 0xaa, 0x6c, 0x78, 0x3a, 0x38, 0x5f, 0x70, 0x3f, 0x20, 0x00, 0x38, 0xb6, 0x44, 0x09, 0x59, 0x5e, 0x59, 0xc6, 0x44, 0xcc, 0x44, 0xd1, 0x44, 0xd2, 0x44, 0xd3, 0x44, 0xd4, 0x44, 0xd5, 0x44, 0xd6, 0x44, 0xd7, 0x44, 0xd8, 0x44, 0x9e, 0x2f, 
+0xc0, 0x44, 0xd9, 0x44, 0xda, 0x44, 0xdb, 0x44, 0xdc, 0x44, 0xdd, 0x44, 0xde, 0x44, 0x01, 0x60, 0x90, 0xac, 0x01, 0x8a, 0x00, 0xaa, 0x6c, 0x78, 0x3a, 0x38, 0x03, 0x60, 0x14, 0x38, 0x00, 0x00, 0x6c, 0x78, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x5f, 0x71, 0x24, 0x38, 0x0f, 0x00, 0x00, 0x38, 0xa0, 0x2e, 0x09, 0x58, 0x02, 0x39, 0x00, 0x00, 0x02, 0x88, 0x6c, 0x78, 0x3a, 0x38, 0x03, 0x58, 0x04, 0x39, 0xff, 0x00, 0x6d, 0x79, 0xfe, 0x58, 0x04, 0x39, 0xff, 0x00, 0x6c, 0x79, 0x3a, 0x38, 0x00, 0x60, 0x07, 0x9e, 0x88, 0x60, 0x05, 0x9e, 0xfc, 0x61, 0x3f, 0x69, 0x29, 0x58, 0x29, 0x60, 0x30, 0x68, 0x04, 0x39, 0x00, 0xf0, 0xfe, 0x59, 0x7f, 0x38, 0xd7, 0xfc, 
+0x00, 0x45, 0x28, 0x59, 0x35, 0x39, 0x6b, 0x00, 0x6b, 0x79, 0x04, 0x39, 0xf0, 0x0f, 0x7f, 0x38, 0x28, 0x59, 0x6c, 0x79, 0x04, 0x39, 0x0f, 0x00, 0x7f, 0x38, 0x26, 0x59, 0x35, 0x39, 0x6d, 0x00, 0x6d, 0x79, 0x3a, 0x38, 0x5f, 0x70, 0x7f, 0x38, 0x08, 0x58, 0x3f, 0x20, 0x00, 0x39, 0x19, 0x45, 0x29, 0x58, 0x5e, 0x58, 0x29, 0x45, 0x35, 0x45, 0x36, 0x45, 0x0c, 0x46, 0x18, 0x46, 0x34, 0x46, 0x54, 0x46, 0x68, 0x46, 0x69, 0x46, 0xfc, 0x46, 0x45, 0x47, 0x56, 0x47, 0x78, 0x47, 0x87, 0x47, 0x88, 0x47, 0x89, 0x47, 0x60, 0x70, 0x12, 0x61, 0x19, 0x48, 0x07, 0x88, 0x61, 0x70, 0x34, 0x61, 0x19, 0x48, 0x03, 0x88, 0xff, 0x60, 0xff, 0x68, 0x60, 0xc0, 0x3a, 0x38, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0x25, 0x00, 0x38, 0x8a, 0x06, 0x39, 0x26, 0x00, 0x37, 0x8a, 0x06, 0x39, 0x27, 0x00, 0x1c, 0x8a, 0x3b, 0x0c, 
+0x40, 0x45, 0x06, 0x39, 0x28, 0x00, 0x10, 0x8a, 0x06, 0x39, 0x29, 0x00, 0x0f, 0x8a, 0x06, 0x39, 0x2a, 0x00, 0x1e, 0x8a, 0x06, 0x39, 0x2d, 0x00, 0x37, 0x8a, 0x06, 0x39, 0x2e, 0x00, 0x36, 0x8a, 0x06, 0x39, 0x2f, 0x00, 0x3d, 0x8a, 0x3a, 0x38, 0x97, 0xa8, 0x3a, 0x38, 0x5a, 0x60, 0x5a, 0x68, 0xbe, 0x58, 0xc2, 0x1d, 0xad, 0xa8, 0xf5, 0xa8, 0x3a, 0x38, 0x60, 0x70, 0x00, 0x61, 0x20, 0x31, 0x03, 0x8a, 0x01, 0x61, 0x20, 0x31, 0x02, 0x8a, 0xfd, 0xaa, 0x3a, 0x38, 0xfd, 0xa8, 0x3a, 0x38, 0x60, 0x70, 0x00, 0x61, 0x20, 0x31, 0x03, 0x8a, 0x01, 0x61, 0x20, 0x31, 0x02, 0x8a, 0xb6, 0xaa, 0x3a, 0x38, 0xb6, 0xa8, 0x3a, 0x38, 0x42, 0xa9, 0x3a, 0x38, 0x60, 0x70, 0x00, 0x61, 0x20, 0x31, 0x03, 0x8a, 0x01, 0x61, 0x20, 0x31, 0x04, 0x8a, 0x00, 0x60, 0xbe, 0x58, 0xc6, 0x00, 0x3a, 0x38, 0x01, 0x60, 0xe8, 0x70, 
+0x80, 0x45, 0xbe, 0x58, 0xc6, 0x00, 0x3a, 0x38, 0xdd, 0xa8, 0x3a, 0x38, 0x60, 0x70, 0x1f, 0x61, 0x20, 0x21, 0x21, 0x5a, 0xfe, 0x5a, 0x41, 0x2a, 0xbe, 0x5a, 0xf9, 0x04, 0xa5, 0xa8, 0x3a, 0x38, 0x60, 0x70, 0x06, 0x39, 0x00, 0x00, 0x10, 0x8a, 0x06, 0x39, 0x01, 0x00, 0x1c, 0x8a, 0x06, 0x39, 0x02, 0x00, 0x2b, 0x8a, 0x06, 0x39, 0x03, 0x00, 0x3a, 0x8a, 0x06, 0x39, 0x04, 0x00, 0x49, 0x8a, 0x06, 0x39, 0x05, 0x00, 0x58, 0x8a, 0x3a, 0x38, 0x85, 0xaa, 0x80, 0x62, 0x57, 0x6a, 0x48, 0x63, 0x0e, 0x6b, 0x0c, 0x61, 0x24, 0x60, 0x01, 0x40, 0x19, 0x10, 0x07, 0x38, 0xaf, 0x45, 0x4b, 0x5c, 0x9d, 0x5b, 0x1a, 0x38, 0x3a, 0x38, 0x7a, 0x62, 0x02, 0x6a, 0xb5, 0x63, 0x02, 0x6b, 0x9e, 0x5c, 0xbb, 0x00, 0x9e, 0x5d, 0xbc, 0x00, 0xa4, 0x05, 0x19, 0x15, 0xa7, 0x38, 0xc0, 0x45, 0x7d, 0x5a, 0x19, 0x03, 0x77, 0x51, 
+0xc0, 0x45, 0x1a, 0x38, 0x85, 0xa8, 0x1a, 0x38, 0x3a, 0x38, 0x7a, 0x62, 0x02, 0x6a, 0x62, 0x63, 0x1e, 0x6b, 0x9e, 0x5c, 0xbb, 0x00, 0x9e, 0x5d, 0xbc, 0x00, 0xa4, 0x05, 0x19, 0x15, 0xa7, 0x38, 0xd2, 0x45, 0x7d, 0x5a, 0x19, 0x03, 0x1a, 0x38, 0x85, 0xa8, 0x1a, 0x38, 0x3a, 0x38, 0x7a, 0x62, 0x02, 0x6a, 0x29, 0x63, 0x03, 0x6b, 0x9e, 0x5c, 0xbb, 0x00, 0x9e, 0x5d, 0xbc, 0x00, 0xa4, 0x05, 0x19, 0x15, 0xa7, 0x38, 0xe4, 0x45, 0x7d, 0x5a, 0x19, 0x03, 0x1a, 0x38, 0x85, 0xa8, 0x1a, 0x38, 0x3a, 0x38, 0x7a, 0x62, 0x02, 0x6a, 0xe0, 0x63, 0x1a, 0x6b, 0x9e, 0x5c, 0xbb, 0x00, 0x9e, 0x5d, 0xbc, 0x00, 0xa4, 0x05, 0x19, 0x15, 0xa7, 0x38, 0xf6, 0x45, 0x7d, 0x5a, 0x19, 0x03, 0x1a, 0x38, 0x85, 0xa8, 0x1a, 0x38, 0x3a, 0x38, 0x7a, 0x62, 0x02, 0x6a, 0x00, 0x63, 0x1b, 0x6b, 0x9e, 0x5c, 0xbb, 0x00, 0x49, 0x6a, 
+0x00, 0x46, 0x9e, 0x5d, 0xbc, 0x00, 0xa4, 0x05, 0x19, 0x15, 0xa7, 0x38, 0x08, 0x46, 0x7d, 0x5a, 0x19, 0x03, 0x1a, 0x38, 0x85, 0xa8, 0x1a, 0x38, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0x38, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x30, 0x00, 0x03, 0x8a, 0x3a, 0x38, 0xd8, 0xa8, 0x3a, 0x38, 0xd8, 0xaa, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0x40, 0x00, 0x0a, 0x8a, 0x06, 0x39, 0x41, 0x00, 0x0b, 0x8a, 0x06, 0x39, 0x42, 0x00, 0x0b, 0x8a, 0x06, 0x39, 0x43, 0x00, 0x0b, 0x8a, 0x3a, 0x38, 0x86, 0xaa, 0x8e, 0xaa, 0xd6, 0xaa, 0x3a, 0x38, 0x86, 0xa8, 0x8e, 0xaa, 0x3a, 0x38, 0x86, 0xaa, 0x8e, 0xa8, 0x3a, 0x38, 0x86, 0xa8, 0x8e, 0xaa, 0xd6, 0xa8, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0x5a, 0x00, 0x19, 0x8a, 0x06, 0x39, 0x58, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x50, 0x00, 0x0a, 0x8a, 0x3a, 0x38, 0x00, 0x60, 0x21, 0x6b, 
+0x40, 0x46, 0xbe, 0x58, 0xc3, 0x1d, 0x55, 0x60, 0xaa, 0x68, 0xbe, 0x58, 0xc4, 0x1d, 0xe0, 0xa8, 0x3a, 0x38, 0xaa, 0x60, 0x55, 0x68, 0xbe, 0x58, 0xc3, 0x1d, 0x00, 0x60, 0xbe, 0x58, 0xc4, 0x1d, 0xe0, 0xaa, 0x3a, 0x38, 0x01, 0x9e, 0x00, 0x9e, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0x60, 0x00, 0x07, 0x8a, 0x06, 0x39, 0x68, 0x00, 0x07, 0x8a, 0x06, 0x39, 0x6c, 0x00, 0x07, 0x8a, 0x3a, 0x38, 0xb0, 0xa8, 0xb8, 0xaa, 0x3a, 0x38, 0xb0, 0xa8, 0xb8, 0xa8, 0x3a, 0x38, 0xb0, 0xaa, 0xb8, 0xaa, 0x3a, 0x38, 0x3a, 0x38, 0x5f, 0x70, 0x3f, 0x20, 0x00, 0x38, 0x70, 0x46, 0x09, 0x59, 0x60, 0x70, 0x5e, 0x59, 0x80, 0x46, 0x88, 0x46, 0x8b, 0x46, 0x94, 0x46, 0x9f, 0x46, 0xaa, 0x46, 0xab, 0x46, 0xac, 0x46, 0xb9, 0x46, 0xc4, 0x46, 0xc5, 0x46, 0xc6, 0x46, 0xc7, 0x46, 0xca, 0x46, 0xdb, 0x46, 0xec, 0x46, 0xc3, 0xb5, 
+0x80, 0x46, 0xa1, 0xa8, 0x00, 0xac, 0x01, 0x92, 0xa1, 0xaa, 0xa1, 0xac, 0x01, 0x92, 0xf9, 0xaa, 0x3a, 0x38, 0x1b, 0x20, 0x12, 0x78, 0x3a, 0x38, 0x06, 0x39, 0x01, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x00, 0x00, 0x02, 0x8a, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x06, 0x39, 0x01, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x00, 0x00, 0x03, 0x8a, 0x3a, 0x38, 0xf8, 0xa8, 0x3a, 0x38, 0xf8, 0xaa, 0x3a, 0x38, 0x06, 0x39, 0x01, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x00, 0x00, 0x03, 0x8a, 0x3a, 0x38, 0xca, 0xa8, 0x3a, 0x38, 0xca, 0xaa, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x06, 0x39, 0x01, 0x00, 0x07, 0x8a, 0x06, 0x39, 0x00, 0x00, 0x01, 0x8a, 0x3a, 0x38, 0xf2, 0xaa, 0x64, 0x61, 0x3a, 0x38, 0xf2, 0xa8, 0x69, 0x61, 0x3a, 0x38, 0x06, 0x39, 0x01, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x00, 0x00, 0x03, 0x8a, 0x3a, 0x38, 0xfe, 0x71, 
+0xc0, 0x46, 0xf0, 0xa8, 0x3a, 0x38, 0xf0, 0xaa, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x11, 0x78, 0xee, 0xa8, 0x3a, 0x38, 0x61, 0x71, 0x01, 0x60, 0x19, 0x48, 0x0b, 0x88, 0x60, 0x71, 0x00, 0x60, 0x19, 0x48, 0x05, 0x8a, 0x01, 0x60, 0x19, 0x48, 0x04, 0x88, 0xed, 0xa8, 0x02, 0x9e, 0xed, 0xaa, 0x00, 0x9e, 0xdd, 0xa8, 0x3a, 0x38, 0x61, 0x71, 0x01, 0x60, 0x19, 0x48, 0x0b, 0x88, 0x60, 0x71, 0x00, 0x60, 0x19, 0x48, 0x05, 0x8a, 0x01, 0x60, 0x19, 0x48, 0x04, 0x88, 0x8d, 0xa8, 0x02, 0x9e, 0x8d, 0xaa, 0x00, 0x9e, 0xdd, 0xa8, 0x3a, 0x38, 0x61, 0x71, 0x01, 0x60, 0x19, 0x48, 0x0b, 0x88, 0x60, 0x71, 0x00, 0x60, 0x19, 0x48, 0x05, 0x8a, 0x01, 0x60, 0x19, 0x48, 0x04, 0x88, 0xe6, 0xa8, 0x02, 0x9e, 0xe6, 0xaa, 0xef, 0x9f, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0x90, 0x00, 0x01, 0x8a, 0x74, 0x4b, 
+0x00, 0x47, 0x3a, 0x38, 0x60, 0x70, 0x95, 0xa8, 0x06, 0x39, 0x01, 0x00, 0x17, 0x8a, 0x06, 0x39, 0x02, 0x00, 0x18, 0x8a, 0x06, 0x39, 0x03, 0x00, 0x1a, 0x8a, 0x06, 0x39, 0x04, 0x00, 0x1c, 0x8a, 0x06, 0x39, 0x05, 0x00, 0x1e, 0x8a, 0x06, 0x39, 0x06, 0x00, 0x20, 0x8a, 0x06, 0x39, 0x07, 0x00, 0x22, 0x8a, 0x06, 0x39, 0x08, 0x00, 0x24, 0x8a, 0x95, 0xaa, 0x3a, 0x38, 0x52, 0x60, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x52, 0x60, 0x01, 0x68, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x52, 0x60, 0x02, 0x68, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x52, 0x60, 0x03, 0x68, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x52, 0x60, 0x04, 0x68, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x52, 0x60, 0x06, 0x68, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x52, 0x60, 0x07, 0x68, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x52, 0x60, 0x87, 0x20, 
+0x40, 0x47, 0x08, 0x68, 0xbe, 0x58, 0xfb, 0x04, 0x3a, 0x38, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0xa0, 0x00, 0x01, 0x8a, 0x3a, 0x38, 0x60, 0x70, 0x06, 0x39, 0x01, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x00, 0x00, 0x03, 0x8a, 0x3a, 0x38, 0xe8, 0xa8, 0x3a, 0x38, 0xe8, 0xa8, 0x3a, 0x38, 0x5f, 0x70, 0x06, 0x39, 0xb0, 0x00, 0x04, 0x8a, 0x06, 0x39, 0xb1, 0x00, 0x0d, 0x8a, 0x3a, 0x38, 0x60, 0x70, 0x06, 0x39, 0x01, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x00, 0x00, 0x03, 0x8a, 0x3a, 0x38, 0x93, 0xa8, 0x3a, 0x38, 0x93, 0xa8, 0x3a, 0x38, 0x83, 0xaa, 0x8b, 0xaa, 0x60, 0x70, 0x1b, 0x20, 0x15, 0x38, 0x03, 0x00, 0x83, 0xac, 0x03, 0x90, 0x83, 0xaa, 0xc8, 0xa8, 0x3a, 0x38, 0x83, 0xa8, 0xc8, 0xa8, 0x3a, 0x38, 0x5f, 0x71, 0x24, 0x38, 0x0f, 0x00, 0x00, 0x38, 0xa0, 0x2e, 0x09, 0x58, 0x02, 0x39, 0x00, 0x00, 0x74, 0x0b, 
+0x80, 0x47, 0x05, 0x8a, 0x60, 0x71, 0xfe, 0x59, 0x35, 0x39, 0x61, 0x00, 0x3b, 0x58, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0xa2, 0xa8, 0x06, 0x60, 0x69, 0x78, 0x95, 0x60, 0x6a, 0x78, 0x60, 0x70, 0x6c, 0x78, 0x5f, 0x70, 0x6b, 0x78, 0xfe, 0x58, 0x15, 0x38, 0x60, 0x00, 0x03, 0x59, 0x24, 0x38, 0x00, 0xff, 0xfe, 0x58, 0x6d, 0x78, 0x24, 0x38, 0xff, 0x00, 0x6e, 0x78, 0xf1, 0x60, 0x6f, 0x78, 0xbe, 0xac, 0x0c, 0x90, 0x6b, 0x71, 0x24, 0x39, 0xff, 0x00, 0x18, 0x31, 0x07, 0x88, 0x6c, 0x71, 0x24, 0x39, 0xff, 0x00, 0x26, 0x39, 0x4e, 0x00, 0x01, 0x88, 0x82, 0xa8, 0x3a, 0x38, 0xa2, 0xa8, 0x12, 0x60, 0x69, 0x78, 0x94, 0x60, 0x6a, 0x78, 0x60, 0x70, 0x5f, 0x71, 0xfe, 0x59, 0x01, 0x28, 0x80, 0x61, 0x59, 0x69, 0x01, 0x00, 0x60, 0x71, 0x6c, 0x79, 0x5f, 0x71, 0x6b, 0x79, 0x01, 0x5b, 0xb9, 0x61, 
+0xc0, 0x47, 0x6d, 0x64, 0xef, 0x38, 0xcb, 0x47, 0x69, 0x59, 0x24, 0x38, 0x00, 0xff, 0xfe, 0x58, 0x1d, 0x5c, 0x24, 0x38, 0xff, 0x00, 0x1d, 0x5c, 0x19, 0x03, 0xf1, 0x60, 0x7b, 0x78, 0x3a, 0x38, 0xa2, 0xa8, 0x11, 0x60, 0x69, 0x78, 0x9b, 0x60, 0x6a, 0x78, 0x10, 0x60, 0x06, 0x58, 0x6b, 0x78, 0x9e, 0x58, 0xba, 0x00, 0xe2, 0xac, 0x01, 0x90, 0x19, 0x00, 0x6c, 0x78, 0x24, 0x60, 0xe2, 0xac, 0x01, 0x90, 0x19, 0x00, 0x6d, 0x78, 0x00, 0x60, 0x6e, 0x78, 0x00, 0x60, 0x6f, 0x78, 0x00, 0x60, 0x70, 0x78, 0x00, 0x60, 0x71, 0x78, 0x00, 0x60, 0x72, 0x78, 0x73, 0x78, 0x74, 0x78, 0x75, 0x78, 0x76, 0x78, 0x77, 0x78, 0x78, 0x78, 0x79, 0x78, 0x7a, 0x78, 0xe2, 0xaa, 0x3a, 0x38, 0x5f, 0x70, 0xfe, 0x58, 0x15, 0x38, 0x60, 0x00, 0x61, 0x71, 0xfe, 0x59, 0x35, 0x39, 0x62, 0x00, 0x3b, 0x58, 0x3a, 0x38, 0xba, 0x43, 
+0x00, 0x48, 0x98, 0x3f, 0x65, 0x43, 0x00, 0x62, 0xa9, 0x7a, 0xad, 0x72, 0x57, 0x7a, 0xa9, 0x70, 0xa8, 0x71, 0x19, 0x48, 0x28, 0x82, 0x19, 0x11, 0x19, 0x48, 0x03, 0x88, 0xaa, 0x72, 0x46, 0x5a, 0x01, 0x9e, 0x3c, 0x62, 0x1b, 0x02, 0x69, 0x7a, 0x1b, 0x12, 0x4e, 0x5a, 0x6c, 0x7a, 0x98, 0x62, 0x6a, 0x7a, 0xa9, 0x72, 0xbe, 0xac, 0x02, 0x92, 0x45, 0x3a, 0x40, 0x00, 0x6b, 0x7a, 0x81, 0xa8, 0xa2, 0xa8, 0x9e, 0xee, 0xb9, 0xac, 0x17, 0x90, 0xa2, 0xac, 0xfc, 0x93, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0xbe, 0xac, 0x01, 0x92, 0x24, 0xa9, 0xa9, 0x70, 0x19, 0x00, 0xa9, 0x78, 0x57, 0x70, 0x7e, 0x00, 0x57, 0x78, 0xd4, 0x9f, 0x81, 0xaa, 0xa2, 0xaa, 0xbe, 0xac, 0x02, 0x90, 0x3c, 0xa9, 0x01, 0x9e, 0x24, 0xa9, 0x3a, 0x38, 0x81, 0xaa, 0xa2, 0xaa, 0xbe, 0xac, 0x02, 0x90, 0x3c, 0xa9, 0x01, 0x9e, 0x47, 0xbb, 
+0x40, 0x48, 0x24, 0xa9, 0x3a, 0x38, 0xb2, 0xa8, 0xa2, 0xa8, 0xaa, 0xaa, 0x00, 0x60, 0x5d, 0x78, 0x50, 0xb2, 0x3a, 0xaa, 0xd0, 0xb2, 0xf9, 0xab, 0x5e, 0x70, 0x06, 0x39, 0x83, 0x00, 0x01, 0x8a, 0x9e, 0xee, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x81, 0xb8, 0x5a, 0x38, 0xe2, 0xa8, 0x66, 0x61, 0xbe, 0x59, 0x27, 0x1d, 0xba, 0xac, 0x98, 0x3c, 0x65, 0x43, 0x81, 0xaa, 0xb9, 0xaa, 0x5f, 0x70, 0xa2, 0x78, 0x60, 0x70, 0xa4, 0x78, 0x61, 0x70, 0xa5, 0x78, 0x62, 0x70, 0x01, 0x59, 0xa6, 0x78, 0x63, 0x70, 0xa7, 0x78, 0x24, 0x39, 0xff, 0x00, 0xfe, 0x59, 0x04, 0x38, 0xff, 0x00, 0x20, 0x28, 0x08, 0x58, 0x01, 0x5b, 0x00, 0x61, 0x1e, 0x62, 0x1c, 0x5a, 0x01, 0x5c, 0x02, 0x40, 0x78, 0x48, 0x06, 0x8a, 0x19, 0x04, 0xa8, 0x7c, 0x22, 0x01, 
+0x80, 0x48, 0xa3, 0x7c, 0x60, 0x13, 0xaa, 0x7b, 0x04, 0x9e, 0xa8, 0x7c, 0xa3, 0x7c, 0x1e, 0x63, 0xaa, 0x7b, 0x60, 0x71, 0x24, 0x39, 0xff, 0x00, 0xfe, 0x59, 0x61, 0x70, 0x04, 0x38, 0xff, 0x00, 0x20, 0x28, 0xab, 0x78, 0xa2, 0x70, 0x04, 0x38, 0xc0, 0x00, 0xbf, 0x38, 0x08, 0x58, 0x00, 0x61, 0x20, 0x31, 0x01, 0x8a, 0x2a, 0x9e, 0xa2, 0x70, 0x04, 0x39, 0x07, 0x00, 0x20, 0x3a, 0xa1, 0x48, 0x49, 0x5b, 0x5e, 0x5b, 0xa9, 0x48, 0xa6, 0x48, 0xa9, 0x48, 0xb0, 0x48, 0xb0, 0x48, 0x60, 0x63, 0x11, 0x6b, 0x0d, 0x9e, 0x00, 0x63, 0x05, 0x6b, 0x08, 0xac, 0x09, 0x90, 0x30, 0x63, 0x0b, 0x6b, 0x06, 0x9e, 0x9e, 0x5b, 0xe8, 0x00, 0x10, 0xac, 0x02, 0x90, 0x48, 0x63, 0x0e, 0x6b, 0x1e, 0x59, 0x1e, 0x58, 0x9e, 0x59, 0x27, 0x1d, 0x26, 0x38, 0x66, 0x00, 0x02, 0x88, 0x60, 0x63, 0x11, 0x6b, 0x3e, 0x58, 0xda, 0xb5, 
+0xc0, 0x48, 0x3e, 0x59, 0xad, 0x7b, 0xf7, 0xa8, 0xb9, 0xa8, 0x3a, 0x38, 0x9e, 0x58, 0xc6, 0x04, 0x18, 0x10, 0x2f, 0x8a, 0xff, 0x60, 0xff, 0x68, 0x8c, 0x61, 0x04, 0x69, 0x14, 0x62, 0x19, 0x12, 0x57, 0x38, 0x1d, 0x59, 0x00, 0x60, 0xbe, 0x58, 0xa0, 0x04, 0xbe, 0x58, 0xa1, 0x04, 0x19, 0x38, 0xf9, 0x48, 0x18, 0x60, 0x58, 0x48, 0x1d, 0x9c, 0x60, 0x38, 0x06, 0x16, 0x03, 0x59, 0x24, 0x3a, 0xff, 0x00, 0x4d, 0x38, 0x00, 0x71, 0x01, 0x60, 0xbe, 0x58, 0xa0, 0x04, 0xbe, 0x58, 0xa1, 0x04, 0x00, 0x39, 0x8c, 0x04, 0x7b, 0x59, 0x19, 0x38, 0x18, 0x49, 0x9e, 0x58, 0xa0, 0x04, 0x19, 0x00, 0xbe, 0x58, 0xa0, 0x04, 0x00, 0x39, 0x8c, 0x04, 0x23, 0x5b, 0xff, 0x62, 0xff, 0x6a, 0x59, 0x49, 0xf2, 0x89, 0x3a, 0x38, 0x00, 0x67, 0x9e, 0x58, 0xc6, 0x04, 0x00, 0x62, 0x00, 0x63, 0x23, 0x74, 0xe0, 0x39, 0xe8, 0x3c, 
+0x00, 0x49, 0xaa, 0x15, 0x23, 0x5e, 0xc4, 0x3e, 0xff, 0x00, 0x9e, 0x48, 0x04, 0x98, 0x5e, 0x48, 0x02, 0x94, 0xc1, 0x5a, 0xe1, 0x5b, 0x19, 0x07, 0xf8, 0x48, 0xf2, 0x97, 0xbe, 0x5a, 0xbc, 0x04, 0x00, 0x60, 0x9e, 0x59, 0xad, 0x04, 0x59, 0x48, 0x01, 0x9a, 0x01, 0x60, 0xbe, 0x58, 0xb2, 0x04, 0x3a, 0x38, 0x61, 0x5e, 0x00, 0x67, 0x19, 0x38, 0x44, 0x49, 0xe0, 0x39, 0xaa, 0x15, 0x23, 0x74, 0x99, 0x49, 0x1d, 0x98, 0xfe, 0x48, 0x1b, 0x8a, 0xe0, 0x38, 0x06, 0x16, 0x03, 0x59, 0x24, 0x39, 0x00, 0xff, 0x22, 0x39, 0x00, 0x71, 0x13, 0x8a, 0x19, 0x38, 0x5a, 0x49, 0x18, 0x10, 0x0f, 0x8a, 0xe0, 0x38, 0x06, 0x16, 0x03, 0x59, 0x24, 0x3a, 0xff, 0x00, 0x4d, 0x38, 0x00, 0x71, 0x9e, 0x58, 0xa1, 0x04, 0x19, 0x00, 0xbe, 0x58, 0xa1, 0x04, 0x00, 0x39, 0x8c, 0x04, 0xfb, 0x59, 0x19, 0x07, 0x9e, 0x58, 0x65, 0x7b, 
+0x40, 0x49, 0xc6, 0x04, 0xf8, 0x48, 0xd9, 0x97, 0x3a, 0x38, 0xff, 0x61, 0xc0, 0x38, 0x06, 0x16, 0x11, 0x22, 0xbe, 0x5a, 0xa2, 0x04, 0xc0, 0x38, 0x1a, 0x16, 0x11, 0x22, 0xbe, 0x5a, 0xa3, 0x04, 0xc0, 0x38, 0xde, 0x15, 0x11, 0x22, 0xbe, 0x5a, 0xa4, 0x04, 0xc0, 0x38, 0xf2, 0x15, 0x11, 0x22, 0xbe, 0x5a, 0xa5, 0x04, 0x3a, 0x38, 0x9e, 0x5d, 0xa8, 0x04, 0xff, 0x64, 0xe0, 0x38, 0xf2, 0x15, 0x14, 0x21, 0x9e, 0x58, 0xa4, 0x04, 0x01, 0x13, 0x03, 0x96, 0x7d, 0x48, 0x2c, 0x98, 0x0b, 0x9e, 0xe0, 0x38, 0xde, 0x15, 0x14, 0x21, 0x9e, 0x58, 0xa5, 0x04, 0x20, 0x13, 0x02, 0x94, 0x00, 0x63, 0x02, 0x9e, 0x7d, 0x48, 0x20, 0x98, 0xe0, 0x38, 0x06, 0x16, 0x14, 0x21, 0x9e, 0x58, 0xa3, 0x04, 0x01, 0x12, 0x03, 0x96, 0x5d, 0x48, 0x17, 0x98, 0x0b, 0x9e, 0xe0, 0x38, 0x1a, 0x16, 0x14, 0x21, 0x9e, 0x58, 0x69, 0x10, 
+0x80, 0x49, 0xa2, 0x04, 0x20, 0x12, 0x02, 0x94, 0x00, 0x62, 0x07, 0x9e, 0x5d, 0x48, 0x0b, 0x98, 0x7a, 0x48, 0x03, 0x94, 0x68, 0x5b, 0x43, 0x01, 0x02, 0x9e, 0x48, 0x5a, 0x62, 0x01, 0x3d, 0x48, 0x02, 0x98, 0x01, 0x60, 0x01, 0x9e, 0x00, 0x60, 0x3a, 0x38, 0x9e, 0x58, 0xb1, 0x04, 0x18, 0x10, 0x07, 0x88, 0x9e, 0x58, 0xb8, 0x04, 0x18, 0x10, 0x03, 0x9a, 0x19, 0x10, 0xbe, 0x58, 0xb8, 0x04, 0x9e, 0x58, 0xc6, 0x04, 0x18, 0x10, 0x03, 0x88, 0xbe, 0x58, 0xb1, 0x04, 0x1f, 0x9e, 0x19, 0x38, 0xc6, 0x49, 0x9e, 0x58, 0xb2, 0x04, 0x9e, 0x58, 0xb3, 0x04, 0xbe, 0x5f, 0xb1, 0x04, 0x18, 0x17, 0x15, 0x8a, 0x9e, 0x58, 0xa2, 0x04, 0xbe, 0x58, 0xb4, 0x04, 0x9e, 0x58, 0xa3, 0x04, 0xbe, 0x58, 0xb5, 0x04, 0x9e, 0x58, 0xa4, 0x04, 0xbe, 0x58, 0xb6, 0x04, 0x9e, 0x58, 0xa5, 0x04, 0xbe, 0x58, 0xb7, 0x04, 0x6d, 0x06, 
+0xc0, 0x49, 0x14, 0x60, 0xbe, 0x58, 0xb8, 0x04, 0x19, 0x38, 0x7b, 0x4a, 0x3a, 0x38, 0x00, 0x64, 0xff, 0x65, 0x00, 0x66, 0xff, 0x6e, 0x00, 0x67, 0xbe, 0x5f, 0xa2, 0x04, 0xbe, 0x5d, 0xa3, 0x04, 0xbe, 0x5d, 0xa4, 0x04, 0xbe, 0x5f, 0xa5, 0x04, 0x9e, 0x58, 0xc6, 0x04, 0x19, 0x10, 0x07, 0x38, 0x0b, 0x4a, 0xe0, 0x38, 0x06, 0x16, 0x16, 0x22, 0x42, 0x3b, 0x00, 0x71, 0x2d, 0x88, 0x15, 0x22, 0x9e, 0x5b, 0xa2, 0x04, 0x5b, 0x48, 0x04, 0x9a, 0xbe, 0x5a, 0xa2, 0x04, 0xbe, 0x5a, 0xc2, 0x04, 0xe0, 0x38, 0x1a, 0x16, 0x15, 0x22, 0x9e, 0x5b, 0xa3, 0x04, 0x5b, 0x48, 0x04, 0x94, 0xbe, 0x5a, 0xa3, 0x04, 0xbe, 0x5a, 0xc3, 0x04, 0xe0, 0x38, 0xde, 0x15, 0x15, 0x22, 0x9e, 0x5b, 0xa4, 0x04, 0x5b, 0x48, 0x04, 0x94, 0xbe, 0x5a, 0xa4, 0x04, 0xbe, 0x5a, 0xc5, 0x04, 0xe0, 0x38, 0xf2, 0x15, 0x15, 0x22, 0xfb, 0x57, 
+0x00, 0x4a, 0x9e, 0x5b, 0xa5, 0x04, 0x5b, 0x48, 0x04, 0x9a, 0xbe, 0x5a, 0xa5, 0x04, 0xbe, 0x5a, 0xc4, 0x04, 0xe0, 0x38, 0xaa, 0x15, 0x14, 0x04, 0x19, 0x07, 0x1a, 0x38, 0x19, 0x38, 0x55, 0x4b, 0x9e, 0x58, 0xa2, 0x04, 0x12, 0x3a, 0xa3, 0x04, 0x19, 0x02, 0x9e, 0x5b, 0xa5, 0x04, 0x72, 0x3d, 0xa4, 0x04, 0x19, 0x05, 0x45, 0x40, 0xbe, 0x58, 0xae, 0x04, 0xbe, 0x5c, 0xaf, 0x04, 0x81, 0x59, 0x01, 0x5a, 0x00, 0x60, 0x1c, 0x5a, 0xbe, 0x58, 0xb0, 0x04, 0x16, 0x62, 0x24, 0x63, 0x43, 0x40, 0x9e, 0x59, 0xa9, 0x04, 0x9e, 0x5a, 0xaa, 0x04, 0x9e, 0x5d, 0xb1, 0x04, 0x18, 0x15, 0x04, 0x8a, 0x22, 0x3e, 0x0a, 0x00, 0x01, 0x9c, 0x3a, 0x11, 0x01, 0x40, 0x1c, 0x5a, 0x9e, 0x5a, 0xae, 0x04, 0xbe, 0x58, 0xbd, 0x04, 0x1a, 0x48, 0x11, 0x9c, 0x9e, 0x5c, 0xa6, 0x04, 0x9e, 0x5b, 0xa7, 0x04, 0x9e, 0x5d, 0x84, 0x7a, 
+0x40, 0x4a, 0xb1, 0x04, 0x18, 0x15, 0x02, 0x8a, 0x1a, 0x14, 0x1a, 0x13, 0x83, 0x40, 0xbe, 0x58, 0xbe, 0x04, 0x58, 0x48, 0x02, 0x98, 0x00, 0x67, 0x17, 0x9e, 0x00, 0x60, 0x9e, 0x59, 0xab, 0x04, 0x9e, 0x5a, 0xac, 0x04, 0x9e, 0x5d, 0xb1, 0x04, 0x18, 0x15, 0x04, 0x8a, 0x22, 0x3e, 0x0f, 0x00, 0x01, 0x9c, 0x3f, 0x11, 0x1c, 0x5a, 0x9e, 0x59, 0xb0, 0x04, 0xbe, 0x58, 0xbf, 0x04, 0x19, 0x48, 0x02, 0x9c, 0x00, 0x67, 0x01, 0x9e, 0x01, 0x67, 0xbe, 0x5f, 0xc1, 0x04, 0x40, 0x66, 0x9e, 0x58, 0xa2, 0x04, 0x06, 0x40, 0xbe, 0x58, 0xa2, 0x04, 0x9e, 0x58, 0xa3, 0x04, 0x06, 0x40, 0xbe, 0x58, 0xa3, 0x04, 0x9e, 0x58, 0xa4, 0x04, 0x06, 0x40, 0xbe, 0x58, 0xa4, 0x04, 0x9e, 0x58, 0xa5, 0x04, 0x06, 0x40, 0xbe, 0x58, 0xa5, 0x04, 0x3a, 0x38, 0x00, 0x64, 0xff, 0x6c, 0xff, 0x65, 0x9e, 0x5e, 0xc6, 0x04, 0x21, 0x91, 
+0x80, 0x4a, 0x00, 0x67, 0xc2, 0x38, 0x01, 0x00, 0x07, 0x38, 0x90, 0x4a, 0xe0, 0x38, 0x06, 0x16, 0x14, 0x22, 0x42, 0x3b, 0x00, 0x71, 0x05, 0x88, 0x15, 0x21, 0x21, 0x5a, 0xfe, 0x59, 0x22, 0x29, 0x3b, 0x58, 0x19, 0x07, 0x3a, 0x38, 0x9e, 0x5f, 0x4b, 0x1a, 0x18, 0x17, 0x2d, 0x8a, 0x00, 0x60, 0x00, 0x65, 0x00, 0x66, 0x19, 0x17, 0xe7, 0x38, 0xbf, 0x4a, 0xc0, 0x39, 0xaa, 0x15, 0x19, 0x49, 0x1f, 0x8a, 0xbe, 0x48, 0x1c, 0x8a, 0x23, 0x5a, 0xa0, 0x39, 0xaa, 0x15, 0x5b, 0x59, 0xc0, 0x39, 0x06, 0x16, 0x23, 0x5a, 0xa0, 0x39, 0x06, 0x16, 0x5b, 0x59, 0xc0, 0x39, 0x1a, 0x16, 0x23, 0x5a, 0xa0, 0x39, 0x1a, 0x16, 0x5b, 0x59, 0xc0, 0x39, 0xde, 0x15, 0x23, 0x5a, 0xa0, 0x39, 0xde, 0x15, 0x5b, 0x59, 0xc0, 0x39, 0xf2, 0x15, 0x23, 0x5a, 0xa0, 0x39, 0xf2, 0x15, 0x5b, 0x59, 0x19, 0x05, 0x19, 0x06, 0xba, 0xd7, 
+0xc0, 0x4a, 0xbe, 0x5d, 0xc6, 0x04, 0x02, 0x9e, 0xbe, 0x5f, 0xc6, 0x04, 0x3a, 0x38, 0x00, 0x65, 0x7f, 0x6d, 0x00, 0x67, 0x9e, 0x5e, 0xc6, 0x04, 0x18, 0x16, 0x08, 0x8a, 0x19, 0x16, 0xc7, 0x38, 0xd4, 0x4a, 0xe0, 0x38, 0x06, 0x16, 0x15, 0x29, 0x3b, 0x58, 0x19, 0x07, 0x3a, 0x38, 0x9e, 0x58, 0xb8, 0x04, 0x18, 0x10, 0x35, 0x8a, 0x9e, 0x58, 0xc6, 0x04, 0x18, 0x10, 0x31, 0x8a, 0x9e, 0x5f, 0xb4, 0x04, 0x9e, 0x5e, 0xb5, 0x04, 0x9e, 0x5d, 0xb7, 0x04, 0x9e, 0x5c, 0xb6, 0x04, 0x00, 0x63, 0x00, 0x62, 0x9e, 0x58, 0xe2, 0x19, 0x18, 0x10, 0x23, 0x8a, 0x19, 0x10, 0x07, 0x38, 0x05, 0x4b, 0x60, 0x38, 0xb2, 0x19, 0x03, 0x59, 0x24, 0x39, 0xff, 0x0f, 0x3d, 0x48, 0x0f, 0x98, 0x3c, 0x48, 0x0d, 0x96, 0x60, 0x38, 0xbe, 0x19, 0x03, 0x59, 0x24, 0x39, 0xff, 0x0f, 0x3f, 0x48, 0x06, 0x98, 0x3e, 0x48, 0x56, 0x7d, 
+0x00, 0x4b, 0x04, 0x96, 0xff, 0x61, 0x7f, 0x69, 0x3b, 0x58, 0x19, 0x02, 0x19, 0x03, 0x9e, 0x5f, 0xe2, 0x19, 0xe2, 0x10, 0xbe, 0x58, 0xe2, 0x19, 0x18, 0x10, 0x02, 0x8a, 0x19, 0x38, 0x10, 0x4b, 0x3a, 0x38, 0xff, 0x60, 0x7f, 0x68, 0x00, 0x65, 0x00, 0x66, 0x19, 0x17, 0xe7, 0x38, 0x29, 0x4b, 0xc0, 0x39, 0xbe, 0x19, 0x19, 0x49, 0x0d, 0x8a, 0xbe, 0x48, 0x0a, 0x8a, 0x23, 0x5a, 0xa0, 0x39, 0xbe, 0x19, 0x5b, 0x59, 0xc0, 0x39, 0xb2, 0x19, 0x23, 0x5a, 0xa0, 0x39, 0xb2, 0x19, 0x5b, 0x59, 0x19, 0x05, 0x19, 0x06, 0x1a, 0x38, 0x3a, 0x38, 0xbe, 0xac, 0x27, 0x90, 0x0c, 0x67, 0xbe, 0x5f, 0xa6, 0x04, 0x0c, 0x67, 0xbe, 0x5f, 0xa7, 0x04, 0x03, 0x67, 0xbe, 0x5f, 0xa8, 0x04, 0x28, 0x67, 0xbe, 0x5f, 0xa9, 0x04, 0x64, 0x67, 0xbe, 0x5f, 0xaa, 0x04, 0x1e, 0x67, 0xbe, 0x5f, 0xab, 0x04, 0x64, 0x67, 0x9a, 0xcb, 
+0x40, 0x4b, 0xbe, 0x5f, 0xac, 0x04, 0x30, 0x67, 0xbe, 0x5f, 0xad, 0x04, 0x50, 0x67, 0xbe, 0x5f, 0xba, 0x04, 0x04, 0x67, 0xbe, 0x5f, 0xbb, 0x04, 0x00, 0x60, 0xbe, 0x58, 0xb1, 0x04, 0xbe, 0x58, 0xb2, 0x04, 0xbe, 0x58, 0xb3, 0x04, 0xbe, 0x58, 0xb8, 0x04, 0x3a, 0x38, 0x00, 0x62, 0x70, 0x63, 0x00, 0x61, 0x9e, 0x5f, 0xa3, 0x04, 0x27, 0x01, 0x9e, 0x5f, 0xa2, 0x04, 0x27, 0x01, 0x9e, 0x5f, 0xa5, 0x04, 0x27, 0x01, 0x9e, 0x5f, 0xa4, 0x04, 0x27, 0x01, 0x3a, 0x48, 0x01, 0x88, 0x3a, 0x38, 0x3b, 0x48, 0x01, 0x80, 0x3a, 0x38, 0x9e, 0x5b, 0xba, 0x04, 0x00, 0x65, 0x9e, 0x5f, 0xa3, 0x04, 0x9e, 0x59, 0xa5, 0x04, 0x9e, 0x5e, 0xa4, 0x04, 0x26, 0x10, 0x07, 0x38, 0x80, 0x4b, 0x16, 0x62, 0xc1, 0x58, 0x00, 0x61, 0x47, 0x48, 0x00, 0x38, 0x48, 0x0e, 0x03, 0x59, 0x3b, 0x48, 0x01, 0x9a, 0x19, 0x05, 0x10, 0x4f, 
+0x80, 0x4b, 0x19, 0x06, 0x19, 0x07, 0x9e, 0x59, 0xa2, 0x04, 0xf9, 0x48, 0xe9, 0x9b, 0x01, 0x61, 0x9e, 0x58, 0xbb, 0x04, 0xbe, 0x5d, 0xc0, 0x04, 0xb8, 0x48, 0x01, 0x98, 0x00, 0x61, 0xbe, 0x59, 0xb3, 0x04, 0x3a, 0x38, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0xd5, 0xf0, 0x19, 0x38, 0xcf, 0x4d, 0xed, 0xac, 0x09, 0x92, 0x9e, 0x58, 0x56, 0x01, 0x00, 0xaa, 0xbe, 0x58, 0x07, 0xf8, 0x9e, 0x58, 0xd5, 0x1a, 0xbe, 0x58, 0x02, 0xf8, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x9e, 0x5a, 0xd6, 0x1a, 0x9e, 0x5b, 0xd7, 0x1a, 0x43, 0x00, 0x06, 0x5c, 0x55, 0x61, 0x24, 0x40, 0x64, 0x65, 0x1c, 0x5d, 0x9e, 0x5a, 0x02, 0xf8, 0x9e, 0x5b, 0x07, 0xf8, 0x04, 0x4a, 
+0xc0, 0x4b, 0xfe, 0x5b, 0x7f, 0x38, 0x68, 0x5b, 0x3f, 0x23, 0x43, 0x12, 0x02, 0x40, 0xbe, 0x58, 0x37, 0x1d, 0x19, 0x38, 0x8f, 0x4c, 0xd5, 0xf0, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0xed, 0xac, 0x08, 0x92, 0x9e, 0x5b, 0x56, 0x01, 0xbe, 0x5b, 0x07, 0xf8, 0x9e, 0x5b, 0xd5, 0x1a, 0xbe, 0x5b, 0x02, 0xf8, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x1a, 0x38, 0x3a, 0x38, 0x9e, 0x58, 0xd5, 0x1a, 0xbe, 0x58, 0x02, 0xf8, 0xed, 0xac, 0x9e, 0x92, 0x00, 0x60, 0xbe, 0x58, 0xb1, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x00, 0x38, 0x90, 0x5e, 0x09, 0x58, 0x48, 0x61, 0x19, 0x48, 0x87, 0x8a, 0x19, 0x38, 0x0e, 0x4e, 0x88, 0x60, 0x88, 0x68, 0xbe, 0x58, 0x38, 0x1d, 0xe1, 0xed, 
+0x00, 0x4c, 0xbe, 0x58, 0x39, 0x1d, 0xbe, 0x58, 0x3a, 0x1d, 0xbe, 0x58, 0x3b, 0x1d, 0xbe, 0x58, 0x3c, 0x1d, 0xbe, 0x58, 0x3d, 0x1d, 0x00, 0x60, 0x40, 0x68, 0xbe, 0x58, 0x47, 0x1d, 0x00, 0x60, 0x04, 0x68, 0xbe, 0x58, 0x46, 0x1d, 0x40, 0x60, 0xbe, 0x58, 0x45, 0x1d, 0x04, 0x60, 0xbe, 0x58, 0x44, 0x1d, 0x38, 0x60, 0x1d, 0x68, 0x28, 0x61, 0xf8, 0x69, 0xaf, 0x38, 0x21, 0x4c, 0x03, 0x5a, 0x5b, 0x59, 0x19, 0x00, 0x19, 0x01, 0x19, 0x38, 0xfc, 0x4d, 0x62, 0x63, 0xf8, 0x6b, 0x38, 0x62, 0x1d, 0x6a, 0xaf, 0x38, 0x59, 0x4c, 0x65, 0x5c, 0x65, 0x5d, 0x65, 0x5e, 0x65, 0x5f, 0x43, 0x59, 0x1e, 0x5a, 0x9e, 0x5a, 0x47, 0x1d, 0x9e, 0x58, 0x37, 0x1d, 0xf8, 0x48, 0x02, 0x82, 0x22, 0x11, 0x01, 0x9e, 0x22, 0x01, 0x9e, 0x5a, 0x46, 0x1d, 0x9e, 0x58, 0x37, 0x1d, 0xd8, 0x48, 0x02, 0x82, 0x22, 0x11, 0xb7, 0x93, 
+0x40, 0x4c, 0x01, 0x9e, 0x22, 0x01, 0x9e, 0x5a, 0x45, 0x1d, 0x9e, 0x58, 0x37, 0x1d, 0xb8, 0x48, 0x02, 0x82, 0x22, 0x11, 0x01, 0x9e, 0x22, 0x01, 0x9e, 0x5a, 0x44, 0x1d, 0x9e, 0x58, 0x37, 0x1d, 0x98, 0x48, 0x02, 0x82, 0x22, 0x11, 0x01, 0x9e, 0x22, 0x01, 0x1a, 0x38, 0x1a, 0x38, 0x3e, 0x5a, 0x1a, 0x38, 0x3b, 0x5a, 0x19, 0x02, 0x9e, 0x5a, 0x47, 0x1d, 0x48, 0x5a, 0xbe, 0x5a, 0x47, 0x1d, 0x9e, 0x5a, 0x46, 0x1d, 0x48, 0x5a, 0xbe, 0x5a, 0x46, 0x1d, 0x9e, 0x5a, 0x45, 0x1d, 0x48, 0x5a, 0xbe, 0x5a, 0x45, 0x1d, 0x9e, 0x5a, 0x44, 0x1d, 0x48, 0x5a, 0xbe, 0x5a, 0x44, 0x1d, 0x00, 0x60, 0x1a, 0x48, 0xa7, 0x89, 0x06, 0x60, 0x9e, 0x59, 0xb1, 0x00, 0x01, 0x40, 0x00, 0x38, 0xb0, 0x01, 0x00, 0x38, 0x00, 0x05, 0x38, 0x64, 0x1d, 0x6c, 0xaf, 0x38, 0x80, 0x4c, 0x83, 0x59, 0x3b, 0x58, 0x19, 0x00, 0x6e, 0xee, 
+0x80, 0x4c, 0x19, 0x04, 0x9e, 0x59, 0xbc, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x48, 0x06, 0x8a, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x00, 0xbe, 0x58, 0xb1, 0x00, 0x65, 0x9f, 0x1a, 0x38, 0x3a, 0x38, 0x19, 0x38, 0xea, 0x4d, 0xed, 0xac, 0x87, 0x92, 0x9e, 0x58, 0xd5, 0x1a, 0xbe, 0x58, 0x02, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0xb1, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x00, 0x38, 0x90, 0x5e, 0x09, 0x58, 0x48, 0x61, 0x19, 0x48, 0x6a, 0x8a, 0x19, 0x38, 0x0e, 0x4e, 0x40, 0x60, 0x40, 0x68, 0xbe, 0x58, 0x38, 0x1d, 0xbe, 0x58, 0x39, 0x1d, 0xbe, 0x58, 0x3a, 0x1d, 0xbe, 0x58, 0x3b, 0x1d, 0xbe, 0x58, 0x3c, 0x1d, 0xbe, 0x58, 0x3d, 0x1d, 0xbe, 0x58, 0x3e, 0x1d, 0xbe, 0x58, 0x3f, 0x1d, 0xbe, 0x58, 0x40, 0x1d, 0xbe, 0x58, 0x41, 0x1d, 0xbe, 0x58, 0x42, 0x1d, 0xbe, 0x58, 0x43, 0x1d, 0x00, 0x60, 0x20, 0x68, 0x4e, 0xf6, 
+0xc0, 0x4c, 0xbe, 0x58, 0x45, 0x1d, 0x20, 0x60, 0xbe, 0x58, 0x44, 0x1d, 0x38, 0x60, 0x1d, 0x68, 0x3b, 0x61, 0xf8, 0x69, 0x6f, 0x39, 0xcf, 0x4c, 0x03, 0x5a, 0x48, 0x5a, 0x5b, 0x59, 0x19, 0x00, 0x19, 0x01, 0x19, 0x38, 0xfc, 0x4d, 0x62, 0x65, 0xf8, 0x6d, 0x38, 0x64, 0x1d, 0x6c, 0x9e, 0x5b, 0x45, 0x1d, 0x9e, 0x5a, 0x44, 0x1d, 0x1a, 0x38, 0x6f, 0x39, 0xf1, 0x4c, 0xa5, 0x5f, 0xa5, 0x5e, 0x83, 0x59, 0x9e, 0x58, 0x37, 0x1d, 0xd8, 0x48, 0x02, 0x82, 0x23, 0x11, 0x01, 0x9e, 0x23, 0x01, 0x9e, 0x58, 0x37, 0x1d, 0xf8, 0x48, 0x02, 0x82, 0x22, 0x11, 0x01, 0x9e, 0x22, 0x01, 0x1a, 0x38, 0x1a, 0x38, 0x3b, 0x5c, 0x19, 0x04, 0x68, 0x5b, 0xbe, 0x5b, 0x45, 0x1d, 0x48, 0x5a, 0xbe, 0x5a, 0x44, 0x1d, 0x00, 0x60, 0x1a, 0x48, 0xca, 0x89, 0x0c, 0x60, 0x9e, 0x59, 0xb1, 0x00, 0x01, 0x40, 0x00, 0x38, 0xda, 0x6f, 
+0x00, 0x4d, 0x00, 0x05, 0x38, 0x64, 0x1d, 0x6c, 0x6f, 0x39, 0x0b, 0x4d, 0x83, 0x59, 0x28, 0x59, 0x24, 0x39, 0x3f, 0x3f, 0x3b, 0x58, 0x19, 0x00, 0x19, 0x04, 0x9e, 0x59, 0xbc, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x48, 0x06, 0x8a, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x00, 0xbe, 0x58, 0xb1, 0x00, 0x82, 0x9f, 0x1a, 0x38, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0xb1, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x00, 0x38, 0x90, 0x5e, 0x09, 0x58, 0x48, 0x61, 0x19, 0x48, 0x97, 0x8a, 0x19, 0x38, 0x0e, 0x4e, 0x00, 0x60, 0xbe, 0x58, 0xb0, 0x00, 0x9e, 0x5a, 0xb0, 0x00, 0x40, 0x38, 0xb6, 0x5e, 0x09, 0x58, 0x48, 0x62, 0x1a, 0x48, 0x82, 0x8a, 0x9e, 0x5a, 0xb0, 0x00, 0x44, 0x3b, 0x0f, 0x00, 0x60, 0x3b, 0x8d, 0x37, 0x69, 0x5b, 0x0f, 0x60, 0x58, 0x48, 0x06, 0x9a, 0xbe, 0x5b, 0x10, 0xf8, 0x00, 0x63, 0xbe, 0x5b, 0xc4, 0x26, 
+0x40, 0x4d, 0x0f, 0xf8, 0x05, 0x9e, 0xbe, 0x5b, 0x0f, 0xf8, 0x00, 0x63, 0xbe, 0x5b, 0x10, 0xf8, 0x40, 0x60, 0x40, 0x68, 0xbe, 0x58, 0x38, 0x1d, 0xbe, 0x58, 0x39, 0x1d, 0xbe, 0x58, 0x3a, 0x1d, 0xbe, 0x58, 0x3b, 0x1d, 0xbe, 0x58, 0x3c, 0x1d, 0xbe, 0x58, 0x3d, 0x1d, 0xbe, 0x58, 0x3e, 0x1d, 0xbe, 0x58, 0x3f, 0x1d, 0xbe, 0x58, 0x40, 0x1d, 0x00, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x45, 0x1d, 0x20, 0x60, 0xbe, 0x58, 0x44, 0x1d, 0x38, 0x60, 0x1d, 0x68, 0x3b, 0x61, 0xf8, 0x69, 0x6f, 0x39, 0x6c, 0x4d, 0x03, 0x5a, 0x48, 0x5a, 0x5b, 0x59, 0x19, 0x00, 0x19, 0x01, 0x19, 0x38, 0xfc, 0x4d, 0x62, 0x65, 0xf8, 0x6d, 0x38, 0x64, 0x1d, 0x6c, 0x9e, 0x5b, 0x45, 0x1d, 0x9e, 0x5a, 0x44, 0x1d, 0x1a, 0x38, 0x6f, 0x39, 0x8e, 0x4d, 0xa5, 0x5f, 0xa5, 0x5e, 0x83, 0x59, 0x9e, 0x58, 0x37, 0x1d, 0xd8, 0x48, 0xd3, 0xc9, 
+0x80, 0x4d, 0x02, 0x82, 0x23, 0x11, 0x01, 0x9e, 0x23, 0x01, 0x9e, 0x58, 0x37, 0x1d, 0xf8, 0x48, 0x02, 0x82, 0x22, 0x11, 0x01, 0x9e, 0x22, 0x01, 0x1a, 0x38, 0x1a, 0x38, 0x3b, 0x5c, 0x19, 0x04, 0x68, 0x5b, 0xbe, 0x5b, 0x45, 0x1d, 0x48, 0x5a, 0xbe, 0x5a, 0x44, 0x1d, 0x00, 0x60, 0x1a, 0x48, 0xca, 0x89, 0x0c, 0x60, 0x9e, 0x59, 0xb1, 0x00, 0x01, 0x40, 0x00, 0x38, 0x00, 0x05, 0x38, 0x64, 0x1d, 0x6c, 0x9e, 0x59, 0xb0, 0x00, 0x28, 0x5a, 0x02, 0x00, 0x82, 0x04, 0x00, 0x63, 0x3f, 0x6b, 0x3f, 0x62, 0x01, 0xac, 0x03, 0x92, 0x3f, 0x63, 0x00, 0x62, 0x3f, 0x6a, 0x83, 0x5c, 0x88, 0x5c, 0x83, 0x24, 0x03, 0x5f, 0xe2, 0x27, 0xe4, 0x2f, 0xfb, 0x58, 0x9e, 0x5a, 0xb0, 0x00, 0x19, 0x02, 0xbe, 0x5a, 0xb0, 0x00, 0x18, 0x60, 0x1a, 0x48, 0x6e, 0x89, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x00, 0xbe, 0x58, 0x96, 0x02, 
+0xc0, 0x4d, 0xb1, 0x00, 0x24, 0x61, 0x19, 0x48, 0x59, 0x89, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x3a, 0x38, 0x00, 0x60, 0x2f, 0x61, 0xf8, 0x69, 0x0b, 0x62, 0x47, 0x38, 0xd6, 0x4d, 0x1b, 0x59, 0x19, 0x01, 0x20, 0x60, 0x20, 0x68, 0x3b, 0x61, 0xf8, 0x69, 0x0b, 0x62, 0x47, 0x38, 0xdf, 0x4d, 0x1b, 0x59, 0x19, 0x01, 0x00, 0x60, 0x00, 0x61, 0x05, 0x69, 0x17, 0x62, 0x03, 0x6a, 0x47, 0x38, 0xe8, 0x4d, 0x1b, 0x59, 0x19, 0x01, 0x3a, 0x38, 0x00, 0x60, 0x2f, 0x61, 0xf8, 0x69, 0x0b, 0x62, 0x47, 0x38, 0xf1, 0x4d, 0x1b, 0x59, 0x19, 0x01, 0x20, 0x60, 0x20, 0x68, 0x3b, 0x61, 0xf8, 0x69, 0x0b, 0x62, 0x47, 0x38, 0xfa, 0x4d, 0x1b, 0x59, 0x19, 0x01, 0x3a, 0x38, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x94, 0xab, 0x88, 0xf7, 
+0x00, 0x4e, 0x9e, 0x58, 0x00, 0xf8, 0x10, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x9e, 0x58, 0x00, 0xf8, 0x18, 0xac, 0xfc, 0x91, 0x90, 0xab, 0x18, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0x3a, 0x38, 0x41, 0xa9, 0x19, 0x38, 0x1e, 0x4e, 0x41, 0xab, 0x04, 0x39, 0x07, 0x00, 0x20, 0x39, 0x2a, 0x4e, 0x29, 0x59, 0x08, 0x58, 0x08, 0x58, 0x08, 0x58, 0x00, 0x38, 0x1a, 0xf8, 0x3b, 0x58, 0x3a, 0x38, 0x00, 0x67, 0xbe, 0x5f, 0x1a, 0xf8, 0xbe, 0x5f, 0x1b, 0xf8, 0xbe, 0x5f, 0x1c, 0xf8, 0xbe, 0x5f, 0x1d, 0xf8, 0xbe, 0x5f, 0x1e, 0xf8, 0x3a, 0x38, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x00, 0x00, 0x02, 0x00, 0x08, 0x00, 0x20, 0x00, 0x80, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x01, 0x60, 0xbe, 0x58, 0xc9, 0x00, 0x09, 0x60, 0xb1, 0x61, 0xf8, 0x69, 0xec, 0x84, 
+0x40, 0x4e, 0x1b, 0x59, 0x00, 0x60, 0x10, 0x68, 0xb6, 0x61, 0xf8, 0x69, 0x1b, 0x59, 0xf9, 0x60, 0x01, 0x68, 0x00, 0x61, 0x3b, 0x58, 0xfa, 0x60, 0x01, 0x68, 0x00, 0x61, 0x3b, 0x58, 0x9e, 0x5a, 0xda, 0x1a, 0x9e, 0x5b, 0xdb, 0x1a, 0x43, 0x00, 0x06, 0x5c, 0x50, 0x61, 0x24, 0x40, 0x64, 0x65, 0x1c, 0x5d, 0x1f, 0x61, 0x01, 0x40, 0xbe, 0x58, 0xca, 0x00, 0x28, 0x61, 0x24, 0x40, 0x1c, 0x5d, 0xbe, 0x58, 0xcb, 0x00, 0x20, 0x61, 0x20, 0x69, 0x00, 0x62, 0x1b, 0x6a, 0x0b, 0x60, 0x1b, 0x68, 0x02, 0x38, 0x00, 0x1b, 0x07, 0x38, 0x6d, 0x4e, 0x3d, 0x5a, 0x1a, 0x38, 0x1a, 0x38, 0x1f, 0x61, 0x1f, 0x69, 0x20, 0x62, 0x1b, 0x6a, 0x2b, 0x60, 0x1b, 0x68, 0x02, 0x38, 0x20, 0x1b, 0x07, 0x38, 0x7a, 0x4e, 0x3d, 0x5a, 0x1a, 0x38, 0x1a, 0x38, 0x40, 0x61, 0x40, 0x69, 0xe0, 0x62, 0x1a, 0x6a, 0xeb, 0x60, 0x06, 0x95, 
+0x80, 0x4e, 0x1a, 0x68, 0x02, 0x38, 0xe0, 0x1a, 0x07, 0x38, 0x87, 0x4e, 0x3d, 0x5a, 0x1a, 0x38, 0x1a, 0x38, 0x19, 0x38, 0x2a, 0x4f, 0xf9, 0x60, 0x01, 0x68, 0x06, 0x61, 0x3b, 0x58, 0xfa, 0x60, 0x01, 0x68, 0x01, 0x61, 0x3b, 0x58, 0x9e, 0x5a, 0xdd, 0x1a, 0x9e, 0x5b, 0xde, 0x1a, 0x43, 0x00, 0x06, 0x5c, 0x50, 0x61, 0x24, 0x40, 0x64, 0x65, 0x1c, 0x5d, 0x1f, 0x61, 0x01, 0x40, 0xbe, 0x58, 0xca, 0x00, 0x28, 0x61, 0x24, 0x40, 0x1c, 0x5d, 0xbe, 0x58, 0xcb, 0x00, 0x20, 0x61, 0x20, 0x69, 0x0c, 0x62, 0x1b, 0x6a, 0x1f, 0x60, 0x1b, 0x68, 0x02, 0x38, 0x0c, 0x1b, 0x07, 0x38, 0xb1, 0x4e, 0x3d, 0x5a, 0x1a, 0x38, 0x1a, 0x38, 0x1f, 0x61, 0x1f, 0x69, 0x2c, 0x62, 0x1b, 0x6a, 0x3f, 0x60, 0x1b, 0x68, 0x02, 0x38, 0x2c, 0x1b, 0x07, 0x38, 0xbe, 0x4e, 0x3d, 0x5a, 0x1a, 0x38, 0x1a, 0x38, 0x40, 0x61, 0x58, 0x4c, 
+0xc0, 0x4e, 0x40, 0x69, 0xec, 0x62, 0x1a, 0x6a, 0xff, 0x60, 0x1a, 0x68, 0x02, 0x38, 0xec, 0x1a, 0x07, 0x38, 0xcb, 0x4e, 0x3d, 0x5a, 0x1a, 0x38, 0x1a, 0x38, 0x19, 0x38, 0x2a, 0x4f, 0xf9, 0x60, 0x01, 0x68, 0x00, 0x61, 0x3b, 0x58, 0xfa, 0x60, 0x01, 0x68, 0x00, 0x61, 0x3b, 0x58, 0x9e, 0x5a, 0xda, 0x1a, 0x9e, 0x5b, 0xdb, 0x1a, 0x43, 0x00, 0x06, 0x5c, 0x4b, 0x61, 0x24, 0x40, 0x64, 0x65, 0x1c, 0x5d, 0x1f, 0x61, 0x01, 0x40, 0xbe, 0x58, 0xca, 0x00, 0x4a, 0x61, 0x24, 0x40, 0x1c, 0x5d, 0x1f, 0x61, 0x01, 0x40, 0xbe, 0x58, 0xcb, 0x00, 0x19, 0x38, 0xdf, 0x4f, 0xf9, 0x60, 0x01, 0x68, 0x06, 0x61, 0x3b, 0x58, 0xfa, 0x60, 0x01, 0x68, 0x01, 0x61, 0x3b, 0x58, 0x9e, 0x5a, 0xdd, 0x1a, 0x9e, 0x5b, 0xde, 0x1a, 0x43, 0x00, 0x06, 0x5c, 0x46, 0x61, 0x24, 0x40, 0x64, 0x65, 0x1c, 0x5d, 0x1f, 0x61, 0xb5, 0xb7, 
+0x00, 0x4f, 0x01, 0x40, 0xbe, 0x58, 0xca, 0x00, 0x45, 0x61, 0x24, 0x40, 0x1c, 0x5d, 0x1f, 0x61, 0x01, 0x40, 0xbe, 0x58, 0xcb, 0x00, 0x19, 0x38, 0xdf, 0x4f, 0x19, 0x60, 0xb1, 0x61, 0xf8, 0x69, 0x1b, 0x59, 0x00, 0x60, 0x10, 0x68, 0xb6, 0x61, 0xf8, 0x69, 0x1b, 0x59, 0xf9, 0x60, 0x01, 0x68, 0x00, 0x61, 0x3b, 0x58, 0xfa, 0x60, 0x01, 0x68, 0x00, 0x61, 0x3b, 0x58, 0x00, 0x60, 0xbe, 0x58, 0xc9, 0x00, 0x65, 0xf3, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x3a, 0x38, 0xe0, 0x67, 0x1a, 0x6f, 0xe6, 0x63, 0x1a, 0x6b, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x58, 0x00, 0xac, 0x04, 0x90, 0xec, 0x67, 0x1a, 0x6f, 0xf6, 0x63, 0x1a, 0x6b, 0x20, 0x64, 0x20, 0x6c, 0xf9, 0x60, 0x01, 0x68, 0x03, 0x59, 0x06, 0x62, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x58, 0x39, 0xc1, 
+0x40, 0x4f, 0x00, 0xac, 0x01, 0x90, 0x10, 0x62, 0x3a, 0x48, 0x99, 0x8a, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5f, 0x1e, 0x5c, 0x1e, 0x5b, 0x2c, 0xf2, 0x3e, 0x5b, 0x3e, 0x5c, 0x3e, 0x5f, 0x3e, 0x5a, 0x3e, 0x59, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x9e, 0x58, 0x00, 0xf8, 0x10, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5f, 0x1e, 0x5c, 0x1e, 0x5b, 0x9f, 0xf0, 0x3e, 0x5b, 0x3e, 0x5c, 0x3e, 0x5f, 0x3e, 0x5a, 0x3e, 0x59, 0xda, 0x65, 0xf8, 0x6d, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x58, 0x00, 0xac, 0x02, 0x90, 0xde, 0x65, 0xf8, 0x6d, 0xa5, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x82, 0x09, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x02, 0x04, 0x38, 0x00, 0xff, 0xeb, 0xbd, 
+0x80, 0x4f, 0x40, 0x28, 0x1b, 0x5f, 0x08, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x12, 0x04, 0x38, 0x00, 0xff, 0x40, 0x28, 0x1b, 0x5f, 0xa5, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x82, 0x09, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0x00, 0xff, 0x02, 0x02, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5f, 0x08, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0x00, 0xff, 0x02, 0x12, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5f, 0xa5, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x82, 0x09, 0x9e, 0x63, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x02, 0x04, 0x38, 0x00, 0xff, 0x40, 0x28, 0x1b, 0x5b, 0x08, 0x9e, 0x63, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x12, 0x04, 0x38, 0x00, 0xff, 0x40, 0x28, 0x1b, 0x5b, 0xa3, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x82, 0x09, 0x9e, 0x63, 0x58, 0x04, 0x3b, 
+0xc0, 0x4f, 0x84, 0x3a, 0x00, 0xff, 0x02, 0x02, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5b, 0x08, 0x9e, 0x63, 0x58, 0x84, 0x3a, 0x00, 0xff, 0x02, 0x12, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5b, 0x88, 0x5c, 0x82, 0x38, 0x80, 0x00, 0x65, 0x89, 0x20, 0x64, 0x20, 0x6c, 0x19, 0x03, 0x19, 0x07, 0xf9, 0x60, 0x01, 0x68, 0x03, 0x59, 0x19, 0x01, 0x3b, 0x58, 0x5b, 0x9f, 0x3a, 0x38, 0x00, 0x67, 0x1b, 0x6f, 0x06, 0x63, 0x1b, 0x6b, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x58, 0x00, 0xac, 0x04, 0x90, 0x0c, 0x67, 0x1b, 0x6f, 0x16, 0x63, 0x1b, 0x6b, 0x10, 0x64, 0x10, 0x6c, 0xf9, 0x60, 0x01, 0x68, 0x03, 0x59, 0x06, 0x62, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x58, 0x00, 0xac, 0x01, 0x90, 0x10, 0x62, 0x3a, 0x48, 0x91, 0x8a, 0x1e, 0x5f, 0x1e, 0x5c, 0x1e, 0x5b, 0x2c, 0xf2, 0x3e, 0x5b, 0x3e, 0x5c, 0xcf, 0xdd, 
+0x00, 0x50, 0x3e, 0x5f, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xbe, 0x58, 0x00, 0xf8, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x9e, 0x58, 0x00, 0xf8, 0x10, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x1e, 0x5f, 0x1e, 0x5c, 0x1e, 0x5b, 0x9f, 0xf0, 0x3e, 0x5b, 0x3e, 0x5c, 0x3e, 0x5f, 0xda, 0x65, 0xf8, 0x6d, 0xfa, 0x60, 0x01, 0x68, 0x03, 0x58, 0x00, 0xac, 0x02, 0x90, 0xde, 0x65, 0xf8, 0x6d, 0xa5, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x98, 0x09, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x02, 0x04, 0x38, 0x00, 0xff, 0x40, 0x28, 0x1b, 0x5f, 0x08, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x12, 0x04, 0x38, 0x00, 0xff, 0x40, 0x28, 0x1b, 0x5f, 0xa5, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x98, 0x09, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0xd5, 0x2a, 
+0x40, 0x50, 0x00, 0xff, 0x02, 0x02, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5f, 0x08, 0x9e, 0xe3, 0x58, 0x84, 0x3a, 0x00, 0xff, 0x02, 0x12, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5f, 0xa5, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x98, 0x09, 0x9e, 0x63, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x02, 0x04, 0x38, 0x00, 0xff, 0x40, 0x28, 0x1b, 0x5b, 0x08, 0x9e, 0x63, 0x58, 0x84, 0x3a, 0xff, 0x00, 0x02, 0x12, 0x04, 0x38, 0x00, 0xff, 0x40, 0x28, 0x1b, 0x5b, 0xa3, 0x5e, 0x9e, 0x58, 0xca, 0x00, 0xd8, 0x48, 0x01, 0x98, 0x09, 0x9e, 0x63, 0x58, 0x84, 0x3a, 0x00, 0xff, 0x02, 0x02, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5b, 0x08, 0x9e, 0x63, 0x58, 0x84, 0x3a, 0x00, 0xff, 0x02, 0x12, 0x04, 0x38, 0xff, 0x00, 0x40, 0x28, 0x1b, 0x5b, 0x88, 0x5c, 0x82, 0x38, 0x80, 0x00, 0x01, 0xb5, 
+0x80, 0x50, 0x6d, 0x89, 0x10, 0x64, 0x10, 0x6c, 0x19, 0x07, 0x19, 0x03, 0xf9, 0x60, 0x01, 0x68, 0x03, 0x59, 0x19, 0x01, 0x3b, 0x58, 0x63, 0x9f, 0x3a, 0x38, 0x00, 0x60, 0xbe, 0x58, 0x65, 0x03, 0xbe, 0x58, 0x6e, 0x03, 0xbe, 0x58, 0x6c, 0x03, 0xbe, 0x58, 0x66, 0x03, 0xbe, 0x58, 0x68, 0x03, 0xbe, 0x58, 0x69, 0x03, 0xbe, 0x58, 0x67, 0x03, 0x3a, 0x38, 0x01, 0xb8, 0x00, 0xb8, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x41, 0xab, 0x50, 0xb2, 0x12, 0xac, 0xb4, 0x90, 0x81, 0xac, 0x50, 0x92, 0x92, 0xac, 0x46, 0x90, 0xb2, 0xac, 0x44, 0x92, 0x9e, 0x5a, 0x65, 0x03, 0x02, 0xac, 0x7f, 0x92, 0x9e, 0x5a, 0x67, 0x03, 0x18, 0x32, 0x88, 0x88, 0x9e, 0x5f, 0x68, 0x03, 0x9e, 0x59, 0x69, 0x03, 0xe1, 0x31, 0x4e, 0xe7, 
+0xc0, 0x50, 0x85, 0x8a, 0x9e, 0x5a, 0x65, 0x03, 0x12, 0xa8, 0xbe, 0x5a, 0x65, 0x03, 0xa2, 0xa8, 0x9e, 0x5e, 0x66, 0x03, 0x9e, 0x5d, 0x65, 0x03, 0x1d, 0xac, 0x1a, 0x90, 0x9e, 0x5a, 0x6b, 0x03, 0xc2, 0x02, 0x43, 0x5b, 0x19, 0x06, 0xc2, 0x3c, 0x37, 0x00, 0x1f, 0x88, 0x00, 0x66, 0x9e, 0x5d, 0x6a, 0x03, 0x19, 0x05, 0xa2, 0x3c, 0x03, 0x00, 0x01, 0x88, 0x00, 0x65, 0xbe, 0x5d, 0x6a, 0x03, 0x71, 0x62, 0x03, 0x6a, 0x37, 0x64, 0xa4, 0x40, 0x40, 0x02, 0xbe, 0x5a, 0x6b, 0x03, 0x0d, 0x9e, 0xc0, 0x3a, 0x6d, 0x03, 0x43, 0x5b, 0x19, 0x06, 0xc2, 0x3c, 0x04, 0x00, 0x06, 0x88, 0x9e, 0x5c, 0x65, 0x03, 0x1c, 0xa8, 0xbe, 0x5c, 0x65, 0x03, 0x00, 0x66, 0xbe, 0x5e, 0x66, 0x03, 0x51, 0x9e, 0x5d, 0x77, 0xf6, 0x39, 0x69, 0x00, 0x52, 0x8a, 0xe0, 0x3a, 0x6a, 0x00, 0x43, 0x59, 0x50, 0x9e, 0x5d, 0x77, 0xa4, 0x4e, 
+0x00, 0x51, 0xf6, 0x39, 0x69, 0x00, 0x4a, 0x8a, 0xe6, 0x3a, 0x00, 0x00, 0x17, 0x8a, 0xe6, 0x3a, 0x01, 0x00, 0x16, 0x8a, 0xa3, 0x72, 0x18, 0x32, 0x15, 0x88, 0xe2, 0x3b, 0x02, 0x00, 0xf7, 0xac, 0x01, 0x90, 0x68, 0x5b, 0x70, 0x3a, 0x57, 0x00, 0x43, 0x5b, 0x64, 0x39, 0xff, 0x00, 0x07, 0xac, 0x01, 0x90, 0x36, 0x9e, 0xfe, 0x5b, 0x64, 0x39, 0xff, 0x00, 0x32, 0x9e, 0x6a, 0x71, 0x30, 0x9e, 0x6b, 0x71, 0x2e, 0x9e, 0xe2, 0x3b, 0x02, 0x00, 0x10, 0x8a, 0x19, 0x13, 0xf7, 0xac, 0x01, 0x90, 0x68, 0x5b, 0x70, 0x3a, 0x57, 0x00, 0x43, 0x5b, 0x64, 0x39, 0xff, 0x00, 0x07, 0xac, 0x01, 0x92, 0x1f, 0x9e, 0xfe, 0x5b, 0x64, 0x39, 0xff, 0x00, 0x1b, 0x9e, 0x6c, 0x71, 0x19, 0x9e, 0x01, 0x63, 0xbe, 0x5b, 0x67, 0x03, 0x9e, 0x5b, 0x65, 0x03, 0x13, 0xaa, 0xbe, 0x5b, 0x65, 0x03, 0x00, 0x63, 0xbe, 0x5b, 0x47, 0xea, 
+0x40, 0x51, 0x68, 0x03, 0xbe, 0x5b, 0x66, 0x03, 0x64, 0x63, 0xd3, 0xb3, 0x0c, 0x9e, 0xff, 0x63, 0x19, 0x17, 0xd3, 0xb3, 0x19, 0x07, 0xbe, 0x5f, 0x68, 0x03, 0x05, 0x9e, 0xff, 0x61, 0x19, 0x17, 0xd3, 0xb1, 0x19, 0x07, 0x5d, 0x7f, 0x50, 0xb2, 0x3a, 0xaa, 0xd0, 0xb2, 0xf1, 0xab, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x81, 0xb8, 0x5a, 0x38, 0x50, 0xb2, 0x3a, 0xaa, 0xd0, 0xb2, 0xf1, 0xab, 0x9e, 0x58, 0x65, 0x03, 0x10, 0xac, 0x02, 0x90, 0xb2, 0xac, 0x14, 0x90, 0xbe, 0xac, 0x02, 0x90, 0x3c, 0xa9, 0x01, 0x9e, 0x24, 0xa9, 0xb2, 0xaa, 0x92, 0xa8, 0x00, 0x60, 0x5d, 0x78, 0xbe, 0x58, 0x67, 0x03, 0xa2, 0xaa, 0x9e, 0x58, 0x65, 0x03, 0x08, 0xac, 0x1b, 0x90, 0xff, 0x3b, 0x1a, 0x38, 0x3c, 0xab, 0x17, 0x9e, 0x9e, 0x5f, 0x14, 0x39, 
+0x80, 0x51, 0x68, 0x03, 0x9e, 0x59, 0x69, 0x03, 0xe1, 0x31, 0x11, 0x88, 0x3c, 0xa9, 0x00, 0x60, 0xbe, 0x58, 0x65, 0x03, 0xbe, 0x58, 0x6e, 0x03, 0xbe, 0x58, 0x6c, 0x03, 0xbe, 0x58, 0x66, 0x03, 0xbe, 0x58, 0x68, 0x03, 0xbe, 0x58, 0x69, 0x03, 0xbe, 0x58, 0x67, 0x03, 0xa2, 0xaa, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x81, 0xb8, 0x5a, 0x38, 0xba, 0xac, 0x28, 0x90, 0xd1, 0xac, 0x26, 0x90, 0x00, 0x60, 0xb6, 0x78, 0xb6, 0x70, 0x19, 0x61, 0x19, 0x48, 0x02, 0x80, 0x19, 0x38, 0x44, 0x52, 0x9e, 0x58, 0x65, 0x03, 0x10, 0xac, 0xf6, 0x93, 0x9e, 0x58, 0x65, 0x03, 0x00, 0xa8, 0xbe, 0x58, 0x65, 0x03, 0x19, 0x38, 0xcc, 0x51, 0x9e, 0x58, 0x65, 0x03, 0x00, 0xaa, 0x08, 0xa8, 0xbe, 0x58, 0x65, 0x03, 0xb2, 0xac, 0x0b, 0x92, 0xee, 0x71, 
+0xc0, 0x51, 0x00, 0x60, 0xb6, 0x78, 0xb6, 0x70, 0x19, 0x61, 0x19, 0x48, 0x02, 0x80, 0x19, 0x38, 0x44, 0x52, 0xaa, 0xac, 0xf8, 0x93, 0x3c, 0xab, 0x3a, 0x38, 0xd1, 0xaa, 0x9e, 0x58, 0x6c, 0x03, 0x37, 0x61, 0x01, 0x40, 0x71, 0x61, 0x03, 0x69, 0x20, 0x01, 0x21, 0x5a, 0x62, 0x60, 0x1d, 0x59, 0xb4, 0x70, 0x18, 0x30, 0x24, 0x8a, 0x9e, 0x58, 0xe3, 0x19, 0x01, 0x5b, 0x04, 0x38, 0xff, 0x00, 0x1d, 0x59, 0x64, 0x3b, 0x00, 0xff, 0xfe, 0x5b, 0x7f, 0x38, 0x66, 0x5b, 0x28, 0x60, 0x75, 0x3b, 0x28, 0x00, 0x7b, 0x58, 0x28, 0x60, 0xcf, 0x3b, 0xed, 0x51, 0x05, 0x5b, 0x7d, 0x59, 0x01, 0x60, 0x1d, 0x59, 0x00, 0x61, 0x2f, 0x3c, 0xf4, 0x51, 0x45, 0x5b, 0x23, 0x01, 0x3d, 0x5a, 0x8d, 0x60, 0x6f, 0x3a, 0xfb, 0x51, 0x05, 0x59, 0x3d, 0x5a, 0x1a, 0x38, 0x1a, 0x38, 0x16, 0x9e, 0x00, 0x60, 0xff, 0x3b, 0x03, 0xef, 
+0x00, 0x52, 0x1d, 0x59, 0x01, 0x60, 0x1d, 0x59, 0x00, 0x61, 0x2f, 0x3c, 0x07, 0x52, 0x45, 0x5b, 0x23, 0x01, 0x3d, 0x5a, 0x00, 0x63, 0x6f, 0x3a, 0x0e, 0x52, 0x1a, 0x38, 0x7d, 0x5a, 0x1a, 0x38, 0x00, 0x60, 0xb5, 0x78, 0xb4, 0x78, 0x55, 0x78, 0x1b, 0x78, 0x66, 0x60, 0xbe, 0x58, 0x6d, 0x03, 0x9e, 0x58, 0x6e, 0x03, 0x02, 0x39, 0x03, 0x00, 0x0b, 0x8a, 0x19, 0x00, 0xbe, 0x58, 0x6e, 0x03, 0x37, 0x61, 0x01, 0x40, 0xbe, 0x58, 0x6f, 0x03, 0x00, 0x39, 0x04, 0x00, 0xbe, 0x59, 0x69, 0x03, 0x00, 0x60, 0xbe, 0x58, 0x70, 0x03, 0x9e, 0x58, 0x6c, 0x03, 0x19, 0x00, 0x02, 0x39, 0x03, 0x00, 0x01, 0x88, 0x00, 0x60, 0xbe, 0x58, 0x6c, 0x03, 0x00, 0x60, 0x9e, 0x59, 0x6e, 0x03, 0x1b, 0x11, 0x02, 0x88, 0x9e, 0x58, 0x6c, 0x03, 0xbe, 0x58, 0x6a, 0x03, 0x71, 0x62, 0x03, 0x6a, 0x37, 0x61, 0x01, 0x40, 0x27, 0xe3, 
+0x40, 0x52, 0x40, 0x02, 0xbe, 0x5a, 0x6b, 0x03, 0x3a, 0x38, 0x3c, 0xa9, 0xf9, 0xab, 0xf1, 0xab, 0x50, 0xb2, 0x3a, 0xaa, 0xd0, 0xb2, 0xb2, 0xaa, 0xa2, 0xaa, 0xaa, 0xaa, 0x00, 0x60, 0x5d, 0x78, 0xbe, 0x58, 0x65, 0x03, 0xbe, 0x58, 0x6e, 0x03, 0xbe, 0x58, 0x6c, 0x03, 0xbe, 0x58, 0x66, 0x03, 0xbe, 0x58, 0x68, 0x03, 0xbe, 0x58, 0x69, 0x03, 0xbe, 0x58, 0x67, 0x03, 0x3a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x00, 0xb8, 0x01, 0xb8, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x13, 0xb8, 0x14, 0xb8, 0x15, 0xb8, 0x90, 0xab, 0x00, 0x60, 0xf8, 0x68, 0x03, 0x58, 0xbe, 0x58, 0xb2, 0x00, 0x62, 0x65, 0xf8, 0x6d, 0x26, 0x66, 0x04, 0x6e, 0xef, 0xac, 0x2d, 0x90, 0xe5, 0xac, 0x02, 0x90, 0xd5, 0xac, 0x06, 0x90, 0xef, 0x3a, 0x81, 0x52, 0xa5, 0x59, 0x5a, 0xe2, 
+0x80, 0x52, 0xc5, 0x58, 0x3b, 0x58, 0x22, 0x9e, 0xeb, 0x62, 0x17, 0x63, 0x01, 0x6b, 0x01, 0x64, 0x01, 0x6c, 0x2d, 0x66, 0x01, 0x6e, 0x26, 0x67, 0x04, 0x6f, 0xef, 0x3a, 0xa4, 0x52, 0xe5, 0x58, 0x02, 0x38, 0x3e, 0x04, 0x04, 0x88, 0x19, 0x03, 0x19, 0x04, 0x19, 0x06, 0x0e, 0x9e, 0xa5, 0x58, 0x1b, 0x4a, 0x04, 0x98, 0x62, 0x38, 0x01, 0x00, 0x03, 0x58, 0x05, 0x9e, 0x1c, 0x4a, 0x03, 0x96, 0x82, 0x38, 0x01, 0x00, 0x03, 0x58, 0xd0, 0x00, 0x1d, 0x5e, 0x19, 0x02, 0x05, 0x9e, 0xef, 0x3a, 0xaa, 0x52, 0xa5, 0x59, 0xc5, 0x58, 0x3b, 0x58, 0x00, 0x60, 0xf8, 0x68, 0x03, 0x58, 0x18, 0xa8, 0x00, 0x61, 0xf8, 0x69, 0x1b, 0x59, 0x95, 0xb8, 0x94, 0xb8, 0x93, 0xb8, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x81, 0xb8, 0x80, 0xb8, 0x5a, 0xab, 0x5e, 0x25, 
+0xc0, 0x52, 0x1a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x78, 0xab, 0x5a, 0xab, 0x1a, 0x38, 0x78, 0xa9, 0x5a, 0x38, 0x78, 0xab, 0x5a, 0xa9, 0x1a, 0x38, 0x78, 0xa9, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x00, 0xb8, 0x1e, 0x58, 0x1e, 0x59, 0x02, 0x70, 0x14, 0x38, 0x30, 0x00, 0x08, 0x8a, 0x9e, 0x58, 0xb6, 0x00, 0x19, 0x00, 0x1a, 0x61, 0x20, 0x11, 0x02, 0x8e, 0xbe, 0x58, 0xb6, 0x00, 0xc9, 0xab, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x5a, 0x38, 0x5a, 0x38, 0x00, 0xb8, 0x1e, 0x58, 0x1e, 0x59, 0x3c, 0xa9, 0x18, 0x60, 0x80, 0x68, 0x8f, 0xb0, 0xaf, 0xa9, 0xd9, 0xab, 0x1a, 0x38, 0xfe, 0x9f, 0x17, 0x98, 
+0x00, 0x53, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x01, 0xb8, 0x00, 0xb8, 0x1e, 0x58, 0x1e, 0x59, 0x1e, 0x5a, 0x1e, 0x5b, 0x1e, 0x5c, 0x1e, 0x5d, 0x1e, 0x5e, 0x1e, 0x5f, 0x41, 0xab, 0x50, 0xb2, 0x0a, 0xac, 0x04, 0x92, 0xaa, 0xa8, 0x1a, 0x38, 0x1a, 0x38, 0x5a, 0x9e, 0x5d, 0x70, 0x00, 0x3a, 0x5e, 0x00, 0x9e, 0x59, 0x21, 0x04, 0x19, 0xac, 0x48, 0x90, 0x03, 0x61, 0x38, 0x48, 0x01, 0x9c, 0x44, 0x9e, 0x83, 0x61, 0x38, 0x48, 0x18, 0x8a, 0x60, 0x71, 0x19, 0x11, 0x60, 0x79, 0x3f, 0x8e, 0x53, 0xb1, 0x21, 0x5b, 0x30, 0x39, 0x22, 0x04, 0xbe, 0x59, 0x22, 0x04, 0x00, 0xac, 0x03, 0x90, 0xbe, 0x5b, 0x25, 0x04, 0x34, 0x9e, 0xfe, 0x5b, 0x75, 0x3b, 0x25, 0x04, 0x9e, 0x59, 0x24, 0x04, 0x7d, 0x59, 0xbe, 0x59, 0x24, 0x04, 0x2b, 0x9e, 0x9e, 0x59, 0x21, 0x04, 0x7b, 0x7a, 
+0x40, 0x53, 0x19, 0xaa, 0xbe, 0x59, 0x21, 0x04, 0x53, 0xb1, 0x9e, 0x5b, 0x22, 0x04, 0x64, 0x3b, 0xff, 0x00, 0x3b, 0x48, 0x11, 0x88, 0x9e, 0x59, 0x21, 0x04, 0x21, 0xa8, 0xbe, 0x59, 0x21, 0x04, 0x9e, 0x59, 0x23, 0x04, 0x19, 0x11, 0xbe, 0x59, 0x23, 0x04, 0x14, 0x88, 0x9e, 0x59, 0x21, 0x04, 0x11, 0xa8, 0xbe, 0x59, 0x21, 0x04, 0x0e, 0x9e, 0x9e, 0x59, 0x21, 0x04, 0x21, 0xaa, 0xbe, 0x59, 0x21, 0x04, 0x9e, 0x59, 0x24, 0x04, 0x22, 0x39, 0x40, 0x00, 0xbe, 0x59, 0x24, 0x04, 0x02, 0x9e, 0x53, 0xb1, 0x3b, 0x5a, 0x19, 0x00, 0x5d, 0x78, 0x06, 0x39, 0x01, 0x00, 0x2c, 0x8a, 0x16, 0x39, 0xa1, 0x00, 0x10, 0x8a, 0xaa, 0xa8, 0x50, 0xb2, 0x3a, 0xaa, 0xd0, 0xb2, 0xf9, 0xab, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x81, 0xb8, 0xf8, 0xe9, 
+0x80, 0x53, 0x5a, 0x38, 0x19, 0x38, 0xe8, 0x42, 0x9a, 0xa8, 0xa2, 0xac, 0x98, 0x3c, 0x42, 0x48, 0xa2, 0xaa, 0xaa, 0xaa, 0x00, 0x60, 0x5d, 0x78, 0x50, 0xb2, 0x3a, 0xaa, 0xd0, 0xb2, 0xf9, 0xab, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x81, 0xb8, 0x5a, 0x38, 0x04, 0x60, 0x5e, 0x71, 0x26, 0x3a, 0x99, 0x00, 0x0a, 0x88, 0x9e, 0x58, 0x21, 0x04, 0x18, 0xa8, 0xbe, 0x58, 0x21, 0x04, 0x00, 0x60, 0xbe, 0x58, 0x22, 0x04, 0x84, 0x60, 0x22, 0x9e, 0x26, 0x3a, 0x84, 0x00, 0x02, 0x88, 0x04, 0x60, 0x1d, 0x9e, 0x26, 0x3a, 0x83, 0x00, 0x02, 0x88, 0x04, 0x60, 0x18, 0x9e, 0x26, 0x3a, 0x96, 0x00, 0x02, 0x88, 0x06, 0x60, 0x13, 0x9e, 0x26, 0x3a, 0x97, 0x00, 0x02, 0x88, 0x06, 0x60, 0x0e, 0x9e, 0x26, 0x3a, 0x5b, 0x00, 0x02, 0x88, 0x60, 0xc8, 
+0xc0, 0x53, 0x06, 0x60, 0x09, 0x9e, 0x26, 0x3a, 0x58, 0x00, 0x02, 0x88, 0x06, 0x60, 0x04, 0x9e, 0x26, 0x3a, 0x59, 0x00, 0x01, 0x88, 0x0b, 0x60, 0xa1, 0x78, 0xaa, 0xa8, 0x50, 0xb2, 0x3a, 0xaa, 0xd0, 0xb2, 0xf9, 0xab, 0x3e, 0x5f, 0x3e, 0x5e, 0x3e, 0x5d, 0x3e, 0x5c, 0x3e, 0x5b, 0x3e, 0x5a, 0x3e, 0x59, 0x3e, 0x58, 0x80, 0xb8, 0x81, 0xb8, 0x5a, 0x38, 0x5a, 0x38, 0x5a, 0x38, 0x1e, 0x5b, 0x11, 0xb3, 0x1a, 0x03, 0x5c, 0x38, 0x9e, 0x58, 0x07, 0xf8, 0x1e, 0x58, 0x9e, 0x58, 0x02, 0xf8, 0x1e, 0x58, 0x00, 0x60, 0xbe, 0x58, 0xb1, 0x00, 0x19, 0x38, 0x84, 0x54, 0x00, 0x60, 0x80, 0x68, 0xbe, 0x58, 0x07, 0xf8, 0x09, 0x60, 0xbe, 0x58, 0x02, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0xb0, 0x00, 0x10, 0x60, 0x03, 0xa4, 0x30, 0x64, 0x82, 0xa4, 0x19, 0x38, 0x45, 0x54, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xaa, 0xf0, 0x01, 
+0x00, 0x54, 0xbe, 0x58, 0x00, 0xf8, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0xd5, 0xf0, 0x1e, 0x5b, 0xc6, 0xf0, 0x3e, 0x5b, 0x19, 0x38, 0x50, 0x54, 0x82, 0xa0, 0x43, 0xa0, 0x19, 0x38, 0x6d, 0x54, 0x9e, 0x58, 0x00, 0xf8, 0x00, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x00, 0x60, 0xbe, 0x58, 0x0f, 0xf8, 0xbe, 0x58, 0x10, 0xf8, 0x82, 0xa0, 0x19, 0x14, 0x10, 0x65, 0x9d, 0x48, 0xd9, 0x95, 0x03, 0xa0, 0x19, 0x10, 0xd4, 0x89, 0x19, 0x38, 0x95, 0x54, 0x9e, 0x59, 0xb0, 0x00, 0x19, 0x01, 0xbe, 0x59, 0xb0, 0x00, 0x9e, 0x58, 0xbd, 0x00, 0x38, 0x48, 0xc8, 0x89, 0x00, 0x60, 0xbe, 0x58, 0xb0, 0x00, 0x9e, 0x59, 0xbc, 0x00, 0x9e, 0x58, 0xb1, 0x00, 0x19, 0x00, 0x19, 0x48, 0x03, 0x82, 0xbe, 0x58, 0xb1, 0x00, 0xbb, 0x9f, 0x3e, 0x58, 0xbe, 0x58, 0x02, 0xf8, 0x3e, 0x58, 0x9a, 0x1e, 
+0x40, 0x54, 0xbe, 0x58, 0x07, 0xf8, 0x5b, 0x38, 0x3e, 0x5b, 0x3a, 0x38, 0x3b, 0x61, 0xf8, 0x69, 0x81, 0x5a, 0xff, 0x38, 0x86, 0x5c, 0x44, 0x2a, 0x6f, 0x39, 0x4e, 0x54, 0x5b, 0x59, 0x19, 0x01, 0x3a, 0x38, 0x9d, 0x60, 0x4e, 0x68, 0xef, 0xb0, 0x9e, 0x58, 0x00, 0xf8, 0x10, 0xa8, 0xbe, 0x58, 0x00, 0xf8, 0x19, 0x38, 0x64, 0x54, 0x1a, 0x38, 0x1a, 0x38, 0x9e, 0x5e, 0xb2, 0x00, 0x1e, 0xac, 0xfa, 0x91, 0x00, 0x66, 0xbe, 0x5e, 0xb2, 0x00, 0x3a, 0x38, 0x94, 0xab, 0x26, 0x66, 0x04, 0x6e, 0xef, 0x3a, 0x6a, 0x54, 0xdd, 0x5e, 0x1a, 0x38, 0x94, 0xa9, 0x3a, 0x38, 0x30, 0x65, 0xa4, 0x15, 0x18, 0x61, 0x25, 0x40, 0x00, 0x3d, 0x18, 0x08, 0x26, 0x66, 0x04, 0x6e, 0x42, 0x38, 0x10, 0x00, 0x05, 0x88, 0xef, 0x3a, 0x7b, 0x54, 0xc5, 0x58, 0x1d, 0x5d, 0x3a, 0x38, 0xef, 0x3a, 0x82, 0x54, 0xc5, 0x58, 0x0b, 0xb5, 
+0x80, 0x54, 0xa3, 0x59, 0x20, 0x00, 0x1d, 0x5d, 0x3a, 0x38, 0x9e, 0x58, 0x04, 0xf8, 0x9e, 0x5a, 0x05, 0xf8, 0x9e, 0x5c, 0x00, 0xf8, 0x02, 0x00, 0x24, 0xac, 0x01, 0x90, 0x06, 0x58, 0x55, 0x61, 0x01, 0x40, 0x64, 0x62, 0x1c, 0x5a, 0xbe, 0x58, 0x08, 0x00, 0x3a, 0x38, 0x1e, 0x5b, 0x18, 0x61, 0x21, 0x5c, 0x00, 0x66, 0x0b, 0x7e, 0xc0, 0x3d, 0x18, 0x08, 0x30, 0x67, 0x00, 0x73, 0xff, 0x61, 0x7f, 0x69, 0xa3, 0x5a, 0x6f, 0x38, 0xa4, 0x54, 0x48, 0x5a, 0x1a, 0x38, 0x52, 0x3a, 0x08, 0x00, 0x04, 0x5a, 0x59, 0x48, 0x02, 0x98, 0x41, 0x59, 0xe1, 0x5b, 0xa4, 0x05, 0x19, 0x17, 0x10, 0x60, 0xf8, 0x48, 0xef, 0x95, 0x9e, 0x58, 0xb1, 0x00, 0x0c, 0x61, 0x01, 0x40, 0x00, 0x3a, 0x00, 0x05, 0x0a, 0x7a, 0x02, 0x62, 0x00, 0x61, 0xc1, 0x58, 0x1c, 0x5a, 0x0a, 0x72, 0x02, 0x02, 0x0b, 0x70, 0x00, 0xab, 0x6b, 0x5e, 
+0xc0, 0x54, 0x06, 0x39, 0x00, 0x00, 0x04, 0x8a, 0x06, 0x39, 0x01, 0x00, 0x06, 0x8a, 0x0d, 0x9e, 0x7b, 0x5a, 0x0b, 0x71, 0x19, 0x01, 0x0b, 0x79, 0x08, 0x9e, 0x43, 0x58, 0x10, 0x58, 0x60, 0x83, 0x03, 0x28, 0x1b, 0x5a, 0x00, 0x61, 0x0b, 0x79, 0x00, 0x9e, 0x19, 0x06, 0xdc, 0x48, 0xc3, 0x89, 0x3e, 0x5b, 0x3a, 0x38, 0xa5, 0xac, 0x0a, 0x90, 0x00, 0x61, 0x05, 0x69, 0xff, 0x60, 0x01, 0x68, 0x07, 0x38, 0xe4, 0x54, 0x9e, 0x58, 0xf9, 0x04, 0x1b, 0x59, 0x19, 0x01, 0x00, 0x60, 0xac, 0xb0, 0xfa, 0x61, 0x5f, 0x69, 0x29, 0x58, 0x02, 0x38, 0xff, 0xff, 0x02, 0x8a, 0xf5, 0xac, 0x47, 0x90, 0x40, 0x66, 0x9e, 0x5f, 0xbc, 0x00, 0x0c, 0x61, 0x9e, 0x58, 0xbd, 0x00, 0x01, 0x40, 0x07, 0x40, 0x00, 0x61, 0x05, 0x69, 0x20, 0x01, 0xff, 0x62, 0x01, 0x6a, 0x40, 0x12, 0xff, 0x60, 0xff, 0x68, 0x57, 0x38, 0x3c, 0xec, 
+0x00, 0x55, 0x1d, 0x59, 0x00, 0x67, 0xe6, 0x40, 0x00, 0x3d, 0x80, 0x57, 0x00, 0x3c, 0x00, 0x05, 0x00, 0x3b, 0x18, 0x08, 0xe2, 0x38, 0x08, 0x00, 0x01, 0x96, 0x3d, 0x94, 0xa1, 0x58, 0x81, 0x59, 0x80, 0xeb, 0xa1, 0x58, 0x61, 0x59, 0x8d, 0xeb, 0x61, 0x58, 0x81, 0x59, 0x92, 0xeb, 0x18, 0x12, 0xf5, 0x8b, 0x19, 0x07, 0xe8, 0x9f, 0x00, 0x60, 0xac, 0xb0, 0xfa, 0x61, 0x5f, 0x69, 0x29, 0x58, 0x02, 0x38, 0xff, 0xff, 0x03, 0x8a, 0xf5, 0xac, 0x12, 0x90, 0x00, 0x60, 0x00, 0x3d, 0x40, 0x57, 0x00, 0x3c, 0xe0, 0x1a, 0x00, 0x3b, 0x18, 0x08, 0xa1, 0x58, 0x81, 0x59, 0x80, 0xeb, 0xa1, 0x58, 0x61, 0x59, 0x8d, 0xeb, 0x61, 0x58, 0x81, 0x59, 0x92, 0xeb, 0x18, 0x12, 0xf5, 0x8b, 0x00, 0x63, 0xbe, 0x5b, 0x0b, 0x00, 0x0b, 0x61, 0x78, 0xab, 0x5a, 0x62, 0xe1, 0x6a, 0xac, 0xb2, 0xfa, 0x60, 0x5f, 0x68, 0x25, 0x3c, 
+0x40, 0x55, 0x00, 0x62, 0x57, 0x38, 0x7a, 0x38, 0x19, 0x10, 0x19, 0x11, 0xac, 0xb2, 0x09, 0x5a, 0x5b, 0x48, 0xf2, 0x89, 0x78, 0xa9, 0x1a, 0x38, 0x3a, 0x38, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xdd, 0x41, 
+0x80, 0x55, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x55, 
+0xc0, 0x55, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x55, 
+0x00, 0x56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x55, 
+0x40, 0x56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x56, 
+0x80, 0x56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x56, 
+0xc0, 0x56, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x56, 
+0x00, 0x57, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x56, 
+0xc0, 0x59, 0x00, 0x02, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x82, 0x5b, 
+0x00, 0x5a, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x98, 0x3f, 0x40, 0x5a, 0x98, 0x3f, 0xa3, 0x5a, 0x98, 0x3f, 0x51, 0x5a, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0x3a, 0x38, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x3a, 
+0x40, 0x5a, 0xc0, 0x60, 0x59, 0x68, 0x09, 0x58, 0x9e, 0x59, 0x06, 0x00, 0x20, 0x29, 0xbe, 0x59, 0x06, 0x00, 0xc1, 0x60, 0x59, 0x68, 0x09, 0x58, 0x9e, 0x59, 0x07, 0x00, 0x20, 0x29, 0xbe, 0x59, 0x07, 0x00, 0x3a, 0x38, 0x20, 0x60, 0xbe, 0x58, 0xd1, 0x00, 0x30, 0x60, 0xbe, 0x58, 0xd2, 0x00, 0x00, 0x60, 0xbe, 0x58, 0xd6, 0x00, 0xbe, 0x58, 0xd7, 0x00, 0xbe, 0x58, 0xd8, 0x00, 0xbe, 0x58, 0xd9, 0x00, 0x00, 0x60, 0x03, 0x68, 0xbe, 0x58, 0xc0, 0x00, 0x08, 0x60, 0xbe, 0x58, 0xc5, 0x00, 0x16, 0x60, 0xbe, 0x58, 0xba, 0x00, 0x18, 0x60, 0x03, 0x68, 0xbe, 0x58, 0xbf, 0x00, 0x16, 0x60, 0xbe, 0x58, 0xb8, 0x00, 0x24, 0x60, 0xbe, 0x58, 0xb9, 0x00, 0x00, 0x60, 0xbe, 0x58, 0xbe, 0x00, 0x16, 0x60, 0xbe, 0x58, 0xbb, 0x00, 0x24, 0x60, 0xbe, 0x58, 0xbc, 0x00, 0x18, 0x60, 0x03, 0x68, 0xbe, 0x58, 0x71, 0x3e, 
+0x80, 0x5a, 0xda, 0x00, 0x9e, 0x58, 0xb8, 0x00, 0x10, 0x38, 0xb9, 0x00, 0xbe, 0x58, 0x5c, 0x1a, 0x10, 0x38, 0xbe, 0x00, 0xbe, 0x58, 0x5d, 0x1a, 0xa0, 0xa8, 0xa0, 0xac, 0x09, 0x90, 0x9e, 0x58, 0xb8, 0x00, 0xbe, 0x58, 0xe9, 0x19, 0x9e, 0x58, 0xb9, 0x00, 0xbe, 0x58, 0xe8, 0x19, 0x08, 0x9e, 0x9e, 0x58, 0xb9, 0x00, 0xbe, 0x58, 0xe9, 0x19, 0x9e, 0x58, 0xb8, 0x00, 0xbe, 0x58, 0xe8, 0x19, 0x01, 0x60, 0xbe, 0x58, 0xbd, 0x00, 0x3a, 0x38, 0x52, 0x60, 0xbe, 0x58, 0x50, 0x01, 0x08, 0x60, 0xff, 0x68, 0xbe, 0x58, 0xbc, 0x01, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0xbd, 0x01, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0xbe, 0x01, 0x39, 0x60, 0xbe, 0x58, 0x51, 0x01, 0xf0, 0x60, 0xbe, 0x58, 0x52, 0x01, 0x15, 0x60, 0xbe, 0x58, 0x53, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x19, 0x04, 0xbe, 0x58, 0x1d, 0x04, 0x6b, 0x21, 
+0xc0, 0x5a, 0xe8, 0x60, 0x03, 0x68, 0xbe, 0x58, 0x1c, 0x04, 0x3c, 0x60, 0xbe, 0x58, 0x1e, 0x04, 0x03, 0x60, 0xbe, 0x58, 0x1a, 0x04, 0x3f, 0x60, 0xbe, 0x58, 0x1b, 0x04, 0x01, 0x60, 0xbe, 0x58, 0x1f, 0x04, 0xbe, 0x58, 0x18, 0x04, 0x38, 0x60, 0xbe, 0x58, 0x20, 0x04, 0x20, 0x60, 0xbe, 0x58, 0x54, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x55, 0x01, 0x01, 0x60, 0x10, 0x68, 0xbe, 0x58, 0x56, 0x01, 0x30, 0x60, 0xbe, 0x58, 0x57, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x58, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x59, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xba, 0x01, 0x10, 0x60, 0xbe, 0x58, 0x5a, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x5b, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xb4, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xb5, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xb6, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xb7, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xb8, 0x01, 0x33, 0x26, 
+0x00, 0x5b, 0x00, 0x60, 0xbe, 0x58, 0xb9, 0x01, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x5c, 0x01, 0xff, 0x60, 0xff, 0x68, 0xbe, 0x58, 0x5d, 0x01, 0x88, 0x60, 0x88, 0x68, 0xbe, 0x58, 0x5e, 0x01, 0x88, 0x60, 0x88, 0x68, 0xbe, 0x58, 0x5f, 0x01, 0x88, 0x60, 0x88, 0x68, 0xbe, 0x58, 0x60, 0x01, 0x88, 0x60, 0x88, 0x68, 0xbe, 0x58, 0x61, 0x01, 0x88, 0x60, 0x88, 0x68, 0xbe, 0x58, 0x62, 0x01, 0x88, 0x60, 0x88, 0x68, 0xbe, 0x58, 0x63, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x64, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x65, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x66, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x67, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x68, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x69, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x6a, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x6b, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x6c, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xd3, 0x74, 
+0x40, 0x5b, 0x6d, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x6e, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x6f, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x70, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x71, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x72, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x73, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x74, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x75, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x76, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x77, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x78, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x79, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x7a, 0x01, 0x20, 0x60, 0x20, 0x68, 0xbe, 0x58, 0x7b, 0x01, 0x08, 0x60, 0xbe, 0x58, 0xc2, 0x00, 0x20, 0x60, 0xbe, 0x58, 0xc3, 0x00, 0x00, 0x60, 0xbe, 0x58, 0x7c, 0x01, 0xd3, 0x9b, 
+0x80, 0x5b, 0x00, 0x60, 0xbe, 0x58, 0x7d, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x7e, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x7f, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x80, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x81, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x82, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x83, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x84, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x85, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x86, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x87, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x88, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x89, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x8a, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x8b, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x8c, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x8d, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x8e, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x8f, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x90, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x91, 0x01, 0x00, 0x60, 0x29, 0x03, 
+0xc0, 0x5b, 0xbe, 0x58, 0x92, 0x01, 0x00, 0x60, 0xbe, 0x58, 0x93, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x94, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x95, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x96, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x97, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x98, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x99, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x9a, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x9b, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x9c, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x9d, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x9e, 0x01, 0xff, 0x60, 0xbe, 0x58, 0x9f, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa0, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa1, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa2, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa3, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa4, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa5, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa6, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xcc, 0x11, 
+0x00, 0x5c, 0xa7, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa8, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xa9, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xaa, 0x01, 0xff, 0x60, 0xbe, 0x58, 0xab, 0x01, 0x31, 0x60, 0x12, 0x68, 0xbe, 0x58, 0xb3, 0x01, 0x02, 0x60, 0x30, 0x68, 0xbe, 0x58, 0xc3, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xc4, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xc5, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xc6, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xc7, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xc8, 0x01, 0x10, 0x60, 0xbe, 0x58, 0xc9, 0x01, 0xd0, 0x60, 0xbe, 0x58, 0xca, 0x01, 0x30, 0x60, 0xbe, 0x58, 0xcb, 0x01, 0x30, 0x60, 0xbe, 0x58, 0xcc, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xcd, 0x01, 0x00, 0x60, 0x10, 0x68, 0xbe, 0x58, 0xce, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xcf, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xd0, 0x01, 0x0a, 0x60, 0xbe, 0x58, 0xd1, 0x01, 0x79, 0x2d, 
+0x40, 0x5c, 0x18, 0x60, 0xbe, 0x58, 0xd2, 0x01, 0x1f, 0x60, 0xbe, 0x58, 0xd3, 0x01, 0x18, 0x60, 0xbe, 0x58, 0xd4, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xd5, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xd6, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xd7, 0x01, 0x20, 0x60, 0xbe, 0x58, 0x78, 0x02, 0x08, 0x60, 0xbe, 0x58, 0x77, 0x02, 0x28, 0x60, 0xbe, 0x58, 0xd8, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xd9, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xda, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xdb, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xdc, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xdd, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xde, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xdf, 0x01, 0x78, 0x60, 0xbe, 0x58, 0xe0, 0x01, 0x78, 0x60, 0xbe, 0x58, 0xe1, 0x01, 0x78, 0x60, 0xbe, 0x58, 0xe2, 0x01, 0x78, 0x60, 0xbe, 0x58, 0xe3, 0x01, 0x78, 0x60, 0xbe, 0x58, 0xe4, 0x01, 0x78, 0x60, 0x8d, 0x10, 
+0x80, 0x5c, 0xbe, 0x58, 0xe5, 0x01, 0x78, 0x60, 0xbe, 0x58, 0xe6, 0x01, 0x78, 0x60, 0xbe, 0x58, 0xe7, 0x01, 0x03, 0x60, 0xbe, 0x58, 0xe8, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xe9, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xea, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xeb, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xec, 0x01, 0x02, 0x60, 0x02, 0x68, 0xbe, 0x58, 0xed, 0x01, 0x05, 0x60, 0x05, 0x68, 0xbe, 0x58, 0xee, 0x01, 0x02, 0x60, 0x02, 0x68, 0xbe, 0x58, 0xef, 0x01, 0x05, 0x60, 0x05, 0x68, 0xbe, 0x58, 0xf0, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf1, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf2, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf3, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf4, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf5, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf6, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf7, 0x01, 0x00, 0x60, 0xbe, 0x58, 0xf8, 0x01, 0xa0, 0x60, 0xa9, 0x93, 
+0xc0, 0x5c, 0xbe, 0x58, 0xfd, 0x01, 0x28, 0x60, 0xbe, 0x58, 0xfe, 0x01, 0x03, 0x60, 0xbe, 0x58, 0xff, 0x01, 0x04, 0x67, 0xbe, 0x5f, 0x22, 0x00, 0x40, 0x67, 0xbe, 0x5f, 0x21, 0x00, 0x9e, 0x5f, 0xba, 0x1a, 0xbe, 0x5f, 0x1f, 0x00, 0x9e, 0x5f, 0xb9, 0x1a, 0xbe, 0x5f, 0x20, 0x00, 0x9e, 0x5f, 0xbb, 0x1a, 0xbe, 0x5f, 0xd0, 0x00, 0x9e, 0x5f, 0xbc, 0x1a, 0xbe, 0x5f, 0xcf, 0x00, 0x9e, 0x5f, 0xb5, 0x1a, 0xbe, 0x5f, 0x23, 0x00, 0x9e, 0x5f, 0xb2, 0x1a, 0xbe, 0x5f, 0x45, 0x1a, 0x9e, 0x5f, 0xb0, 0x1a, 0xbe, 0x5f, 0x47, 0x1a, 0x9e, 0x5f, 0xb1, 0x1a, 0xbe, 0x5f, 0x46, 0x1a, 0x9e, 0x5f, 0xb3, 0x1a, 0xbe, 0x5f, 0x1d, 0x00, 0x9e, 0x5f, 0xb4, 0x1a, 0xbe, 0x5f, 0x1c, 0x00, 0x0c, 0x67, 0xbe, 0x5f, 0x27, 0x00, 0x0a, 0x67, 0xbe, 0x5f, 0xe4, 0x19, 0x14, 0x67, 0xbe, 0x5f, 0xf0, 0x04, 0x3a, 0x38, 0x78, 0x3c, 
+0x00, 0x5d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x5c, 
+0x40, 0x5d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x5d, 
+0x80, 0x5d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x40, 0x5d, 
+0xc0, 0x5d, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x5d, 
+0x00, 0x5e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x5d, 
+0x40, 0x5e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x5e, 
+0x80, 0x5e, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00, 0x09, 0x00, 0x0a, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x10, 0x00, 0x11, 0x00, 0x12, 0x00, 0x13, 0x00, 0x14, 0x00, 0x15, 0x00, 0x16, 0x00, 0x17, 0x00, 0x18, 0x00, 0x19, 0x00, 0x1a, 0x00, 0x1b, 0x00, 0x1c, 0x00, 0x1d, 0x00, 0x1e, 0x00, 0x1f, 0x00, 0x20, 0x00, 0x21, 0x00, 0x22, 0x00, 0x23, 0x00, 0x48, 0x00, 0x48, 0x00, 0x00, 0x00, 0x01, 0x00, 0x02, 0x00, 0x03, 0x00, 0x04, 0x00, 0x05, 0x00, 0x06, 0x00, 0x07, 0x00, 0x08, 0x00, 0x09, 0x00, 0xa3, 0x61, 
+0xc0, 0x5e, 0x0a, 0x00, 0x0b, 0x00, 0x0c, 0x00, 0x0d, 0x00, 0x0e, 0x00, 0x0f, 0x00, 0x10, 0x00, 0x11, 0x00, 0x12, 0x00, 0x13, 0x00, 0x14, 0x00, 0x15, 0x00, 0x48, 0x00, 0x48, 0x00, 0x48, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x21, 0x60, 
+0x00, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x5e, 
+0x40, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x00, 0x5f, 
+0x80, 0x5f, 0xff, 0xff, 0x00, 0x80, 0x55, 0x55, 0x00, 0x40, 0x33, 0x33, 0xaa, 0x2a, 0x92, 0x24, 0x00, 0x20, 0x71, 0x1c, 0x99, 0x19, 0x45, 0x17, 0x55, 0x15, 0xb1, 0x13, 0x49, 0x12, 0x11, 0x11, 0x00, 0x10, 0x0f, 0x0f, 0x38, 0x0e, 0x79, 0x0d, 0xcc, 0x0c, 0x30, 0x0c, 0xa2, 0x0b, 0x21, 0x0b, 0xaa, 0x0a, 0x3d, 0x0a, 0xd8, 0x09, 0x7b, 0x09, 0x24, 0x09, 0xd3, 0x08, 0x88, 0x08, 0x42, 0x08, 0x00, 0x08, 0xc1, 0x07, 0x87, 0x07, 0x50, 0x07, 0x1c, 0x07, 0xeb, 0x06, 0xbc, 0x06, 0x90, 0x06, 0x66, 0x06, 0x3e, 0x06, 0x18, 0x06, 0xf4, 0x05, 0xd1, 0x05, 0xb0, 0x05, 0x90, 0x05, 0x72, 0x05, 0x55, 0x05, 0x39, 0x05, 0x1e, 0x05, 0x05, 0x05, 0xec, 0x04, 0xd4, 0x04, 0xbd, 0x04, 0xa7, 0x04, 0x92, 0x04, 0x7d, 0x04, 0x69, 0x04, 0x56, 0x04, 0x44, 0x04, 0x32, 0x04, 0x21, 0x04, 0x10, 0x04, 0x00, 0x04, 0xd4, 0x1d, 
+0xc0, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x88, 0x00, 0xff, 0xff, 0x00, 0x00, 0x44, 0xa0, 0x29, 0x30, 0xaa, 0x55, 0xcc, 0x33, 0xff, 0xff, 0xf1, 0xb9, 
+0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
+
diff --git a/drivers/leds/leds-pm8xxx.c b/drivers/leds/leds-pm8xxx.c
old mode 100755
new mode 100644
diff --git a/drivers/media/platform/msm/camera_legacy/msm_mctl_pp.c b/drivers/media/platform/msm/camera_legacy/msm_mctl_pp.c
old mode 100755
new mode 100644
diff --git a/drivers/media/platform/msm/camera_v1/msm.h b/drivers/media/platform/msm/camera_v1/msm.h
old mode 100755
new mode 100644
diff --git a/drivers/media/platform/msm/camera_v1/msm_mctl_buf.c b/drivers/media/platform/msm/camera_v1/msm_mctl_buf.c
old mode 100755
new mode 100644
diff --git a/drivers/media/platform/msm/camera_v1/msm_mem.c b/drivers/media/platform/msm/camera_v1/msm_mem.c
old mode 100755
new mode 100644
diff --git a/drivers/media/platform/msm/camera_v1/server/msm_cam_server.c b/drivers/media/platform/msm/camera_v1/server/msm_cam_server.c
old mode 100755
new mode 100644
index b93cda9..8c1ee63
--- a/drivers/media/platform/msm/camera_v1/server/msm_cam_server.c
+++ b/drivers/media/platform/msm/camera_v1/server/msm_cam_server.c
@@ -929,7 +929,7 @@ int msm_server_v4l2_subscribe_event(struct v4l2_fh *fh,
 		sub->type = V4L2_EVENT_PRIVATE_START + MSM_CAM_RESP_CTRL;
 		D("sub->type start = 0x%x\n", sub->type);
 		do {
-			rc = v4l2_event_subscribe(fh, sub, 50);
+			rc = v4l2_event_subscribe(fh, sub, 50);
 			if (rc < 0) {
 				D("%s: failed for evtType = 0x%x, rc = %d\n",
 						__func__, sub->type, rc);
@@ -946,7 +946,7 @@ int msm_server_v4l2_subscribe_event(struct v4l2_fh *fh,
 			V4L2_EVENT_PRIVATE_START + MSM_SVR_RESP_MAX);
 	} else {
 		D("sub->type not V4L2_EVENT_ALL = 0x%x\n", sub->type);
-		rc = v4l2_event_subscribe(fh, sub, 50);
+		rc = v4l2_event_subscribe(fh, sub, 50);
 		if (rc < 0)
 			D("%s: failed for evtType = 0x%x, rc = %d\n",
 						__func__, sub->type, rc);
@@ -1375,7 +1375,7 @@ static unsigned int msm_poll_server(struct file *fp,
 
 	D("%s\n", __func__);
 	poll_wait(fp,
-		 &g_server_dev.server_command_queue.eventHandle.wait,
+		 &g_server_dev.server_command_queue.eventHandle.wait,
 		 wait);
 	if (v4l2_event_pending(&g_server_dev.server_command_queue.eventHandle))
 		rc |= POLLPRI;
@@ -2617,7 +2617,7 @@ static unsigned int msm_poll_config(struct file *fp,
 	D("%s\n", __func__);
 
 	poll_wait(fp,
-	&config->config_stat_event_queue.eventHandle.wait, wait);
+	&config->config_stat_event_queue.eventHandle.wait, wait);
 	if (v4l2_event_pending(&config->config_stat_event_queue.eventHandle))
 		rc |= POLLPRI;
 	return rc;
@@ -2768,7 +2768,7 @@ static long msm_ioctl_config(struct file *fp, unsigned int cmd,
 	struct v4l2_event_subscription temp_sub;
 
 	D("%s: cmd %d\n", __func__, _IOC_NR(cmd));
-	ev.id = 0;
+	ev.id = 0;
 
 	switch (cmd) {
 	/* memory management shall be handeld here*/
diff --git a/drivers/media/platform/msm/camera_v1/server/msm_cam_server.h b/drivers/media/platform/msm/camera_v1/server/msm_cam_server.h
old mode 100755
new mode 100644
diff --git a/drivers/media/platform/msm/camera_v1/vfe/msm_vfe32.c b/drivers/media/platform/msm/camera_v1/vfe/msm_vfe32.c
old mode 100755
new mode 100644
diff --git a/drivers/media/platform/msm/camera_v1/vfe/msm_vfe_stats_buf.c b/drivers/media/platform/msm/camera_v1/vfe/msm_vfe_stats_buf.c
old mode 100755
new mode 100644
diff --git a/drivers/media/platform/msm/camera_v1/vfe/msm_vfe_stats_buf.h b/drivers/media/platform/msm/camera_v1/vfe/msm_vfe_stats_buf.h
old mode 100755
new mode 100644
diff --git a/drivers/media/platform/msm/camera_v2/sensor/mi1040.c b/drivers/media/platform/msm/camera_v2/sensor/mi1040.c
old mode 100755
new mode 100644
diff --git a/drivers/mmc/core/sdio_io.c b/drivers/mmc/core/sdio_io.c
old mode 100755
new mode 100644
diff --git a/drivers/net/usb/rmnet_usb_data.c b/drivers/net/usb/rmnet_usb_data.c
old mode 100755
new mode 100644
diff --git a/drivers/power/pm8921-charger.c b/drivers/power/pm8921-charger.c
index 579cf63..f22d570 100644
--- a/drivers/power/pm8921-charger.c
+++ b/drivers/power/pm8921-charger.c
@@ -31,6 +31,10 @@
 #include <mach/msm_xo.h>
 #include <mach/msm_hsusb.h>
 
+#ifdef CONFIG_FORCE_FAST_CHARGE
+#include <linux/fastchg.h>
+#endif
+
 #define CHG_BUCK_CLOCK_CTRL	0x14
 
 #define PBL_ACCESS1		0x04
@@ -1675,7 +1679,38 @@ static void __pm8921_charger_vbus_draw(unsigned int mA)
 			i--;
 		if (i < 0)
 			i = 0;
+#ifdef CONFIG_FORCE_FAST_CHARGE
+		if (force_fast_charge == 1)
+			i = 14;
+		else if (force_fast_charge == 2) {
+			switch (fast_charge_level) {
+				case FAST_CHARGE_500:
+					i = 2;
+					break;
+				case FAST_CHARGE_700:
+					i = 4;
+					break;
+				case FAST_CHARGE_900:
+					i = 8;
+					break;
+				case FAST_CHARGE_1100:
+					i = 10;
+					break;
+				case FAST_CHARGE_1300:
+					i = 12;
+					break;
+				case FAST_CHARGE_1500:
+					i = 14;
+					break;
+				default:
+					break;
+			}
+		}
 		rc = pm_chg_iusbmax_set(the_chip, i);
+		pr_info("charge curent index => %d\n", i);
+#else
+		rc = pm_chg_iusbmax_set(the_chip, i);
+#endif
 		if (rc) {
 			pr_err("unable to set iusb to %d rc = %d\n", i, rc);
 		}
diff --git a/drivers/staging/prima/firmware_bin/WCNSS_qcom_cfg.ini b/drivers/staging/prima/firmware_bin/WCNSS_qcom_cfg.ini
index b9fd713..593c713 100644
--- a/drivers/staging/prima/firmware_bin/WCNSS_qcom_cfg.ini
+++ b/drivers/staging/prima/firmware_bin/WCNSS_qcom_cfg.ini
@@ -396,6 +396,10 @@ gRrmOperChanMax=8
 gRrmNonOperChanMax=8
 gRrmRandIntvl=100
 
+#Disable/Enable Strict FCC Regulatory
+# 0 to disable, 1 to enable
+gEnableStrictRegulatoryForFCC=1
+
 END
 
 # Note: Configuration parser would not read anything past the END marker
diff --git a/drivers/staging/prima/riva/inc/wlan_nv.h b/drivers/staging/prima/riva/inc/wlan_nv.h
old mode 100755
new mode 100644
diff --git a/drivers/staging/usbip/userspace/autogen.sh b/drivers/staging/usbip/userspace/autogen.sh
old mode 100755
new mode 100644
diff --git a/drivers/staging/usbip/userspace/cleanup.sh b/drivers/staging/usbip/userspace/cleanup.sh
old mode 100755
new mode 100644
diff --git a/drivers/thermal/Kconfig b/drivers/thermal/Kconfig
index d082273..47229e1 100644
--- a/drivers/thermal/Kconfig
+++ b/drivers/thermal/Kconfig
@@ -73,6 +73,15 @@ config THERMAL_PM8XXX
 	  shifting over temperature shutdown control of the PMIC from hardware
 	  to software.
 
+config INTELLI_THERMAL
+	bool "Better thermal monitor for MSM"
+	depends on THERMAL_TSENS8960 || THERMAL_TSENS8974
+	depends on CPU_FREQ_MSM
+	default n
+	help
+	  This enables thermal monitoring capability in the kernel replacing
+	  userspace thermal monitoring altogether.
+
 config THERMAL_MONITOR
 	bool "Monitor thermal state and limit CPU Frequency"
 	depends on THERMAL_TSENS8960 || THERMAL_TSENS8974
diff --git a/drivers/thermal/Makefile b/drivers/thermal/Makefile
index f7e7cc6..7c35a79 100644
--- a/drivers/thermal/Makefile
+++ b/drivers/thermal/Makefile
@@ -7,6 +7,10 @@ obj-$(CONFIG_THERMAL_MSM_POPMEM)	+= msm_popmem-tm.o
 obj-$(CONFIG_THERMAL_TSENS)	+= msm_tsens.o
 obj-$(CONFIG_THERMAL_TSENS8960) += msm8960_tsens.o
 obj-$(CONFIG_THERMAL_PM8XXX)	+= pm8xxx-tm.o
+ifdef CONFIG_INTELLI_THERMAL
+obj-$(CONFIG_INTELLI_THERMAL)	+= intelli/msm_thermal.o
+else
 obj-$(CONFIG_THERMAL_MONITOR)	+= msm_thermal.o
+endif
 obj-$(CONFIG_SPEAR_THERMAL)		+= spear_thermal.o
 obj-$(CONFIG_THERMAL_TSENS8974)	+= msm8974-tsens.o
diff --git a/drivers/usb/gadget/f_mass_storage.c b/drivers/usb/gadget/f_mass_storage.c
index 165f252..54864ce 100644
--- a/drivers/usb/gadget/f_mass_storage.c
+++ b/drivers/usb/gadget/f_mass_storage.c
@@ -2793,6 +2793,7 @@ static int fsg_main_thread(void *common_)
 static DEVICE_ATTR(ro, 0644, fsg_show_ro, fsg_store_ro);
 static DEVICE_ATTR(nofua, 0644, fsg_show_nofua, fsg_store_nofua);
 static DEVICE_ATTR(file, 0644, fsg_show_file, fsg_store_file);
+static DEVICE_ATTR(cdrom, 0644, fsg_show_cdrom, fsg_store_cdrom);
 #ifdef CONFIG_USB_MSC_PROFILING
 static DEVICE_ATTR(perf, 0644, fsg_show_perf, fsg_store_perf);
 #endif
@@ -2911,6 +2912,9 @@ static struct fsg_common *fsg_common_init(struct fsg_common *common,
 		rc = device_create_file(&curlun->dev, &dev_attr_nofua);
 		if (rc)
 			goto error_luns;
+		rc = device_create_file(&curlun->dev, &dev_attr_cdrom);
+		if (rc)
+			goto error_luns;
 #ifdef CONFIG_USB_MSC_PROFILING
 		rc = device_create_file(&curlun->dev, &dev_attr_perf);
 		if (rc)
@@ -3048,6 +3052,7 @@ static void fsg_common_release(struct kref *ref)
 #ifdef CONFIG_USB_MSC_PROFILING
 			device_remove_file(&lun->dev, &dev_attr_perf);
 #endif
+			device_remove_file(&lun->dev, &dev_attr_cdrom);
 			device_remove_file(&lun->dev, &dev_attr_nofua);
 			device_remove_file(&lun->dev, &dev_attr_ro);
 			device_remove_file(&lun->dev, &dev_attr_file);
diff --git a/drivers/usb/gadget/storage_common.c b/drivers/usb/gadget/storage_common.c
index 3c57df4..6788ce4 100644
--- a/drivers/usb/gadget/storage_common.c
+++ b/drivers/usb/gadget/storage_common.c
@@ -801,6 +801,14 @@ static ssize_t fsg_show_nofua(struct device *dev, struct device_attribute *attr,
 	return sprintf(buf, "%u\n", curlun->nofua);
 }
 
+static ssize_t fsg_show_cdrom (struct device *dev, struct device_attribute *attr,
+			   char *buf)
+{
+	struct fsg_lun  *curlun = fsg_lun_from_dev(dev);
+
+	return sprintf(buf, "%d\n", curlun->cdrom);
+}
+
 #ifdef CONFIG_USB_MSC_PROFILING
 static ssize_t fsg_show_perf(struct device *dev, struct device_attribute *attr,
 			      char *buf)
@@ -956,3 +964,32 @@ static ssize_t fsg_store_file(struct device *dev, struct device_attribute *attr,
 	up_write(filesem);
 	return (rc < 0 ? rc : count);
 }
+
+static ssize_t fsg_store_cdrom(struct device *dev, struct device_attribute *attr,
+				  const char *buf, size_t count)
+{
+	ssize_t    rc;
+	struct fsg_lun  *curlun = fsg_lun_from_dev(dev);
+	struct rw_semaphore  *filesem = dev_get_drvdata(dev);
+	unsigned  cdrom;
+
+	rc = kstrtouint(buf, 2, &cdrom);
+	if (rc)
+		return rc;
+
+	/*
+	 * Allow the cdrom status to change only while the
+	 * backing file is closed.
+	 */
+	down_read(filesem);
+	if (fsg_lun_is_open(curlun)) {
+		LDBG(curlun, "cdrom status change prevented\n");
+		rc = -EBUSY;
+	} else {
+		curlun->cdrom = cdrom;
+		LDBG(curlun, "cdrom status set to %d\n", curlun->cdrom);
+		rc = count;
+	}
+	up_read(filesem);
+	return rc;
+}
diff --git a/drivers/usb/otg/msm_otg.c b/drivers/usb/otg/msm_otg.c
old mode 100755
new mode 100644
index 19924f9..1b049e9
--- a/drivers/usb/otg/msm_otg.c
+++ b/drivers/usb/otg/msm_otg.c
@@ -52,6 +52,10 @@
 #include <mach/msm_bus.h>
 #include <mach/rpm-regulator.h>
 
+#ifdef CONFIG_FORCE_FAST_CHARGE
+#include <linux/fastchg.h>
+#endif
+
 #define MSM_USB_BASE	(motg->regs)
 #define DRIVER_NAME	"msm_otg"
 
@@ -1154,6 +1158,11 @@ static void msm_otg_notify_charger(struct msm_otg *motg, unsigned mA)
 			"Failed notifying %d charger type to PMIC\n",
 							motg->chg_type);
 
+#ifdef CONFIG_FORCE_FAST_CHARGE
+	if (force_fast_charge > 0)
+		mA = IDEV_ACA_CHG_MAX;
+#endif
+
 	if (motg->cur_power == mA)
 		return;
 
diff --git a/include/linux/cpu.h b/include/linux/cpu.h
index d7e2a5a..f954725 100644
--- a/include/linux/cpu.h
+++ b/include/linux/cpu.h
@@ -36,8 +36,6 @@ extern void cpu_remove_dev_attr(struct device_attribute *attr);
 extern int cpu_add_dev_attr_group(struct attribute_group *attrs);
 extern void cpu_remove_dev_attr_group(struct attribute_group *attrs);
 
-extern int sched_create_sysfs_power_savings_entries(struct device *dev);
-
 #ifdef CONFIG_HOTPLUG_CPU
 extern void unregister_cpu(struct cpu *cpu);
 extern ssize_t arch_cpu_probe(const char *, size_t);
diff --git a/include/linux/cpu_rmap.h b/include/linux/cpu_rmap.h
index 473771a..ae1bc80 100644
--- a/include/linux/cpu_rmap.h
+++ b/include/linux/cpu_rmap.h
@@ -10,9 +10,11 @@
 #include <linux/cpumask.h>
 #include <linux/gfp.h>
 #include <linux/slab.h>
+#include <linux/kref.h>
 
 /**
  * struct cpu_rmap - CPU affinity reverse-map
+ * @refcount: kref for object
  * @size: Number of objects to be reverse-mapped
  * @used: Number of objects added
  * @obj: Pointer to array of object pointers
@@ -20,6 +22,7 @@
  *      based on affinity masks
  */
 struct cpu_rmap {
+	struct kref	refcount;
 	u16		size, used;
 	void		**obj;
 	struct {
@@ -30,15 +33,7 @@ struct cpu_rmap {
 #define CPU_RMAP_DIST_INF 0xffff
 
 extern struct cpu_rmap *alloc_cpu_rmap(unsigned int size, gfp_t flags);
-
-/**
- * free_cpu_rmap - free CPU affinity reverse-map
- * @rmap: Reverse-map allocated with alloc_cpu_rmap(), or %NULL
- */
-static inline void free_cpu_rmap(struct cpu_rmap *rmap)
-{
-	kfree(rmap);
-}
+extern int cpu_rmap_put(struct cpu_rmap *rmap);
 
 extern int cpu_rmap_add(struct cpu_rmap *rmap, void *obj);
 extern int cpu_rmap_update(struct cpu_rmap *rmap, u16 index,
diff --git a/include/linux/cpufreq.h b/include/linux/cpufreq.h
index 34edac8..545d934 100644
--- a/include/linux/cpufreq.h
+++ b/include/linux/cpufreq.h
@@ -379,6 +379,13 @@ extern struct cpufreq_governor cpufreq_gov_conservative;
 #elif defined(CONFIG_CPU_FREQ_DEFAULT_GOV_INTERACTIVE)
 extern struct cpufreq_governor cpufreq_gov_interactive;
 #define CPUFREQ_DEFAULT_GOVERNOR	(&cpufreq_gov_interactive)
+#elif defined(CONFIG_CPU_FREQ_DEFAULT_GOV_INTELLIDEMAND)
+extern struct cpufreq_governor cpufreq_gov_intellidemand;
+#define CPUFREQ_DEFAULT_GOVERNOR        (&cpufreq_gov_intellidemand)
+#elif defined(CONFIG_CPU_FREQ_DEFAULT_GOV_INTELLIACTIVE)
+extern struct cpufreq_governor cpufreq_gov_intelliactive;
+#define CPUFREQ_DEFAULT_GOVERNOR        (&cpufreq_gov_intelliactive)
+
 #endif
 
 
diff --git a/include/linux/i2c/ektf3k.h b/include/linux/i2c/ektf3k.h
old mode 100755
new mode 100644
diff --git a/include/linux/init_task.h b/include/linux/init_task.h
index e4baff5..9e65eff 100644
--- a/include/linux/init_task.h
+++ b/include/linux/init_task.h
@@ -149,6 +149,7 @@ extern struct cred init_cred;
 	.normal_prio	= MAX_PRIO-20,					\
 	.policy		= SCHED_NORMAL,					\
 	.cpus_allowed	= CPU_MASK_ALL,					\
+	.nr_cpus_allowed= NR_CPUS,					\
 	.mm		= NULL,						\
 	.active_mm	= &init_mm,					\
 	.se		= {						\
@@ -157,7 +158,6 @@ extern struct cred init_cred;
 	.rt		= {						\
 		.run_list	= LIST_HEAD_INIT(tsk.rt.run_list),	\
 		.time_slice	= RR_TIMESLICE,				\
-		.nr_cpus_allowed = NR_CPUS,				\
 	},								\
 	.tasks		= LIST_HEAD_INIT(tsk.tasks),			\
 	INIT_PUSHABLE_TASKS(tsk)					\
diff --git a/include/linux/interrupt.h b/include/linux/interrupt.h
index 7d2b77e..4e8b193 100644
--- a/include/linux/interrupt.h
+++ b/include/linux/interrupt.h
@@ -274,11 +274,6 @@ struct irq_affinity_notify {
 extern int
 irq_set_affinity_notifier(unsigned int irq, struct irq_affinity_notify *notify);
 
-static inline void irq_run_affinity_notifiers(void)
-{
-	flush_scheduled_work();
-}
-
 #else /* CONFIG_SMP */
 
 static inline int irq_set_affinity(unsigned int irq, const struct cpumask *m)
diff --git a/include/linux/msm_thermal.h b/include/linux/msm_thermal.h
index 2c9a613..c46447d 100644
--- a/include/linux/msm_thermal.h
+++ b/include/linux/msm_thermal.h
@@ -17,12 +17,22 @@
 struct msm_thermal_data {
 	uint32_t sensor_id;
 	uint32_t poll_ms;
+#ifdef CONFIG_INTELLI_THERMAL
+	int32_t limit_temp_degC;
+	int32_t temp_hysteresis_degC;
+	uint32_t freq_step;
+	uint32_t freq_control_mask;
+	int32_t core_limit_temp_degC;
+	int32_t core_temp_hysteresis_degC;
+	uint32_t core_control_mask;
+#else
 	uint32_t limit_temp_degC;
 	uint32_t temp_hysteresis_degC;
 	uint32_t freq_step;
+#endif
 };
 
-#ifdef CONFIG_THERMAL_MONITOR
+#if defined(CONFIG_THERMAL_MONITOR) || defined(CONFIG_INTELLI_THERMAL)
 extern int msm_thermal_init(struct msm_thermal_data *pdata);
 extern int msm_thermal_device_init(void);
 #else
diff --git a/include/linux/rcupdate.h b/include/linux/rcupdate.h
index 20fb776..3ba696b 100644
--- a/include/linux/rcupdate.h
+++ b/include/linux/rcupdate.h
@@ -190,6 +190,7 @@ extern void rcu_idle_enter(void);
 extern void rcu_idle_exit(void);
 extern void rcu_irq_enter(void);
 extern void rcu_irq_exit(void);
+extern void exit_rcu(void);
 
 /**
  * RCU_NONIDLE - Indicate idle-loop code that needs RCU readers
diff --git a/include/linux/rcutiny.h b/include/linux/rcutiny.h
index e93df77..4e56a9c 100644
--- a/include/linux/rcutiny.h
+++ b/include/linux/rcutiny.h
@@ -91,23 +91,20 @@ static inline void rcu_preempt_note_context_switch(void)
 {
 }
 
-static inline void exit_rcu(void)
-{
-}
-
-static inline int rcu_needs_cpu(int cpu)
+static inline int rcu_needs_cpu(int cpu, unsigned long *delta_jiffies)
 {
+	*delta_jiffies = ULONG_MAX;
 	return 0;
 }
 
 #else /* #ifdef CONFIG_TINY_RCU */
 
 void rcu_preempt_note_context_switch(void);
-extern void exit_rcu(void);
 int rcu_preempt_needs_cpu(void);
 
-static inline int rcu_needs_cpu(int cpu)
+static inline int rcu_needs_cpu(int cpu, unsigned long *delta_jiffies)
 {
+	*delta_jiffies = ULONG_MAX;
 	return rcu_preempt_needs_cpu();
 }
 
diff --git a/include/linux/rcutree.h b/include/linux/rcutree.h
index e8ee5dd..624e6e9 100644
--- a/include/linux/rcutree.h
+++ b/include/linux/rcutree.h
@@ -32,7 +32,7 @@
 
 extern void rcu_init(void);
 extern void rcu_note_context_switch(int cpu);
-extern int rcu_needs_cpu(int cpu);
+extern int rcu_needs_cpu(int cpu, unsigned long *delta_jiffies);
 extern void rcu_cpu_stall_reset(void);
 
 /*
@@ -45,18 +45,6 @@ static inline void rcu_virt_note_context_switch(int cpu)
 	rcu_note_context_switch(cpu);
 }
 
-#ifdef CONFIG_TREE_PREEMPT_RCU
-
-extern void exit_rcu(void);
-
-#else /* #ifdef CONFIG_TREE_PREEMPT_RCU */
-
-static inline void exit_rcu(void)
-{
-}
-
-#endif /* #else #ifdef CONFIG_TREE_PREEMPT_RCU */
-
 extern void synchronize_rcu_bh(void);
 extern void synchronize_sched_expedited(void);
 extern void synchronize_rcu_expedited(void);
diff --git a/include/linux/sched.h b/include/linux/sched.h
index aa619d4..344e09f 100644
--- a/include/linux/sched.h
+++ b/include/linux/sched.h
@@ -146,6 +146,15 @@ extern void sched_update_nr_prod(int cpu, unsigned long nr, bool inc);
 extern void sched_get_nr_running_avg(int *avg, int *iowait_avg);
 
 extern void calc_global_load(unsigned long ticks);
+extern void update_cpu_load_nohz(void);
+
+/* Notifier for when a task gets migrated to a new CPU */
+struct task_migration_notifier {
+	struct task_struct *task;
+	int from_cpu;
+	int to_cpu;
+};
+extern void register_task_migration_notifier(struct notifier_block *n);
 
 extern unsigned long get_parent_ip(unsigned long addr);
 
@@ -364,7 +373,6 @@ extern signed long schedule_timeout_killable(signed long timeout);
 extern signed long schedule_timeout_uninterruptible(signed long timeout);
 asmlinkage void schedule(void);
 extern void schedule_preempt_disabled(void);
-extern int mutex_spin_on_owner(struct mutex *lock, struct task_struct *owner);
 
 struct nsproxy;
 struct user_namespace;
@@ -673,11 +681,6 @@ struct signal_struct {
 					 * (notably. ptrace) */
 };
 
-/* Context switch must be unlocked if interrupts are to be enabled */
-#ifdef __ARCH_WANT_INTERRUPTS_ON_CTXSW
-# define __ARCH_WANT_UNLOCKED_CTXSW
-#endif
-
 /*
  * Bits in flags field of signal_struct.
  */
@@ -856,63 +859,15 @@ enum cpu_idle_type {
 #define SD_BALANCE_FORK		0x0008	/* Balance on fork, clone */
 #define SD_BALANCE_WAKE		0x0010  /* Balance on wakeup */
 #define SD_WAKE_AFFINE		0x0020	/* Wake task to waking CPU */
-#define SD_PREFER_LOCAL		0x0040  /* Prefer to keep tasks local to this domain */
 #define SD_SHARE_CPUPOWER	0x0080	/* Domain members share cpu power */
-#define SD_POWERSAVINGS_BALANCE	0x0100	/* Balance for power savings */
 #define SD_SHARE_PKG_RESOURCES	0x0200	/* Domain members share cpu pkg resources */
 #define SD_SERIALIZE		0x0400	/* Only a single load balancing instance */
 #define SD_ASYM_PACKING		0x0800  /* Place busy groups earlier in the domain */
 #define SD_PREFER_SIBLING	0x1000	/* Prefer to place tasks in a sibling domain */
 #define SD_OVERLAP		0x2000	/* sched_domains of this level overlap */
 
-enum powersavings_balance_level {
-	POWERSAVINGS_BALANCE_NONE = 0,  /* No power saving load balance */
-	POWERSAVINGS_BALANCE_BASIC,	/* Fill one thread/core/package
-					 * first for long running threads
-					 */
-	POWERSAVINGS_BALANCE_WAKEUP,	/* Also bias task wakeups to semi-idle
-					 * cpu package for power savings
-					 */
-	MAX_POWERSAVINGS_BALANCE_LEVELS
-};
-
-extern int sched_mc_power_savings, sched_smt_power_savings;
-
-static inline int sd_balance_for_mc_power(void)
-{
-	if (sched_smt_power_savings)
-		return SD_POWERSAVINGS_BALANCE;
-
-	if (!sched_mc_power_savings)
-		return SD_PREFER_SIBLING;
-
-	return 0;
-}
-
-static inline int sd_balance_for_package_power(void)
-{
-	if (sched_mc_power_savings | sched_smt_power_savings)
-		return SD_POWERSAVINGS_BALANCE;
-
-	return SD_PREFER_SIBLING;
-}
-
 extern int __weak arch_sd_sibiling_asym_packing(void);
 
-/*
- * Optimise SD flags for power savings:
- * SD_BALANCE_NEWIDLE helps aggressive task consolidation and power savings.
- * Keep default SD flags if sched_{smt,mc}_power_saving=0
- */
-
-static inline int sd_power_saving_flags(void)
-{
-	if (sched_mc_power_savings | sched_smt_power_savings)
-		return SD_BALANCE_NEWIDLE;
-
-	return 0;
-}
-
 struct sched_group_power {
 	atomic_t ref;
 	/*
@@ -984,6 +939,8 @@ struct sched_domain {
 	unsigned int wake_idx;
 	unsigned int forkexec_idx;
 	unsigned int smt_gain;
+
+	int nohz_idle;			/* NOHZ IDLE status */
 	int flags;			/* See SD_* */
 	int level;
 
@@ -1137,6 +1094,7 @@ struct sched_class {
 
 #ifdef CONFIG_SMP
 	int  (*select_task_rq)(struct task_struct *p, int sd_flag, int flags);
+	void (*migrate_task_rq)(struct task_struct *p, int next_cpu);
 
 	void (*pre_schedule) (struct rq *this_rq, struct task_struct *task);
 	void (*post_schedule) (struct rq *this_rq);
@@ -1171,6 +1129,18 @@ struct load_weight {
 	unsigned long weight, inv_weight;
 };
 
+struct sched_avg {
+	/*
+	 * These sums represent an infinite geometric series and so are bound
+	 * above by 1024/(1-y).  Thus we only need a u32 to store them for for all
+	 * choices of y < 1-2^(-32)*1024.
+	 */
+	u32 runnable_avg_sum, runnable_avg_period;
+	u64 last_runnable_update;
+	s64 decay_count;
+	unsigned long load_avg_contrib;
+};
+
 #ifdef CONFIG_SCHEDSTATS
 struct sched_statistics {
 	u64			wait_start;
@@ -1207,6 +1177,32 @@ struct sched_statistics {
 };
 #endif
 
+#define RAVG_HIST_SIZE  5
+
+/* ravg represents frequency scaled cpu-demand of tasks */
+struct ravg {
+	/*
+	 * 'window_start' marks the beginning of new window
+	 *
+	 * 'mark_start' marks the beginning of an event (task waking up, task
+	 * starting to execute, task being preempted) within a window
+	 *
+	 * 'sum' represents how runnable a task has been within current
+	 * window. It incorporates both running time and wait time and is
+	 * frequency scaled.
+	 *
+	 * 'sum_history' keeps track of history of 'sum' seen over previous
+	 * RAVG_HIST_SIZE windows. Windows where task was entirely sleeping are
+	 * ignored.
+	 *
+	 * 'demand' represents maximum sum seen over previous RAVG_HIST_SIZE
+	 * windows. 'demand' could drive frequency demand for tasks.
+	 */
+	u64 window_start, mark_start;
+	u32 sum, demand;
+	u32 sum_history[RAVG_HIST_SIZE];
+};
+
 struct sched_entity {
 	struct load_weight	load;		/* for load-balancing */
 	struct rb_node		run_node;
@@ -1231,13 +1227,22 @@ struct sched_entity {
 	/* rq "owned" by this entity/group: */
 	struct cfs_rq		*my_q;
 #endif
+/*
+ * Load-tracking only depends on SMP, FAIR_GROUP_SCHED dependency below may be
+ * removed when useful for applications beyond shares distribution (e.g.
+ * load-balance).
+ */
+#if defined(CONFIG_SMP) && defined(CONFIG_FAIR_GROUP_SCHED)
+	/* Per-entity load-tracking */
+	struct sched_avg	avg;
+#endif
 };
 
 struct sched_rt_entity {
 	struct list_head run_list;
 	unsigned long timeout;
+	unsigned long watchdog_stamp;
 	unsigned int time_slice;
-	int nr_cpus_allowed;
 
 	struct sched_rt_entity *back;
 #ifdef CONFIG_RT_GROUP_SCHED
@@ -1282,6 +1287,7 @@ struct task_struct {
 	const struct sched_class *sched_class;
 	struct sched_entity se;
 	struct sched_rt_entity rt;
+	struct ravg ravg;
 
 #ifdef CONFIG_PREEMPT_NOTIFIERS
 	/* list of struct preempt_notifier: */
@@ -1302,6 +1308,7 @@ struct task_struct {
 #endif
 
 	unsigned int policy;
+	int nr_cpus_allowed;
 	cpumask_t cpus_allowed;
 
 #ifdef CONFIG_PREEMPT_RCU
@@ -1822,6 +1829,7 @@ extern int task_free_unregister(struct notifier_block *n);
 #define PF_MEMALLOC	0x00000800	/* Allocating memory */
 #define PF_NPROC_EXCEEDED 0x00001000	/* set_user noticed that RLIMIT_NPROC was exceeded */
 #define PF_USED_MATH	0x00002000	/* if unset the fpu must be initialized before use */
+#define PF_WAKE_UP_IDLE 0x00004000	/* try to wake up on an idle CPU */
 #define PF_NOFREEZE	0x00008000	/* this thread should not be frozen */
 #define PF_FROZEN	0x00010000	/* frozen for system suspend */
 #define PF_FSTRANS	0x00020000	/* inside a filesystem transaction */
@@ -1939,6 +1947,22 @@ static inline int set_cpus_allowed_ptr(struct task_struct *p,
 }
 #endif
 
+static inline void set_wake_up_idle(bool enabled)
+{
+	if (enabled)
+		current->flags |= PF_WAKE_UP_IDLE;
+	else
+		current->flags &= ~PF_WAKE_UP_IDLE;
+}
+
+#ifdef CONFIG_NO_HZ
+void calc_load_enter_idle(void);
+void calc_load_exit_idle(void);
+#else
+static inline void calc_load_enter_idle(void) { }
+static inline void calc_load_exit_idle(void) { }
+#endif /* CONFIG_NO_HZ */
+
 #ifndef CONFIG_CPUMASK_OFFSTACK
 static inline int set_cpus_allowed(struct task_struct *p, cpumask_t new_mask)
 {
@@ -2033,6 +2057,8 @@ extern unsigned int sysctl_sched_latency;
 extern unsigned int sysctl_sched_min_granularity;
 extern unsigned int sysctl_sched_wakeup_granularity;
 extern unsigned int sysctl_sched_child_runs_first;
+extern unsigned int sysctl_sched_wake_to_idle;
+extern unsigned int sysctl_sched_wakeup_load_threshold;
 
 enum sched_tunable_scaling {
 	SCHED_TUNABLESCALING_NONE,
@@ -2727,6 +2753,11 @@ static inline void set_task_cpu(struct task_struct *p, unsigned int cpu)
 #endif /* CONFIG_SMP */
 
 extern struct atomic_notifier_head migration_notifier_head;
+struct migration_notify_data {
+	int src_cpu;
+	int dest_cpu;
+	int load;
+};
 
 extern long sched_setaffinity(pid_t pid, const struct cpumask *new_mask);
 extern long sched_getaffinity(pid_t pid, struct cpumask *mask);
diff --git a/include/linux/spinlock.h b/include/linux/spinlock.h
index 7d537ce..75f3494 100644
--- a/include/linux/spinlock.h
+++ b/include/linux/spinlock.h
@@ -117,9 +117,17 @@ do {								\
 #endif /*arch_spin_is_contended*/
 #endif
 
-/* The lock does not imply full memory barrier. */
-#ifndef ARCH_HAS_SMP_MB_AFTER_LOCK
-static inline void smp_mb__after_lock(void) { smp_mb(); }
+/*
+ * Despite its name it doesn't necessarily has to be a full barrier.
+ * It should only guarantee that a STORE before the critical section
+ * can not be reordered with a LOAD inside this section.
+ * spin_lock() is the one-way barrier, this LOAD can not escape out
+ * of the region. So the default implementation simply ensures that
+ * a STORE can not move into the critical section, smp_wmb() should
+ * serialize it with another STORE done by spin_lock().
+ */
+#ifndef smp_mb__before_spinlock
+#define smp_mb__before_spinlock()	smp_wmb()
 #endif
 
 /**
diff --git a/include/linux/topology.h b/include/linux/topology.h
index 92a89f0..ffcf2f8 100644
--- a/include/linux/topology.h
+++ b/include/linux/topology.h
@@ -99,7 +99,6 @@ int arch_update_cpu_topology(void);
 				| 0*SD_BALANCE_WAKE			\
 				| 1*SD_WAKE_AFFINE			\
 				| 1*SD_SHARE_CPUPOWER			\
-				| 0*SD_POWERSAVINGS_BALANCE		\
 				| 1*SD_SHARE_PKG_RESOURCES		\
 				| 0*SD_SERIALIZE			\
 				| 0*SD_PREFER_SIBLING			\
@@ -131,12 +130,9 @@ int arch_update_cpu_topology(void);
 				| 1*SD_BALANCE_FORK			\
 				| 0*SD_BALANCE_WAKE			\
 				| 1*SD_WAKE_AFFINE			\
-				| 0*SD_PREFER_LOCAL			\
 				| 0*SD_SHARE_CPUPOWER			\
 				| 1*SD_SHARE_PKG_RESOURCES		\
 				| 0*SD_SERIALIZE			\
-				| sd_balance_for_mc_power()		\
-				| sd_power_saving_flags()		\
 				,					\
 	.last_balance		= jiffies,				\
 	.balance_interval	= 1,					\
@@ -164,12 +160,9 @@ int arch_update_cpu_topology(void);
 				| 1*SD_BALANCE_FORK			\
 				| 0*SD_BALANCE_WAKE			\
 				| 1*SD_WAKE_AFFINE			\
-				| 0*SD_PREFER_LOCAL			\
 				| 0*SD_SHARE_CPUPOWER			\
 				| 1*SD_SHARE_PKG_RESOURCES		\
 				| 0*SD_SERIALIZE			\
-				| sd_balance_for_package_power()	\
-				| sd_power_saving_flags()		\
 				,					\
 	.last_balance		= jiffies,				\
 	.balance_interval	= 1,					\
diff --git a/include/media/msm_cam_sensor.h b/include/media/msm_cam_sensor.h
old mode 100755
new mode 100644
diff --git a/include/media/msm_gemini.h b/include/media/msm_gemini.h
old mode 100755
new mode 100644
diff --git a/include/media/msm_isp.h b/include/media/msm_isp.h
old mode 100755
new mode 100644
diff --git a/include/trace/events/rcu.h b/include/trace/events/rcu.h
index 3370997..d274734 100644
--- a/include/trace/events/rcu.h
+++ b/include/trace/events/rcu.h
@@ -289,9 +289,12 @@ TRACE_EVENT(rcu_dyntick,
  *	"In holdoff": Nothing to do, holding off after unsuccessful attempt.
  *	"Begin holdoff": Attempt failed, don't retry until next jiffy.
  *	"Dyntick with callbacks": Entering dyntick-idle despite callbacks.
+ *	"Dyntick with lazy callbacks": Entering dyntick-idle w/lazy callbacks.
  *	"More callbacks": Still more callbacks, try again to clear them out.
  *	"Callbacks drained": All callbacks processed, off to dyntick idle!
  *	"Timer": Timer fired to cause CPU to continue processing callbacks.
+ *	"Demigrate": Timer fired on wrong CPU, woke up correct CPU.
+ *	"Cleanup after idle": Idle exited, timer canceled.
  */
 TRACE_EVENT(rcu_prep_idle,
 
diff --git a/include/trace/events/sched.h b/include/trace/events/sched.h
index 1579c63..b3cc3a0 100644
--- a/include/trace/events/sched.h
+++ b/include/trace/events/sched.h
@@ -51,6 +51,44 @@ TRACE_EVENT(sched_kthread_stop_ret,
 );
 
 /*
+ * Tracepoint for task enqueue/dequeue:
+ */
+TRACE_EVENT(sched_enq_deq_task,
+
+	TP_PROTO(struct task_struct *p, int enqueue),
+
+	TP_ARGS(p, enqueue),
+
+	TP_STRUCT__entry(
+		__array(	char,	comm,	TASK_COMM_LEN	)
+		__field(	pid_t,	pid			)
+		__field(	int,	prio			)
+		__field(	int,	cpu			)
+		__field(	int,	enqueue			)
+		__field(unsigned int,	nr_running		)
+		__field(unsigned long,	cpu_load		)
+		__field(unsigned int,	rt_nr_running		)
+	),
+
+	TP_fast_assign(
+		memcpy(__entry->comm, p->comm, TASK_COMM_LEN);
+		__entry->pid		= p->pid;
+		__entry->prio		= p->prio;
+		__entry->cpu		= task_cpu(p);
+		__entry->enqueue	= enqueue;
+		__entry->nr_running	= task_rq(p)->nr_running;
+		__entry->cpu_load	= task_rq(p)->cpu_load[0];
+		__entry->rt_nr_running	= task_rq(p)->rt.rt_nr_running;
+	),
+
+	TP_printk("cpu=%d %s comm=%s pid=%d prio=%d nr_running=%u cpu_load=%lu rt_nr_running=%u",
+			__entry->cpu, __entry->enqueue ? "enqueue" : "dequeue",
+			__entry->comm, __entry->pid,
+			__entry->prio, __entry->nr_running,
+			__entry->cpu_load, __entry->rt_nr_running)
+);
+
+/*
  * Tracepoint for waking up a task:
  */
 DECLARE_EVENT_CLASS(sched_wakeup_template,
diff --git a/kernel/cpu.c b/kernel/cpu.c
index 78a115d..68169d2 100644
--- a/kernel/cpu.c
+++ b/kernel/cpu.c
@@ -674,10 +674,12 @@ void set_cpu_present(unsigned int cpu, bool present)
 
 void set_cpu_online(unsigned int cpu, bool online)
 {
-	if (online)
+	if (online) {
 		cpumask_set_cpu(cpu, to_cpumask(cpu_online_bits));
-	else
+		cpumask_set_cpu(cpu, to_cpumask(cpu_active_bits));
+	} else {
 		cpumask_clear_cpu(cpu, to_cpumask(cpu_online_bits));
+	}
 }
 
 void set_cpu_active(unsigned int cpu, bool active)
diff --git a/kernel/cpuset.c b/kernel/cpuset.c
index 14f7070..5fc1570 100644
--- a/kernel/cpuset.c
+++ b/kernel/cpuset.c
@@ -2065,6 +2065,9 @@ static void scan_for_empty_cpusets(struct cpuset *root)
  * (of no affect) on systems that are actively using CPU hotplug
  * but making no active use of cpusets.
  *
+ * The only exception to this is suspend/resume, where we don't
+ * modify cpusets at all.
+ *
  * This routine ensures that top_cpuset.cpus_allowed tracks
  * cpu_active_mask on each CPU hotplug (cpuhp) event.
  *
diff --git a/kernel/events/core.c b/kernel/events/core.c
index 7dd822b..34c4389 100644
--- a/kernel/events/core.c
+++ b/kernel/events/core.c
@@ -7048,14 +7048,14 @@ static void perf_pmu_rotate_stop(struct pmu *pmu)
 static void __perf_event_exit_context(void *__info)
 {
 	struct perf_event_context *ctx = __info;
-	struct perf_event *event, *tmp;
+	struct perf_event *event;
 
 	perf_pmu_rotate_stop(ctx->pmu);
 
-	list_for_each_entry_safe(event, tmp, &ctx->pinned_groups, group_entry)
-		__perf_remove_from_context(event);
-	list_for_each_entry_safe(event, tmp, &ctx->flexible_groups, group_entry)
+	rcu_read_lock();
+	list_for_each_entry_rcu(event, &ctx->event_list, event_entry)
 		__perf_remove_from_context(event);
+	rcu_read_unlock();
 }
 
 static void perf_event_exit_cpu_context(int cpu)
@@ -7088,11 +7088,11 @@ static void perf_event_exit_cpu(int cpu)
 {
 	struct swevent_htable *swhash = &per_cpu(swevent_htable, cpu);
 
+	perf_event_exit_cpu_context(cpu);
+
 	mutex_lock(&swhash->hlist_mutex);
 	swevent_hlist_release(swhash);
 	mutex_unlock(&swhash->hlist_mutex);
-
-	perf_event_exit_cpu_context(cpu);
 }
 #else
 static inline void perf_event_exit_cpu(int cpu) { }
diff --git a/kernel/fork.c b/kernel/fork.c
index a8bf721..7d55e89 100644
--- a/kernel/fork.c
+++ b/kernel/fork.c
@@ -1257,11 +1257,7 @@ static struct task_struct *copy_process(unsigned long clone_flags,
 #endif
 #ifdef CONFIG_TRACE_IRQFLAGS
 	p->irq_events = 0;
-#ifdef __ARCH_WANT_INTERRUPTS_ON_CTXSW
-	p->hardirqs_enabled = 1;
-#else
 	p->hardirqs_enabled = 0;
-#endif
 	p->hardirq_enable_ip = 0;
 	p->hardirq_enable_event = 0;
 	p->hardirq_disable_ip = _THIS_IP_;
diff --git a/kernel/ksysfs.c b/kernel/ksysfs.c
index 4e316e1..8715a79 100644
--- a/kernel/ksysfs.c
+++ b/kernel/ksysfs.c
@@ -141,6 +141,23 @@ static ssize_t fscaps_show(struct kobject *kobj,
 }
 KERNEL_ATTR_RO(fscaps);
 
+int rcu_expedited;
+static ssize_t rcu_expedited_show(struct kobject *kobj,
+				  struct kobj_attribute *attr, char *buf)
+{
+	return sprintf(buf, "%d\n", rcu_expedited);
+}
+static ssize_t rcu_expedited_store(struct kobject *kobj,
+				   struct kobj_attribute *attr,
+				   const char *buf, size_t count)
+{
+	if (kstrtoint(buf, 0, &rcu_expedited))
+		return -EINVAL;
+
+	return count;
+}
+KERNEL_ATTR_RW(rcu_expedited);
+
 /*
  * Make /sys/kernel/notes give the raw contents of our kernel .notes section.
  */
@@ -182,6 +199,7 @@ static struct attribute * kernel_attrs[] = {
 	&kexec_crash_size_attr.attr,
 	&vmcoreinfo_attr.attr,
 #endif
+	&rcu_expedited_attr.attr,
 	NULL
 };
 
diff --git a/kernel/kthread.c b/kernel/kthread.c
index 3b72b80..4b7ee9c 100644
--- a/kernel/kthread.c
+++ b/kernel/kthread.c
@@ -379,6 +379,8 @@ int kthread_park(struct task_struct *k)
 			if (k != current) {
 				wake_up_process(k);
 				wait_for_completion(&kthread->parked);
+				while (k->state != TASK_PARKED)
+					cond_resched();
 			}
 		}
 		ret = 0;
diff --git a/kernel/mutex.c b/kernel/mutex.c
index a307cc9..c495333 100644
--- a/kernel/mutex.c
+++ b/kernel/mutex.c
@@ -94,6 +94,52 @@ void __sched mutex_lock(struct mutex *lock)
 EXPORT_SYMBOL(mutex_lock);
 #endif
 
+#ifdef CONFIG_MUTEX_SPIN_ON_OWNER
+/*
+ * Mutex spinning code migrated from kernel/sched/core.c
+ */
+
+static inline bool owner_running(struct mutex *lock, struct task_struct *owner)
+{
+	if (lock->owner != owner)
+		return false;
+
+	/*
+	 * Ensure we emit the owner->on_cpu, dereference _after_ checking
+	 * lock->owner still matches owner, if that fails, owner might
+	 * point to free()d memory, if it still matches, the rcu_read_lock()
+	 * ensures the memory stays valid.
+	 */
+	barrier();
+
+	return owner->on_cpu;
+}
+
+/*
+ * Look out! "owner" is an entirely speculative pointer
+ * access and not reliable.
+ */
+static noinline
+int mutex_spin_on_owner(struct mutex *lock, struct task_struct *owner)
+{
+	rcu_read_lock();
+	while (owner_running(lock, owner)) {
+		if (need_resched())
+			break;
+
+		arch_mutex_cpu_relax();
+	}
+	rcu_read_unlock();
+
+	/*
+	 * We break out the loop above on need_resched() and when the
+	 * owner changed, which is a sign for heavy contention. Return
+	 * success only when lock->owner is NULL.
+	 */
+	return lock->owner == NULL;
+}
+#endif
+
 static __used noinline void __sched __mutex_unlock_slowpath(atomic_t *lock_count);
 
 /**
diff --git a/kernel/rcu.h b/kernel/rcu.h
index 8ba99cd..20dfba5 100644
--- a/kernel/rcu.h
+++ b/kernel/rcu.h
@@ -109,4 +109,6 @@ static inline bool __rcu_reclaim(char *rn, struct rcu_head *head)
 	}
 }
 
+extern int rcu_expedited;
+
 #endif /* __LINUX_RCU_H */
diff --git a/kernel/rcupdate.c b/kernel/rcupdate.c
index a86f174..c1a835c 100644
--- a/kernel/rcupdate.c
+++ b/kernel/rcupdate.c
@@ -45,12 +45,42 @@
 #include <linux/mutex.h>
 #include <linux/export.h>
 #include <linux/hardirq.h>
+#include <linux/module.h>
 
 #define CREATE_TRACE_POINTS
 #include <trace/events/rcu.h>
 
 #include "rcu.h"
 
+module_param(rcu_expedited, int, 0);
+#ifdef CONFIG_PREEMPT_RCU
+
+/*
+ * Check for a task exiting while in a preemptible-RCU read-side
+ * critical section, clean up if so.  No need to issue warnings,
+ * as debug_check_no_locks_held() already does this if lockdep
+ * is enabled.
+ */
+void exit_rcu(void)
+{
+	struct task_struct *t = current;
+
+	if (likely(list_empty(&current->rcu_node_entry)))
+		return;
+	t->rcu_read_lock_nesting = 1;
+	barrier();
+	t->rcu_read_unlock_special = RCU_READ_UNLOCK_BLOCKED;
+	__rcu_read_unlock();
+}
+
+#else /* #ifdef CONFIG_PREEMPT_RCU */
+
+void exit_rcu(void)
+{
+}
+
+#endif /* #else #ifdef CONFIG_PREEMPT_RCU */
+
 #ifdef CONFIG_DEBUG_LOCK_ALLOC
 static struct lock_class_key rcu_lock_key;
 struct lockdep_map rcu_lock_map =
diff --git a/kernel/rcutiny_plugin.h b/kernel/rcutiny_plugin.h
index 22ecea0..977250f 100644
--- a/kernel/rcutiny_plugin.h
+++ b/kernel/rcutiny_plugin.h
@@ -750,7 +750,10 @@ void synchronize_rcu(void)
 		return;
 
 	/* Once we get past the fastpath checks, same code as rcu_barrier(). */
-	rcu_barrier();
+	if (rcu_expedited)
+		synchronize_rcu_expedited();
+	else
+		rcu_barrier();
 }
 EXPORT_SYMBOL_GPL(synchronize_rcu);
 
@@ -851,22 +854,6 @@ int rcu_preempt_needs_cpu(void)
 	return rcu_preempt_ctrlblk.rcb.rcucblist != NULL;
 }
 
-/*
- * Check for a task exiting while in a preemptible -RCU read-side
- * critical section, clean up if so.  No need to issue warnings,
- * as debug_check_no_locks_held() already does this if lockdep
- * is enabled.
- */
-void exit_rcu(void)
-{
-	struct task_struct *t = current;
-
-	if (t->rcu_read_lock_nesting == 0)
-		return;
-	t->rcu_read_lock_nesting = 1;
-	__rcu_read_unlock();
-}
-
 #else /* #ifdef CONFIG_TINY_PREEMPT_RCU */
 
 #ifdef CONFIG_RCU_TRACE
diff --git a/kernel/rcutree.c b/kernel/rcutree.c
index 84f0cdc..3b4f587 100644
--- a/kernel/rcutree.c
+++ b/kernel/rcutree.c
@@ -75,6 +75,8 @@ static struct lock_class_key rcu_node_class[NUM_RCU_LVLS];
 	.gpnum = -300, \
 	.completed = -300, \
 	.onofflock = __RAW_SPIN_LOCK_UNLOCKED(&structname##_state.onofflock), \
+	.orphan_nxttail = &structname##_state.orphan_nxtlist, \
+	.orphan_donetail = &structname##_state.orphan_donelist, \
 	.fqslock = __RAW_SPIN_LOCK_UNLOCKED(&structname##_state.fqslock), \
 	.n_force_qs = 0, \
 	.n_force_qs_ngp = 0, \
@@ -144,6 +146,13 @@ static void invoke_rcu_callbacks(struct rcu_state *rsp, struct rcu_data *rdp);
 unsigned long rcutorture_testseq;
 unsigned long rcutorture_vernum;
 
+/* State information for rcu_barrier() and friends. */
+
+static DEFINE_PER_CPU(struct rcu_head, rcu_barrier_head) = {NULL};
+static atomic_t rcu_barrier_cpu_count;
+static DEFINE_MUTEX(rcu_barrier_mutex);
+static struct completion rcu_barrier_completion;
+
 /*
  * Return true if an RCU grace period is in progress.  The ACCESS_ONCE()s
  * permit this function to be invoked without holding the root rcu_node
@@ -1312,95 +1321,133 @@ rcu_check_quiescent_state(struct rcu_state *rsp, struct rcu_data *rdp)
 #ifdef CONFIG_HOTPLUG_CPU
 
 /*
- * Move a dying CPU's RCU callbacks to online CPU's callback list.
- * Also record a quiescent state for this CPU for the current grace period.
- * Synchronization and interrupt disabling are not required because
- * this function executes in stop_machine() context.  Therefore, cleanup
- * operations that might block must be done later from the CPU_DEAD
- * notifier.
- *
- * Note that the outgoing CPU's bit has already been cleared in the
- * cpu_online_mask.  This allows us to randomly pick a callback
- * destination from the bits set in that mask.
+ * Send the specified CPU's RCU callbacks to the orphanage.  The
+ * specified CPU must be offline, and the caller must hold the
+ * ->onofflock.
  */
-static void rcu_cleanup_dying_cpu(struct rcu_state *rsp)
+static void
+rcu_send_cbs_to_orphanage(int cpu, struct rcu_state *rsp,
+			  struct rcu_node *rnp, struct rcu_data *rdp)
 {
 	int i;
-	unsigned long mask;
-	int receive_cpu = cpumask_any(cpu_online_mask);
-	struct rcu_data *rdp = this_cpu_ptr(rsp->rda);
-	struct rcu_data *receive_rdp = per_cpu_ptr(rsp->rda, receive_cpu);
-	RCU_TRACE(struct rcu_node *rnp = rdp->mynode); /* For dying CPU. */
 
-	/* First, adjust the counts. */
+	/*
+	 * Orphan the callbacks.  First adjust the counts.  This is safe
+	 * because ->onofflock excludes _rcu_barrier()'s adoption of
+	 * the callbacks, thus no memory barrier is required.
+	 */
 	if (rdp->nxtlist != NULL) {
-		receive_rdp->qlen_lazy += rdp->qlen_lazy;
-		receive_rdp->qlen += rdp->qlen;
+		rsp->qlen_lazy += rdp->qlen_lazy;
+		rsp->qlen += rdp->qlen;
+		rdp->n_cbs_orphaned += rdp->qlen;
 		rdp->qlen_lazy = 0;
 		rdp->qlen = 0;
 	}
 
 	/*
-	 * Next, move ready-to-invoke callbacks to be invoked on some
-	 * other CPU.  These will not be required to pass through another
-	 * grace period:  They are done, regardless of CPU.
+	 * Next, move those callbacks still needing a grace period to
+	 * the orphanage, where some other CPU will pick them up.
+	 * Some of the callbacks might have gone partway through a grace
+	 * period, but that is too bad.  They get to start over because we
+	 * cannot assume that grace periods are synchronized across CPUs.
+	 * We don't bother updating the ->nxttail[] array yet, instead
+	 * we just reset the whole thing later on.
 	 */
-	if (rdp->nxtlist != NULL &&
-	    rdp->nxttail[RCU_DONE_TAIL] != &rdp->nxtlist) {
-		struct rcu_head *oldhead;
-		struct rcu_head **oldtail;
-		struct rcu_head **newtail;
-
-		oldhead = rdp->nxtlist;
-		oldtail = receive_rdp->nxttail[RCU_DONE_TAIL];
-		rdp->nxtlist = *rdp->nxttail[RCU_DONE_TAIL];
-		*rdp->nxttail[RCU_DONE_TAIL] = *oldtail;
-		*receive_rdp->nxttail[RCU_DONE_TAIL] = oldhead;
-		newtail = rdp->nxttail[RCU_DONE_TAIL];
-		for (i = RCU_DONE_TAIL; i < RCU_NEXT_SIZE; i++) {
-			if (receive_rdp->nxttail[i] == oldtail)
-				receive_rdp->nxttail[i] = newtail;
-			if (rdp->nxttail[i] == newtail)
-				rdp->nxttail[i] = &rdp->nxtlist;
-		}
+	if (*rdp->nxttail[RCU_DONE_TAIL] != NULL) {
+		*rsp->orphan_nxttail = *rdp->nxttail[RCU_DONE_TAIL];
+		rsp->orphan_nxttail = rdp->nxttail[RCU_NEXT_TAIL];
+		*rdp->nxttail[RCU_DONE_TAIL] = NULL;
 	}
 
 	/*
-	 * Finally, put the rest of the callbacks at the end of the list.
-	 * The ones that made it partway through get to start over:  We
-	 * cannot assume that grace periods are synchronized across CPUs.
-	 * (We could splice RCU_WAIT_TAIL into RCU_NEXT_READY_TAIL, but
-	 * this does not seem compelling.  Not yet, anyway.)
+	 * Then move the ready-to-invoke callbacks to the orphanage,
+	 * where some other CPU will pick them up.  These will not be
+	 * required to pass though another grace period: They are done.
 	 */
 	if (rdp->nxtlist != NULL) {
-		*receive_rdp->nxttail[RCU_NEXT_TAIL] = rdp->nxtlist;
-		receive_rdp->nxttail[RCU_NEXT_TAIL] =
-				rdp->nxttail[RCU_NEXT_TAIL];
-		receive_rdp->n_cbs_adopted += rdp->qlen;
-		rdp->n_cbs_orphaned += rdp->qlen;
-
-		rdp->nxtlist = NULL;
-		for (i = 0; i < RCU_NEXT_SIZE; i++)
-			rdp->nxttail[i] = &rdp->nxtlist;
+		*rsp->orphan_donetail = rdp->nxtlist;
+		rsp->orphan_donetail = rdp->nxttail[RCU_DONE_TAIL];
 	}
 
+	/* Finally, initialize the rcu_data structure's list to empty.  */
+	rdp->nxtlist = NULL;
+	for (i = 0; i < RCU_NEXT_SIZE; i++)
+		rdp->nxttail[i] = &rdp->nxtlist;
+}
+
+/*
+ * Adopt the RCU callbacks from the specified rcu_state structure's
+ * orphanage.  The caller must hold the ->onofflock.
+ */
+static void rcu_adopt_orphan_cbs(struct rcu_state *rsp)
+{
+	int i;
+	struct rcu_data *rdp = __this_cpu_ptr(rsp->rda);
+
 	/*
-	 * Record a quiescent state for the dying CPU.  This is safe
-	 * only because we have already cleared out the callbacks.
-	 * (Otherwise, the RCU core might try to schedule the invocation
-	 * of callbacks on this now-offline CPU, which would be bad.)
+	 * If there is an rcu_barrier() operation in progress, then
+	 * only the task doing that operation is permitted to adopt
+	 * callbacks.  To do otherwise breaks rcu_barrier() and friends
+	 * by causing them to fail to wait for the callbacks in the
+	 * orphanage.
 	 */
-	mask = rdp->grpmask;	/* rnp->grplo is constant. */
+	if (rsp->rcu_barrier_in_progress &&
+	    rsp->rcu_barrier_in_progress != current)
+		return;
+
+	/* Do the accounting first. */
+	rdp->qlen_lazy += rsp->qlen_lazy;
+	rdp->qlen += rsp->qlen;
+	rdp->n_cbs_adopted += rsp->qlen;
+	rsp->qlen_lazy = 0;
+	rsp->qlen = 0;
+
+	/*
+	 * We do not need a memory barrier here because the only way we
+	 * can get here if there is an rcu_barrier() in flight is if
+	 * we are the task doing the rcu_barrier().
+	 */
+
+	/* First adopt the ready-to-invoke callbacks. */
+	if (rsp->orphan_donelist != NULL) {
+		*rsp->orphan_donetail = *rdp->nxttail[RCU_DONE_TAIL];
+		*rdp->nxttail[RCU_DONE_TAIL] = rsp->orphan_donelist;
+		for (i = RCU_NEXT_SIZE - 1; i >= RCU_DONE_TAIL; i--)
+			if (rdp->nxttail[i] == rdp->nxttail[RCU_DONE_TAIL])
+				rdp->nxttail[i] = rsp->orphan_donetail;
+		rsp->orphan_donelist = NULL;
+		rsp->orphan_donetail = &rsp->orphan_donelist;
+	}
+
+	/* And then adopt the callbacks that still need a grace period. */
+	if (rsp->orphan_nxtlist != NULL) {
+		*rdp->nxttail[RCU_NEXT_TAIL] = rsp->orphan_nxtlist;
+		rdp->nxttail[RCU_NEXT_TAIL] = rsp->orphan_nxttail;
+		rsp->orphan_nxtlist = NULL;
+		rsp->orphan_nxttail = &rsp->orphan_nxtlist;
+	}
+}
+
+/*
+ * Trace the fact that this CPU is going offline.
+ */
+static void rcu_cleanup_dying_cpu(struct rcu_state *rsp)
+{
+	RCU_TRACE(unsigned long mask);
+	RCU_TRACE(struct rcu_data *rdp = this_cpu_ptr(rsp->rda));
+	RCU_TRACE(struct rcu_node *rnp = rdp->mynode);
+
+	RCU_TRACE(mask = rdp->grpmask);
 	trace_rcu_grace_period(rsp->name,
 			       rnp->gpnum + 1 - !!(rnp->qsmask & mask),
 			       "cpuofl");
-	rcu_report_qs_rdp(smp_processor_id(), rsp, rdp, rsp->gpnum);
-	/* Note that rcu_report_qs_rdp() might call trace_rcu_grace_period(). */
 }
 
 /*
  * The CPU has been completely removed, and some other CPU is reporting
- * this fact from process context.  Do the remainder of the cleanup.
+ * this fact from process context.  Do the remainder of the cleanup,
+ * including orphaning the outgoing CPU's RCU callbacks, and also
+ * adopting them, if there is no _rcu_barrier() instance running.
  * There can only be one CPU hotplug operation at a time, so no other
  * CPU can be attempting to update rcu_cpu_kthread_task.
  */
@@ -1410,16 +1457,20 @@ static void rcu_cleanup_dead_cpu(int cpu, struct rcu_state *rsp)
 	unsigned long mask;
 	int need_report = 0;
 	struct rcu_data *rdp = per_cpu_ptr(rsp->rda, cpu);
-	struct rcu_node *rnp = rdp->mynode;  /* Outgoing CPU's rnp. */
+	struct rcu_node *rnp = rdp->mynode;  /* Outgoing CPU's rdp & rnp. */
 
 	/* Adjust any no-longer-needed kthreads. */
 	rcu_boost_kthread_setaffinity(rnp, -1);
 
-	/* Remove the dying CPU from the bitmasks in the rcu_node hierarchy. */
+	/* Remove the dead CPU from the bitmasks in the rcu_node hierarchy. */
 
 	/* Exclude any attempts to start a new grace period. */
 	raw_spin_lock_irqsave(&rsp->onofflock, flags);
 
+	/* Orphan the dead CPU's callbacks, and adopt them if appropriate. */
+	rcu_send_cbs_to_orphanage(cpu, rsp, rnp, rdp);
+	rcu_adopt_orphan_cbs(rsp);
+
 	/* Remove the outgoing CPU from the masks in the rcu_node hierarchy. */
 	mask = rdp->grpmask;	/* rnp->grplo is constant. */
 	do {
@@ -1456,6 +1507,10 @@ static void rcu_cleanup_dead_cpu(int cpu, struct rcu_state *rsp)
 
 #else /* #ifdef CONFIG_HOTPLUG_CPU */
 
+static void rcu_adopt_orphan_cbs(struct rcu_state *rsp)
+{
+}
+
 static void rcu_cleanup_dying_cpu(struct rcu_state *rsp)
 {
 }
@@ -1474,7 +1529,7 @@ static void rcu_do_batch(struct rcu_state *rsp, struct rcu_data *rdp)
 {
 	unsigned long flags;
 	struct rcu_head *next, *list, **tail;
-	int bl, count, count_lazy;
+	int bl, count, count_lazy, i;
 
 	/* If no callbacks are ready, just return.*/
 	if (!cpu_has_callbacks_ready_to_invoke(rdp)) {
@@ -1497,9 +1552,9 @@ static void rcu_do_batch(struct rcu_state *rsp, struct rcu_data *rdp)
 	rdp->nxtlist = *rdp->nxttail[RCU_DONE_TAIL];
 	*rdp->nxttail[RCU_DONE_TAIL] = NULL;
 	tail = rdp->nxttail[RCU_DONE_TAIL];
-	for (count = RCU_NEXT_SIZE - 1; count >= 0; count--)
-		if (rdp->nxttail[count] == rdp->nxttail[RCU_DONE_TAIL])
-			rdp->nxttail[count] = &rdp->nxtlist;
+	for (i = RCU_NEXT_SIZE - 1; i >= 0; i--)
+		if (rdp->nxttail[i] == rdp->nxttail[RCU_DONE_TAIL])
+			rdp->nxttail[i] = &rdp->nxtlist;
 	local_irq_restore(flags);
 
 	/* Invoke callbacks. */
@@ -1524,18 +1579,19 @@ static void rcu_do_batch(struct rcu_state *rsp, struct rcu_data *rdp)
 			    rcu_is_callbacks_kthread());
 
 	/* Update count, and requeue any remaining callbacks. */
-	rdp->qlen_lazy -= count_lazy;
-	rdp->qlen -= count;
-	rdp->n_cbs_invoked += count;
 	if (list != NULL) {
 		*tail = rdp->nxtlist;
 		rdp->nxtlist = list;
-		for (count = 0; count < RCU_NEXT_SIZE; count++)
-			if (&rdp->nxtlist == rdp->nxttail[count])
-				rdp->nxttail[count] = tail;
+		for (i = 0; i < RCU_NEXT_SIZE; i++)
+			if (&rdp->nxtlist == rdp->nxttail[i])
+				rdp->nxttail[i] = tail;
 			else
 				break;
 	}
+	smp_mb(); /* List handling before counting for rcu_barrier(). */
+	rdp->qlen_lazy -= count_lazy;
+	rdp->qlen -= count;
+	rdp->n_cbs_invoked += count;
 
 	/* Reinstate batch limit if we have worked down the excess. */
 	if (rdp->blimit == LONG_MAX && rdp->qlen <= qlowmark)
@@ -1823,11 +1879,14 @@ __call_rcu(struct rcu_head *head, void (*func)(struct rcu_head *rcu),
 	rdp = this_cpu_ptr(rsp->rda);
 
 	/* Add the callback to our list. */
-	*rdp->nxttail[RCU_NEXT_TAIL] = head;
-	rdp->nxttail[RCU_NEXT_TAIL] = &head->next;
 	rdp->qlen++;
 	if (lazy)
 		rdp->qlen_lazy++;
+	else
+		rcu_idle_count_callbacks_posted();
+	smp_mb();  /* Count before adding callback for rcu_barrier(). */
+	*rdp->nxttail[RCU_NEXT_TAIL] = head;
+	rdp->nxttail[RCU_NEXT_TAIL] = &head->next;
 
 	if (__is_kfree_rcu_offset((unsigned long)func))
 		trace_rcu_kfree_callback(rsp->name, head, (unsigned long)func,
@@ -1924,7 +1983,10 @@ void synchronize_sched(void)
 			   "Illegal synchronize_sched() in RCU-sched read-side critical section");
 	if (rcu_blocking_is_gp())
 		return;
-	wait_rcu_gp(call_rcu_sched);
+	if (rcu_expedited)
+		synchronize_sched_expedited();
+	else
+		wait_rcu_gp(call_rcu_sched);
 }
 EXPORT_SYMBOL_GPL(synchronize_sched);
 
@@ -1945,7 +2007,10 @@ void synchronize_rcu_bh(void)
 			   "Illegal synchronize_rcu_bh() in RCU-bh read-side critical section");
 	if (rcu_blocking_is_gp())
 		return;
-	wait_rcu_gp(call_rcu_bh);
+	if (rcu_expedited)
+		synchronize_rcu_bh_expedited();
+	else
+		wait_rcu_gp(call_rcu_bh);
 }
 EXPORT_SYMBOL_GPL(synchronize_rcu_bh);
 
@@ -2166,11 +2231,10 @@ static int rcu_cpu_has_callbacks(int cpu)
 	       rcu_preempt_cpu_has_callbacks(cpu);
 }
 
-static DEFINE_PER_CPU(struct rcu_head, rcu_barrier_head) = {NULL};
-static atomic_t rcu_barrier_cpu_count;
-static DEFINE_MUTEX(rcu_barrier_mutex);
-static struct completion rcu_barrier_completion;
-
+/*
+ * RCU callback function for _rcu_barrier().  If we are last, wake
+ * up the task executing _rcu_barrier().
+ */
 static void rcu_barrier_callback(struct rcu_head *notused)
 {
 	if (atomic_dec_and_test(&rcu_barrier_cpu_count))
@@ -2200,27 +2264,94 @@ static void _rcu_barrier(struct rcu_state *rsp,
 			 void (*call_rcu_func)(struct rcu_head *head,
 					       void (*func)(struct rcu_head *head)))
 {
-	BUG_ON(in_interrupt());
+	int cpu;
+	unsigned long flags;
+	struct rcu_data *rdp;
+	struct rcu_head rh;
+
+	init_rcu_head_on_stack(&rh);
+
 	/* Take mutex to serialize concurrent rcu_barrier() requests. */
 	mutex_lock(&rcu_barrier_mutex);
-	init_completion(&rcu_barrier_completion);
+
+	smp_mb();  /* Prevent any prior operations from leaking in. */
+
 	/*
-	 * Initialize rcu_barrier_cpu_count to 1, then invoke
-	 * rcu_barrier_func() on each CPU, so that each CPU also has
-	 * incremented rcu_barrier_cpu_count.  Only then is it safe to
-	 * decrement rcu_barrier_cpu_count -- otherwise the first CPU
-	 * might complete its grace period before all of the other CPUs
-	 * did their increment, causing this function to return too
-	 * early.  Note that on_each_cpu() disables irqs, which prevents
-	 * any CPUs from coming online or going offline until each online
-	 * CPU has queued its RCU-barrier callback.
+	 * Initialize the count to one rather than to zero in order to
+	 * avoid a too-soon return to zero in case of a short grace period
+	 * (or preemption of this task).  Also flag this task as doing
+	 * an rcu_barrier().  This will prevent anyone else from adopting
+	 * orphaned callbacks, which could cause otherwise failure if a
+	 * CPU went offline and quickly came back online.  To see this,
+	 * consider the following sequence of events:
+	 *
+	 * 1.	We cause CPU 0 to post an rcu_barrier_callback() callback.
+	 * 2.	CPU 1 goes offline, orphaning its callbacks.
+	 * 3.	CPU 0 adopts CPU 1's orphaned callbacks.
+	 * 4.	CPU 1 comes back online.
+	 * 5.	We cause CPU 1 to post an rcu_barrier_callback() callback.
+	 * 6.	Both rcu_barrier_callback() callbacks are invoked, awakening
+	 *	us -- but before CPU 1's orphaned callbacks are invoked!!!
 	 */
+	init_completion(&rcu_barrier_completion);
 	atomic_set(&rcu_barrier_cpu_count, 1);
-	on_each_cpu(rcu_barrier_func, (void *)call_rcu_func, 1);
+	raw_spin_lock_irqsave(&rsp->onofflock, flags);
+	rsp->rcu_barrier_in_progress = current;
+	raw_spin_unlock_irqrestore(&rsp->onofflock, flags);
+
+	/*
+	 * Force every CPU with callbacks to register a new callback
+	 * that will tell us when all the preceding callbacks have
+	 * been invoked.  If an offline CPU has callbacks, wait for
+	 * it to either come back online or to finish orphaning those
+	 * callbacks.
+	 */
+	for_each_possible_cpu(cpu) {
+		preempt_disable();
+		rdp = per_cpu_ptr(rsp->rda, cpu);
+		if (cpu_is_offline(cpu)) {
+			preempt_enable();
+			while (cpu_is_offline(cpu) && ACCESS_ONCE(rdp->qlen))
+				schedule_timeout_interruptible(1);
+		} else if (ACCESS_ONCE(rdp->qlen)) {
+			smp_call_function_single(cpu, rcu_barrier_func,
+						 (void *)call_rcu_func, 1);
+			preempt_enable();
+		} else {
+			preempt_enable();
+		}
+	}
+
+	/*
+	 * Now that all online CPUs have rcu_barrier_callback() callbacks
+	 * posted, we can adopt all of the orphaned callbacks and place
+	 * an rcu_barrier_callback() callback after them.  When that is done,
+	 * we are guaranteed to have an rcu_barrier_callback() callback
+	 * following every callback that could possibly have been
+	 * registered before _rcu_barrier() was called.
+	 */
+	raw_spin_lock_irqsave(&rsp->onofflock, flags);
+	rcu_adopt_orphan_cbs(rsp);
+	rsp->rcu_barrier_in_progress = NULL;
+	raw_spin_unlock_irqrestore(&rsp->onofflock, flags);
+	atomic_inc(&rcu_barrier_cpu_count);
+	smp_mb__after_atomic_inc(); /* Ensure atomic_inc() before callback. */
+	call_rcu_func(&rh, rcu_barrier_callback);
+
+	/*
+	 * Now that we have an rcu_barrier_callback() callback on each
+	 * CPU, and thus each counted, remove the initial count.
+	 */
 	if (atomic_dec_and_test(&rcu_barrier_cpu_count))
 		complete(&rcu_barrier_completion);
+
+	/* Wait for all rcu_barrier_callback() callbacks to be invoked. */
 	wait_for_completion(&rcu_barrier_completion);
+
+	/* Other rcu_barrier() invocations can now safely proceed. */
 	mutex_unlock(&rcu_barrier_mutex);
+
+	destroy_rcu_head_on_stack(&rh);
 }
 
 /**
diff --git a/kernel/rcutree.h b/kernel/rcutree.h
index 1d4e71a..a178ac1 100644
--- a/kernel/rcutree.h
+++ b/kernel/rcutree.h
@@ -88,6 +88,20 @@ struct rcu_dynticks {
 				    /* Process level is worth LLONG_MAX/2. */
 	int dynticks_nmi_nesting;   /* Track NMI nesting level. */
 	atomic_t dynticks;	    /* Even value for idle, else odd. */
+#ifdef CONFIG_RCU_FAST_NO_HZ
+	int dyntick_drain;	    /* Prepare-for-idle state variable. */
+	unsigned long dyntick_holdoff;
+				    /* No retries for the jiffy of failure. */
+	struct timer_list idle_gp_timer;
+				    /* Wake up CPU sleeping with callbacks. */
+	unsigned long idle_gp_timer_expires;
+				    /* When to wake up CPU (for repost). */
+	bool idle_first_pass;	    /* First pass of attempt to go idle? */
+	unsigned long nonlazy_posted;
+				    /* # times non-lazy CBs posted to CPU. */
+	unsigned long nonlazy_posted_snap;
+				    /* idle-period nonlazy_posted snapshot. */
+#endif /* #ifdef CONFIG_RCU_FAST_NO_HZ */
 };
 
 /* RCU's kthread states for tracing. */
@@ -365,6 +379,17 @@ struct rcu_state {
 
 	raw_spinlock_t onofflock;		/* exclude on/offline and */
 						/*  starting new GP. */
+	struct rcu_head *orphan_nxtlist;	/* Orphaned callbacks that */
+						/*  need a grace period. */
+	struct rcu_head **orphan_nxttail;	/* Tail of above. */
+	struct rcu_head *orphan_donelist;	/* Orphaned callbacks that */
+						/*  are ready to invoke. */
+	struct rcu_head **orphan_donetail;	/* Tail of above. */
+	long qlen_lazy;				/* Number of lazy callbacks. */
+	long qlen;				/* Total number of callbacks. */
+	struct task_struct *rcu_barrier_in_progress;
+						/* Task doing rcu_barrier(), */
+						/*  or NULL if no barrier. */
 	raw_spinlock_t fqslock;			/* Only one task forcing */
 						/*  quiescent states. */
 	unsigned long jiffies_force_qs;		/* Time at which to invoke */
@@ -458,6 +483,7 @@ static void __cpuinit rcu_prepare_kthreads(int cpu);
 static void rcu_prepare_for_idle_init(int cpu);
 static void rcu_cleanup_after_idle(int cpu);
 static void rcu_prepare_for_idle(int cpu);
+static void rcu_idle_count_callbacks_posted(void);
 static void print_cpu_stall_info_begin(void);
 static void print_cpu_stall_info(struct rcu_state *rsp, int cpu);
 static void print_cpu_stall_info_end(void);
diff --git a/kernel/rcutree_plugin.h b/kernel/rcutree_plugin.h
index abb95c9..de85e4c 100644
--- a/kernel/rcutree_plugin.h
+++ b/kernel/rcutree_plugin.h
@@ -738,7 +738,10 @@ void synchronize_rcu(void)
 			   "Illegal synchronize_rcu() in RCU read-side critical section");
 	if (!rcu_scheduler_active)
 		return;
-	wait_rcu_gp(call_rcu);
+	if (rcu_expedited)
+		synchronize_rcu_expedited();
+	else
+		wait_rcu_gp(call_rcu);
 }
 EXPORT_SYMBOL_GPL(synchronize_rcu);
 
@@ -970,22 +973,6 @@ static void __init __rcu_init_preempt(void)
 	rcu_init_one(&rcu_preempt_state, &rcu_preempt_data);
 }
 
-/*
- * Check for a task exiting while in a preemptible-RCU read-side
- * critical section, clean up if so.  No need to issue warnings,
- * as debug_check_no_locks_held() already does this if lockdep
- * is enabled.
- */
-void exit_rcu(void)
-{
-	struct task_struct *t = current;
-
-	if (t->rcu_read_lock_nesting == 0)
-		return;
-	t->rcu_read_lock_nesting = 1;
-	__rcu_read_unlock();
-}
-
 #else /* #ifdef CONFIG_TREE_PREEMPT_RCU */
 
 static struct rcu_state *rcu_state = &rcu_sched_state;
@@ -1649,8 +1636,9 @@ static void __cpuinit rcu_prepare_kthreads(int cpu)
  * Because we not have RCU_FAST_NO_HZ, just check whether this CPU needs
  * any flavor of RCU.
  */
-int rcu_needs_cpu(int cpu)
+int rcu_needs_cpu(int cpu, unsigned long *delta_jiffies)
 {
+	*delta_jiffies = ULONG_MAX;
 	return rcu_cpu_has_callbacks(cpu);
 }
 
@@ -1677,6 +1665,14 @@ static void rcu_prepare_for_idle(int cpu)
 {
 }
 
+/*
+ * Don't bother keeping a running count of the number of RCU callbacks
+ * posted because CONFIG_RCU_FAST_NO_HZ=n.
+ */
+static void rcu_idle_count_callbacks_posted(void)
+{
+}
+
 #else /* #if !defined(CONFIG_RCU_FAST_NO_HZ) */
 
 /*
@@ -1717,30 +1713,6 @@ static void rcu_prepare_for_idle(int cpu)
 #define RCU_IDLE_GP_DELAY 6		/* Roughly one grace period. */
 #define RCU_IDLE_LAZY_GP_DELAY (6 * HZ)	/* Roughly six seconds. */
 
-static DEFINE_PER_CPU(int, rcu_dyntick_drain);
-static DEFINE_PER_CPU(unsigned long, rcu_dyntick_holdoff);
-static DEFINE_PER_CPU(struct hrtimer, rcu_idle_gp_timer);
-static ktime_t rcu_idle_gp_wait;	/* If some non-lazy callbacks. */
-static ktime_t rcu_idle_lazy_gp_wait;	/* If only lazy callbacks. */
-
-/*
- * Allow the CPU to enter dyntick-idle mode if either: (1) There are no
- * callbacks on this CPU, (2) this CPU has not yet attempted to enter
- * dyntick-idle mode, or (3) this CPU is in the process of attempting to
- * enter dyntick-idle mode.  Otherwise, if we have recently tried and failed
- * to enter dyntick-idle mode, we refuse to try to enter it.  After all,
- * it is better to incur scheduling-clock interrupts than to spin
- * continuously for the same time duration!
- */
-int rcu_needs_cpu(int cpu)
-{
-	/* If no callbacks, RCU doesn't need the CPU. */
-	if (!rcu_cpu_has_callbacks(cpu))
-		return 0;
-	/* Otherwise, RCU needs the CPU only if it recently tried and failed. */
-	return per_cpu(rcu_dyntick_holdoff, cpu) == jiffies;
-}
-
 /*
  * Does the specified flavor of RCU have non-lazy callbacks pending on
  * the specified CPU?  Both RCU flavor and CPU are specified by the
@@ -1784,16 +1756,75 @@ static bool rcu_cpu_has_nonlazy_callbacks(int cpu)
 }
 
 /*
+ * Allow the CPU to enter dyntick-idle mode if either: (1) There are no
+ * callbacks on this CPU, (2) this CPU has not yet attempted to enter
+ * dyntick-idle mode, or (3) this CPU is in the process of attempting to
+ * enter dyntick-idle mode.  Otherwise, if we have recently tried and failed
+ * to enter dyntick-idle mode, we refuse to try to enter it.  After all,
+ * it is better to incur scheduling-clock interrupts than to spin
+ * continuously for the same time duration!
+ *
+ * The delta_jiffies argument is used to store the time when RCU is
+ * going to need the CPU again if it still has callbacks.  The reason
+ * for this is that rcu_prepare_for_idle() might need to post a timer,
+ * but if so, it will do so after tick_nohz_stop_sched_tick() has set
+ * the wakeup time for this CPU.  This means that RCU's timer can be
+ * delayed until the wakeup time, which defeats the purpose of posting
+ * a timer.
+ */
+int rcu_needs_cpu(int cpu, unsigned long *delta_jiffies)
+{
+	struct rcu_dynticks *rdtp = &per_cpu(rcu_dynticks, cpu);
+
+	/* Flag a new idle sojourn to the idle-entry state machine. */
+	rdtp->idle_first_pass = 1;
+	/* If no callbacks, RCU doesn't need the CPU. */
+	if (!rcu_cpu_has_callbacks(cpu)) {
+		*delta_jiffies = ULONG_MAX;
+		return 0;
+	}
+	if (rdtp->dyntick_holdoff == jiffies) {
+		/* RCU recently tried and failed, so don't try again. */
+		*delta_jiffies = 1;
+		return 1;
+	}
+	/* Set up for the possibility that RCU will post a timer. */
+	if (rcu_cpu_has_nonlazy_callbacks(cpu))
+		*delta_jiffies = RCU_IDLE_GP_DELAY;
+	else
+		*delta_jiffies = RCU_IDLE_LAZY_GP_DELAY;
+	return 0;
+}
+
+/*
+ * Handler for smp_call_function_single().  The only point of this
+ * handler is to wake the CPU up, so the handler does only tracing.
+ */
+void rcu_idle_demigrate(void *unused)
+{
+	trace_rcu_prep_idle("Demigrate");
+}
+
+/*
  * Timer handler used to force CPU to start pushing its remaining RCU
  * callbacks in the case where it entered dyntick-idle mode with callbacks
  * pending.  The hander doesn't really need to do anything because the
  * real work is done upon re-entry to idle, or by the next scheduling-clock
  * interrupt should idle not be re-entered.
+ *
+ * One special case: the timer gets migrated without awakening the CPU
+ * on which the timer was scheduled on.  In this case, we must wake up
+ * that CPU.  We do so with smp_call_function_single().
  */
-static enum hrtimer_restart rcu_idle_gp_timer_func(struct hrtimer *hrtp)
+static void rcu_idle_gp_timer_func(unsigned long cpu_in)
 {
+	int cpu = (int)cpu_in;
+
 	trace_rcu_prep_idle("Timer");
-	return HRTIMER_NORESTART;
+	if (cpu != smp_processor_id())
+		smp_call_function_single(cpu, rcu_idle_demigrate, NULL, 0);
+	else
+		WARN_ON_ONCE(1); /* Getting here can hang the system... */
 }
 
 /*
@@ -1801,29 +1832,25 @@ static enum hrtimer_restart rcu_idle_gp_timer_func(struct hrtimer *hrtp)
  */
 static void rcu_prepare_for_idle_init(int cpu)
 {
-	static int firsttime = 1;
-	struct hrtimer *hrtp = &per_cpu(rcu_idle_gp_timer, cpu);
-
-	hrtimer_init(hrtp, CLOCK_MONOTONIC, HRTIMER_MODE_REL);
-	hrtp->function = rcu_idle_gp_timer_func;
-	if (firsttime) {
-		unsigned int upj = jiffies_to_usecs(RCU_IDLE_GP_DELAY);
+	struct rcu_dynticks *rdtp = &per_cpu(rcu_dynticks, cpu);
 
-		rcu_idle_gp_wait = ns_to_ktime(upj * (u64)1000);
-		upj = jiffies_to_usecs(RCU_IDLE_LAZY_GP_DELAY);
-		rcu_idle_lazy_gp_wait = ns_to_ktime(upj * (u64)1000);
-		firsttime = 0;
-	}
+	rdtp->dyntick_holdoff = jiffies - 1;
+	setup_timer(&rdtp->idle_gp_timer, rcu_idle_gp_timer_func, cpu);
+	rdtp->idle_gp_timer_expires = jiffies - 1;
+	rdtp->idle_first_pass = 1;
 }
 
 /*
  * Clean up for exit from idle.  Because we are exiting from idle, there
- * is no longer any point to rcu_idle_gp_timer, so cancel it.  This will
+ * is no longer any point to ->idle_gp_timer, so cancel it.  This will
  * do nothing if this timer is not active, so just cancel it unconditionally.
  */
 static void rcu_cleanup_after_idle(int cpu)
 {
-	hrtimer_cancel(&per_cpu(rcu_idle_gp_timer, cpu));
+	struct rcu_dynticks *rdtp = &per_cpu(rcu_dynticks, cpu);
+
+	del_timer(&rdtp->idle_gp_timer);
+	trace_rcu_prep_idle("Cleanup after idle");
 }
 
 /*
@@ -1841,19 +1868,41 @@ static void rcu_cleanup_after_idle(int cpu)
  * Because it is not legal to invoke rcu_process_callbacks() with irqs
  * disabled, we do one pass of force_quiescent_state(), then do a
  * invoke_rcu_core() to cause rcu_process_callbacks() to be invoked
- * later.  The per-cpu rcu_dyntick_drain variable controls the sequencing.
+ * later.  The ->dyntick_drain field controls the sequencing.
  *
  * The caller must have disabled interrupts.
  */
 static void rcu_prepare_for_idle(int cpu)
 {
+	struct timer_list *tp;
+	struct rcu_dynticks *rdtp = &per_cpu(rcu_dynticks, cpu);
+
+	/*
+	 * If this is an idle re-entry, for example, due to use of
+	 * RCU_NONIDLE() or the new idle-loop tracing API within the idle
+	 * loop, then don't take any state-machine actions, unless the
+	 * momentary exit from idle queued additional non-lazy callbacks.
+	 * Instead, repost the ->idle_gp_timer if this CPU has callbacks
+	 * pending.
+	 */
+	if (!rdtp->idle_first_pass &&
+	    (rdtp->nonlazy_posted == rdtp->nonlazy_posted_snap)) {
+		if (rcu_cpu_has_callbacks(cpu)) {
+			tp = &rdtp->idle_gp_timer;
+			mod_timer_pinned(tp, rdtp->idle_gp_timer_expires);
+		}
+		return;
+	}
+	rdtp->idle_first_pass = 0;
+	rdtp->nonlazy_posted_snap = rdtp->nonlazy_posted - 1;
+
 	/*
 	 * If there are no callbacks on this CPU, enter dyntick-idle mode.
 	 * Also reset state to avoid prejudicing later attempts.
 	 */
 	if (!rcu_cpu_has_callbacks(cpu)) {
-		per_cpu(rcu_dyntick_holdoff, cpu) = jiffies - 1;
-		per_cpu(rcu_dyntick_drain, cpu) = 0;
+		rdtp->dyntick_holdoff = jiffies - 1;
+		rdtp->dyntick_drain = 0;
 		trace_rcu_prep_idle("No callbacks");
 		return;
 	}
@@ -1862,32 +1911,37 @@ static void rcu_prepare_for_idle(int cpu)
 	 * If in holdoff mode, just return.  We will presumably have
 	 * refrained from disabling the scheduling-clock tick.
 	 */
-	if (per_cpu(rcu_dyntick_holdoff, cpu) == jiffies) {
+	if (rdtp->dyntick_holdoff == jiffies) {
 		trace_rcu_prep_idle("In holdoff");
 		return;
 	}
 
-	/* Check and update the rcu_dyntick_drain sequencing. */
-	if (per_cpu(rcu_dyntick_drain, cpu) <= 0) {
+	/* Check and update the ->dyntick_drain sequencing. */
+	if (rdtp->dyntick_drain <= 0) {
 		/* First time through, initialize the counter. */
-		per_cpu(rcu_dyntick_drain, cpu) = RCU_IDLE_FLUSHES;
-	} else if (per_cpu(rcu_dyntick_drain, cpu) <= RCU_IDLE_OPT_FLUSHES &&
+		rdtp->dyntick_drain = RCU_IDLE_FLUSHES;
+	} else if (rdtp->dyntick_drain <= RCU_IDLE_OPT_FLUSHES &&
 		   !rcu_pending(cpu) &&
 		   !local_softirq_pending()) {
 		/* Can we go dyntick-idle despite still having callbacks? */
-		trace_rcu_prep_idle("Dyntick with callbacks");
-		per_cpu(rcu_dyntick_drain, cpu) = 0;
-		per_cpu(rcu_dyntick_holdoff, cpu) = jiffies;
-		if (rcu_cpu_has_nonlazy_callbacks(cpu))
-			hrtimer_start(&per_cpu(rcu_idle_gp_timer, cpu),
-				      rcu_idle_gp_wait, HRTIMER_MODE_REL);
-		else
-			hrtimer_start(&per_cpu(rcu_idle_gp_timer, cpu),
-				      rcu_idle_lazy_gp_wait, HRTIMER_MODE_REL);
+		rdtp->dyntick_drain = 0;
+		rdtp->dyntick_holdoff = jiffies;
+		if (rcu_cpu_has_nonlazy_callbacks(cpu)) {
+			trace_rcu_prep_idle("Dyntick with callbacks");
+			rdtp->idle_gp_timer_expires =
+					   jiffies + RCU_IDLE_GP_DELAY;
+		} else {
+			rdtp->idle_gp_timer_expires =
+					   jiffies + RCU_IDLE_LAZY_GP_DELAY;
+			trace_rcu_prep_idle("Dyntick with lazy callbacks");
+		}
+		tp = &rdtp->idle_gp_timer;
+		mod_timer_pinned(tp, rdtp->idle_gp_timer_expires);
+		rdtp->nonlazy_posted_snap = rdtp->nonlazy_posted;
 		return; /* Nothing more to do immediately. */
-	} else if (--per_cpu(rcu_dyntick_drain, cpu) <= 0) {
+	} else if (--(rdtp->dyntick_drain) <= 0) {
 		/* We have hit the limit, so time to give up. */
-		per_cpu(rcu_dyntick_holdoff, cpu) = jiffies;
+		rdtp->dyntick_holdoff = jiffies;
 		trace_rcu_prep_idle("Begin holdoff");
 		invoke_rcu_core();  /* Force the CPU out of dyntick-idle. */
 		return;
@@ -1923,6 +1977,19 @@ static void rcu_prepare_for_idle(int cpu)
 		trace_rcu_prep_idle("Callbacks drained");
 }
 
+/*
+ * Keep a running count of the number of non-lazy callbacks posted
+ * on this CPU.  This running counter (which is never decremented) allows
+ * rcu_prepare_for_idle() to detect when something out of the idle loop
+ * posts a callback, even if an equal number of callbacks are invoked.
+ * Of course, callbacks should only be posted from within a trace event
+ * designed to be called from idle or from within RCU_NONIDLE().
+ */
+static void rcu_idle_count_callbacks_posted(void)
+{
+	__this_cpu_add(rcu_dynticks.nonlazy_posted, 1);
+}
+
 #endif /* #else #if !defined(CONFIG_RCU_FAST_NO_HZ) */
 
 #ifdef CONFIG_RCU_CPU_STALL_INFO
@@ -1931,14 +1998,13 @@ static void rcu_prepare_for_idle(int cpu)
 
 static void print_cpu_stall_fast_no_hz(char *cp, int cpu)
 {
-	struct hrtimer *hrtp = &per_cpu(rcu_idle_gp_timer, cpu);
+	struct rcu_dynticks *rdtp = &per_cpu(rcu_dynticks, cpu);
+	struct timer_list *tltp = &rdtp->idle_gp_timer;
 
-	sprintf(cp, "drain=%d %c timer=%lld",
-		per_cpu(rcu_dyntick_drain, cpu),
-		per_cpu(rcu_dyntick_holdoff, cpu) == jiffies ? 'H' : '.',
-		hrtimer_active(hrtp)
-			? ktime_to_us(hrtimer_get_remaining(hrtp))
-			: -1);
+	sprintf(cp, "drain=%d %c timer=%lu",
+		rdtp->dyntick_drain,
+		rdtp->dyntick_holdoff == jiffies ? 'H' : '.',
+		timer_pending(tltp) ? tltp->expires - jiffies : -1);
 }
 
 #else /* #ifdef CONFIG_RCU_FAST_NO_HZ */
diff --git a/kernel/rcutree_trace.c b/kernel/rcutree_trace.c
index 65e54e3..6b4c76b 100644
--- a/kernel/rcutree_trace.c
+++ b/kernel/rcutree_trace.c
@@ -270,13 +270,13 @@ static void print_one_rcu_state(struct seq_file *m, struct rcu_state *rsp)
 
 	gpnum = rsp->gpnum;
 	seq_printf(m, "c=%lu g=%lu s=%d jfq=%ld j=%x "
-		      "nfqs=%lu/nfqsng=%lu(%lu) fqlh=%lu\n",
+		      "nfqs=%lu/nfqsng=%lu(%lu) fqlh=%lu oqlen=%ld/%ld\n",
 		   rsp->completed, gpnum, rsp->fqs_state,
 		   (long)(rsp->jiffies_force_qs - jiffies),
 		   (int)(jiffies & 0xffff),
 		   rsp->n_force_qs, rsp->n_force_qs_ngp,
 		   rsp->n_force_qs - rsp->n_force_qs_ngp,
-		   rsp->n_force_qs_lh);
+		   rsp->n_force_qs_lh, rsp->qlen_lazy, rsp->qlen);
 	for (rnp = &rsp->node[0]; rnp - &rsp->node[0] < NUM_RCU_NODES; rnp++) {
 		if (rnp->level != level) {
 			seq_puts(m, "\n");
diff --git a/kernel/sched/core.c b/kernel/sched/core.c
index 02a86ce..02ba2f2 100644
--- a/kernel/sched/core.c
+++ b/kernel/sched/core.c
@@ -72,6 +72,7 @@
 #include <linux/slab.h>
 #include <linux/init_task.h>
 #include <linux/binfmts.h>
+#include <linux/cpufreq.h>
 
 #include <asm/switch_to.h>
 #include <asm/tlb.h>
@@ -113,6 +114,10 @@ void start_bandwidth_timer(struct hrtimer *period_timer, ktime_t period)
 DEFINE_MUTEX(sched_domains_mutex);
 DEFINE_PER_CPU_SHARED_ALIGNED(struct rq, runqueues);
 
+#ifdef CONFIG_INTELLI_PLUG
+DEFINE_PER_CPU_SHARED_ALIGNED(struct nr_stats_s, runqueue_stats);
+#endif
+
 static void update_rq_clock_task(struct rq *rq, s64 delta);
 
 void update_rq_clock(struct rq *rq)
@@ -291,6 +296,11 @@ __read_mostly int scheduler_running;
 int sysctl_sched_rt_runtime = 950000;
 
 
+/*
+ * Maximum possible frequency across all cpus. Task demand and cpu
+ * capacity (cpu_power) metrics could be scaled in reference to it.
+ */
+static unsigned int max_possible_freq = 1;
 
 /*
  * __task_rq_lock - lock the rq @p resides on.
@@ -715,8 +725,6 @@ int tg_nop(struct task_group *tg, void *data)
 }
 #endif
 
-void update_cpu_load(struct rq *this_rq);
-
 static void set_load_weight(struct task_struct *p)
 {
 	int prio = p->static_prio - MAX_RT_PRIO;
@@ -740,6 +748,8 @@ static void enqueue_task(struct rq *rq, struct task_struct *p, int flags)
 	update_rq_clock(rq);
 	sched_info_queued(p);
 	p->sched_class->enqueue_task(rq, p, flags);
+	trace_sched_enq_deq_task(p, 1);
+	inc_cumulative_runnable_avg(rq, p);
 }
 
 static void dequeue_task(struct rq *rq, struct task_struct *p, int flags)
@@ -747,6 +757,8 @@ static void dequeue_task(struct rq *rq, struct task_struct *p, int flags)
 	update_rq_clock(rq);
 	sched_info_dequeued(p);
 	p->sched_class->dequeue_task(rq, p, flags);
+	trace_sched_enq_deq_task(p, 0);
+	dec_cumulative_runnable_avg(rq, p);
 }
 
 void activate_task(struct rq *rq, struct task_struct *p, int flags)
@@ -1104,6 +1116,13 @@ void check_preempt_curr(struct rq *rq, struct task_struct *p, int flags)
 		rq->skip_clock_update = 1;
 }
 
+static ATOMIC_NOTIFIER_HEAD(task_migration_notifier);
+
+void register_task_migration_notifier(struct notifier_block *n)
+{
+	atomic_notifier_chain_register(&task_migration_notifier, n);
+}
+
 #ifdef CONFIG_SMP
 void set_task_cpu(struct task_struct *p, unsigned int new_cpu)
 {
@@ -1134,8 +1153,18 @@ void set_task_cpu(struct task_struct *p, unsigned int new_cpu)
 	trace_sched_migrate_task(p, new_cpu);
 
 	if (task_cpu(p) != new_cpu) {
+		struct task_migration_notifier tmn;
+
+		if (p->sched_class->migrate_task_rq)
+			p->sched_class->migrate_task_rq(p, new_cpu);
 		p->se.nr_migrations++;
 		perf_sw_event(PERF_COUNT_SW_CPU_MIGRATIONS, 1, NULL, 0);
+
+		tmn.task = p;
+		tmn.from_cpu = task_cpu(p);
+		tmn.to_cpu = new_cpu;
+
+		atomic_notifier_call_chain(&task_migration_notifier, 0, &tmn);
 	}
 
 	__set_task_cpu(p, new_cpu);
@@ -1288,18 +1317,28 @@ EXPORT_SYMBOL_GPL(kick_process);
  */
 static int select_fallback_rq(int cpu, struct task_struct *p)
 {
-	const struct cpumask *nodemask = cpumask_of_node(cpu_to_node(cpu));
+	int nid = cpu_to_node(cpu);
+	const struct cpumask *nodemask = NULL;
 	enum { cpuset, possible, fail } state = cpuset;
 	int dest_cpu;
 
-	/* Look for allowed, online CPU in same node. */
-	for_each_cpu(dest_cpu, nodemask) {
-		if (!cpu_online(dest_cpu))
-			continue;
-		if (!cpu_active(dest_cpu))
-			continue;
-		if (cpumask_test_cpu(dest_cpu, tsk_cpus_allowed(p)))
-			return dest_cpu;
+	/*
+	 * If the node that the cpu is on has been offlined, cpu_to_node()
+	 * will return -1. There is no cpu on the node, and we should
+	 * select the cpu on the other node.
+	 */
+	if (nid != -1) {
+		nodemask = cpumask_of_node(nid);
+
+		/* Look for allowed, online CPU in same node. */
+		for_each_cpu(dest_cpu, nodemask) {
+			if (!cpu_online(dest_cpu))
+				continue;
+			if (!cpu_active(dest_cpu))
+				continue;
+			if (cpumask_test_cpu(dest_cpu, tsk_cpus_allowed(p)))
+				return dest_cpu;
+		}
 	}
 
 	for (;;) {
@@ -1428,6 +1467,130 @@ static void ttwu_activate(struct rq *rq, struct task_struct *p, int en_flags)
 		wq_worker_waking_up(p, cpu_of(rq));
 }
 
+/* Window size (in ns) */
+__read_mostly unsigned int sched_ravg_window = 10000000;
+
+/* Min window size (in ns) = 10ms */
+__read_mostly unsigned int min_sched_ravg_window = 10000000;
+
+/* Max window size (in ns) = 1s */
+__read_mostly unsigned int max_sched_ravg_window = 1000000000;
+
+/*
+ * Called when new window is starting for a task, to record cpu usage over
+ * recently concluded window(s). Normally 'samples' should be 1. It can be > 1
+ * when, say, a real-time task runs without preemption for several windows at a
+ * stretch.
+ */
+static inline void
+update_history(struct rq *rq, struct task_struct *p, u32 runtime, int samples)
+{
+	u32 *hist = &p->ravg.sum_history[0];
+	int ridx, widx;
+	u32 sum = 0, avg;
+
+	/* Ignore windows where task had no activity */
+	if (!runtime)
+		return;
+
+	/* Push new 'runtime' value onto stack */
+	widx = RAVG_HIST_SIZE - 1;
+	ridx = widx - samples;
+	for (; ridx >= 0; --widx, --ridx) {
+		hist[widx] = hist[ridx];
+		sum += hist[widx];
+	}
+
+	for (widx = 0; widx < samples && widx < RAVG_HIST_SIZE; widx++) {
+		hist[widx] = runtime;
+		sum += hist[widx];
+	}
+
+	p->ravg.sum = 0;
+	if (p->on_rq) {
+		rq->cumulative_runnable_avg -= p->ravg.demand;
+		BUG_ON((s64)rq->cumulative_runnable_avg < 0);
+	}
+
+	avg = sum / RAVG_HIST_SIZE;
+
+	p->ravg.demand = max(avg, runtime);
+
+	if (p->on_rq)
+		rq->cumulative_runnable_avg += p->ravg.demand;
+}
+
+static int __init set_sched_ravg_window(char *str)
+{
+	get_option(&str, &sched_ravg_window);
+
+	return 0;
+}
+
+early_param("sched_ravg_window", set_sched_ravg_window);
+
+void update_task_ravg(struct task_struct *p, struct rq *rq, int update_sum)
+{
+	u32 window_size = sched_ravg_window;
+	int new_window;
+	u64 wallclock = sched_clock();
+
+	if (is_idle_task(p) || (sched_ravg_window < min_sched_ravg_window))
+		return;
+
+	do {
+		s64 delta = 0;
+		int n;
+		u64 now = wallclock;
+
+		new_window = 0;
+		delta = now - p->ravg.window_start;
+		BUG_ON(delta < 0);
+		if (delta > window_size) {
+			p->ravg.window_start += window_size;
+			now = p->ravg.window_start;
+			new_window = 1;
+		}
+
+		if (update_sum) {
+			unsigned int cur_freq = rq->cur_freq;
+
+			delta = now - p->ravg.mark_start;
+			BUG_ON(delta < 0);
+
+			if (unlikely(cur_freq > max_possible_freq))
+				cur_freq = max_possible_freq;
+
+			delta = div64_u64(delta  * cur_freq,
+							max_possible_freq);
+			p->ravg.sum += delta;
+			WARN_ON(p->ravg.sum > window_size);
+		}
+
+		if (!new_window)
+			break;
+
+		update_history(rq, p, p->ravg.sum, 1);
+
+		delta = wallclock - p->ravg.window_start;
+		BUG_ON(delta < 0);
+		n = div64_u64(delta, window_size);
+		if (n) {
+			if (!update_sum)
+				p->ravg.window_start = wallclock;
+			else
+				p->ravg.window_start += (u64)n *
+							 (u64)window_size;
+			BUG_ON(p->ravg.window_start > wallclock);
+			if (update_sum)
+				update_history(rq, p, window_size, n);
+		}
+		p->ravg.mark_start =  p->ravg.window_start;
+	} while (new_window);
+
+	p->ravg.mark_start = wallclock;
+}
+
 /*
  * Mark the task runnable and perform wakeup-preemption.
  */
@@ -1437,6 +1600,7 @@ ttwu_do_wakeup(struct rq *rq, struct task_struct *p, int wake_flags)
 	trace_sched_wakeup(p, true);
 	check_preempt_curr(rq, p, wake_flags);
 
+	update_task_ravg(p, rq, 0);
 	p->state = TASK_RUNNING;
 #ifdef CONFIG_SMP
 	if (p->sched_class->task_woken)
@@ -1543,25 +1707,6 @@ static void ttwu_queue_remote(struct task_struct *p, int cpu)
 		smp_send_reschedule(cpu);
 }
 
-#ifdef __ARCH_WANT_INTERRUPTS_ON_CTXSW
-static int ttwu_activate_remote(struct task_struct *p, int wake_flags)
-{
-	struct rq *rq;
-	int ret = 0;
-
-	rq = __task_rq_lock(p);
-	if (p->on_cpu) {
-		ttwu_activate(rq, p, ENQUEUE_WAKEUP);
-		ttwu_do_wakeup(rq, p, wake_flags);
-		ret = 1;
-	}
-	__task_rq_unlock(rq);
-
-	return ret;
-
-}
-#endif /* __ARCH_WANT_INTERRUPTS_ON_CTXSW */
-
 bool cpus_share_cache(int this_cpu, int that_cpu)
 {
 	return per_cpu(sd_llc_id, this_cpu) == per_cpu(sd_llc_id, that_cpu);
@@ -1585,6 +1730,7 @@ static void ttwu_queue(struct task_struct *p, int cpu)
 	raw_spin_unlock(&rq->lock);
 }
 
+__read_mostly unsigned int sysctl_sched_wakeup_load_threshold = 110;
 /**
  * try_to_wake_up - wake up a thread
  * @p: the thread to be awakened
@@ -1606,7 +1752,13 @@ try_to_wake_up(struct task_struct *p, unsigned int state, int wake_flags)
 	unsigned long flags;
 	int cpu, src_cpu, success = 0;
 
-	smp_wmb();
+	/*
+	 * If we are going to wake up a thread waiting for CONDITION we
+	 * need to ensure that CONDITION=1 done by the caller can not be
+	 * reordered with p->state check below. This pairs with mb() in
+	 * set_current_state() the waiting thread does.
+	 */
+	smp_mb__before_spinlock();
 	raw_spin_lock_irqsave(&p->pi_lock, flags);
 	src_cpu = task_cpu(p);
 	cpu = src_cpu;
@@ -1624,21 +1776,8 @@ try_to_wake_up(struct task_struct *p, unsigned int state, int wake_flags)
 	 * If the owning (remote) cpu is still in the middle of schedule() with
 	 * this task as prev, wait until its done referencing the task.
 	 */
-	while (p->on_cpu) {
-#ifdef __ARCH_WANT_INTERRUPTS_ON_CTXSW
-		/*
-		 * In case the architecture enables interrupts in
-		 * context_switch(), we cannot busy wait, since that
-		 * would lead to deadlocks when an interrupt hits and
-		 * tries to wake up @prev. So bail and do a complete
-		 * remote wakeup.
-		 */
-		if (ttwu_activate_remote(p, wake_flags))
-			goto stat;
-#else
+	while (p->on_cpu)
 		cpu_relax();
-#endif
-	}
 	/*
 	 * Pairs with the smp_wmb() in finish_lock_switch().
 	 */
@@ -1663,9 +1802,25 @@ stat:
 out:
 	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
 
-	if (src_cpu != cpu && task_notify_on_migrate(p))
-		atomic_notifier_call_chain(&migration_notifier_head,
-					   cpu, (void *)src_cpu);
+	if (task_notify_on_migrate(p)) {
+		struct migration_notify_data mnd;
+
+		mnd.src_cpu = src_cpu;
+		mnd.dest_cpu = cpu;
+		mnd.load = pct_task_load(p);
+
+		/*
+		 * Call the migration notifier with mnd for foreground task
+		 * migrations as well as for wakeups if their load is above
+		 * sysctl_sched_wakeup_load_threshold. This would prompt the
+		 * cpu-boost to boost the CPU frequency on wake up of a heavy
+		 * weight foreground task
+		 */
+		if ((src_cpu != cpu) || (mnd.load >
+					sysctl_sched_wakeup_load_threshold))
+			atomic_notifier_call_chain(&migration_notifier_head,
+					   0, (void *)&mnd);
+	}
 	return success;
 }
 
@@ -1744,8 +1899,19 @@ static void __sched_fork(struct task_struct *p)
 	p->se.prev_sum_exec_runtime	= 0;
 	p->se.nr_migrations		= 0;
 	p->se.vruntime			= 0;
+	init_new_task_load(p);
+
 	INIT_LIST_HEAD(&p->se.group_node);
 
+/*
+ * Load-tracking only depends on SMP, FAIR_GROUP_SCHED dependency below may be
+ * removed when useful for applications beyond shares distribution (e.g.
+ * load-balance).
+ */
+#if defined(CONFIG_SMP) && defined(CONFIG_FAIR_GROUP_SCHED)
+	p->se.avg.runnable_avg_period = 0;
+	p->se.avg.runnable_avg_sum = 0;
+#endif
 #ifdef CONFIG_SCHEDSTATS
 	memset(&p->se.statistics, 0, sizeof(p->se.statistics));
 #endif
@@ -1987,13 +2153,7 @@ static void finish_task_switch(struct rq *rq, struct task_struct *prev)
 	 */
 	prev_state = prev->state;
 	finish_arch_switch(prev);
-#ifdef __ARCH_WANT_INTERRUPTS_ON_CTXSW
-	local_irq_disable();
-#endif /* __ARCH_WANT_INTERRUPTS_ON_CTXSW */
 	perf_event_task_sched_in(prev, current);
-#ifdef __ARCH_WANT_INTERRUPTS_ON_CTXSW
-	local_irq_enable();
-#endif /* __ARCH_WANT_INTERRUPTS_ON_CTXSW */
 	finish_lock_switch(rq, prev);
 	finish_arch_post_lock_switch();
 
@@ -2192,12 +2352,129 @@ unsigned long this_cpu_load(void)
 	return this->cpu_load[0];
 }
 
+#ifdef CONFIG_INTELLI_PLUG
+unsigned long avg_nr_running(void)
+{
+	unsigned long i, sum = 0;
+	unsigned int seqcnt, ave_nr_running;
+
+	for_each_online_cpu(i) {
+		struct nr_stats_s *stats = &per_cpu(runqueue_stats, i);
+		struct rq *q = cpu_rq(i);
+
+		/*
+		 * Update average to avoid reading stalled value if there were
+		 * no run-queue changes for a long time. On the other hand if
+		 * the changes are happening right now, just read current value
+		 * directly.
+		 */
+		seqcnt = read_seqcount_begin(&stats->ave_seqcnt);
+		ave_nr_running = do_avg_nr_running(q);
+		if (read_seqcount_retry(&stats->ave_seqcnt, seqcnt)) {
+			read_seqcount_begin(&stats->ave_seqcnt);
+			ave_nr_running = stats->ave_nr_running;
+		}
+
+		sum += ave_nr_running;
+	}
+
+	return sum;
+}
+EXPORT_SYMBOL(avg_nr_running);
+
+unsigned long avg_cpu_nr_running(unsigned int cpu)
+{
+	unsigned int seqcnt, ave_nr_running;
+
+	struct nr_stats_s *stats = &per_cpu(runqueue_stats, cpu);
+	struct rq *q = cpu_rq(cpu);
+
+	/*
+	 * Update average to avoid reading stalled value if there were
+	 * no run-queue changes for a long time. On the other hand if
+	 * the changes are happening right now, just read current value
+	 * directly.
+	 */
+	seqcnt = read_seqcount_begin(&stats->ave_seqcnt);
+	ave_nr_running = do_avg_nr_running(q);
+	if (read_seqcount_retry(&stats->ave_seqcnt, seqcnt)) {
+		read_seqcount_begin(&stats->ave_seqcnt);
+		ave_nr_running = stats->ave_nr_running;
+	}
+
+	return ave_nr_running;
+}
+EXPORT_SYMBOL(avg_cpu_nr_running);
+#endif
+
+
+/*
+ * Global load-average calculations
+ *
+ * We take a distributed and async approach to calculating the global load-avg
+ * in order to minimize overhead.
+ *
+ * The global load average is an exponentially decaying average of nr_running +
+ * nr_uninterruptible.
+ *
+ * Once every LOAD_FREQ:
+ *
+ *   nr_active = 0;
+ *   for_each_possible_cpu(cpu)
+ *   	nr_active += cpu_of(cpu)->nr_running + cpu_of(cpu)->nr_uninterruptible;
+ *
+ *   avenrun[n] = avenrun[0] * exp_n + nr_active * (1 - exp_n)
+ *
+ * Due to a number of reasons the above turns in the mess below:
+ *
+ *  - for_each_possible_cpu() is prohibitively expensive on machines with
+ *    serious number of cpus, therefore we need to take a distributed approach
+ *    to calculating nr_active.
+ *
+ *        \Sum_i x_i(t) = \Sum_i x_i(t) - x_i(t_0) | x_i(t_0) := 0
+ *                      = \Sum_i { \Sum_j=1 x_i(t_j) - x_i(t_j-1) }
+ *
+ *    So assuming nr_active := 0 when we start out -- true per definition, we
+ *    can simply take per-cpu deltas and fold those into a global accumulate
+ *    to obtain the same result. See calc_load_fold_active().
+ *
+ *    Furthermore, in order to avoid synchronizing all per-cpu delta folding
+ *    across the machine, we assume 10 ticks is sufficient time for every
+ *    cpu to have completed this task.
+ *
+ *    This places an upper-bound on the IRQ-off latency of the machine. Then
+ *    again, being late doesn't loose the delta, just wrecks the sample.
+ *
+ *  - cpu_rq()->nr_uninterruptible isn't accurately tracked per-cpu because
+ *    this would add another cross-cpu cacheline miss and atomic operation
+ *    to the wakeup path. Instead we increment on whatever cpu the task ran
+ *    when it went into uninterruptible state and decrement on whatever cpu
+ *    did the wakeup. This means that only the sum of nr_uninterruptible over
+ *    all cpus yields the correct result.
+ *
+ *  This covers the NO_HZ=n code, for extra head-aches, see the comment below.
+ */
 
 /* Variables and functions for calc_load */
 static atomic_long_t calc_load_tasks;
 static unsigned long calc_load_update;
 unsigned long avenrun[3];
-EXPORT_SYMBOL(avenrun);
+EXPORT_SYMBOL(avenrun); /* should be removed */
+
+/**
+ * get_avenrun - get the load average array
+ * @loads:	pointer to dest load array
+ * @offset:	offset to add
+ * @shift:	shift count to shift the result left
+ *
+ * These values are estimates at best, so no need for locking.
+ */
+void get_avenrun(unsigned long *loads, unsigned long offset, int shift)
+{
+	loads[0] = (avenrun[0] + offset) << shift;
+	loads[1] = (avenrun[1] + offset) << shift;
+	loads[2] = (avenrun[2] + offset) << shift;
+}
 
 static long calc_load_fold_active(struct rq *this_rq)
 {
@@ -2214,6 +2491,9 @@ static long calc_load_fold_active(struct rq *this_rq)
 	return delta;
 }
 
+/*
+ * a1 = a0 * e + a * (1 - e)
+ */
 static unsigned long
 calc_load(unsigned long load, unsigned long exp, unsigned long active)
 {
@@ -2225,30 +2505,118 @@ calc_load(unsigned long load, unsigned long exp, unsigned long active)
 
 #ifdef CONFIG_NO_HZ
 /*
- * For NO_HZ we delay the active fold to the next LOAD_FREQ update.
+ * Handle NO_HZ for the global load-average.
+ *
+ * Since the above described distributed algorithm to compute the global
+ * load-average relies on per-cpu sampling from the tick, it is affected by
+ * NO_HZ.
+ *
+ * The basic idea is to fold the nr_active delta into a global idle-delta upon
+ * entering NO_HZ state such that we can include this as an 'extra' cpu delta
+ * when we read the global state.
+ *
+ * Obviously reality has to ruin such a delightfully simple scheme:
+ *
+ *  - When we go NO_HZ idle during the window, we can negate our sample
+ *    contribution, causing under-accounting.
+ *
+ *    We avoid this by keeping two idle-delta counters and flipping them
+ *    when the window starts, thus separating old and new NO_HZ load.
+ *
+ *    The only trick is the slight shift in index flip for read vs write.
+ *
+ *        0s            5s            10s           15s
+ *          +10           +10           +10           +10
+ *        |-|-----------|-|-----------|-|-----------|-|
+ *    r:0 0 1           1 0           0 1           1 0
+ *    w:0 1 1           0 0           1 1           0 0
+ *
+ *    This ensures we'll fold the old idle contribution in this window while
+ *    accumlating the new one.
+ *
+ *  - When we wake up from NO_HZ idle during the window, we push up our
+ *    contribution, since we effectively move our sample point to a known
+ *    busy state.
+ *
+ *    This is solved by pushing the window forward, and thus skipping the
+ *    sample, for this cpu (effectively using the idle-delta for this cpu which
+ *    was in effect at the time the window opened). This also solves the issue
+ *    of having to deal with a cpu having been in NOHZ idle for multiple
+ *    LOAD_FREQ intervals.
  *
  * When making the ILB scale, we should try to pull this in as well.
  */
-static atomic_long_t calc_load_tasks_idle;
+static atomic_long_t calc_load_idle[2];
+static int calc_load_idx;
+
+static inline int calc_load_write_idx(void)
+{
+	int idx = calc_load_idx;
+
+	/*
+	 * See calc_global_nohz(), if we observe the new index, we also
+	 * need to observe the new update time.
+	 */
+	smp_rmb();
+
+	/*
+	 * If the folding window started, make sure we start writing in the
+	 * next idle-delta.
+	 */
+	if (!time_before(jiffies, calc_load_update))
+		idx++;
+
+	return idx & 1;
+}
 
-void calc_load_account_idle(struct rq *this_rq)
+static inline int calc_load_read_idx(void)
 {
+	return calc_load_idx & 1;
+}
+
+void calc_load_enter_idle(void)
+{
+	struct rq *this_rq = this_rq();
 	long delta;
 
+	/*
+	 * We're going into NOHZ mode, if there's any pending delta, fold it
+	 * into the pending idle delta.
+	 */
 	delta = calc_load_fold_active(this_rq);
-	if (delta)
-		atomic_long_add(delta, &calc_load_tasks_idle);
+	if (delta) {
+		int idx = calc_load_write_idx();
+		atomic_long_add(delta, &calc_load_idle[idx]);
+	}
 }
 
-static long calc_load_fold_idle(void)
+void calc_load_exit_idle(void)
 {
-	long delta = 0;
+	struct rq *this_rq = this_rq();
+
+	/*
+	 * If we're still before the sample window, we're done.
+	 */
+	if (time_before(jiffies, this_rq->calc_load_update))
+		return;
 
 	/*
-	 * Its got a race, we don't care...
+	 * We woke inside or after the sample window, this means we're already
+	 * accounted through the nohz accounting, so skip the entire deal and
+	 * sync up for the next window.
 	 */
-	if (atomic_long_read(&calc_load_tasks_idle))
-		delta = atomic_long_xchg(&calc_load_tasks_idle, 0);
+	this_rq->calc_load_update = calc_load_update;
+	if (time_before(jiffies, this_rq->calc_load_update + 10))
+		this_rq->calc_load_update += LOAD_FREQ;
+}
+
+static long calc_load_fold_idle(void)
+{
+	int idx = calc_load_read_idx();
+	long delta = 0;
+
+	if (atomic_long_read(&calc_load_idle[idx]))
+		delta = atomic_long_xchg(&calc_load_idle[idx], 0);
 
 	return delta;
 }
@@ -2334,66 +2702,39 @@ static void calc_global_nohz(void)
 {
 	long delta, active, n;
 
-	/*
-	 * If we crossed a calc_load_update boundary, make sure to fold
-	 * any pending idle changes, the respective CPUs might have
-	 * missed the tick driven calc_load_account_active() update
-	 * due to NO_HZ.
-	 */
-	delta = calc_load_fold_idle();
-	if (delta)
-		atomic_long_add(delta, &calc_load_tasks);
-
-	/*
-	 * It could be the one fold was all it took, we done!
-	 */
-	if (time_before(jiffies, calc_load_update + 10))
-		return;
-
-	/*
-	 * Catch-up, fold however many we are behind still
-	 */
-	delta = jiffies - calc_load_update - 10;
-	n = 1 + (delta / LOAD_FREQ);
+	if (!time_before(jiffies, calc_load_update + 10)) {
+		/*
+		 * Catch-up, fold however many we are behind still
+		 */
+		delta = jiffies - calc_load_update - 10;
+		n = 1 + (delta / LOAD_FREQ);
 
-	active = atomic_long_read(&calc_load_tasks);
-	active = active > 0 ? active * FIXED_1 : 0;
+		active = atomic_long_read(&calc_load_tasks);
+		active = active > 0 ? active * FIXED_1 : 0;
 
-	avenrun[0] = calc_load_n(avenrun[0], EXP_1, active, n);
-	avenrun[1] = calc_load_n(avenrun[1], EXP_5, active, n);
-	avenrun[2] = calc_load_n(avenrun[2], EXP_15, active, n);
+		avenrun[0] = calc_load_n(avenrun[0], EXP_1, active, n);
+		avenrun[1] = calc_load_n(avenrun[1], EXP_5, active, n);
+		avenrun[2] = calc_load_n(avenrun[2], EXP_15, active, n);
 
-	calc_load_update += n * LOAD_FREQ;
-}
-#else
-void calc_load_account_idle(struct rq *this_rq)
-{
-}
+		calc_load_update += n * LOAD_FREQ;
+	}
 
-static inline long calc_load_fold_idle(void)
-{
-	return 0;
+	/*
+	 * Flip the idle index...
+	 *
+	 * Make sure we first write the new time then flip the index, so that
+	 * calc_load_write_idx() will see the new time when it reads the new
+	 * index, this avoids a double flip messing things up.
+	 */
+	smp_wmb();
+	calc_load_idx++;
 }
+#else /* !CONFIG_NO_HZ */
 
-static void calc_global_nohz(void)
-{
-}
-#endif
+static inline long calc_load_fold_idle(void) { return 0; }
+static inline void calc_global_nohz(void) { }
 
-/**
- * get_avenrun - get the load average array
- * @loads:	pointer to dest load array
- * @offset:	offset to add
- * @shift:	shift count to shift the result left
- *
- * These values are estimates at best, so no need for locking.
- */
-void get_avenrun(unsigned long *loads, unsigned long offset, int shift)
-{
-	loads[0] = (avenrun[0] + offset) << shift;
-	loads[1] = (avenrun[1] + offset) << shift;
-	loads[2] = (avenrun[2] + offset) << shift;
-}
+#endif /* CONFIG_NO_HZ */
 
 /*
  * calc_load - update the avenrun load estimates 10 ticks after the
@@ -2401,11 +2742,18 @@ void get_avenrun(unsigned long *loads, unsigned long offset, int shift)
  */
 void calc_global_load(unsigned long ticks)
 {
-	long active;
+	long active, delta;
 
 	if (time_before(jiffies, calc_load_update + 10))
 		return;
 
+	/*
+	 * Fold the 'old' idle-delta to include all NO_HZ cpus.
+	 */
+	delta = calc_load_fold_idle();
+	if (delta)
+		atomic_long_add(delta, &calc_load_tasks);
+
 	active = atomic_long_read(&calc_load_tasks);
 	active = active > 0 ? active * FIXED_1 : 0;
 
@@ -2416,12 +2764,7 @@ void calc_global_load(unsigned long ticks)
 	calc_load_update += LOAD_FREQ;
 
 	/*
-	 * Account one period with whatever state we found before
-	 * folding in the nohz state and ageing the entire idle period.
-	 *
-	 * This avoids loosing a sample when we go idle between 
-	 * calc_load_account_active() (10 ticks ago) and now and thus
-	 * under-accounting.
+	 * In case we idled for multiple LOAD_FREQ intervals, catch up in bulk.
 	 */
 	calc_global_nohz();
 }
@@ -2438,7 +2781,6 @@ static void calc_load_account_active(struct rq *this_rq)
 		return;
 
 	delta  = calc_load_fold_active(this_rq);
-	delta += calc_load_fold_idle();
 	if (delta)
 		atomic_long_add(delta, &calc_load_tasks);
 
@@ -2446,6 +2788,10 @@ static void calc_load_account_active(struct rq *this_rq)
 }
 
 /*
+ * End of global load-average stuff
+ */
+
+/*
  * The exact cpuload at various idx values, calculated at every tick would be
  * load = (2^idx - 1) / 2^idx * load + 1 / 2^idx * cur_load
  *
@@ -2517,22 +2863,13 @@ decay_load_missed(unsigned long load, unsigned long missed_updates, int idx)
  * scheduler tick (TICK_NSEC). With tickless idle this will not be called
  * every tick. We fix it up based on jiffies.
  */
-void update_cpu_load(struct rq *this_rq)
+static void __update_cpu_load(struct rq *this_rq, unsigned long this_load,
+			      unsigned long pending_updates)
 {
-	unsigned long this_load = this_rq->load.weight;
-	unsigned long curr_jiffies = jiffies;
-	unsigned long pending_updates;
 	int i, scale;
 
 	this_rq->nr_load_updates++;
 
-	/* Avoid repeated calls on same jiffy, when moving in and out of idle */
-	if (curr_jiffies == this_rq->last_load_update_tick)
-		return;
-
-	pending_updates = curr_jiffies - this_rq->last_load_update_tick;
-	this_rq->last_load_update_tick = curr_jiffies;
-
 	/* Update our load: */
 	this_rq->cpu_load[0] = this_load; /* Fasttrack for idx 0 */
 	for (i = 1, scale = 2; i < CPU_LOAD_IDX_MAX; i++, scale += scale) {
@@ -2557,9 +2894,78 @@ void update_cpu_load(struct rq *this_rq)
 	sched_avg_update(this_rq);
 }
 
+#ifdef CONFIG_NO_HZ
+/*
+ * There is no sane way to deal with nohz on smp when using jiffies because the
+ * cpu doing the jiffies update might drift wrt the cpu doing the jiffy reading
+ * causing off-by-one errors in observed deltas; {0,2} instead of {1,1}.
+ *
+ * Therefore we cannot use the delta approach from the regular tick since that
+ * would seriously skew the load calculation. However we'll make do for those
+ * updates happening while idle (nohz_idle_balance) or coming out of idle
+ * (tick_nohz_idle_exit).
+ *
+ * This means we might still be one tick off for nohz periods.
+ */
+
+/*
+ * Called from nohz_idle_balance() to update the load ratings before doing the
+ * idle balance.
+ */
+void update_idle_cpu_load(struct rq *this_rq)
+{
+	unsigned long curr_jiffies = ACCESS_ONCE(jiffies);
+	unsigned long load = this_rq->load.weight;
+	unsigned long pending_updates;
+
+	/*
+	 * bail if there's load or we're actually up-to-date.
+	 */
+	if (load || curr_jiffies == this_rq->last_load_update_tick)
+		return;
+
+	pending_updates = curr_jiffies - this_rq->last_load_update_tick;
+	this_rq->last_load_update_tick = curr_jiffies;
+
+	__update_cpu_load(this_rq, load, pending_updates);
+}
+
+/*
+ * Called from tick_nohz_idle_exit() -- try and fix up the ticks we missed.
+ */
+void update_cpu_load_nohz(void)
+{
+	struct rq *this_rq = this_rq();
+	unsigned long curr_jiffies = ACCESS_ONCE(jiffies);
+	unsigned long pending_updates;
+
+	if (curr_jiffies == this_rq->last_load_update_tick)
+		return;
+
+	raw_spin_lock(&this_rq->lock);
+	pending_updates = curr_jiffies - this_rq->last_load_update_tick;
+	if (pending_updates) {
+		this_rq->last_load_update_tick = curr_jiffies;
+		/*
+		 * We were idle, this means load 0, the current load might be
+		 * !0 due to remote wakeups and the sort.
+		 */
+		__update_cpu_load(this_rq, 0, pending_updates);
+	}
+	raw_spin_unlock(&this_rq->lock);
+}
+#endif /* CONFIG_NO_HZ */
+
+/*
+ * Called from scheduler_tick()
+ */
 static void update_cpu_load_active(struct rq *this_rq)
 {
-	update_cpu_load(this_rq);
+	/*
+	 * See the mess around update_idle_cpu_load() / update_cpu_load_nohz().
+	 */
+	this_rq->last_load_update_tick = jiffies;
+	__update_cpu_load(this_rq, this_rq->load.weight, 1);
 
 	calc_load_account_active(this_rq);
 }
@@ -3167,6 +3573,7 @@ static inline void schedule_debug(struct task_struct *prev)
 
 static void put_prev_task(struct rq *rq, struct task_struct *prev)
 {
+	update_task_ravg(prev, rq, 1);
 	if (prev->on_rq || rq->skip_clock_update < 0)
 		update_rq_clock(rq);
 	prev->sched_class->put_prev_task(rq, prev);
@@ -3187,14 +3594,18 @@ pick_next_task(struct rq *rq)
 	 */
 	if (likely(rq->nr_running == rq->cfs.h_nr_running)) {
 		p = fair_sched_class.pick_next_task(rq);
-		if (likely(p))
+		if (likely(p)) {
+			update_task_ravg(p, rq, 1);
 			return p;
+		}
 	}
 
 	for_each_class(class) {
 		p = class->pick_next_task(rq);
-		if (p)
+		if (p) {
+			update_task_ravg(p, rq, 1);
 			return p;
+		}
 	}
 
 	BUG(); /* the idle class will always have a runnable task */
@@ -3222,6 +3633,12 @@ need_resched:
 	if (sched_feat(HRTICK))
 		hrtick_clear(rq);
 
+	/*
+	 * Make sure that signal_pending_state()->signal_pending() below
+	 * can't be reordered with __set_current_state(TASK_INTERRUPTIBLE)
+	 * done by the caller to avoid the race with signal_wake_up().
+	 */
+	smp_mb__before_spinlock();
 	raw_spin_lock_irq(&rq->lock);
 
 	switch_count = &prev->nivcsw;
@@ -3315,51 +3732,6 @@ void __sched schedule_preempt_disabled(void)
 	preempt_disable();
 }
 
-#ifdef CONFIG_MUTEX_SPIN_ON_OWNER
-
-static inline bool owner_running(struct mutex *lock, struct task_struct *owner)
-{
-	if (lock->owner != owner)
-		return false;
-
-	/*
-	 * Ensure we emit the owner->on_cpu, dereference _after_ checking
-	 * lock->owner still matches owner, if that fails, owner might
-	 * point to free()d memory, if it still matches, the rcu_read_lock()
-	 * ensures the memory stays valid.
-	 */
-	barrier();
-
-	return owner->on_cpu;
-}
-
-/*
- * Look out! "owner" is an entirely speculative pointer
- * access and not reliable.
- */
-int mutex_spin_on_owner(struct mutex *lock, struct task_struct *owner)
-{
-	if (!sched_feat(OWNER_SPIN))
-		return 0;
-
-	rcu_read_lock();
-	while (owner_running(lock, owner)) {
-		if (need_resched())
-			break;
-
-		arch_mutex_cpu_relax();
-	}
-	rcu_read_unlock();
-
-	/*
-	 * We break out the loop above on need_resched() and when the
-	 * owner changed, which is a sign for heavy contention. Return
-	 * success only when lock->owner is NULL.
-	 */
-	return lock->owner == NULL;
-}
-#endif
-
 #ifdef CONFIG_PREEMPT
 /*
  * this is the entry point to schedule() from in-kernel preemption
@@ -4405,13 +4777,11 @@ long sched_setaffinity(pid_t pid, const struct cpumask *in_mask)
 	struct task_struct *p;
 	int retval;
 
-	get_online_cpus();
 	rcu_read_lock();
 
 	p = find_process_by_pid(pid);
 	if (!p) {
 		rcu_read_unlock();
-		put_online_cpus();
 		return -ESRCH;
 	}
 
@@ -4458,7 +4828,6 @@ out_free_cpus_allowed:
 	free_cpumask_var(cpus_allowed);
 out_put_task:
 	put_task_struct(p);
-	put_online_cpus();
 	return retval;
 }
 
@@ -4501,7 +4870,6 @@ long sched_getaffinity(pid_t pid, struct cpumask *mask)
 	unsigned long flags;
 	int retval;
 
-	get_online_cpus();
 	rcu_read_lock();
 
 	retval = -ESRCH;
@@ -4514,12 +4882,11 @@ long sched_getaffinity(pid_t pid, struct cpumask *mask)
 		goto out_unlock;
 
 	raw_spin_lock_irqsave(&p->pi_lock, flags);
-	cpumask_and(mask, &p->cpus_allowed, cpu_online_mask);
+	cpumask_and(mask, &p->cpus_allowed, cpu_active_mask);
 	raw_spin_unlock_irqrestore(&p->pi_lock, flags);
 
 out_unlock:
 	rcu_read_unlock();
-	put_online_cpus();
 
 	return retval;
 }
@@ -5006,7 +5373,7 @@ void do_set_cpus_allowed(struct task_struct *p, const struct cpumask *new_mask)
 		p->sched_class->set_cpus_allowed(p, new_mask);
 
 	cpumask_copy(&p->cpus_allowed, new_mask);
-	p->rt.nr_cpus_allowed = cpumask_weight(new_mask);
+	p->nr_cpus_allowed = cpumask_weight(new_mask);
 }
 
 /*
@@ -5124,9 +5491,15 @@ done:
 fail:
 	double_rq_unlock(rq_src, rq_dest);
 	raw_spin_unlock(&p->pi_lock);
-	if (moved && task_notify_on_migrate(p))
+	if (moved && task_notify_on_migrate(p)) {
+		struct migration_notify_data mnd;
+
+		mnd.src_cpu = src_cpu;
+		mnd.dest_cpu = dest_cpu;
+		mnd.load = pct_task_load(p);
 		atomic_notifier_call_chain(&migration_notifier_head,
-					   dest_cpu, (void *)src_cpu);
+					   0, (void *)&mnd);
+	}
 	return ret;
 }
 
@@ -5167,27 +5540,17 @@ void idle_task_exit(void)
 }
 
 /*
- * While a dead CPU has no uninterruptible tasks queued at this point,
- * it might still have a nonzero ->nr_uninterruptible counter, because
- * for performance reasons the counter is not stricly tracking tasks to
- * their home CPUs. So we just add the counter to another CPU's counter,
- * to keep the global sum constant after CPU-down:
- */
-static void migrate_nr_uninterruptible(struct rq *rq_src)
-{
-	struct rq *rq_dest = cpu_rq(cpumask_any(cpu_active_mask));
-
-	rq_dest->nr_uninterruptible += rq_src->nr_uninterruptible;
-	rq_src->nr_uninterruptible = 0;
-}
-
-/*
- * remove the tasks which were accounted by rq from calc_load_tasks.
+ * Since this CPU is going 'away' for a while, fold any nr_active delta
+ * we might have. Assumes we're called after migrate_tasks() so that the
+ * nr_active count is stable.
+ *
+ * Also see the comment "Global load-average calculations".
  */
-static void calc_global_load_remove(struct rq *rq)
+static void calc_load_migrate(struct rq *rq)
 {
-	atomic_long_sub(rq->calc_load_active, &calc_load_tasks);
-	rq->calc_load_active = 0;
+	long delta = calc_load_fold_active(rq);
+	if (delta)
+		atomic_long_add(delta, &calc_load_tasks);
 }
 
 /*
@@ -5477,9 +5840,10 @@ migration_call(struct notifier_block *nfb, unsigned long action, void *hcpu)
 		migrate_tasks(cpu);
 		BUG_ON(rq->nr_running != 1); /* the migration thread */
 		raw_spin_unlock_irqrestore(&rq->lock, flags);
+		break;
 
-		migrate_nr_uninterruptible(rq);
-		calc_global_load_remove(rq);
+	case CPU_DEAD:
+		calc_load_migrate(rq);
 		break;
 #endif
 	}
@@ -5503,7 +5867,6 @@ static int __cpuinit sched_cpu_active(struct notifier_block *nfb,
 				      unsigned long action, void *hcpu)
 {
 	switch (action & ~CPU_TASKS_FROZEN) {
-	case CPU_STARTING:
 	case CPU_DOWN_FAILED:
 		set_cpu_active((long)hcpu, true);
 		return NOTIFY_OK;
@@ -6052,8 +6415,6 @@ static const struct cpumask *cpu_cpu_mask(int cpu)
 	return cpumask_of_node(cpu_to_node(cpu));
 }
 
-int sched_smt_power_savings = 0, sched_mc_power_savings = 0;
-
 struct sd_data {
 	struct sched_domain **__percpu sd;
 	struct sched_group **__percpu sg;
@@ -6775,125 +7136,66 @@ match2:
 	mutex_unlock(&sched_domains_mutex);
 }
 
-#if defined(CONFIG_SCHED_MC) || defined(CONFIG_SCHED_SMT)
-static void reinit_sched_domains(void)
-{
-	get_online_cpus();
-
-	/* Destroy domains first to force the rebuild */
-	partition_sched_domains(0, NULL, NULL);
-
-	rebuild_sched_domains();
-	put_online_cpus();
-}
-
-static ssize_t sched_power_savings_store(const char *buf, size_t count, int smt)
-{
-	unsigned int level = 0;
-
-	if (sscanf(buf, "%u", &level) != 1)
-		return -EINVAL;
-
-	/*
-	 * level is always be positive so don't check for
-	 * level < POWERSAVINGS_BALANCE_NONE which is 0
-	 * What happens on 0 or 1 byte write,
-	 * need to check for count as well?
-	 */
-
-	if (level >= MAX_POWERSAVINGS_BALANCE_LEVELS)
-		return -EINVAL;
-
-	if (smt)
-		sched_smt_power_savings = level;
-	else
-		sched_mc_power_savings = level;
-
-	reinit_sched_domains();
-
-	return count;
-}
-
-#ifdef CONFIG_SCHED_MC
-static ssize_t sched_mc_power_savings_show(struct device *dev,
-					   struct device_attribute *attr,
-					   char *buf)
-{
-	return sprintf(buf, "%u\n", sched_mc_power_savings);
-}
-static ssize_t sched_mc_power_savings_store(struct device *dev,
-					    struct device_attribute *attr,
-					    const char *buf, size_t count)
-{
-	return sched_power_savings_store(buf, count, 0);
-}
-static DEVICE_ATTR(sched_mc_power_savings, 0644,
-		   sched_mc_power_savings_show,
-		   sched_mc_power_savings_store);
-#endif
-
-#ifdef CONFIG_SCHED_SMT
-static ssize_t sched_smt_power_savings_show(struct device *dev,
-					    struct device_attribute *attr,
-					    char *buf)
-{
-	return sprintf(buf, "%u\n", sched_smt_power_savings);
-}
-static ssize_t sched_smt_power_savings_store(struct device *dev,
-					    struct device_attribute *attr,
-					     const char *buf, size_t count)
-{
-	return sched_power_savings_store(buf, count, 1);
-}
-static DEVICE_ATTR(sched_smt_power_savings, 0644,
-		   sched_smt_power_savings_show,
-		   sched_smt_power_savings_store);
-#endif
-
-int __init sched_create_sysfs_power_savings_entries(struct device *dev)
-{
-	int err = 0;
-
-#ifdef CONFIG_SCHED_SMT
-	if (smt_capable())
-		err = device_create_file(dev, &dev_attr_sched_smt_power_savings);
-#endif
-#ifdef CONFIG_SCHED_MC
-	if (!err && mc_capable())
-		err = device_create_file(dev, &dev_attr_sched_mc_power_savings);
-#endif
-	return err;
-}
-#endif /* CONFIG_SCHED_MC || CONFIG_SCHED_SMT */
+static int num_cpus_frozen;	/* used to mark begin/end of suspend/resume */
 
 /*
  * Update cpusets according to cpu_active mask.  If cpusets are
  * disabled, cpuset_update_active_cpus() becomes a simple wrapper
  * around partition_sched_domains().
+ *
+ * If we come here as part of a suspend/resume, don't touch cpusets because we
+ * want to restore it back to its original state upon resume anyway.
  */
 static int cpuset_cpu_active(struct notifier_block *nfb, unsigned long action,
 			     void *hcpu)
 {
-	switch (action & ~CPU_TASKS_FROZEN) {
+	switch (action) {
+	case CPU_ONLINE_FROZEN:
+	case CPU_DOWN_FAILED_FROZEN:
+
+		/*
+		 * num_cpus_frozen tracks how many CPUs are involved in suspend
+		 * resume sequence. As long as this is not the last online
+		 * operation in the resume sequence, just build a single sched
+		 * domain, ignoring cpusets.
+		 */
+		num_cpus_frozen--;
+		if (likely(num_cpus_frozen)) {
+			partition_sched_domains(1, NULL, NULL);
+			break;
+		}
+
+		/*
+		 * This is the last CPU online operation. So fall through and
+		 * restore the original sched domains by considering the
+		 * cpuset configurations.
+		 */
+
 	case CPU_ONLINE:
 	case CPU_DOWN_FAILED:
 		cpuset_update_active_cpus();
-		return NOTIFY_OK;
+		break;
 	default:
 		return NOTIFY_DONE;
 	}
+	return NOTIFY_OK;
 }
 
 static int cpuset_cpu_inactive(struct notifier_block *nfb, unsigned long action,
 			       void *hcpu)
 {
-	switch (action & ~CPU_TASKS_FROZEN) {
+	switch (action) {
 	case CPU_DOWN_PREPARE:
 		cpuset_update_active_cpus();
-		return NOTIFY_OK;
+		break;
+	case CPU_DOWN_PREPARE_FROZEN:
+		num_cpus_frozen++;
+		partition_sched_domains(1, NULL, NULL);
+		break;
 	default:
 		return NOTIFY_DONE;
 	}
+	return NOTIFY_OK;
 }
 
 void __init sched_init_smp(void)
@@ -6903,21 +7205,16 @@ void __init sched_init_smp(void)
 	alloc_cpumask_var(&non_isolated_cpus, GFP_KERNEL);
 	alloc_cpumask_var(&fallback_doms, GFP_KERNEL);
 
-	get_online_cpus();
 	mutex_lock(&sched_domains_mutex);
 	init_sched_domains(cpu_active_mask);
 	cpumask_andnot(non_isolated_cpus, cpu_possible_mask, cpu_isolated_map);
 	if (cpumask_empty(non_isolated_cpus))
 		cpumask_set_cpu(smp_processor_id(), non_isolated_cpus);
 	mutex_unlock(&sched_domains_mutex);
-	put_online_cpus();
 
 	hotcpu_notifier(cpuset_cpu_active, CPU_PRI_CPUSET_ACTIVE);
 	hotcpu_notifier(cpuset_cpu_inactive, CPU_PRI_CPUSET_INACTIVE);
 
-	/* RT runtime code needs to handle some hotplug events */
-	hotcpu_notifier(update_runtime, 0);
-
 	init_hrtick();
 
 	/* Move init over to a non-isolated CPU */
@@ -6935,6 +7232,64 @@ void __init sched_init_smp(void)
 }
 #endif /* CONFIG_SMP */
 
+static int cpufreq_notifier_policy(struct notifier_block *nb,
+		unsigned long val, void *data)
+{
+	struct cpufreq_policy *policy = (struct cpufreq_policy *)data;
+	int i;
+
+	if (val != CPUFREQ_NOTIFY)
+		return 0;
+
+	for_each_cpu(i, policy->related_cpus) {
+		cpu_rq(i)->min_freq = policy->min;
+		cpu_rq(i)->max_freq = policy->max;
+	}
+
+	max_possible_freq = max(max_possible_freq, policy->cpuinfo.max_freq);
+
+	return 0;
+}
+
+static int cpufreq_notifier_trans(struct notifier_block *nb,
+		unsigned long val, void *data)
+{
+	struct cpufreq_freqs *freq = (struct cpufreq_freqs *)data;
+	unsigned int cpu = freq->cpu, new_freq = freq->new;
+
+	if (val != CPUFREQ_POSTCHANGE)
+		return 0;
+
+	BUG_ON(!new_freq);
+	cpu_rq(cpu)->cur_freq = new_freq;
+
+	return 0;
+}
+
+static struct notifier_block notifier_policy_block = {
+	.notifier_call = cpufreq_notifier_policy
+};
+
+static struct notifier_block notifier_trans_block = {
+	.notifier_call = cpufreq_notifier_trans
+};
+
+static int register_sched_callback(void)
+{
+	int ret;
+
+	ret = cpufreq_register_notifier(&notifier_policy_block,
+						CPUFREQ_POLICY_NOTIFIER);
+
+	if (!ret)
+		ret = cpufreq_register_notifier(&notifier_trans_block,
+						CPUFREQ_TRANSITION_NOTIFIER);
+
+	return 0;
+}
+
+core_initcall(register_sched_callback);
+
 const_debug unsigned int sysctl_timer_migration = 1;
 
 int in_sched_functions(unsigned long addr)
@@ -6949,7 +7304,7 @@ struct task_group root_task_group;
 LIST_HEAD(task_groups);
 #endif
 
-DECLARE_PER_CPU(cpumask_var_t, load_balance_tmpmask);
+DECLARE_PER_CPU(cpumask_var_t, load_balance_mask);
 
 void __init sched_init(void)
 {
@@ -6986,7 +7341,7 @@ void __init sched_init(void)
 #endif /* CONFIG_RT_GROUP_SCHED */
 #ifdef CONFIG_CPUMASK_OFFSTACK
 		for_each_possible_cpu(i) {
-			per_cpu(load_balance_tmpmask, i) = (void *)ptr;
+			per_cpu(load_balance_mask, i) = (void *)ptr;
 			ptr += cpumask_size();
 		}
 #endif /* CONFIG_CPUMASK_OFFSTACK */
@@ -7077,6 +7432,10 @@ void __init sched_init(void)
 		rq->online = 0;
 		rq->idle_stamp = 0;
 		rq->avg_idle = 2*sysctl_sched_migration_cost;
+		rq->cur_freq = 0;
+		rq->max_freq = 0;
+		rq->min_freq = 0;
+		rq->cumulative_runnable_avg = 0;
 
 		INIT_LIST_HEAD(&rq->cfs_tasks);
 
@@ -7840,7 +8199,12 @@ static int tg_set_cfs_bandwidth(struct task_group *tg, u64 period, u64 quota)
 
 	runtime_enabled = quota != RUNTIME_INF;
 	runtime_was_enabled = cfs_b->quota != RUNTIME_INF;
-	account_cfs_bandwidth_used(runtime_enabled, runtime_was_enabled);
+	/*
+	 * If we need to toggle cfs_bandwidth_used, off->on must occur
+	 * before making related changes, and on->off must occur afterwards
+	 */
+	if (runtime_enabled && !runtime_was_enabled)
+		cfs_bandwidth_usage_inc();
 	raw_spin_lock_irq(&cfs_b->lock);
 	cfs_b->period = ns_to_ktime(period);
 	cfs_b->quota = quota;
@@ -7866,6 +8230,8 @@ static int tg_set_cfs_bandwidth(struct task_group *tg, u64 period, u64 quota)
 			unthrottle_cfs_rq(cfs_rq);
 		raw_spin_unlock_irq(&rq->lock);
 	}
+	if (runtime_was_enabled && !runtime_enabled)
+		cfs_bandwidth_usage_dec();
 out_unlock:
 	mutex_unlock(&cfs_constraints_mutex);
 
diff --git a/kernel/sched/debug.c b/kernel/sched/debug.c
index c00829e..0ee5991 100644
--- a/kernel/sched/debug.c
+++ b/kernel/sched/debug.c
@@ -61,14 +61,20 @@ static unsigned long nsec_low(unsigned long long nsec)
 static void print_cfs_group_stats(struct seq_file *m, int cpu, struct task_group *tg)
 {
 	struct sched_entity *se = tg->se[cpu];
-	if (!se)
-		return;
 
 #define P(F) \
 	SEQ_printf(m, "  .%-30s: %lld\n", #F, (long long)F)
 #define PN(F) \
 	SEQ_printf(m, "  .%-30s: %lld.%06ld\n", #F, SPLIT_NS((long long)F))
 
+	if (!se) {
+		struct sched_avg *avg = &cpu_rq(cpu)->avg;
+		P(avg->runnable_avg_sum);
+		P(avg->runnable_avg_period);
+		return;
+	}
+
+
 	PN(se->exec_start);
 	PN(se->vruntime);
 	PN(se->sum_exec_runtime);
@@ -85,6 +91,12 @@ static void print_cfs_group_stats(struct seq_file *m, int cpu, struct task_group
 	P(se->statistics.wait_count);
 #endif
 	P(se->load.weight);
+#ifdef CONFIG_SMP
+	P(se->avg.runnable_avg_sum);
+	P(se->avg.runnable_avg_period);
+	P(se->avg.load_avg_contrib);
+	P(se->avg.decay_count);
+#endif
 #undef PN
 #undef P
 }
@@ -202,18 +214,30 @@ void print_cfs_rq(struct seq_file *m, int cpu, struct cfs_rq *cfs_rq)
 			SPLIT_NS(spread0));
 	SEQ_printf(m, "  .%-30s: %d\n", "nr_spread_over",
 			cfs_rq->nr_spread_over);
-	SEQ_printf(m, "  .%-30s: %ld\n", "nr_running", cfs_rq->nr_running);
+	SEQ_printf(m, "  .%-30s: %d\n", "nr_running", cfs_rq->nr_running);
 	SEQ_printf(m, "  .%-30s: %ld\n", "load", cfs_rq->load.weight);
 #ifdef CONFIG_FAIR_GROUP_SCHED
 #ifdef CONFIG_SMP
-	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", "load_avg",
-			SPLIT_NS(cfs_rq->load_avg));
-	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", "load_period",
-			SPLIT_NS(cfs_rq->load_period));
-	SEQ_printf(m, "  .%-30s: %ld\n", "load_contrib",
-			cfs_rq->load_contribution);
-	SEQ_printf(m, "  .%-30s: %d\n", "load_tg",
-			atomic_read(&cfs_rq->tg->load_weight));
+	SEQ_printf(m, "  .%-30s: %lld\n", "runnable_load_avg",
+			cfs_rq->runnable_load_avg);
+	SEQ_printf(m, "  .%-30s: %lld\n", "blocked_load_avg",
+			cfs_rq->blocked_load_avg);
+	SEQ_printf(m, "  .%-30s: %lld\n", "tg_load_avg",
+			atomic64_read(&cfs_rq->tg->load_avg));
+	SEQ_printf(m, "  .%-30s: %lld\n", "tg_load_contrib",
+			cfs_rq->tg_load_contrib);
+	SEQ_printf(m, "  .%-30s: %d\n", "tg_runnable_contrib",
+			cfs_rq->tg_runnable_contrib);
+	SEQ_printf(m, "  .%-30s: %d\n", "tg->runnable_avg",
+			atomic_read(&cfs_rq->tg->runnable_avg));
+#endif
+#ifdef CONFIG_CFS_BANDWIDTH
+	SEQ_printf(m, "  .%-30s: %d\n", "tg->cfs_bandwidth.timer_active",
+			cfs_rq->tg->cfs_bandwidth.timer_active);
+	SEQ_printf(m, "  .%-30s: %d\n", "throttled",
+			cfs_rq->throttled);
+	SEQ_printf(m, "  .%-30s: %d\n", "throttle_count",
+			cfs_rq->throttle_count);
 #endif
 
 	print_cfs_group_stats(m, cpu, cfs_rq->tg);
@@ -260,8 +284,14 @@ static void print_cpu(struct seq_file *m, int cpu)
 	SEQ_printf(m, "\ncpu#%d\n", cpu);
 #endif
 
-#define P(x) \
-	SEQ_printf(m, "  .%-30s: %Ld\n", #x, (long long)(rq->x))
+#define P(x)								\
+do {									\
+	if (sizeof(rq->x) == 4)						\
+		SEQ_printf(m, "  .%-30s: %ld\n", #x, (long)(rq->x));	\
+	else								\
+		SEQ_printf(m, "  .%-30s: %Ld\n", #x, (long long)(rq->x));\
+} while (0)
+
 #define PN(x) \
 	SEQ_printf(m, "  .%-30s: %Ld.%06ld\n", #x, SPLIT_NS(rq->x))
 
@@ -457,6 +487,11 @@ void proc_sched_show_task(struct task_struct *p, struct seq_file *m)
 	P(se.statistics.nr_wakeups_passive);
 	P(se.statistics.nr_wakeups_idle);
 
+#if defined(CONFIG_SMP) && defined(CONFIG_FAIR_GROUP_SCHED)
+	P(se.avg.runnable_avg_sum);
+	P(se.avg.runnable_avg_period);
+#endif
+
 	{
 		u64 avg_atom, avg_per_cpu;
 
diff --git a/kernel/sched/fair.c b/kernel/sched/fair.c
index fb697c7..c51e3f7 100644
--- a/kernel/sched/fair.c
+++ b/kernel/sched/fair.c
@@ -77,6 +77,14 @@ static unsigned int sched_nr_latency = 8;
 unsigned int sysctl_sched_child_runs_first __read_mostly;
 
 /*
+ * Controls whether, when SD_SHARE_PKG_RESOURCES is on, if all
+ * tasks go to idle CPUs when woken. If this is off, note that the
+ * per-task flag PF_WAKE_ON_IDLE can still cause a task to go to an
+ * idle CPU upon being woken.
+ */
+unsigned int __read_mostly sysctl_sched_wake_to_idle;
+
+/*
  * SCHED_OTHER wake-up granularity.
  * (default: 1 msec * (1 + ilog(ncpus)), units: nanoseconds)
  *
@@ -259,6 +267,9 @@ static inline struct cfs_rq *group_cfs_rq(struct sched_entity *grp)
 	return grp->my_q;
 }
 
+static void update_cfs_rq_blocked_load(struct cfs_rq *cfs_rq,
+				       int force_update);
+
 static inline void list_add_leaf_cfs_rq(struct cfs_rq *cfs_rq)
 {
 	if (!cfs_rq->on_list) {
@@ -278,6 +289,8 @@ static inline void list_add_leaf_cfs_rq(struct cfs_rq *cfs_rq)
 		}
 
 		cfs_rq->on_list = 1;
+		/* We should have no load, but we need to update last_decay. */
+		update_cfs_rq_blocked_load(cfs_rq, 0);
 	}
 }
 
@@ -653,9 +666,6 @@ static u64 sched_vslice(struct cfs_rq *cfs_rq, struct sched_entity *se)
 	return calc_delta_fair(sched_slice(cfs_rq, se), se);
 }
 
-static void update_cfs_load(struct cfs_rq *cfs_rq, int global_update);
-static void update_cfs_shares(struct cfs_rq *cfs_rq);
-
 /*
  * Update the current task's runtime statistics. Skip current tasks that
  * are not in our scheduling class.
@@ -675,10 +685,6 @@ __update_curr(struct cfs_rq *cfs_rq, struct sched_entity *curr,
 
 	curr->vruntime += delta_exec_weighted;
 	update_min_vruntime(cfs_rq);
-
-#if defined CONFIG_SMP && defined CONFIG_FAIR_GROUP_SCHED
-	cfs_rq->load_unacc_exec_time += delta_exec;
-#endif
 }
 
 static void update_curr(struct cfs_rq *cfs_rq)
@@ -801,72 +807,7 @@ account_entity_dequeue(struct cfs_rq *cfs_rq, struct sched_entity *se)
 }
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
-/* we need this in update_cfs_load and load-balance functions below */
-static inline int throttled_hierarchy(struct cfs_rq *cfs_rq);
 # ifdef CONFIG_SMP
-static void update_cfs_rq_load_contribution(struct cfs_rq *cfs_rq,
-					    int global_update)
-{
-	struct task_group *tg = cfs_rq->tg;
-	long load_avg;
-
-	load_avg = div64_u64(cfs_rq->load_avg, cfs_rq->load_period+1);
-	load_avg -= cfs_rq->load_contribution;
-
-	if (global_update || abs(load_avg) > cfs_rq->load_contribution / 8) {
-		atomic_add(load_avg, &tg->load_weight);
-		cfs_rq->load_contribution += load_avg;
-	}
-}
-
-static void update_cfs_load(struct cfs_rq *cfs_rq, int global_update)
-{
-	u64 period = sysctl_sched_shares_window;
-	u64 now, delta;
-	unsigned long load = cfs_rq->load.weight;
-
-	if (cfs_rq->tg == &root_task_group || throttled_hierarchy(cfs_rq))
-		return;
-
-	now = rq_of(cfs_rq)->clock_task;
-	delta = now - cfs_rq->load_stamp;
-
-	/* truncate load history at 4 idle periods */
-	if (cfs_rq->load_stamp > cfs_rq->load_last &&
-	    now - cfs_rq->load_last > 4 * period) {
-		cfs_rq->load_period = 0;
-		cfs_rq->load_avg = 0;
-		delta = period - 1;
-	}
-
-	cfs_rq->load_stamp = now;
-	cfs_rq->load_unacc_exec_time = 0;
-	cfs_rq->load_period += delta;
-	if (load) {
-		cfs_rq->load_last = now;
-		cfs_rq->load_avg += delta * load;
-	}
-
-	/* consider updating load contribution on each fold or truncate */
-	if (global_update || cfs_rq->load_period > period
-	    || !cfs_rq->load_period)
-		update_cfs_rq_load_contribution(cfs_rq, global_update);
-
-	while (cfs_rq->load_period > period) {
-		/*
-		 * Inline assembly required to prevent the compiler
-		 * optimising this loop into a divmod call.
-		 * See __iter_div_u64_rem() for another example of this.
-		 */
-		asm("" : "+rm" (cfs_rq->load_period));
-		cfs_rq->load_period /= 2;
-		cfs_rq->load_avg /= 2;
-	}
-
-	if (!cfs_rq->curr && !cfs_rq->nr_running && !cfs_rq->load_avg)
-		list_del_leaf_cfs_rq(cfs_rq);
-}
-
 static inline long calc_tg_weight(struct task_group *tg, struct cfs_rq *cfs_rq)
 {
 	long tg_weight;
@@ -876,8 +817,8 @@ static inline long calc_tg_weight(struct task_group *tg, struct cfs_rq *cfs_rq)
 	 * to gain a more accurate current total weight. See
 	 * update_cfs_rq_load_contribution().
 	 */
-	tg_weight = atomic_read(&tg->load_weight);
-	tg_weight -= cfs_rq->load_contribution;
+	tg_weight = atomic64_read(&tg->load_avg);
+	tg_weight -= cfs_rq->tg_load_contrib;
 	tg_weight += cfs_rq->load.weight;
 
 	return tg_weight;
@@ -901,27 +842,11 @@ static long calc_cfs_shares(struct cfs_rq *cfs_rq, struct task_group *tg)
 
 	return shares;
 }
-
-static void update_entity_shares_tick(struct cfs_rq *cfs_rq)
-{
-	if (cfs_rq->load_unacc_exec_time > sysctl_sched_shares_window) {
-		update_cfs_load(cfs_rq, 0);
-		update_cfs_shares(cfs_rq);
-	}
-}
 # else /* CONFIG_SMP */
-static void update_cfs_load(struct cfs_rq *cfs_rq, int global_update)
-{
-}
-
 static inline long calc_cfs_shares(struct cfs_rq *cfs_rq, struct task_group *tg)
 {
 	return tg->shares;
 }
-
-static inline void update_entity_shares_tick(struct cfs_rq *cfs_rq)
-{
-}
 # endif /* CONFIG_SMP */
 static void reweight_entity(struct cfs_rq *cfs_rq, struct sched_entity *se,
 			    unsigned long weight)
@@ -939,6 +864,8 @@ static void reweight_entity(struct cfs_rq *cfs_rq, struct sched_entity *se,
 		account_entity_enqueue(cfs_rq, se);
 }
 
+static inline int throttled_hierarchy(struct cfs_rq *cfs_rq);
+
 static void update_cfs_shares(struct cfs_rq *cfs_rq)
 {
 	struct task_group *tg;
@@ -958,18 +885,531 @@ static void update_cfs_shares(struct cfs_rq *cfs_rq)
 	reweight_entity(cfs_rq_of(se), se, shares);
 }
 #else /* CONFIG_FAIR_GROUP_SCHED */
-static void update_cfs_load(struct cfs_rq *cfs_rq, int global_update)
+static inline void update_cfs_shares(struct cfs_rq *cfs_rq)
 {
 }
+#endif /* CONFIG_FAIR_GROUP_SCHED */
 
-static inline void update_cfs_shares(struct cfs_rq *cfs_rq)
+static inline unsigned int task_load(struct task_struct *p)
 {
+	return p->ravg.demand;
 }
 
-static inline void update_entity_shares_tick(struct cfs_rq *cfs_rq)
+static inline unsigned int max_task_load(void)
 {
+	return sched_ravg_window;
+}
+
+/* Return task demand in percentage scale */
+unsigned int pct_task_load(struct task_struct *p)
+{
+	unsigned int load;
+
+	load = div64_u64((u64)task_load(p) * 100, (u64)max_task_load());
+
+	return load;
+}
+
+void init_new_task_load(struct task_struct *p)
+{
+	int i;
+	u64 wallclock = sched_clock();
+
+	p->ravg.sum			= 0;
+	p->ravg.demand			= 0;
+	p->ravg.window_start		= wallclock;
+	p->ravg.mark_start		= wallclock;
+	for (i = 0; i < RAVG_HIST_SIZE; ++i)
+		p->ravg.sum_history[i] = 0;
+}
+
+/* Only depends on SMP, FAIR_GROUP_SCHED may be removed when useful in lb */
+#if defined(CONFIG_SMP) && defined(CONFIG_FAIR_GROUP_SCHED)
+/*
+ * We choose a half-life close to 1 scheduling period.
+ * Note: The tables below are dependent on this value.
+ */
+#define LOAD_AVG_PERIOD 32
+#define LOAD_AVG_MAX 47742 /* maximum possible load avg */
+#define LOAD_AVG_MAX_N 345 /* number of full periods to produce LOAD_MAX_AVG */
+
+/* Precomputed fixed inverse multiplies for multiplication by y^n */
+static const u32 runnable_avg_yN_inv[] = {
+	0xffffffff, 0xfa83b2da, 0xf5257d14, 0xefe4b99a, 0xeac0c6e6, 0xe5b906e6,
+	0xe0ccdeeb, 0xdbfbb796, 0xd744fcc9, 0xd2a81d91, 0xce248c14, 0xc9b9bd85,
+	0xc5672a10, 0xc12c4cc9, 0xbd08a39e, 0xb8fbaf46, 0xb504f333, 0xb123f581,
+	0xad583ee9, 0xa9a15ab4, 0xa5fed6a9, 0xa2704302, 0x9ef5325f, 0x9b8d39b9,
+	0x9837f050, 0x94f4efa8, 0x91c3d373, 0x8ea4398a, 0x8b95c1e3, 0x88980e80,
+	0x85aac367, 0x82cd8698,
+};
+
+/*
+ * Precomputed \Sum y^k { 1<=k<=n }.  These are floor(true_value) to prevent
+ * over-estimates when re-combining.
+ */
+static const u32 runnable_avg_yN_sum[] = {
+	    0, 1002, 1982, 2941, 3880, 4798, 5697, 6576, 7437, 8279, 9103,
+	 9909,10698,11470,12226,12966,13690,14398,15091,15769,16433,17082,
+	17718,18340,18949,19545,20128,20698,21256,21802,22336,22859,23371,
+};
+
+/*
+ * Approximate:
+ *   val * y^n,    where y^32 ~= 0.5 (~1 scheduling period)
+ */
+static __always_inline u64 decay_load(u64 val, u64 n)
+{
+	unsigned int local_n;
+
+	if (!n)
+		return val;
+	else if (unlikely(n > LOAD_AVG_PERIOD * 63))
+		return 0;
+
+	/* after bounds checking we can collapse to 32-bit */
+	local_n = n;
+
+	/*
+	 * As y^PERIOD = 1/2, we can combine
+	 *    y^n = 1/2^(n/PERIOD) * k^(n%PERIOD)
+	 * With a look-up table which covers k^n (n<PERIOD)
+	 *
+	 * To achieve constant time decay_load.
+	 */
+	if (unlikely(local_n >= LOAD_AVG_PERIOD)) {
+		val >>= local_n / LOAD_AVG_PERIOD;
+		local_n %= LOAD_AVG_PERIOD;
+	}
+
+	val *= runnable_avg_yN_inv[local_n];
+	/* We don't use SRR here since we always want to round down. */
+	return val >> 32;
+}
+
+/*
+ * For updates fully spanning n periods, the contribution to runnable
+ * average will be: \Sum 1024*y^n
+ *
+ * We can compute this reasonably efficiently by combining:
+ *   y^PERIOD = 1/2 with precomputed \Sum 1024*y^n {for  n <PERIOD}
+ */
+static u32 __compute_runnable_contrib(u64 n)
+{
+	u32 contrib = 0;
+
+	if (likely(n <= LOAD_AVG_PERIOD))
+		return runnable_avg_yN_sum[n];
+	else if (unlikely(n >= LOAD_AVG_MAX_N))
+		return LOAD_AVG_MAX;
+
+	/* Compute \Sum k^n combining precomputed values for k^i, \Sum k^j */
+	do {
+		contrib /= 2; /* y^LOAD_AVG_PERIOD = 1/2 */
+		contrib += runnable_avg_yN_sum[LOAD_AVG_PERIOD];
+
+		n -= LOAD_AVG_PERIOD;
+	} while (n > LOAD_AVG_PERIOD);
+
+	contrib = decay_load(contrib, n);
+	return contrib + runnable_avg_yN_sum[n];
+}
+
+/*
+ * We can represent the historical contribution to runnable average as the
+ * coefficients of a geometric series.  To do this we sub-divide our runnable
+ * history into segments of approximately 1ms (1024us); label the segment that
+ * occurred N-ms ago p_N, with p_0 corresponding to the current period, e.g.
+ *
+ * [<- 1024us ->|<- 1024us ->|<- 1024us ->| ...
+ *      p0            p1           p2
+ *     (now)       (~1ms ago)  (~2ms ago)
+ *
+ * Let u_i denote the fraction of p_i that the entity was runnable.
+ *
+ * We then designate the fractions u_i as our co-efficients, yielding the
+ * following representation of historical load:
+ *   u_0 + u_1*y + u_2*y^2 + u_3*y^3 + ...
+ *
+ * We choose y based on the with of a reasonably scheduling period, fixing:
+ *   y^32 = 0.5
+ *
+ * This means that the contribution to load ~32ms ago (u_32) will be weighted
+ * approximately half as much as the contribution to load within the last ms
+ * (u_0).
+ *
+ * When a period "rolls over" and we have new u_0`, multiplying the previous
+ * sum again by y is sufficient to update:
+ *   load_avg = u_0` + y*(u_0 + u_1*y + u_2*y^2 + ... )
+ *            = u_0 + u_1*y + u_2*y^2 + ... [re-labeling u_i --> u_{i+1}]
+ */
+static __always_inline int __update_entity_runnable_avg(u64 now,
+							struct sched_avg *sa,
+							int runnable)
+{
+	u64 delta, periods;
+	u32 runnable_contrib;
+	int delta_w, decayed = 0;
+
+	delta = now - sa->last_runnable_update;
+	/*
+	 * This should only happen when time goes backwards, which it
+	 * unfortunately does during sched clock init when we swap over to TSC.
+	 */
+	if ((s64)delta < 0) {
+		sa->last_runnable_update = now;
+		return 0;
+	}
+
+	/*
+	 * Use 1024ns as the unit of measurement since it's a reasonable
+	 * approximation of 1us and fast to compute.
+	 */
+	delta >>= 10;
+	if (!delta)
+		return 0;
+	sa->last_runnable_update = now;
+
+	/* delta_w is the amount already accumulated against our next period */
+	delta_w = sa->runnable_avg_period % 1024;
+	if (delta + delta_w >= 1024) {
+		/* period roll-over */
+		decayed = 1;
+
+		/*
+		 * Now that we know we're crossing a period boundary, figure
+		 * out how much from delta we need to complete the current
+		 * period and accrue it.
+		 */
+		delta_w = 1024 - delta_w;
+		if (runnable)
+			sa->runnable_avg_sum += delta_w;
+		sa->runnable_avg_period += delta_w;
+
+		delta -= delta_w;
+
+		/* Figure out how many additional periods this update spans */
+		periods = delta / 1024;
+		delta %= 1024;
+
+		sa->runnable_avg_sum = decay_load(sa->runnable_avg_sum,
+						  periods + 1);
+		sa->runnable_avg_period = decay_load(sa->runnable_avg_period,
+						     periods + 1);
+
+		/* Efficiently calculate \sum (1..n_period) 1024*y^i */
+		runnable_contrib = __compute_runnable_contrib(periods);
+		if (runnable)
+			sa->runnable_avg_sum += runnable_contrib;
+		sa->runnable_avg_period += runnable_contrib;
+	}
+
+	/* Remainder of delta accrued against u_0` */
+	if (runnable)
+		sa->runnable_avg_sum += delta;
+	sa->runnable_avg_period += delta;
+
+	return decayed;
+}
+
+/* Synchronize an entity's decay with its parenting cfs_rq.*/
+static inline u64 __synchronize_entity_decay(struct sched_entity *se)
+{
+	struct cfs_rq *cfs_rq = cfs_rq_of(se);
+	u64 decays = atomic64_read(&cfs_rq->decay_counter);
+
+	decays -= se->avg.decay_count;
+	if (!decays)
+		return 0;
+
+	se->avg.load_avg_contrib = decay_load(se->avg.load_avg_contrib, decays);
+	se->avg.decay_count = 0;
+
+	return decays;
+}
+
+#ifdef CONFIG_FAIR_GROUP_SCHED
+static inline void __update_cfs_rq_tg_load_contrib(struct cfs_rq *cfs_rq,
+						 int force_update)
+{
+	struct task_group *tg = cfs_rq->tg;
+	s64 tg_contrib;
+
+	tg_contrib = cfs_rq->runnable_load_avg + cfs_rq->blocked_load_avg;
+	tg_contrib -= cfs_rq->tg_load_contrib;
+
+	if (force_update || abs64(tg_contrib) > cfs_rq->tg_load_contrib / 8) {
+		atomic64_add(tg_contrib, &tg->load_avg);
+		cfs_rq->tg_load_contrib += tg_contrib;
+	}
+}
+
+/*
+ * Aggregate cfs_rq runnable averages into an equivalent task_group
+ * representation for computing load contributions.
+ */
+static inline void __update_tg_runnable_avg(struct sched_avg *sa,
+						  struct cfs_rq *cfs_rq)
+{
+	struct task_group *tg = cfs_rq->tg;
+	long contrib;
+
+	/* The fraction of a cpu used by this cfs_rq */
+	contrib = div_u64(sa->runnable_avg_sum << NICE_0_SHIFT,
+			  sa->runnable_avg_period + 1);
+	contrib -= cfs_rq->tg_runnable_contrib;
+
+	if (abs(contrib) > cfs_rq->tg_runnable_contrib / 64) {
+		atomic_add(contrib, &tg->runnable_avg);
+		cfs_rq->tg_runnable_contrib += contrib;
+	}
+}
+
+static inline void __update_group_entity_contrib(struct sched_entity *se)
+{
+	struct cfs_rq *cfs_rq = group_cfs_rq(se);
+	struct task_group *tg = cfs_rq->tg;
+	int runnable_avg;
+
+	u64 contrib;
+
+	contrib = cfs_rq->tg_load_contrib * tg->shares;
+	se->avg.load_avg_contrib = div64_u64(contrib,
+					     atomic64_read(&tg->load_avg) + 1);
+
+	/*
+	 * For group entities we need to compute a correction term in the case
+	 * that they are consuming <1 cpu so that we would contribute the same
+	 * load as a task of equal weight.
+	 *
+	 * Explicitly co-ordinating this measurement would be expensive, but
+	 * fortunately the sum of each cpus contribution forms a usable
+	 * lower-bound on the true value.
+	 *
+	 * Consider the aggregate of 2 contributions.  Either they are disjoint
+	 * (and the sum represents true value) or they are disjoint and we are
+	 * understating by the aggregate of their overlap.
+	 *
+	 * Extending this to N cpus, for a given overlap, the maximum amount we
+	 * understand is then n_i(n_i+1)/2 * w_i where n_i is the number of
+	 * cpus that overlap for this interval and w_i is the interval width.
+	 *
+	 * On a small machine; the first term is well-bounded which bounds the
+	 * total error since w_i is a subset of the period.  Whereas on a
+	 * larger machine, while this first term can be larger, if w_i is the
+	 * of consequential size guaranteed to see n_i*w_i quickly converge to
+	 * our upper bound of 1-cpu.
+	 */
+	runnable_avg = atomic_read(&tg->runnable_avg);
+	if (runnable_avg < NICE_0_LOAD) {
+		se->avg.load_avg_contrib *= runnable_avg;
+		se->avg.load_avg_contrib >>= NICE_0_SHIFT;
+	}
+}
+#else
+static inline void __update_cfs_rq_tg_load_contrib(struct cfs_rq *cfs_rq,
+						 int force_update) {}
+static inline void __update_tg_runnable_avg(struct sched_avg *sa,
+						  struct cfs_rq *cfs_rq) {}
+static inline void __update_group_entity_contrib(struct sched_entity *se) {}
+#endif
+
+static inline void __update_task_entity_contrib(struct sched_entity *se)
+{
+	u32 contrib;
+
+	/* avoid overflowing a 32-bit type w/ SCHED_LOAD_SCALE */
+	contrib = se->avg.runnable_avg_sum * scale_load_down(se->load.weight);
+	contrib /= (se->avg.runnable_avg_period + 1);
+	se->avg.load_avg_contrib = scale_load(contrib);
+}
+
+/* Compute the current contribution to load_avg by se, return any delta */
+static long __update_entity_load_avg_contrib(struct sched_entity *se)
+{
+	long old_contrib = se->avg.load_avg_contrib;
+
+	if (entity_is_task(se)) {
+		__update_task_entity_contrib(se);
+	} else {
+		__update_tg_runnable_avg(&se->avg, group_cfs_rq(se));
+		__update_group_entity_contrib(se);
+	}
+
+	return se->avg.load_avg_contrib - old_contrib;
+}
+
+static inline void subtract_blocked_load_contrib(struct cfs_rq *cfs_rq,
+						 long load_contrib)
+{
+	if (likely(load_contrib < cfs_rq->blocked_load_avg))
+		cfs_rq->blocked_load_avg -= load_contrib;
+	else
+		cfs_rq->blocked_load_avg = 0;
+}
+
+static inline u64 cfs_rq_clock_task(struct cfs_rq *cfs_rq);
+
+/* Update a sched_entity's runnable average */
+static inline void update_entity_load_avg(struct sched_entity *se,
+					  int update_cfs_rq)
+{
+	struct cfs_rq *cfs_rq = cfs_rq_of(se);
+	long contrib_delta;
+	u64 now;
+
+	/*
+	 * For a group entity we need to use their owned cfs_rq_clock_task() in
+	 * case they are the parent of a throttled hierarchy.
+	 */
+	if (entity_is_task(se))
+		now = cfs_rq_clock_task(cfs_rq);
+	else
+		now = cfs_rq_clock_task(group_cfs_rq(se));
+
+	if (!__update_entity_runnable_avg(now, &se->avg, se->on_rq))
+		return;
+
+	contrib_delta = __update_entity_load_avg_contrib(se);
+
+	if (!update_cfs_rq)
+		return;
+
+	if (se->on_rq)
+		cfs_rq->runnable_load_avg += contrib_delta;
+	else
+		subtract_blocked_load_contrib(cfs_rq, -contrib_delta);
+}
+
+/*
+ * Decay the load contributed by all blocked children and account this so that
+ * their contribution may appropriately discounted when they wake up.
+ */
+static void update_cfs_rq_blocked_load(struct cfs_rq *cfs_rq, int force_update)
+{
+	u64 now = cfs_rq_clock_task(cfs_rq) >> 20;
+	u64 decays;
+
+	decays = now - cfs_rq->last_decay;
+	if (!decays && !force_update)
+		return;
+
+	if (atomic64_read(&cfs_rq->removed_load)) {
+		u64 removed_load = atomic64_xchg(&cfs_rq->removed_load, 0);
+		subtract_blocked_load_contrib(cfs_rq, removed_load);
+	}
+
+	if (decays) {
+		cfs_rq->blocked_load_avg = decay_load(cfs_rq->blocked_load_avg,
+						      decays);
+		atomic64_add(decays, &cfs_rq->decay_counter);
+		cfs_rq->last_decay = now;
+	}
+
+	__update_cfs_rq_tg_load_contrib(cfs_rq, force_update);
+}
+
+static inline void update_rq_runnable_avg(struct rq *rq, int runnable)
+{
+	__update_entity_runnable_avg(rq->clock_task, &rq->avg, runnable);
+	__update_tg_runnable_avg(&rq->avg, &rq->cfs);
+}
+
+/* Add the load generated by se into cfs_rq's child load-average */
+static inline void enqueue_entity_load_avg(struct cfs_rq *cfs_rq,
+						  struct sched_entity *se,
+						  int wakeup)
+{
+	/*
+	 * We track migrations using entity decay_count <= 0, on a wake-up
+	 * migration we use a negative decay count to track the remote decays
+	 * accumulated while sleeping.
+	 */
+	if (unlikely(se->avg.decay_count <= 0)) {
+		se->avg.last_runnable_update = rq_of(cfs_rq)->clock_task;
+		if (se->avg.decay_count) {
+			/*
+			 * In a wake-up migration we have to approximate the
+			 * time sleeping.  This is because we can't synchronize
+			 * clock_task between the two cpus, and it is not
+			 * guaranteed to be read-safe.  Instead, we can
+			 * approximate this using our carried decays, which are
+			 * explicitly atomically readable.
+			 */
+			se->avg.last_runnable_update -= (-se->avg.decay_count)
+							<< 20;
+			update_entity_load_avg(se, 0);
+			/* Indicate that we're now synchronized and on-rq */
+			se->avg.decay_count = 0;
+		}
+		wakeup = 0;
+	} else {
+		__synchronize_entity_decay(se);
+	}
+
+	/* migrated tasks did not contribute to our blocked load */
+	if (wakeup) {
+		subtract_blocked_load_contrib(cfs_rq, se->avg.load_avg_contrib);
+		update_entity_load_avg(se, 0);
+	}
+
+	cfs_rq->runnable_load_avg += se->avg.load_avg_contrib;
+	/* we force update consideration on load-balancer moves */
+	update_cfs_rq_blocked_load(cfs_rq, !wakeup);
 }
-#endif /* CONFIG_FAIR_GROUP_SCHED */
+
+/*
+ * Remove se's load from this cfs_rq child load-average, if the entity is
+ * transitioning to a blocked state we track its projected decay using
+ * blocked_load_avg.
+ */
+static inline void dequeue_entity_load_avg(struct cfs_rq *cfs_rq,
+						  struct sched_entity *se,
+						  int sleep)
+{
+	update_entity_load_avg(se, 1);
+	/* we force update consideration on load-balancer moves */
+	update_cfs_rq_blocked_load(cfs_rq, !sleep);
+
+	cfs_rq->runnable_load_avg -= se->avg.load_avg_contrib;
+	if (sleep) {
+		cfs_rq->blocked_load_avg += se->avg.load_avg_contrib;
+		se->avg.decay_count = atomic64_read(&cfs_rq->decay_counter);
+	} /* migrations, e.g. sleep=0 leave decay_count == 0 */
+}
+
+/*
+ * Update the rq's load with the elapsed running time before entering
+ * idle. if the last scheduled task is not a CFS task, idle_enter will
+ * be the only way to update the runnable statistic.
+ */
+void idle_enter_fair(struct rq *this_rq)
+{
+	update_rq_runnable_avg(this_rq, 1);
+}
+
+/*
+ * Update the rq's load with the elapsed idle time before a task is
+ * scheduled. if the newly scheduled task is not a CFS task, idle_exit will
+ * be the only way to update the runnable statistic.
+ */
+void idle_exit_fair(struct rq *this_rq)
+{
+	update_rq_runnable_avg(this_rq, 0);
+}
+
+#else
+static inline void update_entity_load_avg(struct sched_entity *se,
+					  int update_cfs_rq) {}
+static inline void update_rq_runnable_avg(struct rq *rq, int runnable) {}
+static inline void enqueue_entity_load_avg(struct cfs_rq *cfs_rq,
+					   struct sched_entity *se,
+					   int wakeup) {}
+static inline void dequeue_entity_load_avg(struct cfs_rq *cfs_rq,
+					   struct sched_entity *se,
+					   int sleep) {}
+static inline void update_cfs_rq_blocked_load(struct cfs_rq *cfs_rq,
+					      int force_update) {}
+#endif
 
 static void enqueue_sleeper(struct cfs_rq *cfs_rq, struct sched_entity *se)
 {
@@ -1096,7 +1536,7 @@ enqueue_entity(struct cfs_rq *cfs_rq, struct sched_entity *se, int flags)
 	 * Update run-time statistics of the 'current'.
 	 */
 	update_curr(cfs_rq);
-	update_cfs_load(cfs_rq, 0);
+	enqueue_entity_load_avg(cfs_rq, se, flags & ENQUEUE_WAKEUP);
 	account_entity_enqueue(cfs_rq, se);
 	update_cfs_shares(cfs_rq);
 
@@ -1171,6 +1611,7 @@ dequeue_entity(struct cfs_rq *cfs_rq, struct sched_entity *se, int flags)
 	 * Update run-time statistics of the 'current'.
 	 */
 	update_curr(cfs_rq);
+	dequeue_entity_load_avg(cfs_rq, se, flags & DEQUEUE_SLEEP);
 
 	update_stats_dequeue(cfs_rq, se);
 	if (flags & DEQUEUE_SLEEP) {
@@ -1191,7 +1632,6 @@ dequeue_entity(struct cfs_rq *cfs_rq, struct sched_entity *se, int flags)
 	if (se != cfs_rq->curr)
 		__dequeue_entity(cfs_rq, se);
 	se->on_rq = 0;
-	update_cfs_load(cfs_rq, 0);
 	account_entity_dequeue(cfs_rq, se);
 
 	/*
@@ -1340,6 +1780,8 @@ static void put_prev_entity(struct cfs_rq *cfs_rq, struct sched_entity *prev)
 		update_stats_wait_start(cfs_rq, prev);
 		/* Put 'current' back into the tree. */
 		__enqueue_entity(cfs_rq, prev);
+		/* in !on_rq case, update occurred at dequeue */
+		update_entity_load_avg(prev, 1);
 	}
 	cfs_rq->curr = NULL;
 }
@@ -1353,9 +1795,11 @@ entity_tick(struct cfs_rq *cfs_rq, struct sched_entity *curr, int queued)
 	update_curr(cfs_rq);
 
 	/*
-	 * Update share accounting for long-running entities.
+	 * Ensure that runnable average is periodically updated.
 	 */
-	update_entity_shares_tick(cfs_rq);
+	update_entity_load_avg(curr, 1);
+	update_cfs_rq_blocked_load(cfs_rq, 1);
+	update_cfs_shares(cfs_rq);
 
 #ifdef CONFIG_SCHED_HRTICK
 	/*
@@ -1393,13 +1837,14 @@ static inline bool cfs_bandwidth_used(void)
 	return static_key_false(&__cfs_bandwidth_used);
 }
 
-void account_cfs_bandwidth_used(int enabled, int was_enabled)
+void cfs_bandwidth_usage_inc(void)
+{
+	static_key_slow_inc(&__cfs_bandwidth_used);
+}
+
+void cfs_bandwidth_usage_dec(void)
 {
-	/* only need to count groups transitioning between enabled/!enabled */
-	if (enabled && !was_enabled)
-		static_key_slow_inc(&__cfs_bandwidth_used);
-	else if (!enabled && was_enabled)
-		static_key_slow_dec(&__cfs_bandwidth_used);
+	static_key_slow_dec(&__cfs_bandwidth_used);
 }
 #else /* HAVE_JUMP_LABEL */
 static bool cfs_bandwidth_used(void)
@@ -1407,7 +1852,8 @@ static bool cfs_bandwidth_used(void)
 	return true;
 }
 
-void account_cfs_bandwidth_used(int enabled, int was_enabled) {}
+void cfs_bandwidth_usage_inc(void) {}
+void cfs_bandwidth_usage_dec(void) {}
 #endif /* HAVE_JUMP_LABEL */
 
 /*
@@ -1448,6 +1894,15 @@ static inline struct cfs_bandwidth *tg_cfs_bandwidth(struct task_group *tg)
 	return &tg->cfs_bandwidth;
 }
 
+/* rq->task_clock normalized against any time this cfs_rq has spent throttled */
+static inline u64 cfs_rq_clock_task(struct cfs_rq *cfs_rq)
+{
+	if (unlikely(cfs_rq->throttle_count))
+		return cfs_rq->throttled_clock_task;
+
+	return rq_of(cfs_rq)->clock_task - cfs_rq->throttled_clock_task_time;
+}
+
 /* returns 0 on failure to allocate runtime */
 static int assign_cfs_rq_runtime(struct cfs_rq *cfs_rq)
 {
@@ -1592,14 +2047,9 @@ static int tg_unthrottle_up(struct task_group *tg, void *data)
 	cfs_rq->throttle_count--;
 #ifdef CONFIG_SMP
 	if (!cfs_rq->throttle_count) {
-		u64 delta = rq->clock_task - cfs_rq->load_stamp;
-
-		/* leaving throttled state, advance shares averaging windows */
-		cfs_rq->load_stamp += delta;
-		cfs_rq->load_last += delta;
-
-		/* update entity weight now that we are on_rq again */
-		update_cfs_shares(cfs_rq);
+		/* adjust cfs_rq_clock_task() */
+		cfs_rq->throttled_clock_task_time += rq->clock_task -
+					     cfs_rq->throttled_clock_task;
 	}
 #endif
 
@@ -1611,9 +2061,9 @@ static int tg_throttle_down(struct task_group *tg, void *data)
 	struct rq *rq = data;
 	struct cfs_rq *cfs_rq = tg->cfs_rq[cpu_of(rq)];
 
-	/* group is entering throttled state, record last load */
+	/* group is entering throttled state, stop time */
 	if (!cfs_rq->throttle_count)
-		update_cfs_load(cfs_rq, 0);
+		cfs_rq->throttled_clock_task = rq->clock_task;
 	cfs_rq->throttle_count++;
 
 	return 0;
@@ -1628,7 +2078,7 @@ static void throttle_cfs_rq(struct cfs_rq *cfs_rq)
 
 	se = cfs_rq->tg->se[cpu_of(rq_of(cfs_rq))];
 
-	/* account load preceding throttle */
+	/* freeze hierarchy runnable averages while throttled */
 	rcu_read_lock();
 	walk_tg_tree_from(cfs_rq->tg, tg_throttle_down, tg_nop, (void *)rq);
 	rcu_read_unlock();
@@ -1652,9 +2102,11 @@ static void throttle_cfs_rq(struct cfs_rq *cfs_rq)
 		rq->nr_running -= task_delta;
 
 	cfs_rq->throttled = 1;
-	cfs_rq->throttled_timestamp = rq->clock;
+	cfs_rq->throttled_clock = rq->clock;
 	raw_spin_lock(&cfs_b->lock);
 	list_add_tail_rcu(&cfs_rq->throttled_list, &cfs_b->throttled_cfs_rq);
+	if (!cfs_b->timer_active)
+		__start_cfs_bandwidth(cfs_b);
 	raw_spin_unlock(&cfs_b->lock);
 }
 
@@ -1670,10 +2122,9 @@ void unthrottle_cfs_rq(struct cfs_rq *cfs_rq)
 
 	cfs_rq->throttled = 0;
 	raw_spin_lock(&cfs_b->lock);
-	cfs_b->throttled_time += rq->clock - cfs_rq->throttled_timestamp;
+	cfs_b->throttled_time += rq->clock - cfs_rq->throttled_clock;
 	list_del_rcu(&cfs_rq->throttled_list);
 	raw_spin_unlock(&cfs_b->lock);
-	cfs_rq->throttled_timestamp = 0;
 
 	update_rq_clock(rq);
 	/* update hierarchical throttle state */
@@ -1767,6 +2218,13 @@ static int do_sched_cfs_period_timer(struct cfs_bandwidth *cfs_b, int overrun)
 	if (idle)
 		goto out_unlock;
 
+	/*
+	 * if we have relooped after returning idle once, we need to update our
+	 * status as actually running, so that other cpus doing
+	 * __start_cfs_bandwidth will stop trying to cancel us.
+	 */
+	cfs_b->timer_active = 1;
+
 	__refill_cfs_bandwidth_runtime(cfs_b);
 
 	if (!throttled) {
@@ -1827,7 +2285,13 @@ static const u64 min_bandwidth_expiration = 2 * NSEC_PER_MSEC;
 /* how long we wait to gather additional slack before distributing */
 static const u64 cfs_bandwidth_slack_period = 5 * NSEC_PER_MSEC;
 
-/* are we near the end of the current quota period? */
+/*
+ * Are we near the end of the current quota period?
+ *
+ * Requires cfs_b->lock for hrtimer_expires_remaining to be safe against the
+ * hrtimer base being cleared by __hrtimer_start_range_ns. In the case of
+ * migrate_hrtimers, base is never cleared, so we are fine.
+ */
 static int runtime_refresh_within(struct cfs_bandwidth *cfs_b, u64 min_expire)
 {
 	struct hrtimer *refresh_timer = &cfs_b->period_timer;
@@ -1903,10 +2367,12 @@ static void do_sched_cfs_slack_timer(struct cfs_bandwidth *cfs_b)
 	u64 expires;
 
 	/* confirm we're still not at a refresh boundary */
-	if (runtime_refresh_within(cfs_b, min_bandwidth_expiration))
+	raw_spin_lock(&cfs_b->lock);
+	if (runtime_refresh_within(cfs_b, min_bandwidth_expiration)) {
+		raw_spin_unlock(&cfs_b->lock);
 		return;
+	}
 
-	raw_spin_lock(&cfs_b->lock);
 	if (cfs_b->quota != RUNTIME_INF && cfs_b->runtime > slice) {
 		runtime = cfs_b->runtime;
 		cfs_b->runtime = 0;
@@ -2031,11 +2497,11 @@ void __start_cfs_bandwidth(struct cfs_bandwidth *cfs_b)
 	 * (timer_active==0 becomes visible before the hrtimer call-back
 	 * terminates).  In either case we ensure that it's re-programmed
 	 */
-	while (unlikely(hrtimer_active(&cfs_b->period_timer))) {
+	while (unlikely(hrtimer_active(&cfs_b->period_timer)) &&
+	       hrtimer_try_to_cancel(&cfs_b->period_timer) < 0) {
+		/* bounce the lock to allow do_sched_cfs_period_timer to run */
 		raw_spin_unlock(&cfs_b->lock);
-		/* ensure cfs_b->lock is available while we wait */
-		hrtimer_cancel(&cfs_b->period_timer);
-
+		cpu_relax();
 		raw_spin_lock(&cfs_b->lock);
 		/* if someone else restarted the timer then we're done */
 		if (cfs_b->timer_active)
@@ -2073,8 +2539,13 @@ static void unthrottle_offline_cfs_rqs(struct rq *rq)
 }
 
 #else /* CONFIG_CFS_BANDWIDTH */
-static __always_inline
-void account_cfs_rq_runtime(struct cfs_rq *cfs_rq, unsigned long delta_exec) {}
+static inline u64 cfs_rq_clock_task(struct cfs_rq *cfs_rq)
+{
+	return rq_of(cfs_rq)->clock_task;
+}
+
+static void account_cfs_rq_runtime(struct cfs_rq *cfs_rq,
+				     unsigned long delta_exec) {}
 static void check_cfs_rq_runtime(struct cfs_rq *cfs_rq) {}
 static void check_enqueue_throttle(struct cfs_rq *cfs_rq) {}
 static __always_inline void return_cfs_rq_runtime(struct cfs_rq *cfs_rq) {}
@@ -2205,12 +2676,14 @@ enqueue_task_fair(struct rq *rq, struct task_struct *p, int flags)
 		if (cfs_rq_throttled(cfs_rq))
 			break;
 
-		update_cfs_load(cfs_rq, 0);
 		update_cfs_shares(cfs_rq);
+		update_entity_load_avg(se, 1);
 	}
 
-	if (!se)
+	if (!se) {
+		update_rq_runnable_avg(rq, rq->nr_running);
 		inc_nr_running(rq);
+	}
 	hrtick_update(rq);
 }
 
@@ -2264,12 +2737,14 @@ static void dequeue_task_fair(struct rq *rq, struct task_struct *p, int flags)
 		if (cfs_rq_throttled(cfs_rq))
 			break;
 
-		update_cfs_load(cfs_rq, 0);
 		update_cfs_shares(cfs_rq);
+		update_entity_load_avg(se, 1);
 	}
 
-	if (!se)
+	if (!se) {
 		dec_nr_running(rq);
+		update_rq_runnable_avg(rq, 1);
+	}
 	hrtick_update(rq);
 }
 
@@ -2632,25 +3107,23 @@ find_idlest_cpu(struct sched_group *group, struct task_struct *p, int this_cpu)
  */
 static int select_idle_sibling(struct task_struct *p, int target)
 {
-	int cpu = smp_processor_id();
-	int prev_cpu = task_cpu(p);
 	struct sched_domain *sd;
 	struct sched_group *sg;
-	int i;
+	int i = task_cpu(p);
 
-	/*
-	 * If the task is going to be woken-up on this cpu and if it is
-	 * already idle, then it is the right target.
-	 */
-	if (target == cpu && idle_cpu(cpu))
-		return cpu;
+	if (idle_cpu(target))
+		return target;
 
 	/*
-	 * If the task is going to be woken-up on the cpu where it previously
-	 * ran and if it is currently idle, then it the right target.
+	 * If the prevous cpu is cache affine and idle, don't be stupid.
 	 */
-	if (target == prev_cpu && idle_cpu(prev_cpu))
-		return prev_cpu;
+	if (i != target && cpus_share_cache(i, target) && idle_cpu(i))
+		return i;
+
+	if (!sysctl_sched_wake_to_idle &&
+	    !(current->flags & PF_WAKE_UP_IDLE) &&
+	    !(p->flags & PF_WAKE_UP_IDLE))
+		return target;
 
 	/*
 	 * Otherwise, iterate the domains and find an elegible idle cpu.
@@ -2664,7 +3137,7 @@ static int select_idle_sibling(struct task_struct *p, int target)
 				goto next;
 
 			for_each_cpu(i, sched_group_cpus(sg)) {
-				if (!idle_cpu(i))
+				if (i == target || !idle_cpu(i))
 					goto next;
 			}
 
@@ -2698,10 +3171,9 @@ select_task_rq_fair(struct task_struct *p, int sd_flag, int wake_flags)
 	int prev_cpu = task_cpu(p);
 	int new_cpu = cpu;
 	int want_affine = 0;
-	int want_sd = 1;
 	int sync = wake_flags & WF_SYNC;
 
-	if (p->rt.nr_cpus_allowed == 1)
+	if (p->nr_cpus_allowed == 1)
 		return prev_cpu;
 
 	if (sd_flag & SD_BALANCE_WAKE) {
@@ -2716,51 +3188,21 @@ select_task_rq_fair(struct task_struct *p, int sd_flag, int wake_flags)
 			continue;
 
 		/*
-		 * If power savings logic is enabled for a domain, see if we
-		 * are not overloaded, if so, don't balance wider.
-		 */
-		if (tmp->flags & (SD_POWERSAVINGS_BALANCE|SD_PREFER_LOCAL)) {
-			unsigned long power = 0;
-			unsigned long nr_running = 0;
-			unsigned long capacity;
-			int i;
-
-			for_each_cpu(i, sched_domain_span(tmp)) {
-				power += power_of(i);
-				nr_running += cpu_rq(i)->cfs.nr_running;
-			}
-
-			capacity = DIV_ROUND_CLOSEST(power, SCHED_POWER_SCALE);
-
-			if (tmp->flags & SD_POWERSAVINGS_BALANCE)
-				nr_running /= 2;
-
-			if (nr_running < capacity)
-				want_sd = 0;
-		}
-
-		/*
 		 * If both cpu and prev_cpu are part of this domain,
 		 * cpu is a valid SD_WAKE_AFFINE target.
 		 */
 		if (want_affine && (tmp->flags & SD_WAKE_AFFINE) &&
 		    cpumask_test_cpu(prev_cpu, sched_domain_span(tmp))) {
 			affine_sd = tmp;
-			want_affine = 0;
-		}
-
-		if (!want_sd && !want_affine)
 			break;
+		}
 
-		if (!(tmp->flags & sd_flag))
-			continue;
-
-		if (want_sd)
+		if (tmp->flags & sd_flag)
 			sd = tmp;
 	}
 
 	if (affine_sd) {
-		if (cpu == prev_cpu || wake_affine(affine_sd, p, sync))
+		if (cpu != prev_cpu && wake_affine(affine_sd, p, sync))
 			prev_cpu = cpu;
 
 		new_cpu = select_idle_sibling(p, prev_cpu);
@@ -2810,6 +3252,37 @@ unlock:
 
 	return new_cpu;
 }
+
+/*
+ * Load-tracking only depends on SMP, FAIR_GROUP_SCHED dependency below may be
+ * removed when useful for applications beyond shares distribution (e.g.
+ * load-balance).
+ */
+#ifdef CONFIG_FAIR_GROUP_SCHED
+/*
+ * Called immediately before a task is migrated to a new cpu; task_cpu(p) and
+ * cfs_rq_of(p) references at time of call are still valid and identify the
+ * previous cpu.  However, the caller only guarantees p->pi_lock is held; no
+ * other assumptions, including the state of rq->lock, should be made.
+ */
+static void
+migrate_task_rq_fair(struct task_struct *p, int next_cpu)
+{
+	struct sched_entity *se = &p->se;
+	struct cfs_rq *cfs_rq = cfs_rq_of(se);
+
+	/*
+	 * Load tracking: accumulate removed load so that it can be processed
+	 * when we next update owning cfs_rq under rq->lock.  Tasks contribute
+	 * to blocked load iff they have a positive decay-count.  It can never
+	 * be negative here since on-rq tasks have decay-count == 0.
+	 */
+	if (se->avg.decay_count) {
+		se->avg.decay_count = -__synchronize_entity_decay(se);
+		atomic64_add(se->avg.load_avg_contrib, &cfs_rq->removed_load);
+	}
+}
+#endif
 #endif /* CONFIG_SMP */
 
 static unsigned long
@@ -2936,7 +3409,7 @@ static void check_preempt_wakeup(struct rq *rq, struct task_struct *p, int wake_
 	 * Batch and idle tasks do not preempt non-idle tasks (their preemption
 	 * is driven by the tick):
 	 */
-	if (unlikely(p->policy != SCHED_NORMAL))
+	if (unlikely(p->policy != SCHED_NORMAL) || !sched_feat(WAKEUP_PREEMPTION))
 		return;
 
 	find_matching_se(&se, &pse);
@@ -3062,13 +3535,128 @@ static bool yield_to_task_fair(struct rq *rq, struct task_struct *p, bool preemp
 
 #ifdef CONFIG_SMP
 /**************************************************
- * Fair scheduling class load-balancing methods:
- */
+ * Fair scheduling class load-balancing methods.
+ *
+ * BASICS
+ *
+ * The purpose of load-balancing is to achieve the same basic fairness the
+ * per-cpu scheduler provides, namely provide a proportional amount of compute
+ * time to each task. This is expressed in the following equation:
+ *
+ *   W_i,n/P_i == W_j,n/P_j for all i,j                               (1)
+ *
+ * Where W_i,n is the n-th weight average for cpu i. The instantaneous weight
+ * W_i,0 is defined as:
+ *
+ *   W_i,0 = \Sum_j w_i,j                                             (2)
+ *
+ * Where w_i,j is the weight of the j-th runnable task on cpu i. This weight
+ * is derived from the nice value as per prio_to_weight[].
+ *
+ * The weight average is an exponential decay average of the instantaneous
+ * weight:
+ *
+ *   W'_i,n = (2^n - 1) / 2^n * W_i,n + 1 / 2^n * W_i,0               (3)
+ *
+ * P_i is the cpu power (or compute capacity) of cpu i, typically it is the
+ * fraction of 'recent' time available for SCHED_OTHER task execution. But it
+ * can also include other factors [XXX].
+ *
+ * To achieve this balance we define a measure of imbalance which follows
+ * directly from (1):
+ *
+ *   imb_i,j = max{ avg(W/P), W_i/P_i } - min{ avg(W/P), W_j/P_j }    (4)
+ *
+ * We them move tasks around to minimize the imbalance. In the continuous
+ * function space it is obvious this converges, in the discrete case we get
+ * a few fun cases generally called infeasible weight scenarios.
+ *
+ * [XXX expand on:
+ *     - infeasible weights;
+ *     - local vs global optima in the discrete case. ]
+ *
+ *
+ * SCHED DOMAINS
+ *
+ * In order to solve the imbalance equation (4), and avoid the obvious O(n^2)
+ * for all i,j solution, we create a tree of cpus that follows the hardware
+ * topology where each level pairs two lower groups (or better). This results
+ * in O(log n) layers. Furthermore we reduce the number of cpus going up the
+ * tree to only the first of the previous level and we decrease the frequency
+ * of load-balance at each level inv. proportional to the number of cpus in
+ * the groups.
+ *
+ * This yields:
+ *
+ *     log_2 n     1     n
+ *   \Sum       { --- * --- * 2^i } = O(n)                            (5)
+ *     i = 0      2^i   2^i
+ *                               `- size of each group
+ *         |         |     `- number of cpus doing load-balance
+ *         |         `- freq
+ *         `- sum over all levels
+ *
+ * Coupled with a limit on how many tasks we can migrate every balance pass,
+ * this makes (5) the runtime complexity of the balancer.
+ *
+ * An important property here is that each CPU is still (indirectly) connected
+ * to every other cpu in at most O(log n) steps:
+ *
+ * The adjacency matrix of the resulting graph is given by:
+ *
+ *             log_2 n     
+ *   A_i,j = \Union     (i % 2^k == 0) && i / 2^(k+1) == j / 2^(k+1)  (6)
+ *             k = 0
+ *
+ * And you'll find that:
+ *
+ *   A^(log_2 n)_i,j != 0  for all i,j                                (7)
+ *
+ * Showing there's indeed a path between every cpu in at most O(log n) steps.
+ * The task movement gives a factor of O(m), giving a convergence complexity
+ * of:
+ *
+ *   O(nm log n),  n := nr_cpus, m := nr_tasks                        (8)
+ *
+ *
+ * WORK CONSERVING
+ *
+ * In order to avoid CPUs going idle while there's still work to do, new idle
+ * balancing is more aggressive and has the newly idle cpu iterate up the domain
+ * tree itself instead of relying on other CPUs to bring it work.
+ *
+ * This adds some complexity to both (5) and (8) but it reduces the total idle
+ * time.
+ *
+ * [XXX more?]
+ *
+ *
+ * CGROUPS
+ *
+ * Cgroups make a horror show out of (2), instead of a simple sum we get:
+ *
+ *                                s_k,i
+ *   W_i,0 = \Sum_j \Prod_k w_k * -----                               (9)
+ *                                 S_k
+ *
+ * Where
+ *
+ *   s_k,i = \Sum_j w_i,j,k  and  S_k = \Sum_i s_k,i                 (10)
+ *
+ * w_i,j,k is the weight of the j-th runnable task in the k-th cgroup on cpu i.
+ *
+ * The big problem is S_k, its a global sum needed to compute a local (W_i)
+ * property.
+ *
+ * [XXX write more on how we solve this.. _after_ merging pjt's patches that
+ *      rewrite all of this once again.]
+ */ 
 
 static unsigned long __read_mostly max_load_balance_interval = HZ/10;
 
 #define LBF_ALL_PINNED	0x01
 #define LBF_NEED_BREAK	0x02
+#define LBF_SOME_PINNED 0x04
 
 struct lb_env {
 	struct sched_domain	*sd;
@@ -3079,8 +3667,13 @@ struct lb_env {
 	int			dst_cpu;
 	struct rq		*dst_rq;
 
+	struct cpumask		*dst_grpmask;
+	int			new_dst_cpu;
 	enum cpu_idle_type	idle;
-	long			load_move;
+	long			imbalance;
+	/* The set of CPUs under consideration for load-balancing */
+	struct cpumask		*cpus;
+
 	unsigned int		flags;
 
 	unsigned int		loop;
@@ -3089,6 +3682,7 @@ struct lb_env {
 };
 
 static DEFINE_PER_CPU(bool, dbs_boost_needed);
+static DEFINE_PER_CPU(int, dbs_boost_load_moved);
 
 /*
  * move_task - move a task from one runqueue to another runqueue.
@@ -3145,14 +3739,43 @@ int can_migrate_task(struct task_struct *p, struct lb_env *env)
 	int tsk_cache_hot = 0;
 	/*
 	 * We do not migrate tasks that are:
-	 * 1) running (obviously), or
+	 * 1) throttled_lb_pair, or
 	 * 2) cannot be migrated to this CPU due to cpus_allowed, or
-	 * 3) are cache-hot on their current CPU.
+	 * 3) running (obviously), or
+	 * 4) are cache-hot on their current CPU.
 	 */
+	if (throttled_lb_pair(task_group(p), env->src_cpu, env->dst_cpu))
+		return 0;
+
 	if (!cpumask_test_cpu(env->dst_cpu, tsk_cpus_allowed(p))) {
+		int cpu;
+
 		schedstat_inc(p, se.statistics.nr_failed_migrations_affine);
+
+		/*
+		 * Remember if this task can be migrated to any other cpu in
+		 * our sched_group. We may want to revisit it if we couldn't
+		 * meet load balance goals by pulling other tasks on src_cpu.
+		 *
+		 * Also avoid computing new_dst_cpu if we have already computed
+		 * one in current iteration.
+		 */
+		if (!env->dst_grpmask || (env->flags & LBF_SOME_PINNED))
+			return 0;
+
+		/* Prevent to re-select dst_cpu via env's cpus */
+		for_each_cpu_and(cpu, env->dst_grpmask, env->cpus) {
+			if (cpumask_test_cpu(cpu, tsk_cpus_allowed(p))) {
+				env->flags |= LBF_SOME_PINNED;
+				env->new_dst_cpu = cpu;
+				break;
+			}
+		}
+
 		return 0;
 	}
+
+	/* Record that we found atleast one task that could run on dst_cpu */
 	env->flags &= ~LBF_ALL_PINNED;
 
 	if (task_running(env->src_rq, p)) {
@@ -3197,9 +3820,6 @@ static int move_one_task(struct lb_env *env)
 	struct task_struct *p, *n;
 
 	list_for_each_entry_safe(p, n, &env->src_rq->cfs_tasks, se.group_node) {
-		if (throttled_lb_pair(task_group(p), env->src_rq->cpu, env->dst_cpu))
-			continue;
-
 		if (!can_migrate_task(p, env))
 			continue;
 
@@ -3210,6 +3830,8 @@ static int move_one_task(struct lb_env *env)
 		 * stats here rather than inside move_task().
 		 */
 		schedstat_inc(env->sd, lb_gained[env->idle]);
+		per_cpu(dbs_boost_load_moved, env->dst_cpu) += pct_task_load(p);
+
 		return 1;
 	}
 	return 0;
@@ -3220,7 +3842,7 @@ static unsigned long task_h_load(struct task_struct *p);
 static const unsigned int sched_nr_migrate_break = 32;
 
 /*
- * move_tasks tries to move up to load_move weighted load from busiest to
+ * move_tasks tries to move up to imbalance weighted load from busiest to
  * this_rq, as part of a balancing operation within domain "sd".
  * Returns 1 if successful and 0 otherwise.
  *
@@ -3233,7 +3855,7 @@ static int move_tasks(struct lb_env *env)
 	unsigned long load;
 	int pulled = 0;
 
-	if (env->load_move <= 0)
+	if (env->imbalance <= 0)
 		return 0;
 
 	while (!list_empty(tasks)) {
@@ -3251,7 +3873,7 @@ static int move_tasks(struct lb_env *env)
 			break;
 		}
 
-		if (throttled_lb_pair(task_group(p), env->src_cpu, env->dst_cpu))
+		if (!can_migrate_task(p, env))
 			goto next;
 
 		load = task_h_load(p);
@@ -3259,15 +3881,13 @@ static int move_tasks(struct lb_env *env)
 		if (sched_feat(LB_MIN) && load < 16 && !env->sd->nr_balance_failed)
 			goto next;
 
-		if ((load / 2) > env->load_move)
-			goto next;
-
-		if (!can_migrate_task(p, env))
+		if ((load / 2) > env->imbalance)
 			goto next;
 
 		move_task(p, env);
 		pulled++;
-		env->load_move -= load;
+		env->imbalance -= load;
+		per_cpu(dbs_boost_load_moved, env->dst_cpu) += pct_task_load(p);
 
 #ifdef CONFIG_PREEMPT
 		/*
@@ -3283,7 +3903,7 @@ static int move_tasks(struct lb_env *env)
 		 * We only want to steal up to the prescribed amount of
 		 * weighted load.
 		 */
-		if (env->load_move <= 0)
+		if (env->imbalance <= 0)
 			break;
 
 		continue;
@@ -3305,52 +3925,58 @@ next:
 /*
  * update tg->load_weight by folding this cpu's load_avg
  */
-static int update_shares_cpu(struct task_group *tg, int cpu)
+static void __update_blocked_averages_cpu(struct task_group *tg, int cpu)
 {
-	struct cfs_rq *cfs_rq;
-	unsigned long flags;
-	struct rq *rq;
-
-	if (!tg->se[cpu])
-		return 0;
-
-	rq = cpu_rq(cpu);
-	cfs_rq = tg->cfs_rq[cpu];
-
-	raw_spin_lock_irqsave(&rq->lock, flags);
-
-	update_rq_clock(rq);
-	update_cfs_load(cfs_rq, 1);
+	struct sched_entity *se = tg->se[cpu];
+	struct cfs_rq *cfs_rq = tg->cfs_rq[cpu];
 
-	/*
-	 * We need to update shares after updating tg->load_weight in
-	 * order to adjust the weight of groups with long running tasks.
-	 */
-	update_cfs_shares(cfs_rq);
+	/* throttled entities do not contribute to load */
+	if (throttled_hierarchy(cfs_rq))
+		return;
 
-	raw_spin_unlock_irqrestore(&rq->lock, flags);
+	update_cfs_rq_blocked_load(cfs_rq, 1);
 
-	return 0;
+	if (se) {
+		update_entity_load_avg(se, 1);
+		/*
+		 * We pivot on our runnable average having decayed to zero for
+		 * list removal.  This generally implies that all our children
+		 * have also been removed (modulo rounding error or bandwidth
+		 * control); however, such cases are rare and we can fix these
+		 * at enqueue.
+		 *
+		 * TODO: fix up out-of-order children on enqueue.
+		 */
+		if (!se->avg.runnable_avg_sum && !cfs_rq->nr_running)
+			list_del_leaf_cfs_rq(cfs_rq);
+	} else {
+		struct rq *rq = rq_of(cfs_rq);
+		update_rq_runnable_avg(rq, rq->nr_running);
+	}
 }
 
-static void update_shares(int cpu)
+static void update_blocked_averages(int cpu)
 {
-	struct cfs_rq *cfs_rq;
 	struct rq *rq = cpu_rq(cpu);
+	struct cfs_rq *cfs_rq;
+	unsigned long flags;
 
-	rcu_read_lock();
+	raw_spin_lock_irqsave(&rq->lock, flags);
+	update_rq_clock(rq);
 	/*
 	 * Iterates the task_group tree in a bottom up fashion, see
 	 * list_add_leaf_cfs_rq() for details.
 	 */
 	for_each_leaf_cfs_rq(rq, cfs_rq) {
-		/* throttled entities do not contribute to load */
-		if (throttled_hierarchy(cfs_rq))
-			continue;
-
-		update_shares_cpu(cfs_rq->tg, cpu);
+		/*
+		 * Note: We may want to consider periodically releasing
+		 * rq->lock about these updates so that creating many task
+		 * groups does not result in continually extending hold time.
+		 */
+		__update_blocked_averages_cpu(cfs_rq->tg, rq->cpu);
 	}
-	rcu_read_unlock();
+
+	raw_spin_unlock_irqrestore(&rq->lock, flags);
 }
 
 /*
@@ -3378,6 +4004,14 @@ static int tg_load_down(struct task_group *tg, void *data)
 
 static void update_h_load(long cpu)
 {
+	struct rq *rq = cpu_rq(cpu);
+	unsigned long now = jiffies;
+
+	if (rq->h_load_throttle == now)
+		return;
+
+	rq->h_load_throttle = now;
+
 	rcu_read_lock();
 	walk_tg_tree(tg_load_down, tg_nop, (void *)cpu);
 	rcu_read_unlock();
@@ -3394,7 +4028,7 @@ static unsigned long task_h_load(struct task_struct *p)
 	return load;
 }
 #else
-static inline void update_shares(int cpu)
+static inline void update_blocked_averages(int cpu)
 {
 }
 
@@ -3437,14 +4071,6 @@ struct sd_lb_stats {
 	unsigned int  busiest_group_weight;
 
 	int group_imb; /* Is there imbalance in this sd */
-#if defined(CONFIG_SCHED_MC) || defined(CONFIG_SCHED_SMT)
-	int power_savings_balance; /* Is powersave balance needed for this sd */
-	struct sched_group *group_min; /* Least loaded group in sd */
-	struct sched_group *group_leader; /* Group which relieves group_min */
-	unsigned long min_load_per_task; /* load_per_task in group_min */
-	unsigned long leader_nr_running; /* Nr running of group_leader */
-	unsigned long min_nr_running; /* Nr running of group_min */
-#endif
 };
 
 /*
@@ -3488,148 +4114,6 @@ static inline int get_sd_load_idx(struct sched_domain *sd,
 	return load_idx;
 }
 
-
-#if defined(CONFIG_SCHED_MC) || defined(CONFIG_SCHED_SMT)
-/**
- * init_sd_power_savings_stats - Initialize power savings statistics for
- * the given sched_domain, during load balancing.
- *
- * @sd: Sched domain whose power-savings statistics are to be initialized.
- * @sds: Variable containing the statistics for sd.
- * @idle: Idle status of the CPU at which we're performing load-balancing.
- */
-static inline void init_sd_power_savings_stats(struct sched_domain *sd,
-	struct sd_lb_stats *sds, enum cpu_idle_type idle)
-{
-	/*
-	 * Busy processors will not participate in power savings
-	 * balance.
-	 */
-	if (idle == CPU_NOT_IDLE || !(sd->flags & SD_POWERSAVINGS_BALANCE))
-		sds->power_savings_balance = 0;
-	else {
-		sds->power_savings_balance = 1;
-		sds->min_nr_running = ULONG_MAX;
-		sds->leader_nr_running = 0;
-	}
-}
-
-/**
- * update_sd_power_savings_stats - Update the power saving stats for a
- * sched_domain while performing load balancing.
- *
- * @group: sched_group belonging to the sched_domain under consideration.
- * @sds: Variable containing the statistics of the sched_domain
- * @local_group: Does group contain the CPU for which we're performing
- * 		load balancing ?
- * @sgs: Variable containing the statistics of the group.
- */
-static inline void update_sd_power_savings_stats(struct sched_group *group,
-	struct sd_lb_stats *sds, int local_group, struct sg_lb_stats *sgs)
-{
-
-	if (!sds->power_savings_balance)
-		return;
-
-	/*
-	 * If the local group is idle or completely loaded
-	 * no need to do power savings balance at this domain
-	 */
-	if (local_group && (sds->this_nr_running >= sgs->group_capacity ||
-				!sds->this_nr_running))
-		sds->power_savings_balance = 0;
-
-	/*
-	 * If a group is already running at full capacity or idle,
-	 * don't include that group in power savings calculations
-	 */
-	if (!sds->power_savings_balance ||
-		sgs->sum_nr_running >= sgs->group_capacity ||
-		!sgs->sum_nr_running)
-		return;
-
-	/*
-	 * Calculate the group which has the least non-idle load.
-	 * This is the group from where we need to pick up the load
-	 * for saving power
-	 */
-	if ((sgs->sum_nr_running < sds->min_nr_running) ||
-	    (sgs->sum_nr_running == sds->min_nr_running &&
-	     group_first_cpu(group) > group_first_cpu(sds->group_min))) {
-		sds->group_min = group;
-		sds->min_nr_running = sgs->sum_nr_running;
-		sds->min_load_per_task = sgs->sum_weighted_load /
-						sgs->sum_nr_running;
-	}
-
-	/*
-	 * Calculate the group which is almost near its
-	 * capacity but still has some space to pick up some load
-	 * from other group and save more power
-	 */
-	if (sgs->sum_nr_running + 1 > sgs->group_capacity)
-		return;
-
-	if (sgs->sum_nr_running > sds->leader_nr_running ||
-	    (sgs->sum_nr_running == sds->leader_nr_running &&
-	     group_first_cpu(group) < group_first_cpu(sds->group_leader))) {
-		sds->group_leader = group;
-		sds->leader_nr_running = sgs->sum_nr_running;
-	}
-}
-
-/**
- * check_power_save_busiest_group - see if there is potential for some power-savings balance
- * @sds: Variable containing the statistics of the sched_domain
- *	under consideration.
- * @this_cpu: Cpu at which we're currently performing load-balancing.
- * @imbalance: Variable to store the imbalance.
- *
- * Description:
- * Check if we have potential to perform some power-savings balance.
- * If yes, set the busiest group to be the least loaded group in the
- * sched_domain, so that it's CPUs can be put to idle.
- *
- * Returns 1 if there is potential to perform power-savings balance.
- * Else returns 0.
- */
-static inline int check_power_save_busiest_group(struct sd_lb_stats *sds,
-					int this_cpu, unsigned long *imbalance)
-{
-	if (!sds->power_savings_balance)
-		return 0;
-
-	if (sds->this != sds->group_leader ||
-			sds->group_leader == sds->group_min)
-		return 0;
-
-	*imbalance = sds->min_load_per_task;
-	sds->busiest = sds->group_min;
-
-	return 1;
-
-}
-#else /* CONFIG_SCHED_MC || CONFIG_SCHED_SMT */
-static inline void init_sd_power_savings_stats(struct sched_domain *sd,
-	struct sd_lb_stats *sds, enum cpu_idle_type idle)
-{
-	return;
-}
-
-static inline void update_sd_power_savings_stats(struct sched_group *group,
-	struct sd_lb_stats *sds, int local_group, struct sg_lb_stats *sgs)
-{
-	return;
-}
-
-static inline int check_power_save_busiest_group(struct sd_lb_stats *sds,
-					int this_cpu, unsigned long *imbalance)
-{
-	return 0;
-}
-#endif /* CONFIG_SCHED_MC || CONFIG_SCHED_SMT */
-
-
 unsigned long default_scale_freq_power(struct sched_domain *sd, int cpu)
 {
 	return SCHED_POWER_SCALE;
@@ -3774,24 +4258,21 @@ fix_small_capacity(struct sched_domain *sd, struct sched_group *group)
  * update_sg_lb_stats - Update sched_group's statistics for load balancing.
  * @sd: The sched_domain whose statistics are to be updated.
  * @group: sched_group whose statistics are to be updated.
- * @this_cpu: Cpu for which load balance is currently performed.
- * @idle: Idle status of this_cpu
  * @load_idx: Load index of sched_domain of this_cpu for load calc.
  * @local_group: Does group contain this_cpu.
  * @cpus: Set of cpus considered for load balancing.
  * @balance: Should we balance.
  * @sgs: variable to hold the statistics for this group.
  */
-static inline void update_sg_lb_stats(struct sched_domain *sd,
-			struct sched_group *group, int this_cpu,
-			enum cpu_idle_type idle, int load_idx,
-			int local_group, const struct cpumask *cpus,
-			int *balance, struct sg_lb_stats *sgs)
+static inline void update_sg_lb_stats(struct lb_env *env,
+			struct sched_group *group, int load_idx,
+			int local_group, int *balance, struct sg_lb_stats *sgs)
 {
-	unsigned long load, max_cpu_load, min_cpu_load, max_nr_running;
-	int i;
+	unsigned long nr_running, max_nr_running, min_nr_running;
+	unsigned long load, max_cpu_load, min_cpu_load;
 	unsigned int balance_cpu = -1, first_idle_cpu = 0;
 	unsigned long avg_load_per_task = 0;
+	int i;
 
 	if (local_group)
 		balance_cpu = group_first_cpu(group);
@@ -3800,10 +4281,13 @@ static inline void update_sg_lb_stats(struct sched_domain *sd,
 	max_cpu_load = 0;
 	min_cpu_load = ~0UL;
 	max_nr_running = 0;
+	min_nr_running = ~0UL;
 
-	for_each_cpu_and(i, sched_group_cpus(group), cpus) {
+	for_each_cpu_and(i, sched_group_cpus(group), env->cpus) {
 		struct rq *rq = cpu_rq(i);
 
+		nr_running = rq->nr_running;
+
 		/* Bias balancing toward cpus of our domain */
 		if (local_group) {
 			if (idle_cpu(i) && !first_idle_cpu) {
@@ -3814,16 +4298,19 @@ static inline void update_sg_lb_stats(struct sched_domain *sd,
 			load = target_load(i, load_idx);
 		} else {
 			load = source_load(i, load_idx);
-			if (load > max_cpu_load) {
+			if (load > max_cpu_load)
 				max_cpu_load = load;
-				max_nr_running = rq->nr_running;
-			}
 			if (min_cpu_load > load)
 				min_cpu_load = load;
+
+			if (nr_running > max_nr_running)
+				max_nr_running = nr_running;
+			if (min_nr_running > nr_running)
+				min_nr_running = nr_running;
 		}
 
 		sgs->group_load += load;
-		sgs->sum_nr_running += rq->nr_running;
+		sgs->sum_nr_running += nr_running;
 		sgs->sum_weighted_load += weighted_cpuload(i);
 		if (idle_cpu(i))
 			sgs->idle_cpus++;
@@ -3836,14 +4323,14 @@ static inline void update_sg_lb_stats(struct sched_domain *sd,
 	 * to do the newly idle load balance.
 	 */
 	if (local_group) {
-		if (idle != CPU_NEWLY_IDLE) {
-			if (balance_cpu != this_cpu) {
+		if (env->idle != CPU_NEWLY_IDLE) {
+			if (balance_cpu != env->dst_cpu) {
 				*balance = 0;
 				return;
 			}
-			update_group_power(sd, this_cpu);
+			update_group_power(env->sd, env->dst_cpu);
 		} else if (time_after_eq(jiffies, group->sgp->next_update))
-			update_group_power(sd, this_cpu);
+			update_group_power(env->sd, env->dst_cpu);
 	}
 
 	/* Adjust by relative CPU power of the group */
@@ -3852,7 +4339,7 @@ static inline void update_sg_lb_stats(struct sched_domain *sd,
 	/*
 	 * Consider the group unbalanced when the imbalance is larger
 	 * than the average weight of a task.
-	 *
+*
 	 * APZ: with cgroup the avg task weight can vary wildly and
 	 *      might not be a suitable number - should we keep a
 	 *      normalized nr_running number somewhere that negates
@@ -3861,13 +4348,14 @@ static inline void update_sg_lb_stats(struct sched_domain *sd,
 	if (sgs->sum_nr_running)
 		avg_load_per_task = sgs->sum_weighted_load / sgs->sum_nr_running;
 
-	if ((max_cpu_load - min_cpu_load) >= avg_load_per_task && max_nr_running > 1)
+	if ((max_cpu_load - min_cpu_load) >= avg_load_per_task &&
+	    (max_nr_running - min_nr_running) > 1)
 		sgs->group_imb = 1;
 
 	sgs->group_capacity = DIV_ROUND_CLOSEST(group->sgp->power,
 						SCHED_POWER_SCALE);
 	if (!sgs->group_capacity)
-		sgs->group_capacity = fix_small_capacity(sd, group);
+		sgs->group_capacity = fix_small_capacity(env->sd, group);
 	sgs->group_weight = group->group_weight;
 
 	if (sgs->group_capacity > sgs->sum_nr_running)
@@ -3885,11 +4373,10 @@ static inline void update_sg_lb_stats(struct sched_domain *sd,
  * Determine if @sg is a busier group than the previously selected
  * busiest group.
  */
-static bool update_sd_pick_busiest(struct sched_domain *sd,
+static bool update_sd_pick_busiest(struct lb_env *env,
 				   struct sd_lb_stats *sds,
 				   struct sched_group *sg,
-				   struct sg_lb_stats *sgs,
-				   int this_cpu)
+				   struct sg_lb_stats *sgs)
 {
 	if (sgs->avg_load <= sds->max_load)
 		return false;
@@ -3905,8 +4392,8 @@ static bool update_sd_pick_busiest(struct sched_domain *sd,
 	 * numbered CPUs in the group, therefore mark all groups
 	 * higher than ourself as busy.
 	 */
-	if ((sd->flags & SD_ASYM_PACKING) && sgs->sum_nr_running &&
-	    this_cpu < group_first_cpu(sg)) {
+	if ((env->sd->flags & SD_ASYM_PACKING) && sgs->sum_nr_running &&
+	    env->dst_cpu < group_first_cpu(sg)) {
 		if (!sds->busiest)
 			return true;
 
@@ -3926,28 +4413,25 @@ static bool update_sd_pick_busiest(struct sched_domain *sd,
  * @balance: Should we balance.
  * @sds: variable to hold the statistics for this sched_domain.
  */
-static inline void update_sd_lb_stats(struct sched_domain *sd, int this_cpu,
-			enum cpu_idle_type idle, const struct cpumask *cpus,
-			int *balance, struct sd_lb_stats *sds)
+static inline void update_sd_lb_stats(struct lb_env *env,
+					int *balance, struct sd_lb_stats *sds)
 {
-	struct sched_domain *child = sd->child;
-	struct sched_group *sg = sd->groups;
+	struct sched_domain *child = env->sd->child;
+	struct sched_group *sg = env->sd->groups;
 	struct sg_lb_stats sgs;
 	int load_idx, prefer_sibling = 0;
 
 	if (child && child->flags & SD_PREFER_SIBLING)
 		prefer_sibling = 1;
 
-	init_sd_power_savings_stats(sd, sds, idle);
-	load_idx = get_sd_load_idx(sd, idle);
+	load_idx = get_sd_load_idx(env->sd, env->idle);
 
 	do {
 		int local_group;
 
-		local_group = cpumask_test_cpu(this_cpu, sched_group_cpus(sg));
+		local_group = cpumask_test_cpu(env->dst_cpu, sched_group_cpus(sg));
 		memset(&sgs, 0, sizeof(sgs));
-		update_sg_lb_stats(sd, sg, this_cpu, idle, load_idx,
-				local_group, cpus, balance, &sgs);
+		update_sg_lb_stats(env, sg, load_idx, local_group, balance, &sgs);
 
 		if (local_group && !(*balance))
 			return;
@@ -3975,7 +4459,7 @@ static inline void update_sd_lb_stats(struct sched_domain *sd, int this_cpu,
 			sds->this_load_per_task = sgs.sum_weighted_load;
 			sds->this_has_capacity = sgs.group_has_capacity;
 			sds->this_idle_cpus = sgs.idle_cpus;
-		} else if (update_sd_pick_busiest(sd, sds, sg, &sgs, this_cpu)) {
+		} else if (update_sd_pick_busiest(env, sds, sg, &sgs)) {
 			sds->max_load = sgs.avg_load;
 			sds->busiest = sg;
 			sds->busiest_nr_running = sgs.sum_nr_running;
@@ -3987,9 +4471,8 @@ static inline void update_sd_lb_stats(struct sched_domain *sd, int this_cpu,
 			sds->group_imb = sgs.group_imb;
 		}
 
-		update_sd_power_savings_stats(sg, sds, local_group, &sgs);
 		sg = sg->next;
-	} while (sg != sd->groups);
+	} while (sg != env->sd->groups);
 }
 
 /**
@@ -4017,24 +4500,23 @@ static inline void update_sd_lb_stats(struct sched_domain *sd, int this_cpu,
  * @this_cpu: The cpu at whose sched_domain we're performing load-balance.
  * @imbalance: returns amount of imbalanced due to packing.
  */
-static int check_asym_packing(struct sched_domain *sd,
-			      struct sd_lb_stats *sds,
-			      int this_cpu, unsigned long *imbalance)
+static int check_asym_packing(struct lb_env *env, struct sd_lb_stats *sds)
 {
 	int busiest_cpu;
 
-	if (!(sd->flags & SD_ASYM_PACKING))
+	if (!(env->sd->flags & SD_ASYM_PACKING))
 		return 0;
 
 	if (!sds->busiest)
 		return 0;
 
 	busiest_cpu = group_first_cpu(sds->busiest);
-	if (this_cpu > busiest_cpu)
+	if (env->dst_cpu > busiest_cpu)
 		return 0;
 
-	*imbalance = DIV_ROUND_CLOSEST(sds->max_load * sds->busiest->sgp->power,
-				       SCHED_POWER_SCALE);
+	env->imbalance = DIV_ROUND_CLOSEST(
+		sds->max_load * sds->busiest->sgp->power, SCHED_POWER_SCALE);
+
 	return 1;
 }
 
@@ -4046,8 +4528,8 @@ static int check_asym_packing(struct sched_domain *sd,
  * @this_cpu: The cpu at whose sched_domain we're performing load-balance.
  * @imbalance: Variable to store the imbalance.
  */
-static inline void fix_small_imbalance(struct sd_lb_stats *sds,
-				int this_cpu, unsigned long *imbalance)
+static inline
+void fix_small_imbalance(struct lb_env *env, struct sd_lb_stats *sds)
 {
 	unsigned long tmp, pwr_now = 0, pwr_move = 0;
 	unsigned int imbn = 2;
@@ -4058,9 +4540,10 @@ static inline void fix_small_imbalance(struct sd_lb_stats *sds,
 		if (sds->busiest_load_per_task >
 				sds->this_load_per_task)
 			imbn = 1;
-	} else
+	} else {
 		sds->this_load_per_task =
-			cpu_avg_load_per_task(this_cpu);
+			cpu_avg_load_per_task(env->dst_cpu);
+	}
 
 	scaled_busy_load_per_task = sds->busiest_load_per_task
 					 * SCHED_POWER_SCALE;
@@ -4068,7 +4551,7 @@ static inline void fix_small_imbalance(struct sd_lb_stats *sds,
 
 	if (sds->max_load - sds->this_load + scaled_busy_load_per_task >=
 			(scaled_busy_load_per_task * imbn)) {
-		*imbalance = sds->busiest_load_per_task;
+		env->imbalance = sds->busiest_load_per_task;
 		return;
 	}
 
@@ -4105,18 +4588,16 @@ static inline void fix_small_imbalance(struct sd_lb_stats *sds,
 
 	/* Move if we gain throughput */
 	if (pwr_move > pwr_now)
-		*imbalance = sds->busiest_load_per_task;
+		env->imbalance = sds->busiest_load_per_task;
 }
 
 /**
  * calculate_imbalance - Calculate the amount of imbalance present within the
  *			 groups of a given sched_domain during load balance.
+ * @env: load balance environment
  * @sds: statistics of the sched_domain whose imbalance is to be calculated.
- * @this_cpu: Cpu for which currently load balance is being performed.
- * @imbalance: The variable to store the imbalance.
  */
-static inline void calculate_imbalance(struct sd_lb_stats *sds, int this_cpu,
-		unsigned long *imbalance)
+static inline void calculate_imbalance(struct lb_env *env, struct sd_lb_stats *sds)
 {
 	unsigned long max_pull, load_above_capacity = ~0UL;
 
@@ -4132,8 +4613,8 @@ static inline void calculate_imbalance(struct sd_lb_stats *sds, int this_cpu,
 	 * its cpu_power, while calculating max_load..)
 	 */
 	if (sds->max_load < sds->avg_load) {
-		*imbalance = 0;
-		return fix_small_imbalance(sds, this_cpu, imbalance);
+		env->imbalance = 0;
+		return fix_small_imbalance(env, sds);
 	}
 
 	if (!sds->group_imb) {
@@ -4161,7 +4642,7 @@ static inline void calculate_imbalance(struct sd_lb_stats *sds, int this_cpu,
 	max_pull = min(sds->max_load - sds->avg_load, load_above_capacity);
 
 	/* How much load to actually move to equalise the imbalance */
-	*imbalance = min(max_pull * sds->busiest->sgp->power,
+	env->imbalance = min(max_pull * sds->busiest->sgp->power,
 		(sds->avg_load - sds->this_load) * sds->this->sgp->power)
 			/ SCHED_POWER_SCALE;
 
@@ -4171,8 +4652,8 @@ static inline void calculate_imbalance(struct sd_lb_stats *sds, int this_cpu,
 	 * a think about bumping its value to force at least one task to be
 	 * moved
 	 */
-	if (*imbalance < sds->busiest_load_per_task)
-		return fix_small_imbalance(sds, this_cpu, imbalance);
+	if (env->imbalance < sds->busiest_load_per_task)
+		return fix_small_imbalance(env, sds);
 
 }
 
@@ -4193,7 +4674,7 @@ static inline void calculate_imbalance(struct sd_lb_stats *sds, int this_cpu,
  * @imbalance: Variable which stores amount of weighted load which should
  *		be moved to restore balance/put a group to idle.
  * @idle: The idle status of this_cpu.
- * @cpus: The set of CPUs under consideration for load-balancing.
+ * @env: The load balancing environment.
  * @balance: Pointer to a variable indicating if this_cpu
  *	is the appropriate cpu to perform load balancing at this_level.
  *
@@ -4203,9 +4684,7 @@ static inline void calculate_imbalance(struct sd_lb_stats *sds, int this_cpu,
  *		   put to idle by rebalancing its tasks onto our group.
  */
 static struct sched_group *
-find_busiest_group(struct sched_domain *sd, int this_cpu,
-		   unsigned long *imbalance, enum cpu_idle_type idle,
-		   const struct cpumask *cpus, int *balance)
+find_busiest_group(struct lb_env *env, int *balance)
 {
 	struct sd_lb_stats sds;
 
@@ -4215,7 +4694,7 @@ find_busiest_group(struct sched_domain *sd, int this_cpu,
 	 * Compute the various statistics relavent for load balancing at
 	 * this level.
 	 */
-	update_sd_lb_stats(sd, this_cpu, idle, cpus, balance, &sds);
+	update_sd_lb_stats(env, balance, &sds);
 
 	/*
 	 * this_cpu is not the appropriate cpu to perform load balancing at
@@ -4224,8 +4703,8 @@ find_busiest_group(struct sched_domain *sd, int this_cpu,
 	if (!(*balance))
 		goto ret;
 
-	if ((idle == CPU_IDLE || idle == CPU_NEWLY_IDLE) &&
-	    check_asym_packing(sd, &sds, this_cpu, imbalance))
+	if ((env->idle == CPU_IDLE || env->idle == CPU_NEWLY_IDLE) &&
+	    check_asym_packing(env, &sds))
 		return sds.busiest;
 
 	/* There is no busy sibling group to pull tasks from */
@@ -4243,7 +4722,7 @@ find_busiest_group(struct sched_domain *sd, int this_cpu,
 		goto force_balance;
 
 	/* SD_BALANCE_NEWIDLE trumps SMP nice when underutilized */
-	if (idle == CPU_NEWLY_IDLE && sds.this_has_capacity &&
+	if (env->idle == CPU_NEWLY_IDLE && sds.this_has_capacity &&
 			!sds.busiest_has_capacity)
 		goto force_balance;
 
@@ -4261,7 +4740,7 @@ find_busiest_group(struct sched_domain *sd, int this_cpu,
 	if (sds.this_load >= sds.avg_load)
 		goto out_balanced;
 
-	if (idle == CPU_IDLE) {
+	if (env->idle == CPU_IDLE) {
 		/*
 		 * This cpu is idle. If the busiest group load doesn't
 		 * have more tasks than the number of available cpu's and
@@ -4276,34 +4755,26 @@ find_busiest_group(struct sched_domain *sd, int this_cpu,
 		 * In the CPU_NEWLY_IDLE, CPU_NOT_IDLE cases, use
 		 * imbalance_pct to be conservative.
 		 */
-		if (100 * sds.max_load <= sd->imbalance_pct * sds.this_load)
+		if (100 * sds.max_load <= env->sd->imbalance_pct * sds.this_load)
 			goto out_balanced;
 	}
 
 force_balance:
 	/* Looks like there is an imbalance. Compute it */
-	calculate_imbalance(&sds, this_cpu, imbalance);
+	calculate_imbalance(env, &sds);
 	return sds.busiest;
 
 out_balanced:
-	/*
-	 * There is no obvious imbalance. But check if we can do some balancing
-	 * to save power.
-	 */
-	if (check_power_save_busiest_group(&sds, this_cpu, imbalance))
-		return sds.busiest;
 ret:
-	*imbalance = 0;
+	env->imbalance = 0;
 	return NULL;
 }
 
 /*
  * find_busiest_queue - find the busiest runqueue among the cpus in group.
  */
-static struct rq *
-find_busiest_queue(struct sched_domain *sd, struct sched_group *group,
-		   enum cpu_idle_type idle, unsigned long imbalance,
-		   const struct cpumask *cpus)
+static struct rq *find_busiest_queue(struct lb_env *env,
+				     struct sched_group *group)
 {
 	struct rq *busiest = NULL, *rq;
 	unsigned long max_load = 0;
@@ -4316,9 +4787,9 @@ find_busiest_queue(struct sched_domain *sd, struct sched_group *group,
 		unsigned long wl;
 
 		if (!capacity)
-			capacity = fix_small_capacity(sd, group);
+			capacity = fix_small_capacity(env->sd, group);
 
-		if (!cpumask_test_cpu(i, cpus))
+		if (!cpumask_test_cpu(i, env->cpus))
 			continue;
 
 		rq = cpu_rq(i);
@@ -4328,7 +4799,7 @@ find_busiest_queue(struct sched_domain *sd, struct sched_group *group,
 		 * When comparing with imbalance, use weighted_cpuload()
 		 * which is not scaled with the cpu power.
 		 */
-		if (capacity && rq->nr_running == 1 && wl > imbalance)
+		if (capacity && rq->nr_running == 1 && wl > env->imbalance)
 			continue;
 
 		/*
@@ -4355,42 +4826,21 @@ find_busiest_queue(struct sched_domain *sd, struct sched_group *group,
 #define MAX_PINNED_INTERVAL	512
 
 /* Working cpumask for load_balance and load_balance_newidle. */
-DEFINE_PER_CPU(cpumask_var_t, load_balance_tmpmask);
+DEFINE_PER_CPU(cpumask_var_t, load_balance_mask);
 
-static int need_active_balance(struct sched_domain *sd, int idle,
-			       int busiest_cpu, int this_cpu)
+static int need_active_balance(struct lb_env *env)
 {
-	if (idle == CPU_NEWLY_IDLE) {
+	struct sched_domain *sd = env->sd;
+
+	if (env->idle == CPU_NEWLY_IDLE) {
 
 		/*
 		 * ASYM_PACKING needs to force migrate tasks from busy but
 		 * higher numbered CPUs in order to pack all tasks in the
 		 * lowest numbered CPUs.
 		 */
-		if ((sd->flags & SD_ASYM_PACKING) && busiest_cpu > this_cpu)
+		if ((sd->flags & SD_ASYM_PACKING) && env->src_cpu > env->dst_cpu)
 			return 1;
-
-		/*
-		 * The only task running in a non-idle cpu can be moved to this
-		 * cpu in an attempt to completely freeup the other CPU
-		 * package.
-		 *
-		 * The package power saving logic comes from
-		 * find_busiest_group(). If there are no imbalance, then
-		 * f_b_g() will return NULL. However when sched_mc={1,2} then
-		 * f_b_g() will select a group from which a running task may be
-		 * pulled to this cpu in order to make the other package idle.
-		 * If there is no opportunity to make a package idle and if
-		 * there are no imbalance, then f_b_g() will return NULL and no
-		 * action will be taken in load_balance_newidle().
-		 *
-		 * Under normal task pull operation due to imbalance, there
-		 * will be more than one task in the source run queue and
-		 * move_tasks() will succeed.  ld_moved will be true and this
-		 * active balance code will not be triggered.
-		 */
-		if (sched_mc_power_savings < POWERSAVINGS_BALANCE_WAKEUP)
-			return 0;
 	}
 
 	return unlikely(sd->nr_balance_failed > sd->cache_nice_tries+2);
@@ -4406,28 +4856,36 @@ static int load_balance(int this_cpu, struct rq *this_rq,
 			struct sched_domain *sd, enum cpu_idle_type idle,
 			int *balance)
 {
-	int ld_moved, active_balance = 0;
+	int ld_moved, cur_ld_moved, active_balance = 0;
 	struct sched_group *group;
-	unsigned long imbalance;
 	struct rq *busiest = NULL;
 	unsigned long flags;
-	struct cpumask *cpus = __get_cpu_var(load_balance_tmpmask);
+	struct cpumask *cpus = __get_cpu_var(load_balance_mask);
 
 	struct lb_env env = {
 		.sd		= sd,
 		.dst_cpu	= this_cpu,
 		.dst_rq		= this_rq,
+		.dst_grpmask    = sched_group_cpus(sd->groups),
 		.idle		= idle,
 		.loop_break	= sched_nr_migrate_break,
+		.cpus		= cpus,
 	};
 
+	/*
+	 * For NEWLY_IDLE load_balancing, we don't need to consider
+	 * other cpus in our group
+	 */
+	if (idle == CPU_NEWLY_IDLE)
+		env.dst_grpmask = NULL;
+
 	cpumask_copy(cpus, cpu_active_mask);
 
+	per_cpu(dbs_boost_load_moved, this_cpu) = 0;
 	schedstat_inc(sd, lb_count[idle]);
 
 redo:
-	group = find_busiest_group(sd, this_cpu, &imbalance, idle,
-				   cpus, balance);
+	group = find_busiest_group(&env, balance);
 
 	if (*balance == 0)
 		goto out_balanced;
@@ -4437,7 +4895,7 @@ redo:
 		goto out_balanced;
 	}
 
-	busiest = find_busiest_queue(sd, group, idle, imbalance, cpus);
+	busiest = find_busiest_queue(&env, group);
 	if (!busiest) {
 		schedstat_inc(sd, lb_nobusyq[idle]);
 		goto out_balanced;
@@ -4445,7 +4903,7 @@ redo:
 
 	BUG_ON(busiest == this_rq);
 
-	schedstat_add(sd, lb_imbalance[idle], imbalance);
+	schedstat_add(sd, lb_imbalance[idle], env.imbalance);
 
 	ld_moved = 0;
 	if (busiest->nr_running > 1) {
@@ -4456,36 +4914,81 @@ redo:
 		 * correctly treated as an imbalance.
 		 */
 		env.flags |= LBF_ALL_PINNED;
-		env.load_move	= imbalance;
-		env.src_cpu	= busiest->cpu;
-		env.src_rq	= busiest;
-		env.loop_max	= min_t(unsigned long, sysctl_sched_nr_migrate, busiest->nr_running);
+		env.src_cpu   = busiest->cpu;
+		env.src_rq    = busiest;
+		env.loop_max  = min(sysctl_sched_nr_migrate, busiest->nr_running);
 
+		update_h_load(env.src_cpu);
 more_balance:
 		local_irq_save(flags);
 		double_rq_lock(this_rq, busiest);
-		if (!env.loop)
-			update_h_load(env.src_cpu);
-		ld_moved += move_tasks(&env);
+
+		/*
+		 * cur_ld_moved - load moved in current iteration
+		 * ld_moved     - cumulative load moved across iterations
+		 */
+		cur_ld_moved = move_tasks(&env);
+		ld_moved += cur_ld_moved;
 		double_rq_unlock(this_rq, busiest);
 		local_irq_restore(flags);
 
+		/*
+		 * some other cpu did the load balance for us.
+		 */
+		if (cur_ld_moved && env.dst_cpu != smp_processor_id())
+			resched_cpu(env.dst_cpu);
+
 		if (env.flags & LBF_NEED_BREAK) {
 			env.flags &= ~LBF_NEED_BREAK;
 			goto more_balance;
 		}
 
 		/*
-		 * some other cpu did the load balance for us.
+		 * Revisit (affine) tasks on src_cpu that couldn't be moved to
+		 * us and move them to an alternate dst_cpu in our sched_group
+		 * where they can run. The upper limit on how many times we
+		 * iterate on same src_cpu is dependent on number of cpus in our
+		 * sched_group.
+		 *
+		 * This changes load balance semantics a bit on who can move
+		 * load to a given_cpu. In addition to the given_cpu itself
+		 * (or a ilb_cpu acting on its behalf where given_cpu is
+		 * nohz-idle), we now have balance_cpu in a position to move
+		 * load to given_cpu. In rare situations, this may cause
+		 * conflicts (balance_cpu and given_cpu/ilb_cpu deciding
+		 * _independently_ and at _same_ time to move some load to
+		 * given_cpu) causing exceess load to be moved to given_cpu.
+		 * This however should not happen so much in practice and
+		 * moreover subsequent load balance cycles should correct the
+		 * excess load moved.
 		 */
-		if (ld_moved && this_cpu != smp_processor_id())
-			resched_cpu(this_cpu);
+		if ((env.flags & LBF_SOME_PINNED) && env.imbalance > 0) {
+
+			this_rq		 = cpu_rq(env.new_dst_cpu);
+			env.dst_rq	 = this_rq;
+			env.dst_cpu	 = env.new_dst_cpu;
+			env.flags	&= ~LBF_SOME_PINNED;
+			env.loop	 = 0;
+			env.loop_break	 = sched_nr_migrate_break;
+
+			/* Prevent to re-select dst_cpu via env's cpus */
+			cpumask_clear_cpu(env.dst_cpu, env.cpus);
+
+			/*
+			 * Go back to "more_balance" rather than "redo" since we
+			 * need to continue with same src_cpu.
+			 */
+			goto more_balance;
+		}
 
 		/* All tasks on this runqueue were pinned by CPU affinity */
 		if (unlikely(env.flags & LBF_ALL_PINNED)) {
 			cpumask_clear_cpu(cpu_of(busiest), cpus);
-			if (!cpumask_empty(cpus))
+			if (!cpumask_empty(cpus)) {
+				env.loop = 0;
+				env.loop_break = sched_nr_migrate_break;
 				goto redo;
+			}
 			goto out_balanced;
 		}
 	}
@@ -4501,7 +5004,7 @@ more_balance:
 		if (idle != CPU_NEWLY_IDLE)
 			sd->nr_balance_failed++;
 
-		if (need_active_balance(sd, idle, cpu_of(busiest), this_cpu)) {
+		if (need_active_balance(&env)) {
 			raw_spin_lock_irqsave(&busiest->lock, flags);
 
 			/* don't kick the active_load_balance_cpu_stop,
@@ -4528,10 +5031,11 @@ more_balance:
 			}
 			raw_spin_unlock_irqrestore(&busiest->lock, flags);
 
-			if (active_balance)
+			if (active_balance) {
 				stop_one_cpu_nowait(cpu_of(busiest),
 					active_load_balance_cpu_stop, busiest,
 					&busiest->active_balance_work);
+			}
 
 			/*
 			 * We've kicked active balancing, reset the failure
@@ -4542,10 +5046,18 @@ more_balance:
 	} else {
 		sd->nr_balance_failed = 0;
 		if (per_cpu(dbs_boost_needed, this_cpu)) {
-			per_cpu(dbs_boost_needed, this_cpu) = false;
+			struct migration_notify_data mnd;
+
+			mnd.src_cpu = cpu_of(busiest);
+			mnd.dest_cpu = this_cpu;
+			mnd.load = per_cpu(dbs_boost_load_moved, this_cpu);
+			if (mnd.load > 100)
+				mnd.load = 100;
 			atomic_notifier_call_chain(&migration_notifier_head,
-						   this_cpu,
-						   (void *)cpu_of(busiest));
+						   0, (void *)&mnd);
+			per_cpu(dbs_boost_needed, this_cpu) = false;
+			per_cpu(dbs_boost_load_moved, this_cpu) = 0;
+
 		}
 	}
 	if (likely(!active_balance)) {
@@ -4580,8 +5092,8 @@ out_one_pinned:
 out:
 	trace_sched_load_balance(this_cpu, idle, *balance,
 				 group ? group->cpumask[0] : 0,
-				 busiest ? busiest->nr_running : 0, imbalance,
-				 env.flags, ld_moved, sd->balance_interval);
+				 busiest ? busiest->nr_running : 0,
+				 env.imbalance, env.flags, ld_moved, sd->balance_interval);
 	return ld_moved;
 }
 
@@ -4605,7 +5117,7 @@ void idle_balance(int this_cpu, struct rq *this_rq)
 	 */
 	raw_spin_unlock(&this_rq->lock);
 
-	update_shares(this_cpu);
+	update_blocked_averages(this_cpu);
 	rcu_read_lock();
 	for_each_domain(this_cpu, sd) {
 		unsigned long interval;
@@ -4657,6 +5169,8 @@ static int active_load_balance_cpu_stop(void *data)
 
 	raw_spin_lock_irq(&busiest_rq->lock);
 
+	per_cpu(dbs_boost_load_moved, target_cpu) = 0;
+
 	/* make sure the requested cpu hasn't gone down in the meantime */
 	if (unlikely(busiest_cpu != smp_processor_id() ||
 		     !busiest_rq->active_balance))
@@ -4707,10 +5221,18 @@ out_unlock:
 	busiest_rq->active_balance = 0;
 	raw_spin_unlock_irq(&busiest_rq->lock);
 	if (per_cpu(dbs_boost_needed, target_cpu)) {
-		per_cpu(dbs_boost_needed, target_cpu) = false;
+		struct migration_notify_data mnd;
+
+		mnd.src_cpu = cpu_of(busiest_rq);
+		mnd.dest_cpu = target_cpu;
+		mnd.load = per_cpu(dbs_boost_load_moved, target_cpu);
+		if (mnd.load > 100)
+			mnd.load = 100;
 		atomic_notifier_call_chain(&migration_notifier_head,
-					   target_cpu,
-					   (void *)cpu_of(busiest_rq));
+					   0, (void *)&mnd);
+
+		per_cpu(dbs_boost_needed, target_cpu) = false;
+		per_cpu(dbs_boost_load_moved, target_cpu) = 0;
 	}
 	return 0;
 }
@@ -4728,104 +5250,15 @@ static struct {
 	unsigned long next_balance;     /* in jiffy units */
 } nohz ____cacheline_aligned;
 
-#if defined(CONFIG_SCHED_MC) || defined(CONFIG_SCHED_SMT)
-/**
- * lowest_flag_domain - Return lowest sched_domain containing flag.
- * @cpu:	The cpu whose lowest level of sched domain is to
- *		be returned.
- * @flag:	The flag to check for the lowest sched_domain
- *		for the given cpu.
- *
- * Returns the lowest sched_domain of a cpu which contains the given flag.
- */
-static inline struct sched_domain *lowest_flag_domain(int cpu, int flag)
-{
-	struct sched_domain *sd;
-
-	for_each_domain(cpu, sd)
-		if (sd->flags & flag)
-			break;
-
-	return sd;
-}
-
-/**
- * for_each_flag_domain - Iterates over sched_domains containing the flag.
- * @cpu:	The cpu whose domains we're iterating over.
- * @sd:		variable holding the value of the power_savings_sd
- *		for cpu.
- * @flag:	The flag to filter the sched_domains to be iterated.
- *
- * Iterates over all the scheduler domains for a given cpu that has the 'flag'
- * set, starting from the lowest sched_domain to the highest.
- */
-#define for_each_flag_domain(cpu, sd, flag) \
-	for (sd = lowest_flag_domain(cpu, flag); \
-		(sd && (sd->flags & flag)); sd = sd->parent)
-
-/**
- * find_new_ilb - Finds the optimum idle load balancer for nomination.
- * @cpu:	The cpu which is nominating a new idle_load_balancer.
- *
- * Returns:	Returns the id of the idle load balancer if it exists,
- *		Else, returns >= nr_cpu_ids.
- *
- * This algorithm picks the idle load balancer such that it belongs to a
- * semi-idle powersavings sched_domain. The idea is to try and avoid
- * completely idle packages/cores just for the purpose of idle load balancing
- * when there are other idle cpu's which are better suited for that job.
- */
-static int find_new_ilb(int cpu)
+static inline int find_new_ilb(int call_cpu)
 {
 	int ilb = cpumask_first(nohz.idle_cpus_mask);
-	struct sched_group *ilbg;
-	struct sched_domain *sd;
-
-	/*
-	 * Have idle load balancer selection from semi-idle packages only
-	 * when power-aware load balancing is enabled
-	 */
-	if (!(sched_smt_power_savings || sched_mc_power_savings))
-		goto out_done;
-
-	/*
-	 * Optimize for the case when we have no idle CPUs or only one
-	 * idle CPU. Don't walk the sched_domain hierarchy in such cases
-	 */
-	if (cpumask_weight(nohz.idle_cpus_mask) < 2)
-		goto out_done;
-
-	rcu_read_lock();
-	for_each_flag_domain(cpu, sd, SD_POWERSAVINGS_BALANCE) {
-		ilbg = sd->groups;
-
-		do {
-			if (ilbg->group_weight !=
-				atomic_read(&ilbg->sgp->nr_busy_cpus)) {
-				ilb = cpumask_first_and(nohz.idle_cpus_mask,
-							sched_group_cpus(ilbg));
-				goto unlock;
-			}
-
-			ilbg = ilbg->next;
-
-		} while (ilbg != sd->groups);
-	}
-unlock:
-	rcu_read_unlock();
 
-out_done:
 	if (ilb < nr_cpu_ids && idle_cpu(ilb))
 		return ilb;
 
 	return nr_cpu_ids;
 }
-#else /*  (CONFIG_SCHED_MC || CONFIG_SCHED_SMT) */
-static inline int find_new_ilb(int call_cpu)
-{
-	return nr_cpu_ids;
-}
-#endif
 
 /*
  * Kick a CPU to do the nohz balancing, if it is time for it. We pick the
@@ -4869,13 +5302,16 @@ static inline void set_cpu_sd_state_busy(void)
 	struct sched_domain *sd;
 	int cpu = smp_processor_id();
 
-	if (!test_bit(NOHZ_IDLE, nohz_flags(cpu)))
-		return;
-	clear_bit(NOHZ_IDLE, nohz_flags(cpu));
-
 	rcu_read_lock();
-	for_each_domain(cpu, sd)
+	sd = rcu_dereference_check_sched_domain(cpu_rq(cpu)->sd);
+
+	if (!sd || !sd->nohz_idle)
+		goto unlock;
+	sd->nohz_idle = 0;
+
+	for (; sd; sd = sd->parent)
 		atomic_inc(&sd->groups->sgp->nr_busy_cpus);
+unlock:
 	rcu_read_unlock();
 }
 
@@ -4884,13 +5320,16 @@ void set_cpu_sd_state_idle(void)
 	struct sched_domain *sd;
 	int cpu = smp_processor_id();
 
-	if (test_bit(NOHZ_IDLE, nohz_flags(cpu)))
-		return;
-	set_bit(NOHZ_IDLE, nohz_flags(cpu));
-
 	rcu_read_lock();
-	for_each_domain(cpu, sd)
+	sd = rcu_dereference_check_sched_domain(cpu_rq(cpu)->sd);
+
+	if (!sd || sd->nohz_idle)
+		goto unlock;
+	sd->nohz_idle = 1;
+
+	for (; sd; sd = sd->parent)
 		atomic_dec(&sd->groups->sgp->nr_busy_cpus);
+unlock:
 	rcu_read_unlock();
 }
 
@@ -4960,7 +5399,7 @@ static void rebalance_domains(int cpu, enum cpu_idle_type idle)
 	int update_next_balance = 0;
 	int need_serialize;
 
-	update_shares(cpu);
+	update_blocked_averages(cpu);
 
 	rcu_read_lock();
 	for_each_domain(cpu, sd) {
@@ -4985,10 +5424,11 @@ static void rebalance_domains(int cpu, enum cpu_idle_type idle)
 		if (time_after_eq(jiffies, sd->last_balance + interval)) {
 			if (load_balance(cpu, rq, sd, idle, &balance)) {
 				/*
-				 * We've pulled tasks over so either we're no
-				 * longer idle.
+				 * The LBF_SOME_PINNED logic could have changed
+				 * env->dst_cpu, so we can't know our idle
+				 * state even if we migrated tasks. Update it.
 				 */
-				idle = CPU_NOT_IDLE;
+				idle = idle_cpu(cpu) ? CPU_IDLE : CPU_NOT_IDLE;
 			}
 			sd->last_balance = jiffies;
 		}
@@ -5046,14 +5486,15 @@ static void nohz_idle_balance(int this_cpu, enum cpu_idle_type idle)
 		if (need_resched())
 			break;
 
-		raw_spin_lock_irq(&this_rq->lock);
-		update_rq_clock(this_rq);
-		update_cpu_load(this_rq);
-		raw_spin_unlock_irq(&this_rq->lock);
+		rq = cpu_rq(balance_cpu);
+
+		raw_spin_lock_irq(&rq->lock);
+		update_rq_clock(rq);
+		update_idle_cpu_load(rq);
+		raw_spin_unlock_irq(&rq->lock);
 
 		rebalance_domains(balance_cpu, CPU_IDLE);
 
-		rq = cpu_rq(balance_cpu);
 		if (time_after(this_rq->next_balance, rq->next_balance))
 			this_rq->next_balance = rq->next_balance;
 	}
@@ -5196,6 +5637,8 @@ static void task_tick_fair(struct rq *rq, struct task_struct *curr, int queued)
 		cfs_rq = cfs_rq_of(se);
 		entity_tick(cfs_rq, se, queued);
 	}
+
+	update_rq_runnable_avg(rq, 1);
 }
 
 /*
@@ -5218,11 +5661,15 @@ static void task_fork_fair(struct task_struct *p)
 	cfs_rq = task_cfs_rq(current);
 	curr = cfs_rq->curr;
 
-	if (unlikely(task_cpu(p) != this_cpu)) {
-		rcu_read_lock();
-		__set_task_cpu(p, this_cpu);
-		rcu_read_unlock();
-	}
+	/*
+	 * Not only the cpu but also the task_group of the parent might have
+	 * been changed after parent->se.parent,cfs_rq were copied to
+	 * child->se.parent,cfs_rq. So call __set_task_cpu() to make those
+	 * of child point to valid ones.
+	 */
+	rcu_read_lock();
+	__set_task_cpu(p, this_cpu);
+	rcu_read_unlock();
 
 	update_curr(cfs_rq);
 
@@ -5272,15 +5719,15 @@ static void switched_from_fair(struct rq *rq, struct task_struct *p)
 	struct cfs_rq *cfs_rq = cfs_rq_of(se);
 
 	/*
-	 * Ensure the task's vruntime is normalized, so that when its
+	 * Ensure the task's vruntime is normalized, so that when it's
 	 * switched back to the fair class the enqueue_entity(.flags=0) will
 	 * do the right thing.
 	 *
-	 * If it was on_rq, then the dequeue_entity(.flags=0) will already
-	 * have normalized the vruntime, if it was !on_rq, then only when
+	 * If it's on_rq, then the dequeue_entity(.flags=0) will already
+	 * have normalized the vruntime, if it's !on_rq, then only when
 	 * the task is sleeping will it still have non-normalized vruntime.
 	 */
-	if (!se->on_rq && p->state != TASK_RUNNING) {
+	if (!p->on_rq && p->state != TASK_RUNNING) {
 		/*
 		 * Fix up our vruntime so that the current sleep doesn't
 		 * cause 'unlimited' sleep bonus.
@@ -5288,6 +5735,20 @@ static void switched_from_fair(struct rq *rq, struct task_struct *p)
 		place_entity(cfs_rq, se, 0);
 		se->vruntime -= cfs_rq->min_vruntime;
 	}
+
+#if defined(CONFIG_FAIR_GROUP_SCHED) && defined(CONFIG_SMP)
+	/*
+	* Remove our load from contribution when we leave sched_fair
+	* and ensure we don't carry in an old decay_count if we
+	* switch back.
+	*/
+	if (p->se.avg.decay_count) {
+		struct cfs_rq *cfs_rq = cfs_rq_of(&p->se);
+		__synchronize_entity_decay(&p->se);
+		subtract_blocked_load_contrib(cfs_rq,
+				p->se.avg.load_avg_contrib);
+	}
+#endif
 }
 
 /*
@@ -5334,11 +5795,16 @@ void init_cfs_rq(struct cfs_rq *cfs_rq)
 #ifndef CONFIG_64BIT
 	cfs_rq->min_vruntime_copy = cfs_rq->min_vruntime;
 #endif
+#if defined(CONFIG_FAIR_GROUP_SCHED) && defined(CONFIG_SMP)
+	atomic64_set(&cfs_rq->decay_counter, 1);
+	atomic64_set(&cfs_rq->removed_load, 0);
+#endif
 }
 
 #ifdef CONFIG_FAIR_GROUP_SCHED
 static void task_move_group_fair(struct task_struct *p, int on_rq)
 {
+	struct cfs_rq *cfs_rq;
 	/*
 	 * If the task was not on the rq at the time of this cgroup movement
 	 * it must have been asleep, sleeping tasks keep their ->vruntime
@@ -5370,8 +5836,19 @@ static void task_move_group_fair(struct task_struct *p, int on_rq)
 	if (!on_rq)
 		p->se.vruntime -= cfs_rq_of(&p->se)->min_vruntime;
 	set_task_rq(p, task_cpu(p));
-	if (!on_rq)
-		p->se.vruntime += cfs_rq_of(&p->se)->min_vruntime;
+	if (!on_rq) {
+		cfs_rq = cfs_rq_of(&p->se);
+		p->se.vruntime += cfs_rq->min_vruntime;
+#ifdef CONFIG_SMP
+		/*
+		 * migrate_task_rq_fair() will have removed our previous
+		 * contribution, but we must synchronize for ongoing future
+		 * decay.
+		 */
+		p->se.avg.decay_count = atomic64_read(&cfs_rq->decay_counter);
+		cfs_rq->blocked_load_avg += p->se.avg.load_avg_contrib;
+#endif
+	}
 }
 
 void free_fair_sched_group(struct task_group *tg)
@@ -5456,10 +5933,6 @@ void init_tg_cfs_entry(struct task_group *tg, struct cfs_rq *cfs_rq,
 
 	cfs_rq->tg = tg;
 	cfs_rq->rq = rq;
-#ifdef CONFIG_SMP
-	/* allow initial update_cfs_load() to truncate */
-	cfs_rq->load_stamp = 1;
-#endif
 	init_cfs_rq_runtime(cfs_rq);
 
 	tg->cfs_rq[cpu] = cfs_rq;
@@ -5475,7 +5948,8 @@ void init_tg_cfs_entry(struct task_group *tg, struct cfs_rq *cfs_rq,
 		se->cfs_rq = parent->my_q;
 
 	se->my_q = cfs_rq;
-	update_load_set(&se->load, 0);
+	/* guarantee group entities always have weight */
+	update_load_set(&se->load, NICE_0_LOAD);
 	se->parent = parent;
 }
 
@@ -5561,7 +6035,9 @@ const struct sched_class fair_sched_class = {
 
 #ifdef CONFIG_SMP
 	.select_task_rq		= select_task_rq_fair,
-
+#ifdef CONFIG_FAIR_GROUP_SCHED
+	.migrate_task_rq	= migrate_task_rq_fair,
+#endif
 	.rq_online		= rq_online_fair,
 	.rq_offline		= rq_offline_fair,
 
diff --git a/kernel/sched/features.h b/kernel/sched/features.h
index de00a48..f06d274 100644
--- a/kernel/sched/features.h
+++ b/kernel/sched/features.h
@@ -12,14 +12,6 @@ SCHED_FEAT(GENTLE_FAIR_SLEEPERS, true)
 SCHED_FEAT(START_DEBIT, true)
 
 /*
- * Based on load and program behaviour, see if it makes sense to place
- * a newly woken task on the same cpu as the task that woke it --
- * improve cache locality. Typically used with SYNC wakeups as
- * generated by pipes and the like, see also SYNC_WAKEUPS.
- */
-SCHED_FEAT(AFFINE_WAKEUPS, true)
-
-/*
  * Prefer to schedule the task we woke last (assuming it failed
  * wakeup-preemption), since its likely going to consume data we
  * touched, increases cache locality.
@@ -40,6 +32,11 @@ SCHED_FEAT(LAST_BUDDY, true)
 SCHED_FEAT(CACHE_HOT_BUDDY, true)
 
 /*
+ * Allow wakeup-time preemption of the current task:
+ */
+SCHED_FEAT(WAKEUP_PREEMPTION, true)
+
+/*
  * Use arch dependent cpu power functions
  */
 SCHED_FEAT(ARCH_POWER, false)
@@ -49,13 +46,6 @@ SCHED_FEAT(DOUBLE_TICK, false)
 SCHED_FEAT(LB_BIAS, true)
 
 /*
- * Spin-wait on mutex acquisition when the mutex owner is running on
- * another cpu -- assumes that when the owner is running, it will soon
- * release the lock. Decreases scheduling overhead.
- */
-SCHED_FEAT(OWNER_SPIN, true)
-
-/*
  * Decrement CPU power based on time not spent running tasks
  */
 SCHED_FEAT(NONTASK_POWER, true)
diff --git a/kernel/sched/idle_task.c b/kernel/sched/idle_task.c
index 91b4c95..aa5ec1c 100644
--- a/kernel/sched/idle_task.c
+++ b/kernel/sched/idle_task.c
@@ -13,6 +13,16 @@ select_task_rq_idle(struct task_struct *p, int sd_flag, int flags)
 {
 	return task_cpu(p); /* IDLE tasks as never migrated */
 }
+
+static void pre_schedule_idle(struct rq *rq, struct task_struct *prev)
+{
+	idle_exit_fair(rq);
+}
+
+static void post_schedule_idle(struct rq *rq)
+{
+	idle_enter_fair(rq);
+}
 #endif /* CONFIG_SMP */
 /*
  * Idle tasks are unconditionally rescheduled:
@@ -25,7 +35,10 @@ static void check_preempt_curr_idle(struct rq *rq, struct task_struct *p, int fl
 static struct task_struct *pick_next_task_idle(struct rq *rq)
 {
 	schedstat_inc(rq, sched_goidle);
-	calc_load_account_idle(rq);
+#ifdef CONFIG_SMP
+	/* Trigger the post schedule to do an idle_enter for CFS */
+	rq->post_schedule = 1;
+#endif
 	return rq->idle;
 }
 
@@ -87,6 +100,8 @@ const struct sched_class idle_sched_class = {
 
 #ifdef CONFIG_SMP
 	.select_task_rq		= select_task_rq_idle,
+	.pre_schedule		= pre_schedule_idle,
+	.post_schedule		= post_schedule_idle,
 #endif
 
 	.set_curr_task          = set_curr_task_idle,
diff --git a/kernel/sched/rt.c b/kernel/sched/rt.c
index 3d4b1e2..27caaa6 100644
--- a/kernel/sched/rt.c
+++ b/kernel/sched/rt.c
@@ -274,13 +274,16 @@ static void update_rt_migration(struct rt_rq *rt_rq)
 
 static void inc_rt_migration(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)
 {
+	struct task_struct *p;
+
 	if (!rt_entity_is_task(rt_se))
 		return;
 
+	p = rt_task_of(rt_se);
 	rt_rq = &rq_of_rt_rq(rt_rq)->rt;
 
 	rt_rq->rt_nr_total++;
-	if (rt_se->nr_cpus_allowed > 1)
+	if (p->nr_cpus_allowed > 1)
 		rt_rq->rt_nr_migratory++;
 
 	update_rt_migration(rt_rq);
@@ -288,13 +291,16 @@ static void inc_rt_migration(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)
 
 static void dec_rt_migration(struct sched_rt_entity *rt_se, struct rt_rq *rt_rq)
 {
+	struct task_struct *p;
+
 	if (!rt_entity_is_task(rt_se))
 		return;
 
+	p = rt_task_of(rt_se);
 	rt_rq = &rq_of_rt_rq(rt_rq)->rt;
 
 	rt_rq->rt_nr_total--;
-	if (rt_se->nr_cpus_allowed > 1)
+	if (p->nr_cpus_allowed > 1)
 		rt_rq->rt_nr_migratory--;
 
 	update_rt_migration(rt_rq);
@@ -691,15 +697,6 @@ balanced:
 	}
 }
 
-static void disable_runtime(struct rq *rq)
-{
-	unsigned long flags;
-
-	raw_spin_lock_irqsave(&rq->lock, flags);
-	__disable_runtime(rq);
-	raw_spin_unlock_irqrestore(&rq->lock, flags);
-}
-
 static void __enable_runtime(struct rq *rq)
 {
 	rt_rq_iter_t iter;
@@ -724,37 +721,6 @@ static void __enable_runtime(struct rq *rq)
 	}
 }
 
-static void enable_runtime(struct rq *rq)
-{
-	unsigned long flags;
-
-	raw_spin_lock_irqsave(&rq->lock, flags);
-	__enable_runtime(rq);
-	raw_spin_unlock_irqrestore(&rq->lock, flags);
-}
-
-int update_runtime(struct notifier_block *nfb, unsigned long action, void *hcpu)
-{
-	int cpu = (int)(long)hcpu;
-
-	switch (action) {
-	case CPU_DOWN_PREPARE:
-	case CPU_DOWN_PREPARE_FROZEN:
-		disable_runtime(cpu_rq(cpu));
-		return NOTIFY_OK;
-
-	case CPU_DOWN_FAILED:
-	case CPU_DOWN_FAILED_FROZEN:
-	case CPU_ONLINE:
-	case CPU_ONLINE_FROZEN:
-		enable_runtime(cpu_rq(cpu));
-		return NOTIFY_OK;
-
-	default:
-		return NOTIFY_DONE;
-	}
-}
-
 static int balance_runtime(struct rt_rq *rt_rq)
 {
 	int more = 0;
@@ -783,6 +749,19 @@ static int do_sched_rt_period_timer(struct rt_bandwidth *rt_b, int overrun)
 	const struct cpumask *span;
 
 	span = sched_rt_period_mask();
+#ifdef CONFIG_RT_GROUP_SCHED
+	/*
+	 * FIXME: isolated CPUs should really leave the root task group,
+	 * whether they are isolcpus or were isolated via cpusets, lest
+	 * the timer run on a CPU which does not service all runqueues,
+	 * potentially leaving other CPUs indefinitely throttled.  If
+	 * isolation is really required, the user will turn the throttle
+	 * off to kill the perturbations it causes anyway.  Meanwhile,
+	 * this maintains functionality for boot and/or troubleshooting.
+	 */
+	if (rt_b == &root_task_group.rt_bandwidth)
+		span = cpu_online_mask;
+#endif
 	for_each_cpu(i, span) {
 		int enqueue = 0;
 		struct rt_rq *rt_rq = sched_rt_period_rt_rq(rt_b, i);
@@ -906,8 +885,8 @@ static void update_curr_rt(struct rq *rq)
 		return;
 
 	delta_exec = rq->clock_task - curr->se.exec_start;
-	if (unlikely((s64)delta_exec < 0))
-		delta_exec = 0;
+	if (unlikely((s64)delta_exec <= 0))
+		return;
 
 	schedstat_set(curr->se.statistics.exec_max,
 		      max(curr->se.statistics.exec_max, delta_exec));
@@ -943,6 +922,13 @@ inc_rt_prio_smp(struct rt_rq *rt_rq, int prio, int prev_prio)
 {
 	struct rq *rq = rq_of_rt_rq(rt_rq);
 
+#ifdef CONFIG_RT_GROUP_SCHED
+	/*
+	 * Change rq's cpupri only if rt_rq is the top queue.
+	 */
+	if (&rq->rt != rt_rq)
+		return;
+#endif
 	if (rq->online && prio < prev_prio)
 		cpupri_set(&rq->rd->cpupri, rq->cpu, prio);
 }
@@ -952,6 +938,13 @@ dec_rt_prio_smp(struct rt_rq *rt_rq, int prio, int prev_prio)
 {
 	struct rq *rq = rq_of_rt_rq(rt_rq);
 
+#ifdef CONFIG_RT_GROUP_SCHED
+	/*
+	 * Change rq's cpupri only if rt_rq is the top queue.
+	 */
+	if (&rq->rt != rt_rq)
+		return;
+#endif
 	if (rq->online && rt_rq->highest_prio.curr != prev_prio)
 		cpupri_set(&rq->rd->cpupri, rq->cpu, rt_rq->highest_prio.curr);
 }
@@ -1162,7 +1155,7 @@ enqueue_task_rt(struct rq *rq, struct task_struct *p, int flags)
 
 	enqueue_rt_entity(rt_se, flags & ENQUEUE_HEAD);
 
-	if (!task_current(rq, p) && p->rt.nr_cpus_allowed > 1)
+	if (!task_current(rq, p) && p->nr_cpus_allowed > 1)
 		enqueue_pushable_task(rq, p);
 
 	inc_nr_running(rq);
@@ -1226,7 +1219,7 @@ select_task_rq_rt(struct task_struct *p, int sd_flag, int flags)
 
 	cpu = task_cpu(p);
 
-	if (p->rt.nr_cpus_allowed == 1)
+	if (p->nr_cpus_allowed == 1)
 		goto out;
 
 	/* For anything but wake ups, just return the task_cpu */
@@ -1261,9 +1254,9 @@ select_task_rq_rt(struct task_struct *p, int sd_flag, int flags)
 	 * will have to sort it out.
 	 */
 	if (curr && unlikely(rt_task(curr)) &&
-	    (curr->rt.nr_cpus_allowed < 2 ||
+	    (curr->nr_cpus_allowed < 2 ||
 	     curr->prio <= p->prio) &&
-	    (p->rt.nr_cpus_allowed > 1)) {
+	    (p->nr_cpus_allowed > 1)) {
 		int target = find_lowest_rq(p);
 
 		if (target != -1)
@@ -1277,10 +1270,10 @@ out:
 
 static void check_preempt_equal_prio(struct rq *rq, struct task_struct *p)
 {
-	if (rq->curr->rt.nr_cpus_allowed == 1)
+	if (rq->curr->nr_cpus_allowed == 1)
 		return;
 
-	if (p->rt.nr_cpus_allowed != 1
+	if (p->nr_cpus_allowed != 1
 	    && cpupri_find(&rq->rd->cpupri, p, NULL))
 		return;
 
@@ -1396,7 +1389,7 @@ static void put_prev_task_rt(struct rq *rq, struct task_struct *p)
 	 * The previous task needs to be made eligible for pushing
 	 * if it is still active
 	 */
-	if (on_rt_rq(&p->rt) && p->rt.nr_cpus_allowed > 1)
+	if (on_rt_rq(&p->rt) && p->nr_cpus_allowed > 1)
 		enqueue_pushable_task(rq, p);
 }
 
@@ -1408,8 +1401,7 @@ static void put_prev_task_rt(struct rq *rq, struct task_struct *p)
 static int pick_rt_task(struct rq *rq, struct task_struct *p, int cpu)
 {
 	if (!task_running(rq, p) &&
-	    (cpu < 0 || cpumask_test_cpu(cpu, tsk_cpus_allowed(p))) &&
-	    (p->rt.nr_cpus_allowed > 1))
+	    cpumask_test_cpu(cpu, tsk_cpus_allowed(p)))
 		return 1;
 	return 0;
 }
@@ -1465,7 +1457,7 @@ static int find_lowest_rq(struct task_struct *task)
 	if (unlikely(!lowest_mask))
 		return -1;
 
-	if (task->rt.nr_cpus_allowed == 1)
+	if (task->nr_cpus_allowed == 1)
 		return -1; /* No other targets possible */
 
 	if (!cpupri_find(&task_rq(task)->rd->cpupri, task, lowest_mask))
@@ -1557,7 +1549,7 @@ static struct rq *find_lock_lowest_rq(struct task_struct *task, struct rq *rq)
 				     task_running(rq, task) ||
 				     !task->on_rq)) {
 
-				raw_spin_unlock(&lowest_rq->lock);
+				double_unlock_balance(rq, lowest_rq);
 				lowest_rq = NULL;
 				break;
 			}
@@ -1587,7 +1579,7 @@ static struct task_struct *pick_next_pushable_task(struct rq *rq)
 
 	BUG_ON(rq->cpu != task_cpu(p));
 	BUG_ON(task_current(rq, p));
-	BUG_ON(p->rt.nr_cpus_allowed <= 1);
+	BUG_ON(p->nr_cpus_allowed <= 1);
 
 	BUG_ON(!p->on_rq);
 	BUG_ON(!rt_task(p));
@@ -1613,11 +1605,6 @@ static int push_rt_task(struct rq *rq)
 	if (!next_task)
 		return 0;
 
-#ifdef __ARCH_WANT_INTERRUPTS_ON_CTXSW
-       if (unlikely(task_running(rq, next_task)))
-               return 0;
-#endif
-
 retry:
 	if (unlikely(next_task == rq->curr)) {
 		WARN_ON(1);
@@ -1794,9 +1781,9 @@ static void task_woken_rt(struct rq *rq, struct task_struct *p)
 	if (!task_running(rq, p) &&
 	    !test_tsk_need_resched(rq->curr) &&
 	    has_pushable_tasks(rq) &&
-	    p->rt.nr_cpus_allowed > 1 &&
+	    p->nr_cpus_allowed > 1 &&
 	    rt_task(rq->curr) &&
-	    (rq->curr->rt.nr_cpus_allowed < 2 ||
+	    (rq->curr->nr_cpus_allowed < 2 ||
 	     rq->curr->prio <= p->prio))
 		push_rt_tasks(rq);
 }
@@ -1804,44 +1791,40 @@ static void task_woken_rt(struct rq *rq, struct task_struct *p)
 static void set_cpus_allowed_rt(struct task_struct *p,
 				const struct cpumask *new_mask)
 {
-	int weight = cpumask_weight(new_mask);
+	struct rq *rq;
+	int weight;
 
 	BUG_ON(!rt_task(p));
 
-	/*
-	 * Update the migration status of the RQ if we have an RT task
-	 * which is running AND changing its weight value.
-	 */
-	if (p->on_rq && (weight != p->rt.nr_cpus_allowed)) {
-		struct rq *rq = task_rq(p);
-
-		if (!task_current(rq, p)) {
-			/*
-			 * Make sure we dequeue this task from the pushable list
-			 * before going further.  It will either remain off of
-			 * the list because we are no longer pushable, or it
-			 * will be requeued.
-			 */
-			if (p->rt.nr_cpus_allowed > 1)
-				dequeue_pushable_task(rq, p);
+	if (!p->on_rq)
+		return;
 
-			/*
-			 * Requeue if our weight is changing and still > 1
-			 */
-			if (weight > 1)
-				enqueue_pushable_task(rq, p);
+	weight = cpumask_weight(new_mask);
 
-		}
+	/*
+	 * Only update if the process changes its state from whether it
+	 * can migrate or not.
+	 */
+	if ((p->nr_cpus_allowed > 1) == (weight > 1))
+		return;
 
-		if ((p->rt.nr_cpus_allowed <= 1) && (weight > 1)) {
-			rq->rt.rt_nr_migratory++;
-		} else if ((p->rt.nr_cpus_allowed > 1) && (weight <= 1)) {
-			BUG_ON(!rq->rt.rt_nr_migratory);
-			rq->rt.rt_nr_migratory--;
-		}
+	rq = task_rq(p);
 
-		update_rt_migration(&rq->rt);
+	/*
+	 * The process used to be able to migrate OR it can now migrate
+	 */
+	if (weight <= 1) {
+		if (!task_current(rq, p))
+			dequeue_pushable_task(rq, p);
+		BUG_ON(!rq->rt.rt_nr_migratory);
+		rq->rt.rt_nr_migratory--;
+	} else {
+		if (!task_current(rq, p))
+			enqueue_pushable_task(rq, p);
+		rq->rt.rt_nr_migratory++;
 	}
+
+	update_rt_migration(&rq->rt);
 }
 
 /* Assumes rq->lock is held */
@@ -1879,8 +1862,11 @@ static void switched_from_rt(struct rq *rq, struct task_struct *p)
 	 * we may need to handle the pulling of RT tasks
 	 * now.
 	 */
-	if (p->on_rq && !rq->rt.rt_nr_running)
-		pull_rt_task(rq);
+	if (!p->on_rq || rq->rt.rt_nr_running)
+		return;
+
+	if (pull_rt_task(rq))
+		resched_task(rq->curr);
 }
 
 void init_sched_rt_class(void)
@@ -1975,7 +1961,11 @@ static void watchdog(struct rq *rq, struct task_struct *p)
 	if (soft != RLIM_INFINITY) {
 		unsigned long next;
 
-		p->rt.timeout++;
+		if (p->rt.watchdog_stamp != jiffies) {
+			p->rt.timeout++;
+			p->rt.watchdog_stamp = jiffies;
+		}
+
 		next = DIV_ROUND_UP(min(soft, hard), USEC_PER_SEC/HZ);
 		if (p->rt.timeout > next)
 			p->cputime_expires.sched_exp = p->se.sum_exec_runtime;
diff --git a/kernel/sched/sched.h b/kernel/sched/sched.h
index 34fe64f..3d22e09 100644
--- a/kernel/sched/sched.h
+++ b/kernel/sched/sched.h
@@ -114,6 +114,8 @@ struct task_group {
 	unsigned long shares;
 
 	atomic_t load_weight;
+	atomic64_t load_avg;
+	atomic_t runnable_avg;
 #endif
 
 #ifdef CONFIG_RT_GROUP_SCHED
@@ -203,7 +205,7 @@ struct cfs_bandwidth { };
 /* CFS-related fields in a runqueue */
 struct cfs_rq {
 	struct load_weight load;
-	unsigned long nr_running, h_nr_running;
+	unsigned int nr_running, h_nr_running;
 
 	u64 exec_clock;
 	u64 min_vruntime;
@@ -224,22 +226,29 @@ struct cfs_rq {
 	unsigned int nr_spread_over;
 #endif
 
+#ifdef CONFIG_SMP
+/*
+ * Load-tracking only depends on SMP, FAIR_GROUP_SCHED dependency below may be
+ * removed when useful for applications beyond shares distribution (e.g.
+ * load-balance).
+ */
 #ifdef CONFIG_FAIR_GROUP_SCHED
-	struct rq *rq;	/* cpu runqueue to which this cfs_rq is attached */
-
 	/*
-	 * leaf cfs_rqs are those that hold tasks (lowest schedulable entity in
-	 * a hierarchy). Non-leaf lrqs hold other higher schedulable entities
-	 * (like users, containers etc.)
-	 *
-	 * leaf_cfs_rq_list ties together list of leaf cfs_rq's in a cpu. This
-	 * list is used during load balance.
+	 * CFS Load tracking
+	 * Under CFS, load is tracked on a per-entity basis and aggregated up.
+	 * This allows for the description of both thread and group usage (in
+	 * the FAIR_GROUP_SCHED case).
 	 */
-	int on_list;
-	struct list_head leaf_cfs_rq_list;
-	struct task_group *tg;	/* group that "owns" this runqueue */
+	u64 runnable_load_avg, blocked_load_avg;
+	atomic64_t decay_counter, removed_load;
+	u64 last_decay;
+#endif /* CONFIG_FAIR_GROUP_SCHED */
+/* These always depend on CONFIG_FAIR_GROUP_SCHED */
+#ifdef CONFIG_FAIR_GROUP_SCHED
+	u32 tg_runnable_contrib;
+	u64 tg_load_contrib;
+#endif /* CONFIG_FAIR_GROUP_SCHED */
 
-#ifdef CONFIG_SMP
 	/*
 	 *   h_load = weight * f(tg)
 	 *
@@ -247,26 +256,30 @@ struct cfs_rq {
 	 * this group.
 	 */
 	unsigned long h_load;
+#endif /* CONFIG_SMP */
+
+#ifdef CONFIG_FAIR_GROUP_SCHED
+	struct rq *rq;	/* cpu runqueue to which this cfs_rq is attached */
 
 	/*
-	 * Maintaining per-cpu shares distribution for group scheduling
+	 * leaf cfs_rqs are those that hold tasks (lowest schedulable entity in
+	 * a hierarchy). Non-leaf lrqs hold other higher schedulable entities
+	 * (like users, containers etc.)
 	 *
-	 * load_stamp is the last time we updated the load average
-	 * load_last is the last time we updated the load average and saw load
-	 * load_unacc_exec_time is currently unaccounted execution time
+	 * leaf_cfs_rq_list ties together list of leaf cfs_rq's in a cpu. This
+	 * list is used during load balance.
 	 */
-	u64 load_avg;
-	u64 load_period;
-	u64 load_stamp, load_last, load_unacc_exec_time;
+	int on_list;
+	struct list_head leaf_cfs_rq_list;
+	struct task_group *tg;	/* group that "owns" this runqueue */
 
-	unsigned long load_contribution;
-#endif /* CONFIG_SMP */
 #ifdef CONFIG_CFS_BANDWIDTH
 	int runtime_enabled;
 	u64 runtime_expires;
 	s64 runtime_remaining;
 
-	u64 throttled_timestamp;
+	u64 throttled_clock, throttled_clock_task;
+	u64 throttled_clock_task_time;
 	int throttled, throttle_count;
 	struct list_head throttled_list;
 #endif /* CONFIG_CFS_BANDWIDTH */
@@ -281,7 +294,7 @@ static inline int rt_bandwidth_enabled(void)
 /* Real-Time classes' related field in a runqueue: */
 struct rt_rq {
 	struct rt_prio_array active;
-	unsigned long rt_nr_running;
+	unsigned int rt_nr_running;
 #if defined CONFIG_SMP || defined CONFIG_RT_GROUP_SCHED
 	struct {
 		int curr; /* highest queued rt task prio */
@@ -355,7 +368,7 @@ struct rq {
 	 * nr_running and cpu_load should be in the same cacheline because
 	 * remote CPUs use both these fields when doing load calculation.
 	 */
-	unsigned long nr_running;
+	unsigned int nr_running;
 	#define CPU_LOAD_IDX_MAX 5
 	unsigned long cpu_load[CPU_LOAD_IDX_MAX];
 	unsigned long last_load_update_tick;
@@ -376,7 +389,11 @@ struct rq {
 #ifdef CONFIG_FAIR_GROUP_SCHED
 	/* list of leaf cfs_rq on this cpu: */
 	struct list_head leaf_cfs_rq_list;
-#endif
+#ifdef CONFIG_SMP
+	unsigned long h_load_throttle;
+#endif /* CONFIG_SMP */
+#endif /* CONFIG_FAIR_GROUP_SCHED */
+
 #ifdef CONFIG_RT_GROUP_SCHED
 	struct list_head leaf_rt_rq_list;
 #endif
@@ -422,6 +439,9 @@ struct rq {
 	u64 avg_idle;
 #endif
 
+	int cur_freq, max_freq, min_freq;
+	u64 cumulative_runnable_avg;
+
 #ifdef CONFIG_IRQ_TIME_ACCOUNTING
 	u64 prev_irq_time;
 #endif
@@ -465,6 +485,8 @@ struct rq {
 #ifdef CONFIG_SMP
 	struct llist_head wake_list;
 #endif
+
+	struct sched_avg avg;
 };
 
 static inline int cpu_of(struct rq *rq)
@@ -484,6 +506,22 @@ DECLARE_PER_CPU(struct rq, runqueues);
 #define cpu_curr(cpu)		(cpu_rq(cpu)->curr)
 #define raw_rq()		(&__raw_get_cpu_var(runqueues))
 
+#ifdef CONFIG_INTELLI_PLUG
+struct nr_stats_s {
+	/* time-based average load */
+	u64 nr_last_stamp;
+	unsigned int ave_nr_running;
+	seqcount_t ave_seqcnt;
+};
+
+#define NR_AVE_PERIOD_EXP	28
+#define NR_AVE_SCALE(x)		((x) << FSHIFT)
+#define NR_AVE_PERIOD		(1 << NR_AVE_PERIOD_EXP)
+#define NR_AVE_DIV_PERIOD(x)	((x) >> NR_AVE_PERIOD_EXP)
+
+DECLARE_PER_CPU(struct nr_stats_s, runqueue_stats);
+#endif
+
 #ifdef CONFIG_SMP
 
 #define rcu_dereference_check_sched_domain(p) \
@@ -533,6 +571,23 @@ DECLARE_PER_CPU(int, sd_llc_id);
 #include "stats.h"
 #include "auto_group.h"
 
+extern unsigned int sched_ravg_window;
+extern unsigned int pct_task_load(struct task_struct *p);
+extern void init_new_task_load(struct task_struct *p);
+
+static inline void
+inc_cumulative_runnable_avg(struct rq *rq, struct task_struct *p)
+{
+	rq->cumulative_runnable_avg += p->ravg.demand;
+}
+
+static inline void
+dec_cumulative_runnable_avg(struct rq *rq, struct task_struct *p)
+{
+	rq->cumulative_runnable_avg -= p->ravg.demand;
+	BUG_ON((s64)rq->cumulative_runnable_avg < 0);
+}
+
 #ifdef CONFIG_CGROUP_SCHED
 
 /*
@@ -744,11 +799,7 @@ static inline void prepare_lock_switch(struct rq *rq, struct task_struct *next)
 	 */
 	next->on_cpu = 1;
 #endif
-#ifdef __ARCH_WANT_INTERRUPTS_ON_CTXSW
-	raw_spin_unlock_irq(&rq->lock);
-#else
 	raw_spin_unlock(&rq->lock);
-#endif
 }
 
 static inline void finish_lock_switch(struct rq *rq, struct task_struct *prev)
@@ -762,9 +813,7 @@ static inline void finish_lock_switch(struct rq *rq, struct task_struct *prev)
 	smp_wmb();
 	prev->on_cpu = 0;
 #endif
-#ifndef __ARCH_WANT_INTERRUPTS_ON_CTXSW
 	local_irq_enable();
-#endif
 }
 #endif /* __ARCH_WANT_UNLOCKED_CTXSW */
 
@@ -864,6 +913,18 @@ extern const struct sched_class idle_sched_class;
 extern void trigger_load_balance(struct rq *rq, int cpu);
 extern void idle_balance(int this_cpu, struct rq *this_rq);
 
+/*
+ * Only depends on SMP, FAIR_GROUP_SCHED may be removed when runnable_avg
+ * becomes useful in lb
+ */
+#if defined(CONFIG_FAIR_GROUP_SCHED)
+extern void idle_enter_fair(struct rq *this_rq);
+extern void idle_exit_fair(struct rq *this_rq);
+#else
+static inline void idle_enter_fair(struct rq *this_rq) {}
+static inline void idle_exit_fair(struct rq *this_rq) {}
+#endif
+
 #else	/* CONFIG_SMP */
 
 static inline void idle_balance(int cpu, struct rq *rq)
@@ -878,7 +939,6 @@ extern void sysrq_sched_debug_show(void);
 extern void sched_init_granularity(void);
 extern void update_max_interval(void);
 extern void update_group_power(struct sched_domain *sd, int cpu);
-extern int update_runtime(struct notifier_block *nfb, unsigned long action, void *hcpu);
 extern void init_sched_rt_class(void);
 extern void init_sched_fair_class(void);
 
@@ -888,7 +948,7 @@ extern void resched_cpu(int cpu);
 extern struct rt_bandwidth def_rt_bandwidth;
 extern void init_rt_bandwidth(struct rt_bandwidth *rt_b, u64 period, u64 runtime);
 
-extern void update_cpu_load(struct rq *this_rq);
+extern void update_idle_cpu_load(struct rq *this_rq);
 
 #ifdef CONFIG_CGROUP_CPUACCT
 #include <linux/cgroup.h>
@@ -926,16 +986,60 @@ extern void cpuacct_charge(struct task_struct *tsk, u64 cputime);
 static inline void cpuacct_charge(struct task_struct *tsk, u64 cputime) {}
 #endif
 
+#ifdef CONFIG_INTELLI_PLUG
+static inline unsigned int do_avg_nr_running(struct rq *rq)
+{
+
+	struct nr_stats_s *nr_stats = &per_cpu(runqueue_stats, rq->cpu);
+	unsigned int ave_nr_running = nr_stats->ave_nr_running;
+	s64 nr, deltax;
+
+	deltax = rq->clock_task - nr_stats->nr_last_stamp;
+	nr = NR_AVE_SCALE(rq->nr_running);
+
+	if (deltax > NR_AVE_PERIOD)
+		ave_nr_running = nr;
+	else
+		ave_nr_running +=
+			NR_AVE_DIV_PERIOD(deltax * (nr - ave_nr_running));
+
+	return ave_nr_running;
+}
+#endif
+
 static inline void inc_nr_running(struct rq *rq)
 {
+#ifdef CONFIG_INTELLI_PLUG
+	struct nr_stats_s *nr_stats = &per_cpu(runqueue_stats, rq->cpu);
+#endif
 	sched_update_nr_prod(cpu_of(rq), rq->nr_running, true);
+#ifdef CONFIG_INTELLI_PLUG
+	write_seqcount_begin(&nr_stats->ave_seqcnt);
+	nr_stats->ave_nr_running = do_avg_nr_running(rq);
+	nr_stats->nr_last_stamp = rq->clock_task;
+#endif
 	rq->nr_running++;
+#ifdef CONFIG_INTELLI_PLUG
+	write_seqcount_end(&nr_stats->ave_seqcnt);
+#endif
 }
 
 static inline void dec_nr_running(struct rq *rq)
 {
+#ifdef CONFIG_INTELLI_PLUG
+	struct nr_stats_s *nr_stats = &per_cpu(runqueue_stats, rq->cpu);
+#endif
 	sched_update_nr_prod(cpu_of(rq), rq->nr_running, false);
+#ifdef CONFIG_INTELLI_PLUG
+	write_seqcount_begin(&nr_stats->ave_seqcnt);
+	nr_stats->ave_nr_running = do_avg_nr_running(rq);
+	nr_stats->nr_last_stamp = rq->clock_task;
+#endif
+	
 	rq->nr_running--;
+#ifdef CONFIG_INTELLI_PLUG
+	write_seqcount_end(&nr_stats->ave_seqcnt);
+#endif
 }
 
 extern void update_rq_clock(struct rq *rq);
@@ -954,8 +1058,6 @@ static inline u64 sched_avg_period(void)
 	return (u64)sysctl_sched_time_avg * NSEC_PER_MSEC / 2;
 }
 
-void calc_load_account_idle(struct rq *this_rq);
-
 #ifdef CONFIG_SCHED_HRTICK
 
 /*
@@ -1158,13 +1260,13 @@ extern void print_rt_stats(struct seq_file *m, int cpu);
 extern void init_cfs_rq(struct cfs_rq *cfs_rq);
 extern void init_rt_rq(struct rt_rq *rt_rq, struct rq *rq);
 
-extern void account_cfs_bandwidth_used(int enabled, int was_enabled);
+extern void cfs_bandwidth_usage_inc(void);
+extern void cfs_bandwidth_usage_dec(void);
 
 #ifdef CONFIG_NO_HZ
 enum rq_nohz_flag_bits {
 	NOHZ_TICK_STOPPED,
 	NOHZ_BALANCE_KICK,
-	NOHZ_IDLE,
 };
 
 #define nohz_flags(cpu)	(&cpu_rq(cpu)->nohz_flags)
diff --git a/kernel/sched/stop_task.c b/kernel/sched/stop_task.c
index 7b386e8..da5eb5b 100644
--- a/kernel/sched/stop_task.c
+++ b/kernel/sched/stop_task.c
@@ -27,8 +27,10 @@ static struct task_struct *pick_next_task_stop(struct rq *rq)
 {
 	struct task_struct *stop = rq->stop;
 
-	if (stop && stop->on_rq)
+	if (stop && stop->on_rq) {
+		stop->se.exec_start = rq->clock_task;
 		return stop;
+	}
 
 	return NULL;
 }
@@ -52,6 +54,21 @@ static void yield_task_stop(struct rq *rq)
 
 static void put_prev_task_stop(struct rq *rq, struct task_struct *prev)
 {
+	struct task_struct *curr = rq->curr;
+	u64 delta_exec;
+
+	delta_exec = rq->clock_task - curr->se.exec_start;
+	if (unlikely((s64)delta_exec < 0))
+		delta_exec = 0;
+
+	schedstat_set(curr->se.statistics.exec_max,
+			max(curr->se.statistics.exec_max, delta_exec));
+
+	curr->se.sum_exec_runtime += delta_exec;
+	account_group_exec_runtime(curr, delta_exec);
+
+	curr->se.exec_start = rq->clock_task;
+	cpuacct_charge(curr, delta_exec);
 }
 
 static void task_tick_stop(struct rq *rq, struct task_struct *curr, int queued)
@@ -60,6 +77,9 @@ static void task_tick_stop(struct rq *rq, struct task_struct *curr, int queued)
 
 static void set_curr_task_stop(struct rq *rq)
 {
+	struct task_struct *stop = rq->stop;
+
+	stop->se.exec_start = rq->clock_task;
 }
 
 static void switched_to_stop(struct rq *rq, struct task_struct *p)
diff --git a/kernel/sysctl.c b/kernel/sysctl.c
index 3e23c55..d931651 100644
--- a/kernel/sysctl.c
+++ b/kernel/sysctl.c
@@ -265,6 +265,20 @@ static struct ctl_table kern_table[] = {
 		.mode		= 0644,
 		.proc_handler	= proc_dointvec,
 	},
+	{
+		.procname	= "sched_wake_to_idle",
+		.data		= &sysctl_sched_wake_to_idle,
+		.maxlen		= sizeof(unsigned int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec,
+	},
+	{
+		.procname	= "sched_wakeup_load_threshold",
+		.data		= &sysctl_sched_wakeup_load_threshold,
+		.maxlen		= sizeof(unsigned int),
+		.mode		= 0644,
+		.proc_handler	= proc_dointvec,
+	},
 #ifdef CONFIG_SCHED_DEBUG
 	{
 		.procname	= "sched_min_granularity_ns",
diff --git a/kernel/time/tick-sched.c b/kernel/time/tick-sched.c
index c6cd85b..71817c7 100644
--- a/kernel/time/tick-sched.c
+++ b/kernel/time/tick-sched.c
@@ -280,6 +280,7 @@ EXPORT_SYMBOL_GPL(get_cpu_iowait_time_us);
 static void tick_nohz_stop_sched_tick(struct tick_sched *ts)
 {
 	unsigned long seq, last_jiffies, next_jiffies, delta_jiffies;
+	unsigned long rcu_delta_jiffies;
 	ktime_t last_update, expires, now;
 	struct clock_event_device *dev = __get_cpu_var(tick_cpu_device).evtdev;
 	u64 time_delta;
@@ -328,7 +329,7 @@ static void tick_nohz_stop_sched_tick(struct tick_sched *ts)
 		time_delta = timekeeping_max_deferment();
 	} while (read_seqretry(&xtime_lock, seq));
 
-	if (rcu_needs_cpu(cpu) || printk_needs_cpu(cpu) ||
+	if (rcu_needs_cpu(cpu, &rcu_delta_jiffies) || printk_needs_cpu(cpu) ||
 	    arch_needs_cpu(cpu)) {
 		next_jiffies = last_jiffies + 1;
 		delta_jiffies = 1;
@@ -336,6 +337,10 @@ static void tick_nohz_stop_sched_tick(struct tick_sched *ts)
 		/* Get the next timer wheel timer */
 		next_jiffies = get_next_timer_interrupt(last_jiffies);
 		delta_jiffies = next_jiffies - last_jiffies;
+		if (rcu_delta_jiffies < delta_jiffies) {
+			next_jiffies = last_jiffies + rcu_delta_jiffies;
+			delta_jiffies = rcu_delta_jiffies;
+		}
 	}
 	/*
 	 * Do not stop the tick, if we are only one off
@@ -407,6 +412,7 @@ static void tick_nohz_stop_sched_tick(struct tick_sched *ts)
 		 */
 		if (!ts->tick_stopped) {
 			select_nohz_load_balancer(1);
+			calc_load_enter_idle();
 
 			ts->idle_tick = hrtimer_get_expires(&ts->sched_timer);
 			ts->tick_stopped = 1;
@@ -581,6 +587,7 @@ void tick_nohz_idle_exit(void)
 	/* Update jiffies first */
 	select_nohz_load_balancer(0);
 	tick_do_update_jiffies64(now);
+	update_cpu_load_nohz();
 
 #ifndef CONFIG_VIRT_CPU_ACCOUNTING
 	/*
@@ -596,6 +603,7 @@ void tick_nohz_idle_exit(void)
 		account_idle_ticks(ticks);
 #endif
 
+	calc_load_exit_idle();
 	touch_softlockup_watchdog();
 	/*
 	 * Cancel the scheduled timer and restore the tick
diff --git a/kernel/timer.c b/kernel/timer.c
index 02dbb09..92619b2 100644
--- a/kernel/timer.c
+++ b/kernel/timer.c
@@ -864,7 +864,13 @@ EXPORT_SYMBOL(mod_timer);
  *
  * mod_timer_pinned() is a way to update the expire field of an
  * active timer (if the timer is inactive it will be activated)
- * and not allow the timer to be migrated to a different CPU.
+ * and to ensure that the timer is scheduled on the current CPU.
+ *
+ * Note that this does not prevent the timer from being migrated
+ * when the current CPU goes offline.  If this is a problem for
+ * you, use CPU-hotplug notifiers to handle it correctly, for
+ * example, cancelling the timer when the corresponding CPU goes
+ * offline.
  *
  * mod_timer_pinned(timer, expires) is equivalent to:
  *
diff --git a/kernel/workqueue.c b/kernel/workqueue.c
index 90fd57d..44ae685 100644
--- a/kernel/workqueue.c
+++ b/kernel/workqueue.c
@@ -1447,12 +1447,19 @@ static void destroy_worker(struct worker *worker)
 	if (worker->flags & WORKER_IDLE)
 		pool->nr_idle--;
 
+	/*
+	 * Once WORKER_DIE is set, the kworker may destroy itself at any
+	 * point.  Pin to ensure the task stays until we're done with it.
+	 */
+	get_task_struct(worker->task);
+
 	list_del_init(&worker->entry);
 	worker->flags |= WORKER_DIE;
 
 	spin_unlock_irq(&gcwq->lock);
 
 	kthread_stop(worker->task);
+	put_task_struct(worker->task);
 	kfree(worker);
 
 	spin_lock_irq(&gcwq->lock);
diff --git a/lib/cpu_rmap.c b/lib/cpu_rmap.c
index 145dec5..5fbed5c 100644
--- a/lib/cpu_rmap.c
+++ b/lib/cpu_rmap.c
@@ -45,6 +45,7 @@ struct cpu_rmap *alloc_cpu_rmap(unsigned int size, gfp_t flags)
 	if (!rmap)
 		return NULL;
 
+	kref_init(&rmap->refcount);
 	rmap->obj = (void **)((char *)rmap + obj_offset);
 
 	/* Initially assign CPUs to objects on a rota, since we have
@@ -63,6 +64,35 @@ struct cpu_rmap *alloc_cpu_rmap(unsigned int size, gfp_t flags)
 }
 EXPORT_SYMBOL(alloc_cpu_rmap);
 
+/**
+ * cpu_rmap_release - internal reclaiming helper called from kref_put
+ * @ref: kref to struct cpu_rmap
+ */
+static void cpu_rmap_release(struct kref *ref)
+{
+	struct cpu_rmap *rmap = container_of(ref, struct cpu_rmap, refcount);
+	kfree(rmap);
+}
+
+/**
+ * cpu_rmap_get - internal helper to get new ref on a cpu_rmap
+ * @rmap: reverse-map allocated with alloc_cpu_rmap()
+ */
+static inline void cpu_rmap_get(struct cpu_rmap *rmap)
+{
+	kref_get(&rmap->refcount);
+}
+
+/**
+ * cpu_rmap_put - release ref on a cpu_rmap
+ * @rmap: reverse-map allocated with alloc_cpu_rmap()
+ */
+int cpu_rmap_put(struct cpu_rmap *rmap)
+{
+	return kref_put(&rmap->refcount, cpu_rmap_release);
+}
+EXPORT_SYMBOL(cpu_rmap_put);
+
 /* Reevaluate nearest object for given CPU, comparing with the given
  * neighbours at the given distance.
  */
@@ -197,8 +227,7 @@ struct irq_glue {
  * free_irq_cpu_rmap - free a CPU affinity reverse-map used for IRQs
  * @rmap: Reverse-map allocated with alloc_irq_cpu_map(), or %NULL
  *
- * Must be called in process context, before freeing the IRQs, and
- * without holding any locks required by global workqueue items.
+ * Must be called in process context, before freeing the IRQs.
  */
 void free_irq_cpu_rmap(struct cpu_rmap *rmap)
 {
@@ -212,12 +241,18 @@ void free_irq_cpu_rmap(struct cpu_rmap *rmap)
 		glue = rmap->obj[index];
 		irq_set_affinity_notifier(glue->notify.irq, NULL);
 	}
-	irq_run_affinity_notifiers();
 
-	kfree(rmap);
+	cpu_rmap_put(rmap);
 }
 EXPORT_SYMBOL(free_irq_cpu_rmap);
 
+/**
+ * irq_cpu_rmap_notify - callback for IRQ subsystem when IRQ affinity updated
+ * @notify: struct irq_affinity_notify passed by irq/manage.c
+ * @mask: cpu mask for new SMP affinity
+ *
+ * This is executed in workqueue context.
+ */
 static void
 irq_cpu_rmap_notify(struct irq_affinity_notify *notify, const cpumask_t *mask)
 {
@@ -230,10 +265,16 @@ irq_cpu_rmap_notify(struct irq_affinity_notify *notify, const cpumask_t *mask)
 		pr_warning("irq_cpu_rmap_notify: update failed: %d\n", rc);
 }
 
+/**
+ * irq_cpu_rmap_release - reclaiming callback for IRQ subsystem
+ * @ref: kref to struct irq_affinity_notify passed by irq/manage.c
+ */
 static void irq_cpu_rmap_release(struct kref *ref)
 {
 	struct irq_glue *glue =
 		container_of(ref, struct irq_glue, notify.kref);
+
+	cpu_rmap_put(glue->rmap);
 	kfree(glue);
 }
 
@@ -258,10 +299,13 @@ int irq_cpu_rmap_add(struct cpu_rmap *rmap, int irq)
 	glue->notify.notify = irq_cpu_rmap_notify;
 	glue->notify.release = irq_cpu_rmap_release;
 	glue->rmap = rmap;
+	cpu_rmap_get(rmap);
 	glue->index = cpu_rmap_add(rmap, glue);
 	rc = irq_set_affinity_notifier(irq, &glue->notify);
-	if (rc)
+	if (rc) {
+		cpu_rmap_put(glue->rmap);
 		kfree(glue);
+	}
 	return rc;
 }
 EXPORT_SYMBOL(irq_cpu_rmap_add);
diff --git a/make_defconfig.sh b/make_defconfig.sh
old mode 100755
new mode 100644
diff --git a/scripts/Lindent b/scripts/Lindent
old mode 100755
new mode 100644
diff --git a/scripts/bloat-o-meter b/scripts/bloat-o-meter
old mode 100755
new mode 100644
diff --git a/scripts/build-all.py b/scripts/build-all.py
old mode 100755
new mode 100644
diff --git a/scripts/checkincludes.pl b/scripts/checkincludes.pl
old mode 100755
new mode 100644
diff --git a/scripts/checkkconfigsymbols.sh b/scripts/checkkconfigsymbols.sh
old mode 100755
new mode 100644
diff --git a/scripts/checkpatch.pl b/scripts/checkpatch.pl
old mode 100755
new mode 100644
diff --git a/scripts/checkstack.pl b/scripts/checkstack.pl
old mode 100755
new mode 100644
diff --git a/scripts/checksyscalls.sh b/scripts/checksyscalls.sh
old mode 100755
new mode 100644
diff --git a/scripts/checkversion.pl b/scripts/checkversion.pl
old mode 100755
new mode 100644
diff --git a/scripts/cleanfile b/scripts/cleanfile
old mode 100755
new mode 100644
diff --git a/scripts/cleanpatch b/scripts/cleanpatch
old mode 100755
new mode 100644
diff --git a/scripts/coccicheck b/scripts/coccicheck
old mode 100755
new mode 100644
diff --git a/scripts/config b/scripts/config
old mode 100755
new mode 100644
diff --git a/scripts/decodecode b/scripts/decodecode
old mode 100755
new mode 100644
diff --git a/scripts/depmod.sh b/scripts/depmod.sh
old mode 100755
new mode 100644
diff --git a/scripts/diffconfig b/scripts/diffconfig
old mode 100755
new mode 100644
diff --git a/scripts/extract-ikconfig b/scripts/extract-ikconfig
old mode 100755
new mode 100644
diff --git a/scripts/extract-vmlinux b/scripts/extract-vmlinux
old mode 100755
new mode 100644
diff --git a/scripts/gcc-wrapper.py b/scripts/gcc-wrapper.py
old mode 100755
new mode 100644
diff --git a/scripts/get_maintainer.pl b/scripts/get_maintainer.pl
old mode 100755
new mode 100644
diff --git a/scripts/headerdep.pl b/scripts/headerdep.pl
old mode 100755
new mode 100644
diff --git a/scripts/headers.sh b/scripts/headers.sh
old mode 100755
new mode 100644
diff --git a/scripts/kconfig/check.sh b/scripts/kconfig/check.sh
old mode 100755
new mode 100644
diff --git a/scripts/kconfig/merge_config.sh b/scripts/kconfig/merge_config.sh
old mode 100755
new mode 100644
diff --git a/scripts/kernel-doc b/scripts/kernel-doc
old mode 100755
new mode 100644
diff --git a/scripts/makelst b/scripts/makelst
old mode 100755
new mode 100644
diff --git a/scripts/mkcompile_h b/scripts/mkcompile_h
old mode 100755
new mode 100644
diff --git a/scripts/mkuboot.sh b/scripts/mkuboot.sh
old mode 100755
new mode 100644
diff --git a/scripts/namespace.pl b/scripts/namespace.pl
old mode 100755
new mode 100644
diff --git a/scripts/package/mkspec b/scripts/package/mkspec
old mode 100755
new mode 100644
diff --git a/scripts/patch-kernel b/scripts/patch-kernel
old mode 100755
new mode 100644
diff --git a/scripts/recordmcount.pl b/scripts/recordmcount.pl
old mode 100755
new mode 100644
diff --git a/scripts/setlocalversion b/scripts/setlocalversion
old mode 100755
new mode 100644
diff --git a/scripts/show_delta b/scripts/show_delta
old mode 100755
new mode 100644
diff --git a/scripts/tags.sh b/scripts/tags.sh
old mode 100755
new mode 100644
diff --git a/scripts/ver_linux b/scripts/ver_linux
old mode 100755
new mode 100644
diff --git a/tools/nfsd/inject_fault.sh b/tools/nfsd/inject_fault.sh
old mode 100755
new mode 100644
diff --git a/tools/perf/python/twatch.py b/tools/perf/python/twatch.py
old mode 100755
new mode 100644
diff --git a/tools/perf/scripts/python/bin/net_dropmonitor-record b/tools/perf/scripts/python/bin/net_dropmonitor-record
old mode 100755
new mode 100644
diff --git a/tools/perf/scripts/python/bin/net_dropmonitor-report b/tools/perf/scripts/python/bin/net_dropmonitor-report
old mode 100755
new mode 100644
diff --git a/tools/perf/scripts/python/net_dropmonitor.py b/tools/perf/scripts/python/net_dropmonitor.py
old mode 100755
new mode 100644
diff --git a/tools/perf/util/PERF-VERSION-GEN b/tools/perf/util/PERF-VERSION-GEN
old mode 100755
new mode 100644
diff --git a/tools/perf/util/generate-cmdlist.sh b/tools/perf/util/generate-cmdlist.sh
old mode 100755
new mode 100644
diff --git a/tools/power/cpupower/man/cpupower-set.1 b/tools/power/cpupower/man/cpupower-set.1
index c4954a9..9dbd536 100644
--- a/tools/power/cpupower/man/cpupower-set.1
+++ b/tools/power/cpupower/man/cpupower-set.1
@@ -85,15 +85,6 @@ Possible values are:
 savings
 .RE
 
-sched_mc_power_savings is dependent upon SCHED_MC, which is
-itself architecture dependent.
-
-sched_smt_power_savings is dependent upon SCHED_SMT, which
-is itself architecture dependent.
-
-The two files are independent of each other. It is possible
-that one file may be present without the other.
-
 .SH "SEE ALSO"
 cpupower-info(1), cpupower-monitor(1), powertop(1)
 .PP
diff --git a/tools/power/cpupower/utils/helpers/sysfs.c b/tools/power/cpupower/utils/helpers/sysfs.c
index c634302..96e28c1 100644
--- a/tools/power/cpupower/utils/helpers/sysfs.c
+++ b/tools/power/cpupower/utils/helpers/sysfs.c
@@ -362,22 +362,7 @@ char *sysfs_get_cpuidle_driver(void)
  */
 int sysfs_get_sched(const char *smt_mc)
 {
-	unsigned long value;
-	char linebuf[MAX_LINE_LEN];
-	char *endp;
-	char path[SYSFS_PATH_MAX];
-
-	if (strcmp("mc", smt_mc) && strcmp("smt", smt_mc))
-		return -EINVAL;
-
-	snprintf(path, sizeof(path),
-		PATH_TO_CPU "sched_%s_power_savings", smt_mc);
-	if (sysfs_read_file(path, linebuf, MAX_LINE_LEN) == 0)
-		return -1;
-	value = strtoul(linebuf, &endp, 0);
-	if (endp == linebuf || errno == ERANGE)
-		return -1;
-	return value;
+	return -ENODEV;
 }
 
 /*
@@ -388,21 +373,5 @@ int sysfs_get_sched(const char *smt_mc)
  */
 int sysfs_set_sched(const char *smt_mc, int val)
 {
-	char linebuf[MAX_LINE_LEN];
-	char path[SYSFS_PATH_MAX];
-	struct stat statbuf;
-
-	if (strcmp("mc", smt_mc) && strcmp("smt", smt_mc))
-		return -EINVAL;
-
-	snprintf(path, sizeof(path),
-		PATH_TO_CPU "sched_%s_power_savings", smt_mc);
-	sprintf(linebuf, "%d", val);
-
-	if (stat(path, &statbuf) != 0)
-		return -ENODEV;
-
-	if (sysfs_write_file(path, linebuf, MAX_LINE_LEN) == 0)
-		return -1;
-	return 0;
+	return -ENODEV;
 }
diff --git a/tools/power/cpupower/utils/version-gen.sh b/tools/power/cpupower/utils/version-gen.sh
old mode 100755
new mode 100644
diff --git a/tools/testing/ktest/compare-ktest-sample.pl b/tools/testing/ktest/compare-ktest-sample.pl
old mode 100755
new mode 100644
diff --git a/tools/testing/ktest/ktest.pl b/tools/testing/ktest/ktest.pl
old mode 100755
new mode 100644
